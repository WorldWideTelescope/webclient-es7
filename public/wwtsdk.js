/**
* WorldWide Telescope Web Client
* Copyright 2014-2015 WorldWide Telescope
* Licensed under MIT (https://github.com/WorldWideTelescope/wwt-web-client/blob/master/LICENSE.md)
**/
/*! Script# Runtime
 * Designed and licensed for use and distribution with Script#-generated scripts.
 * Copyright (c) 2012, Nikhil Kothari, and the Script# Project.
 * More information at http://scriptsharp.com
 */

"use strict";

(function(global) {
  function _ss() {

// Various Helpers/Utilities

function _nop() {
}

function isValue(o) {
  return (o !== null) && (o !== undefined);
}

function _value(args) {
  for (var i = 2, l = args.length; i < l; i++) {
    if (isValue(args[i])) {
      return args[i];
    }
  }
  return null;
}
function value(a, b) {
  return isValue(a) ? a : isValue(b) ? b : _value(arguments);
}

function extend(o, items) {
  for (var n in items) {
    o[n] = items[n];
  }
  return o;
}

function parseBoolean(s) {
  return (s.toLowerCase() == 'true');
}

function parseRegExp(s) {
  if (s[0] == '/') {
    var endSlashIndex = s.lastIndexOf('/');
    if (endSlashIndex > 1) {
      var expression = s.substring(1, endSlashIndex);
      var flags = s.substr(endSlashIndex + 1);
      return new RegExp(expression, flags);
    }
  }

  return null;
}

function parseNumber(s) {
  if (!s || !s.length) {
    return 0;
  }
  if ((s.indexOf('.') >= 0) || (s.indexOf('e') >= 0) ||
      endsWith(s, 'f') || endsWith(s, 'F')) {
    return parseFloat(s);
  }
  return parseInt(s, 10);
}

function parseDate(s) {
  var t = Date.parse(s);
  return isNaN(t) ? undefined : new Date(t);
}

function truncate(n) {
  return (n >= 0) ? Math.floor(n) : Math.ceil(n);
}

function now() {
  return new Date();
}

function today() {
  var d = new Date();
  return new Date(d.getFullYear(), d.getMonth(), d.getDate());
}

function compareDates(d1, d2) {
  return (d1 === d2) ? true : ((isValue(d1) && isValue(d2)) ? (d1.getTime() == d2.getTime()) : false);
}

function _popStackFrame(e) {
  if (!isValue(e.stack) ||
      !isValue(e.fileName) ||
      !isValue(e.lineNumber)) {
    return;
  }

  var stackFrames = e.stack.split('\n');
  var currentFrame = stackFrames[0];
  var pattern = e.fileName + ':' + e.lineNumber;
  while (isValue(currentFrame) && currentFrame.indexOf(pattern) === -1) {
    stackFrames.shift();
    currentFrame = stackFrames[0];
  }

  var nextFrame = stackFrames[1];
  if (!isValue(nextFrame)) {
    return;
  }

  var nextFrameParts = nextFrame.match(/@(.*):(\d+)$/);
  if (!isValue(nextFrameParts)) {
    return;
  }

  stackFrames.shift();
  e.stack = stackFrames.join('\n');
  e.fileName = nextFrameParts[1];
  e.lineNumber = parseInt(nextFrameParts[2], 10);
}

function error(message, errorInfo, innerException) {
  var e = new Error(message);
  if (errorInfo) {
    for (var v in errorInfo) {
      e[v] = errorInfo[v];
    }
  }
  if (innerException) {
    e.innerException = innerException;
  }

  _popStackFrame(e);
  return e;
}

function fail(message) {
  console.assert(false, message);
  if (global.navigator) {
    eval('debugger;');
  }
}

// Collections

function toArray(obj) {
  return obj ? (typeof obj == 'string' ? JSON.parse('(' + obj + ')') : Array.prototype.slice.call(obj)) : null;
}
function removeItem(a, item) {
  var index = a.indexOf(item);
  return index >= 0 ? (a.splice(index, 1), true) : false;
}

function clearKeys(obj) {
  for (var key in obj) {
    delete obj[key];
  }
}
function keyExists(obj, key) {
  return obj[key] !== undefined;
}
function keys(obj) {
  if (Object.keys) {
    return Object.keys(obj);
  }
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }
  return keys;
}
function keyCount(obj) {
  return keys(obj).length;
}

function Enumerator(obj, keys) {
  var index = -1;
  var length = keys ? keys.length : obj.length;
  var lookup = keys ? function() { return { key: keys[index], value: obj[keys[index]] }; } :
                      function() { return obj[index]; };

  this.current = null;
  this.moveNext = function() {
    index++;
    this.current = lookup();
    return index < length;
  };
  this.reset = function() {
    index = -1;
    this.current = null;
  };
}
var _nopEnumerator = {
  current: null,
  moveNext: function() { return false; },
  reset: _nop
};

function enumerate(o) {
  if (!isValue(o)) {
    return _nopEnumerator;
  }
  if (o.getEnumerator) {
    return o.getEnumerator();
  }
  if (o.length !== undefined) {
    return new Enumerator(o);
  }
  return new Enumerator(o, keys(o));
}

function Stack() {
  this.count = 0;
  this._items = [];
}
var Stack$ = {

  clear: function() {
    this._items.length = 0;
    this.count = 0;
  },
  contains: function(item) {
    for (var i = this.count - 1; i >= 0; i--) {
      if (this._items[i] === item) {
        return true;
      }
    }
    return false;
  },
  getEnumerator: function() {
    return new Enumerator(this._items.reverse());
  },
  peek: function() {
    return this._items[this.count - 1];
  },
  push: function(item) {
    this._items.push(item);
    this.count++;
  },
  pop: function() {
    if (this.count) {
      this.count--;
      return this._items.pop();
    }
    return undefined;
  }
}

function Queue() {
  this.count = 0;
  this._items = [];
  this._offset = 0;
}
function _cleanQueue(q) {
  q._items = q._items.slice(q._offset);
  q._offset = 0;
}
var Queue$ = {

  clear: function() {
    this._items.length = 0;
    this._offset = 0;
    this.count = 0;
  },
  contains: function(item) {
    for (var i = this._offset, length = this._items.length; i <= length; i++) {
      if (this._items[i] === item) {
        return true;
      }
    }
    return false;
  },
  dequeue: function() {
    if (this.count) {
      var item = this._items[this._offset];
      if (++this._offset * 2 >= this._items.length) {
        _cleanQueue(this);
      }
      this.count--;
      return item;
    }
    return undefined;
  },
  enqueue: function(item) {
    this._items.push(item);
    this.count++;
  },
  getEnumerator: function() {
    if (this._offset != 0) {
      _cleanQueue(this);
    }
    return new Enumerator(this._items);
  },
  peek: function() {
    return this._items.length ? this._items[this._offset] : undefined;
  }
}

// String

function string(arg1, arg2) {
  if (typeof arg2 == 'number') {
    return arg2 > 1 ? new Array(arg2 + 1).join(arg1) : arg1;
  }
  return Array.prototype.join.call(arguments, '');
}

function emptyString(s) {
  return !s || !s.length;
}

function whitespace(s) {
  return emptyString(s) || !s.replace(/^\s*/, '').length;
}

function compareStrings(s1, s2, ignoreCase) {
  s1 = s1 || '', s2 = s2 || '';
  ignoreCase ? (s1 = s1.toUpperCase(), s2 = s2.toUpperCase()) : 0;
  return (s1 === s2) ? 0 : (s1 < s2) ? -1 : 1;
}

var _formatPlaceHolderRE = /(\{[^\}^\{]+\})/g;
var _formatters = {};

function format(cultureOrFormat) {
  var culture = neutralCulture;
  var format = cultureOrFormat;
  var values = Array.prototype.slice.call(arguments, 1);

  if (cultureOrFormat.constructor != String) {
    culture = cultureOrFormat;
    format = values[0];
    values = values.slice(1);
  }

  return format.replace(_formatPlaceHolderRE,
    function(str, match) {
      var index = parseInt(match.substr(1), 10);
      var value = values[index];
      if (!isValue(value)) {
        return '';
      }

      var formatter = _formatters[typeName(value)];
      if (formatter) {
        var formatSpec = '';
        var formatIndex = match.indexOf(':');
        if (formatIndex > 0) {
          formatSpec = match.substring(formatIndex + 1, match.length - 1);
        }
        if (formatSpec && (formatSpec != 'i')) {
          return formatter(value, formatSpec, culture);
        }
      }
      return culture == neutralCulture ? value.toString() : value.toLocaleString();
    });
}

function trim(s, tc) {
  if (tc || !String.prototype.trim) {
    tc = tc ? tc.join('') : null;
    var r = tc ? new RegExp('^[' + tc + ']+|[' + tc + ']+$', 'g') : /^\s+|\s+$/g;
    return s.replace(r, '');
  }
  return s.trim();
}
function trimStart(s, tc) {
  var r = tc ? new RegExp('^[' + tc.join('') + ']+') : /^\s+/;
  return s.replace(r, '');
}
function trimEnd(s, tc) {
  var r = tc ? new RegExp('[' + tc.join('') + ']+$') : /\s+$/;
  return s.replace(r, '');
}
function startsWith(s, prefix) {
  if (emptyString(prefix)) {
    return true;
  }
  if (emptyString(s) || (prefix.length > s.length)) {
    return false;
  }
  return s.substr(0, prefix.length) == prefix;
}
function endsWith(s, suffix) {
  if (emptyString(suffix)) {
    return true;
  }
  if (emptyString(s) || (suffix.length > s.length)) {
    return false;
  }
  return s.substr(-suffix.length) == suffix;
}
function padLeft(s, totalWidth, ch) {
  return (s.length < totalWidth) ? string(ch || ' ', totalWidth - s.length) + s : s;
}
function padRight(s, totalWidth, ch) {
  return (s.length < totalWidth) ? s + string(ch || ' ', totalWidth - s.length) : s;
}
function removeString(s, index, count) {
  if (!count || ((index + count) > s.length)) {
    return s.substr(0, index);
  }
  return s.substr(0, index) + s.substr(index + count);
}
function insertString(s, index, value) {
  if (!value) {
    return s;
  }
  if (!index) {
    return value + s;
  }
  return s.substr(0, index) + value + s.substr(index);
}
function replaceString(s, oldValue, newValue) {
  return s.split(oldValue).join(newValue || '');
}

// Delegate Functionality

function _bindList(fnList) {
  var d = function() {
    var args = arguments;
    var result = null;
    for (var i = 0, l = fnList.length; i < l; i++) {
      result = args.length ? fnList[i].apply(null, args) : fnList[i].call(null);
    }
    return result;
  };
  d._fnList = fnList;
  return d;
}

function bind(fn, o) {
  if (!o) {
    return fn;
  }

  var name = null;
  fn = typeof fn == 'string' ? o[name = fn] : fn;

  var cache = name ? o.$$b || (o.$$b = {}) : null;
  var binding = cache ? cache[name] : null;

  if (!binding) {
    // Create a function that invokes the specified function, in the
    // context of the specified object.
    binding = function() {
      return fn.apply(o, arguments);
    };

    if (cache) {
      cache[name] = binding;
    }
  }
  return binding;
}

function bindAdd(binding, value) {
  if (!binding) {
    return value;
  }
  if (!value) {
    return binding;
  }

  var fnList = [].concat(binding._fnList || binding, value);
  return _bindList(fnList);
}

function bindSub(binding, value) {
  if (!binding) {
    return null;
  }
  if (!value) {
    return binding;
  }

  var fnList = binding._fnList || [binding];
  var index = fnList.indexOf(value);
  if (index >= 0) {
    if (fnList.length == 1) {
      return null;
    }

    fnList = index ? fnList.slice(0, index).concat(fnList.slice(index + 1)) : fnList.slice(1);
    return _bindList(fnList);
  }
  return binding;
}


function bindExport(fn, multiUse, name, root) {
  // Generate a unique name if one is not specified
  name = name || '__' + (new Date()).valueOf();

  // If unspecified, exported bindings go on the global object
  // (so they are callable using a simple identifier).
  root = root || global;

  var exp = {
    name: name,
    detach: function() {
      root[name] = _nop;
    },
    dispose: function() {
      try { delete root[name]; } catch (e) { root[name] = undefined; }
    }
  };

  // Multi-use bindings are exported directly; for the rest a stub is exported, and the stub
  // first auto-disposes, and then invokes the actual binding.
  root[name] = multiUse ? fn : function() {
    exp.dispose();
    return fn.apply(null, arguments);
  };

  return exp;
}

// EventArgs

function EventArgs() {
}
EventArgs.Empty = new EventArgs();

function CancelEventArgs() {
  this.cancel = false;
}

// Contracts

function IDisposable() { }
function IEnumerable() { }
function IEnumerator() { }
function IObserver() { }
function IApplication() { }
function IContainer() { }
function IObjectFactory() { }
function IEventManager() { }
function IInitializable() { }

// StringBuilder

function StringBuilder(s) {
  this._parts = isValue(s) && s !== '' ? [s] : [];
  this.isEmpty = this._parts.length == 0;
}
var StringBuilder$ = {
  append: function(s) {
    if (isValue(s) && s !== '') {
      this._parts.push(s);
      this.isEmpty = false;
    }
    return this;
  },

  appendLine: function(s) {
    this.append(s);
    this.append('\r\n');
    this.isEmpty = false;
    return this;
  },

  clear: function() {
    this._parts = [];
    this.isEmpty = true;
  },

  toString: function(s) {
    return this._parts.join(s || '');
  }
};

// Observable

var _observerStack = [];
var _observerRegistration = {
  dispose: function() {
    _observerStack.pop();
  }
}
function _captureObservers(observers) {
  var registeredObservers = _observerStack;
  var observerCount = registeredObservers.length;

  if (observerCount) {
    observers = observers || [];
    for (var i = 0; i < observerCount; i++) {
      var observer = registeredObservers[i];
      if (observers.indexOf(observer) < 0) {
        observers.push(observer);
      }
    }
    return observers;
  }
  return null;
}
function _invalidateObservers(observers) {
  for (var i = 0, len = observers.length; i < len; i++) {
    observers[i].invalidateObserver();
  }
}

function Observable(v) {
  this._v = v;
  this._observers = null;
}
var Observable$ = {

  getValue: function() {
    this._observers = _captureObservers(this._observers);
    return this._v;
  },
  setValue: function(v) {
    if (this._v !== v) {
      this._v = v;

      var observers = this._observers;
      if (observers) {
        this._observers = null;
        _invalidateObservers(observers);
      }
    }
  }
};
Observable.registerObserver = function(o) {
  _observerStack.push(o);
  return _observerRegistration;
}


function ObservableCollection(items) {
  this._items = items || [];
  this._observers = null;
}
var ObservableCollection$ = {

  get_item: function (index) {
    this._observers = _captureObservers(this._observers);
    return this._items[index];
  },
  set_item: function(index, item) {
    this._items[index] = item;
    this._updated();
  },
  get_length: function() {
    this._observers = _captureObservers(this._observers);
    return this._items.length;
  },
  add: function(item) {
    this._items.push(item);
    this._updated();
  },
  clear: function() {
    this._items.clear();
    this._updated();
  },
  contains: function(item) {
    return this._items.indexOf(item) >= 0;
  },
  getEnumerator: function() {
    this._observers = _captureObservers(this._observers);
    // TODO: Change this
    return this._items.getEnumerator();
  },
  indexOf: function(item) {
    return this._items.indexOf(item);
  },
  insert: function(index, item) {
    this._items.insert(index, item);
    this._updated();
  },
  remove: function(item) {
    if (this._items.remove(item)) {
      this._updated();
      return true;
    }
    return false;
  },
  removeAt: function(index) {
    this._items.splice(index, 1);
    this._updated();
  },
  toArray: function() {
    return this._items;
  },
  _updated: function() {
    var observers = this._observers;
    if (observers) {
      this._observers = null;
      _invalidateObservers(observers);
    }
  }
}

// Task

function Task(result) {
  this._continuations = result !== undefined ?
                          (this.status = 'done', null) :
                          (this.status = 'pending', []);
  this.result = result;
  this.error = null;
}
var Task$ = {
  get_completed: function() {
    return this.status != 'pending';
  },
  changeWith: function(continuation) {
    var task = new Task();
    this.continueWith(function(t) {
      var error = t.error;
      var result;
      if (!error) {
        try {
          result = continuation(t);
        }
        catch (e) {
          error = e;
        }
      }
      _updateTask(task, result, error);
    });
    return task;
  },
  continueWith: function(continuation) {
    if (this._continuations) {
      this._continuations.push(continuation);
    }
    else {
      var self = this;
      setTimeout(function() { continuation(self); }, 0);
    }
    return this;
  },
  done: function(callback) {
    return this.continueWith(function(t) {
      if (t.status == 'done') {
        callback(t.result);
      }
    });
  },
  fail: function(callback) {
    return this.continueWith(function(t) {
      if (t.status == 'failed') {
        callback(t.error);
      }
    });
  },
  then: function(doneCallback, failCallback) {
    return this.continueWith(function(t) {
      t.status == 'done' ? doneCallback(t.result) : failCallback(t.error);
    });
  }
};

function _updateTask(task, result, error) {
  if (task.status == 'pending') {
    if (error) {
      task.error = error;
      task.status = 'failed';
    }
    else {
      task.result = result;
      task.status = 'done';
    }

    var continuations = task._continuations;
    task._continuations = null;

    for (var i = 0, c = continuations.length; i < c; i++) {
      continuations[i](task);
    }
  }
}

function _joinTasks(tasks, any) {
  tasks = toArray(tasks);

  var count = tasks.length;

  var interval = 0;
  if ((count > 1) && (typeof tasks[0] == 'number')) {
    interval = tasks[0];
    tasks = tasks.slice(1);
    count--;
  }
  if (Array.isArray(tasks[0])) {
    tasks = tasks[0];
    count = tasks.length;
  }

  var joinTask = new Task();
  var seen = 0;

  function continuation(t) {
    if (joinTask.status == 'pending') {
      seen++;
      if (any) {
        _updateTask(joinTask, t);
      }
      else if (seen == count) {
        _updateTask(joinTask, true);
      }
    }
  }

  function timeout() {
    if (joinTask.status == 'pending') {
      if (any) {
        _updateTask(joinTask, null);
      }
      else {
        _updateTask(joinTask, false);
      }
    }
  }

  if (interval != 0) {
    setTimeout(timeout, interval);
  }

  for (var i = 0; i < count; i++) {
    tasks[i].continueWith(continuation);
  }

  return joinTask;
}
Task.all = function() {
  return _joinTasks(arguments, false);
}
Task.any = function() {
  return _joinTasks(arguments, true);
}
Task.delay = function(timeout) {
  var timerTask = new Task();

  setTimeout(function() {
    _updateTask(timerTask, true);
  }, timeout);

  return timerTask;
}

function deferred(result) {
  var task = new Task(result);

  return {
    task: task,
    resolve: function(result) {
      _updateTask(task, result);
    },
    reject: function(error) {
      _updateTask(task, null, (error || new Error()));
    }
  };
}

// Culture

var neutralCulture = {
  name: '',
  // numberFormat
  nf: {
    nan: 'NaN',           // naNSymbol
    neg: '-',             // negativeSign
    pos: '+',             // positiveSign
    negInf: '-Infinity',  // negativeInfinityText
    posInf: 'Infinity',   // positiveInfinityText
    gw: [3],              // numberGroupSizes
    dd: 2,                // numberDecimalDigits
    ds: '.',              // numberDecimalSeparator
    gs: ',',             // numberGroupSeparator

    per: '%',             // percentSymbol
    perGW: [3],           // percentGroupSizes
    perDD: 2,             // percentDecimalDigits
    perDS: '.',           // percentDecimalSeparator
    perGS: ',',           // percentGroupSeparator
    perPP: '{0} %',       // percentPositivePattern
    perNP: '-{0} %',      // percentNegativePattern

    cur: '$',             // currencySymbol
    curGW: [3],           // currencyGroupSizes
    curDD: 2,             // currencyDecimalDigits
    curDS: '.',           // currencyDecimalSeparator
    curGS: ',',           // currencyGroupSeparator
    curNP: '(${0})',      // currencyNegativePattern
    curPP: '${0}'         // currencyPositivePattern
  },
  // dateFormat
  dtf: {
    am: 'AM',             // amDesignator
    pm: 'PM',             // pmDesignator

    ds: '/',              // dateSeparator
    ts: ':',              // timeSeparator

    gmt: 'ddd, dd MMM yyyy HH:mm:ss \'GMT\'',   // gmtDateTimePattern
    uni: 'yyyy-MM-dd HH:mm:ssZ',                // universalDateTimePattern
    sort: 'yyyy-MM-ddTHH:mm:ss',                // sortableDateTimePattern
    dt: 'dddd, MMMM dd, yyyy h:mm:ss tt',       // dateTimePattern

    ld: 'dddd, MMMM dd, yyyy',                  // longDatePattern
    sd: 'M/d/yyyy',                             // shortDatePattern

    lt: 'h:mm:ss tt',                           // longTimePattern
    st: 'h:mm tt',                              // shortTimePattern

    day0: 0,                                    // firstDayOfWeek
    day: ['Sunday', 'Monday', 'Tuesday',
          'Wednesday', 'Thursday',
          'Friday', 'Saturday'],                // dayNames
    sday: ['Sun', 'Mon', 'Tue', 'Wed',
           'Thu', 'Fri', 'Sat'],                // shortDayNames
    mday: ['Su', 'Mo', 'Tu', 'We',
           'Th', 'Fr', 'Sa'],                   // minimizedDayNames

    mon: ['January', 'February', 'March',
          'April', 'May', 'June', 'July',
          'August', 'September', 'October',
          'November', 'December', ''],          // monthNames
    smon: ['Jan', 'Feb', 'Mar', 'Apr',
           'May', 'Jun', 'Jul', 'Aug',
           'Sep', 'Oct', 'Nov', 'Dec', '']      // shortMonthNames
  }
};

var currentCulture = { name: 'en-us', dtf: neutralCulture.dtf, nf: neutralCulture.nf };

// Formatting Helpers

function _commaFormatNumber(number, groups, decimal, comma) {
  var decimalPart = null;
  var decimalIndex = number.indexOf(decimal);
  if (decimalIndex > 0) {
    decimalPart = number.substr(decimalIndex);
    number = number.substr(0, decimalIndex);
  }

  var negative = number.startsWith('-');
  if (negative) {
    number = number.substr(1);
  }

  var groupIndex = 0;
  var groupSize = groups[groupIndex];
  if (number.length < groupSize) {
    return decimalPart ? number + decimalPart : number;
  }

  var index = number.length;
  var s = '';
  var done = false;
  while (!done) {
    var length = groupSize;
    var startIndex = index - length;
    if (startIndex < 0) {
      groupSize += startIndex;
      length += startIndex;
      startIndex = 0;
      done = true;
    }
    if (!length) {
      break;
    }

    var part = number.substr(startIndex, length);
    if (s.length) {
      s = part + comma + s;
    }
    else {
      s = part;
    }
    index -= length;

    if (groupIndex < groups.length - 1) {
      groupIndex++;
      groupSize = groups[groupIndex];
    }
  }

  if (negative) {
    s = '-' + s;
  }
  return decimalPart ? s + decimalPart : s;
}

_formatters['Number'] = function(number, format, culture) {
  var nf = culture.nf;
  var s = '';
  var precision = -1;

  if (format.length > 1) {
    precision = parseInt(format.substr(1));
  }

  var fs = format.charAt(0);
  switch (fs) {
    case 'd': case 'D':
      s = parseInt(Math.abs(number)).toString();
      if (precision != -1) {
        s = padLeft(s, precision, '0');
      }
      if (number < 0) {
        s = '-' + s;
      }
      break;
    case 'x': case 'X':
      s = parseInt(Math.abs(number)).toString(16);
      if (fs == 'X') {
        s = s.toUpperCase();
      }
      if (precision != -1) {
        s = padLeft(s, precision, '0');
      }
      break;
    case 'e': case 'E':
      if (precision == -1) {
        s = number.toExponential();
      }
      else {
        s = number.toExponential(precision);
      }
      if (fs == 'E') {
        s = s.toUpperCase();
      }
      break;
    case 'f': case 'F':
    case 'n': case 'N':
      if (precision == -1) {
        precision = nf.dd;
      }
      s = number.toFixed(precision).toString();
      if (precision && (nf.ds != '.')) {
        var index = s.indexOf('.');
        s = s.substr(0, index) + nf.ds + s.substr(index + 1);
      }
      if ((fs == 'n') || (fs == 'N')) {
        s = _commaFormatNumber(s, nf.gw, nf.ds, nf.gs);
      }
      break;
    case 'c': case 'C':
      if (precision == -1) {
        precision = nf.curDD;
      }
      s = Math.abs(number).toFixed(precision).toString();
      if (precision && (nf.curDS != '.')) {
        var index = s.indexOf('.');
        s = s.substr(0, index) + nf.curDS + s.substr(index + 1);
      }
      s = _commaFormatNumber(s, nf.curGW, nf.curDS, nf.curGS);
      if (number < 0) {
        s = String.format(culture, nf.curNP, s);
      }
      else {
        s = String.format(culture, nf.curPP, s);
      }
      break;
    case 'p': case 'P':
      if (precision == -1) {
        precision = nf.perDD;
      }
      s = (Math.abs(number) * 100.0).toFixed(precision).toString();
      if (precision && (nf.perDS != '.')) {
        var index = s.indexOf('.');
        s = s.substr(0, index) + nf.perDS + s.substr(index + 1);
      }
      s = _commaFormatNumber(s, nf.perGW, nf.perDS, nf.perGS);
      if (number < 0) {
        s = String.format(culture, nf.perNP, s);
      }
      else {
        s = String.format(culture, nf.perPP, s);
      }
      break;
  }

  return s;
}


var _dateFormatRE = /'.*?[^\\]'|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z/g;

_formatters['Date'] = function(dt, format, culture) {
  if (format == 'iso') {
    return dt.toISOString();
  }
  else if (format.charAt(0) == 'i') {
    var fnName = 'String';
    switch (format) {
      case 'id': fnName = 'DateString'; break;
      case 'it': fnName = 'TimeString'; break;
    }
    return culture == neutralCulture ? dt['to' + fnName]() : dt['toLocale' + fnName]();
  }

  var dtf = culture.dtf;

  if (format.length == 1) {
    switch (format) {
      case 'f': format = dtf.ld + ' ' + dtf.st; break;
      case 'F': format = dtf.dt; break;

      case 'd': format = dtf.sd; break;
      case 'D': format = dtf.ld; break;

      case 't': format = dtf.st; break;
      case 'T': format = dtf.lt; break;

      case 'g': format = dtf.sd + ' ' + dtf.st; break;
      case 'G': format = dtf.sd + ' ' + dtf.lt; break;

      case 'R': case 'r':
        dtf = neutralCulture.dtf;
        format = dtf.gmt;
        break;
      case 'u': format = dtf.uni; break;
      case 'U':
        format = dtf.dt;
        dt = new Date(dt.getUTCFullYear(), dt.getUTCMonth(), dt.getUTCDate(),
                      dt.getUTCHours(), dt.getUTCMinutes(), dt.getUTCSeconds(), dt.getUTCMilliseconds());
        break;

      case 's': format = dtf.sort; break;
    }
  }

  if (format.charAt(0) == '%') {
    format = format.substr(1);
  }

  var sb = new StringBuilder();

  _dateFormatRE.lastIndex = 0;
  while (true) {
    var index = _dateFormatRE.lastIndex;
    var match = _dateFormatRE.exec(format);

    sb.append(format.slice(index, match ? match.index : format.length));
    if (!match) {
      break;
    }

    var fs = match[0];
    var part = fs;
    switch (fs) {
      case 'dddd':
        part = dtf.day[dt.getDay()];
        break;
      case 'ddd':
        part = dtf.sday[dt.getDay()];
        break;
      case 'dd':
        part = padLeft(dt.getDate().toString(), 2, '0');
        break;
      case 'd':
        part = dt.getDate();
        break;
      case 'MMMM':
        part = dtf.mon[dt.getMonth()];
        break;
      case 'MMM':
        part = dtf.smon[dt.getMonth()];
        break;
      case 'MM':
        part = padLeft((dt.getMonth() + 1).toString(), 2, '0');
        break;
      case 'M':
        part = (dt.getMonth() + 1);
        break;
      case 'yyyy':
        part = dt.getFullYear();
        break;
      case 'yy':
        part = padLeft((dt.getFullYear() % 100).toString(), 2, '0');
        break;
      case 'y':
        part = (dt.getFullYear() % 100);
        break;
      case 'h': case 'hh':
        part = dt.getHours() % 12;
        if (!part) {
          part = '12';
        }
        else if (fs == 'hh') {
          part = padLeft(part.toString(), 2, '0');
        }
        break;
      case 'HH':
        part = padLeft(dt.getHours().toString(), 2, '0');
        break;
      case 'H':
        part = dt.getHours();
        break;
      case 'mm':
        part = padLeft(dt.getMinutes().toString(), 2, '0');
        break;
      case 'm':
        part = dt.getMinutes();
        break;
      case 'ss':
        part = padLeft(dt.getSeconds().toString(), 2, '0');
        break;
      case 's':
        part = dt.getSeconds();
        break;
      case 't': case 'tt':
        part = (dt.getHours() < 12) ? dtf.am : dtf.pm;
        if (fs == 't') {
          part = part.charAt(0);
        }
        break;
      case 'fff':
        part = padLeft(dt.getMilliseconds().toString(), 3, '0');
        break;
      case 'ff':
        part = padLeft(dt.getMilliseconds().toString(), 3).substr(0, 2);
        break;
      case 'f':
        part = padLeft(dt.getMilliseconds().toString(), 3).charAt(0);
        break;
      case 'z':
        part = dt.getTimezoneOffset() / 60;
        part = ((part >= 0) ? '-' : '+') + Math.floor(Math.abs(part));
        break;
      case 'zz': case 'zzz':
        part = dt.getTimezoneOffset() / 60;
        part = ((part >= 0) ? '-' : '+') + padLeft(Math.floor(Math.abs(part)).toString(), 2, '0');
        if (fs == 'zzz') {
          part += dtf.ts + padLeft(Math.abs(dt.getTimezoneOffset() % 60).toString(), 2, '0');
        }
        break;
      default:
        if (part.charAt(0) == '\'') {
          part = part.substr(1, part.length - 2).replace(/\\'/g, '\'');
        }
        break;
    }
    sb.append(part);
  }

  return sb.toString();
}

// Type System

var _modules = {};

var _classMarker = 'class';
var _interfaceMarker = 'interface';

function createType(typeName, typeInfo, typeRegistry) {
  // The typeInfo is either an array of information representing
  // classes and interfaces, or an object representing enums and resources
  // or a function, representing a record factory.

  if (Array.isArray(typeInfo)) {
    var type = typeInfo[0];

    // A class is minimally the class type and an object representing
    // its prototype members, and optionally the base type, and references
    // to interfaces implemented by the class.
    if (typeInfo.length >= 2) {
      var baseType = typeInfo[2];
      if (baseType) {
        // Chain the prototype of the base type (using an anonymous type
        // in case the base class is not creatable, or has side-effects).
        var anonymous = function() {};
        anonymous.prototype = baseType.prototype;
        type.prototype = new anonymous();
        type.prototype.constructor = type;
      }

      // Add the type's prototype members if there are any
      typeInfo[1] && extend(type.prototype, typeInfo[1]);

      type.$base = baseType || Object;
      type.$interfaces = typeInfo.slice(3);
      type.$type = _classMarker;
    }
    else {
      type.$type = _interfaceMarker;
    }

    type.$name = typeName;
    return typeRegistry[typeName] = type;
  }

  return typeInfo;
}

function isClass(fn) {
  return fn.$type == _classMarker;
}

function isInterface(fn) {
  return fn.$type == _interfaceMarker;
}

function typeOf(instance) {
  var ctor;

  // NOTE: We have to catch exceptions because the constructor
  //       cannot be looked up on native COM objects
  try {
    ctor = instance.constructor;
  }
  catch (ex) {
  }
  return ctor || Object;
}

function type(s) {
  var nsIndex = s.indexOf('.');
  var ns = nsIndex > 0 ? _modules[s.substr(0, nsIndex)] : global;
  var name = nsIndex > 0 ? s.substr(nsIndex + 1) : s;

  return ns ? ns[name] : null;
}

var _typeNames = [
  Number, 'Number',
  String, 'String',
  Boolean, 'Boolean',
  Array, 'Array',
  Date, 'Date',
  RegExp, 'RegExp',
  Function, 'Function'
];
function typeName(type) {
  if (!(type instanceof Function)) {
    type = type.constructor;
  }
  if (type.$name) {
    return type.$name;
  }
  if (type.name) {
    return type.name;
  }
  for (var i = 0, len = _typeNames.length; i < len; i += 2) {
    if (type == _typeNames[i]) {
      return _typeNames[i + 1];
    }
  }
  return 'Object';
}

function canAssign(type, otherType) {
  // Checks if the specified type is equal to otherType,
  // or is a parent of otherType

  if ((type == Object) || (type == otherType)) {
    return true;
  }
  if (type.$type == _classMarker) {
    var baseType = otherType.$base;
    while (baseType) {
      if (type == baseType) {
        return true;
      }
      baseType = baseType.$base;
    }
  }
  else if (type.$type == _interfaceMarker) {
    var baseType = otherType;
    while (baseType) {
      var interfaces = baseType.$interfaces;
      if (interfaces && (interfaces.indexOf(type) >= 0)) {
        return true;
      }
      baseType = baseType.$base;
    }
  }
  return false;
}

function instanceOf(type, instance) {
  // Checks if the specified instance is of the specified type

  if (!isValue(instance)) {
    return false;
  }

  if ((type == Object) || (instance instanceof type)) {
    return true;
  }

  var instanceType = typeOf(instance);
  return canAssign(type, instanceType);
}

function canCast(instance, type) {
  return instanceOf(type, instance);
}

function safeCast(instance, type) {
  return instanceOf(type, instance) ? instance : null;
}

function module(name, implementation, exports) {
  var registry = _modules[name] = { $name: name };

  if (implementation) {
    for (var typeName in implementation) {
      createType(typeName, implementation[typeName], registry);
    }
  }

  var api = {};
  if (exports) {
    for (var typeName in exports) {
      api[typeName] = createType(typeName, exports[typeName], registry);
    }
  }

  return api;
}


  return extend(module('ss', null, {
      IDisposable: [ IDisposable ],
      IEnumerable: [ IEnumerable ],
      IEnumerator: [ IEnumerator ],
      IObserver: [ IObserver ],
      IApplication: [ IApplication ],
      IContainer: [ IContainer ],
      IObjectFactory: [ IObjectFactory ],
      IEventManager: [ IEventManager ],
      IInitializable: [ IInitializable ],
      EventArgs: [ EventArgs, { } ],
      CancelEventArgs: [ CancelEventArgs, { }, EventArgs ],
      StringBuilder: [ StringBuilder, StringBuilder$ ],
      Stack: [ Stack, Stack$ ],
      Queue: [ Queue, Queue$ ],
      Observable: [ Observable, Observable$ ],
      ObservableCollection: [ ObservableCollection, ObservableCollection$, null, IEnumerable ],
      Task: [ Task, Task$ ]
    }), {
      version: '0.8',

      isValue: isValue,
      value: value,
      extend: extend,
      keys: keys,
      keyCount: keyCount,
      keyExists: keyExists,
      clearKeys: clearKeys,
      enumerate: enumerate,
      array: toArray,
      remove: removeItem,
      boolean: parseBoolean,
      regexp: parseRegExp,
      number: parseNumber,
      date: parseDate,
      truncate: truncate,
      now: now,
      today: today,
      compareDates: compareDates,
      error: error,
      string: string,
      emptyString: emptyString,
      whitespace: whitespace,
      format: format,
      compareStrings: compareStrings,
      startsWith: startsWith,
      endsWith: endsWith,
      padLeft: padLeft,
      padRight: padRight,
      trim: trim,
      trimStart: trimStart,
      trimEnd: trimEnd,
      insertString: insertString,
      removeString: removeString,
      replaceString: replaceString,
      bind: bind,
      bindAdd: bindAdd,
      bindSub: bindSub,
      bindExport: bindExport,
      deferred: deferred,

      module: module,
      modules: _modules,

      isClass: isClass,
      isInterface: isInterface,
      typeOf: typeOf,
      type: type,
      typeName: typeName,
      canCast: canCast,
      safeCast: safeCast,
      canAssign: canAssign,
      instanceOf: instanceOf,

      culture: {
        neutral: neutralCulture,
        current: currentCulture
      },

      fail: fail
    });
  }


  function _export() {
    var ss = _ss();
    typeof exports == 'object' ? ss.extend(exports, ss) : global.ss = ss;
  }

  global.define ? global.define('ss', [], _ss) : _export();
})(this);

"use strict";

window.wwtlib = function(){
  var $global = this;

  // DAY_OF_WEEK

  var DAY_OF_WEEK = {
    SUNDAY: 0, 
    MONDAY: 1, 
    TUESDAY: 2, 
    WEDNESDAY: 3, 
    THURSDAY: 4, 
    FRIDAY: 5, 
    SATURDAY: 6
  };


  // EO

  var EO = {
    SUN: 0, 
    MERCURY: 1, 
    VENUS: 2, 
    MARS: 3, 
    JUPITER: 4, 
    SATURN: 5, 
    URANUS: 6, 
    NEPTUNE: 7, 
    PLUTO: 8
  };


  // wwtlib.CullMode

  var CullMode = {
    none: 0, 
    counterClockwise: 2, 
    clockwise: 1
  };


  // wwtlib.PointScaleTypes

  var PointScaleTypes = {
    linear: 0, 
    power: 1, 
    log: 2, 
    constant: 3, 
    stellarMagnitude: 4
  };


  // wwtlib.DataTypes

  var DataTypes = {
    byteT: 0, 
    int16T: 1, 
    int32T: 2, 
    floatT: 3, 
    doubleT: 4, 
    none: 5
  };


  // wwtlib.ScaleTypes

  var ScaleTypes = {
    linear: 0, 
    log: 1, 
    power: 2, 
    squareRoot: 3, 
    histogramEqualization: 4
  };


  // wwtlib.AltUnits

  var AltUnits = {
    meters: 1, 
    feet: 2, 
    inches: 3, 
    miles: 4, 
    kilometers: 5, 
    astronomicalUnits: 6, 
    lightYears: 7, 
    parsecs: 8, 
    megaParsecs: 9, 
    custom: 10
  };


  // wwtlib.FadeType

  var FadeType = {
    fadeIn: 1, 
    fadeOut: 2, 
    both: 3, 
    none: 4
  };


  // wwtlib.ReferenceFrames

  var ReferenceFrames = {
    sky: 0, 
    ecliptic: 1, 
    galactic: 2, 
    sun: 3, 
    mercury: 4, 
    venus: 5, 
    earth: 6, 
    mars: 7, 
    jupiter: 8, 
    saturn: 9, 
    uranus: 10, 
    neptune: 11, 
    pluto: 12, 
    moon: 13, 
    io: 14, 
    europa: 15, 
    ganymede: 16, 
    callisto: 17, 
    custom: 18, 
    identity: 19, 
    sandbox: 20
  };


  // wwtlib.ReferenceFrameTypes

  var ReferenceFrameTypes = {
    fixedSherical: 0, 
    orbital: 1, 
    trajectory: 2, 
    synodic: 3
  };


  // wwtlib.CoordinatesTypes

  var CoordinatesTypes = {
    spherical: 0, 
    rectangular: 1, 
    orbital: 2
  };


  // wwtlib.AltTypes

  var AltTypes = {
    depth: 0, 
    altitude: 1, 
    distance: 2, 
    seaLevel: 3, 
    terrain: 4
  };


  // wwtlib.MarkerMixes

  var MarkerMixes = {
    same_For_All: 0
  };


  // wwtlib.ColorMaps

  var ColorMaps = {
    same_For_All: 0, 
    group_by_Values: 2, 
    per_Column_Literal: 3
  };


  // wwtlib.PlotTypes

  var PlotTypes = {
    gaussian: 0, 
    point: 1, 
    circle: 2, 
    square: 3, 
    pushPin: 4, 
    custom: 5
  };


  // wwtlib.MarkerScales

  var MarkerScales = {
    screen: 0, 
    world: 1
  };


  // wwtlib.RAUnits

  var RAUnits = {
    hours: 0, 
    degrees: 1
  };


  // wwtlib.Primitives

  var Primitives = {
    voBoolean: 1, 
    voBit: 2, 
    voUnsignedByte: 3, 
    voShort: 4, 
    voInt: 5, 
    voLong: 6, 
    voChar: 7, 
    voUnicodeChar: 8, 
    voFloat: 9, 
    voDouble: 10, 
    voFloatComplex: 11, 
    voDoubleComplex: 12, 
    voUndefined: 13
  };


  // wwtlib.Alignment

  var Alignment = {
    center: 0, 
    left: 1
  };


  // wwtlib.StockSkyOverlayTypes

  var StockSkyOverlayTypes = {
    empty: 0, 
    equatorialGrid: 1, 
    equatorialGridText: 2, 
    galacticGrid: 3, 
    galacticGridText: 4, 
    eclipticGrid: 5, 
    eclipticGridText: 6, 
    eclipticOverview: 7, 
    eclipticOverviewText: 8, 
    precessionChart: 9, 
    altAzGrid: 10, 
    altAzGridText: 11, 
    constellationFigures: 12, 
    constellationBoundaries: 13, 
    constellationFocusedOnly: 14, 
    constellationNames: 15, 
    constellationPictures: 16, 
    fadeToBlack: 17, 
    fadeToLogo: 18, 
    fadeToGradient: 19, 
    screenBroadcast: 20, 
    fadeRemoteOnly: 21, 
    skyGrids: 22, 
    constellations: 23, 
    solarSystemStars: 24, 
    solarSystemMilkyWay: 25, 
    solarSystemCosmos: 26, 
    solarSystemOrbits: 27, 
    solarSystemPlanets: 28, 
    solarSystemAsteroids: 29, 
    solarSystemLighting: 30, 
    solarSystemMinorOrbits: 31, 
    showEarthCloudLayer: 32, 
    showElevationModel: 33, 
    showAtmosphere: 34, 
    multiResSolarSystemBodies: 35, 
    auroraBorialis: 36, 
    earthCutAway: 37, 
    showSolarSystem: 38, 
    clouds8k: 39, 
    filedOfView: 40, 
    showISSModel: 41, 
    solarSystemCMB: 42, 
    mpcZone1: 43, 
    mpcZone2: 44, 
    mpcZone3: 45, 
    mpcZone4: 46, 
    mpcZone5: 47, 
    mpcZone6: 48, 
    mpcZone7: 49, 
    orbitFilters: 50
  };


  // wwtlib.OverlayAnchor

  var OverlayAnchor = {
    sky: 0, 
    screen: 1
  };


  // wwtlib.AudioType

  var AudioType = {
    music: 0, 
    voice: 1
  };


  // wwtlib.ShapeType

  var ShapeType = {
    circle: 0, 
    rectagle: 1, 
    star: 2, 
    donut: 3, 
    arrow: 4, 
    line: 5, 
    openRectagle: 6
  };


  // wwtlib.LoopTypes

  var LoopTypes = {
    loop: 0, 
    upDown: 1, 
    down: 2, 
    upDownOnce: 3, 
    once: 4, 
    begin: 5, 
    end: 6
  };


  // wwtlib.SelectionAnchor

  var SelectionAnchor = {
    topLeft: 0, 
    top: 1, 
    topRight: 2, 
    right: 3, 
    bottomRight: 4, 
    bottom: 5, 
    bottomLeft: 6, 
    left: 7, 
    rotate: 8, 
    move: 9, 
    center: 10, 
    none: 11
  };


  // wwtlib.TextBorderStyle

  var TextBorderStyle = {
    none: 0, 
    tight: 1, 
    small: 2, 
    medium: 3, 
    large: 4
  };


  // wwtlib.UserLevel

  var UserLevel = {
    beginner: 0, 
    intermediate: 1, 
    advanced: 2, 
    educator: 3, 
    professional: 4
  };


  // wwtlib.TransitionType

  var TransitionType = {
    slew: 0, 
    crossFade: 1, 
    crossCut: 2, 
    fadeOutIn: 3, 
    fadeIn: 4, 
    fadeOut: 5
  };


  // wwtlib.Keys

  var Keys = {
    modifiers: -65536, 
    none: 0, 
    lButton: 1, 
    rButton: 2, 
    cancel: 3, 
    mButton: 4, 
    xButton1: 5, 
    xButton2: 6, 
    back: 8, 
    tab: 9, 
    lineFeed: 10, 
    clearKey: 12, 
    returnKey: 13, 
    enter: 13, 
    shiftKey: 16, 
    controlKey: 17, 
    menu: 18, 
    pause: 19, 
    capital: 20, 
    capsLock: 20, 
    kanaMode: 21, 
    hanguelMode: 21, 
    hangulMode: 21, 
    junjaMode: 23, 
    finalMode: 24, 
    hanjaMode: 25, 
    kanjiMode: 25, 
    escape: 27, 
    imeConvert: 28, 
    imeNonconvert: 29, 
    imeAccept: 30, 
    imeAceept: 30, 
    imeModeChange: 31, 
    space: 32, 
    prior: 33, 
    pageUp: 33, 
    next: 34, 
    pageDown: 34, 
    end: 35, 
    home: 36, 
    left: 37, 
    up: 38, 
    right: 39, 
    down: 40, 
    select: 41, 
    print: 42, 
    execute: 43, 
    snapshot: 44, 
    printScreen: 44, 
    insertKey: 45, 
    deleteKey: 46, 
    help: 47, 
    d0: 48, 
    d1: 49, 
    d2: 50, 
    d3: 51, 
    d4: 52, 
    d5: 53, 
    d6: 54, 
    d7: 55, 
    d8: 56, 
    d9: 57, 
    a: 65, 
    b: 66, 
    c: 67, 
    d: 68, 
    e: 69, 
    f: 70, 
    g: 71, 
    h: 72, 
    i: 73, 
    j: 74, 
    k: 75, 
    l: 76, 
    m: 77, 
    n: 78, 
    o: 79, 
    p: 80, 
    q: 81, 
    r: 82, 
    s: 83, 
    t: 84, 
    u: 85, 
    v: 86, 
    w: 87, 
    x: 88, 
    y: 89, 
    z: 90, 
    lWin: 91, 
    rWin: 92, 
    apps: 93, 
    sleep: 95, 
    numPad0: 96, 
    numPad1: 97, 
    numPad2: 98, 
    numPad3: 99, 
    numPad4: 100, 
    numPad5: 101, 
    numPad6: 102, 
    numPad7: 103, 
    numPad8: 104, 
    numPad9: 105, 
    multiply: 106, 
    add: 107, 
    separator: 108, 
    subtract: 109, 
    decimal: 110, 
    divide: 111, 
    f1: 112, 
    f2: 113, 
    f3: 114, 
    f4: 115, 
    f5: 116, 
    f6: 117, 
    f7: 118, 
    f8: 119, 
    f9: 120, 
    f10: 121, 
    f11: 122, 
    f12: 123, 
    f13: 124, 
    f14: 125, 
    f15: 126, 
    f16: 127, 
    f17: 128, 
    f18: 129, 
    f19: 130, 
    f20: 131, 
    f21: 132, 
    f22: 133, 
    f23: 134, 
    f24: 135, 
    numLock: 144, 
    scroll: 145, 
    lShiftKey: 160, 
    rShiftKey: 161, 
    lControlKey: 162, 
    rControlKey: 163, 
    lMenu: 164, 
    rMenu: 165, 
    browserBack: 166, 
    browserForward: 167, 
    browserRefresh: 168, 
    browserStop: 169, 
    browserSearch: 170, 
    browserFavorites: 171, 
    browserHome: 172, 
    volumeMute: 173, 
    volumeDown: 174, 
    volumeUp: 175, 
    mediaNextTrack: 176, 
    mediaPreviousTrack: 177, 
    mediaStop: 178, 
    mediaPlayPause: 179, 
    launchMail: 180, 
    selectMedia: 181, 
    launchApplication1: 182, 
    launchApplication2: 183, 
    oemSemicolon: 186, 
    oem1: 186, 
    oemplus: 187, 
    oemcomma: 188, 
    oemMinus: 189, 
    oemPeriod: 190, 
    oemQuestion: 191, 
    oem2: 191, 
    oemtilde: 192, 
    oem3: 192, 
    oemOpenBrackets: 219, 
    oem4: 219, 
    oemPipe: 220, 
    oem5: 220, 
    oemCloseBrackets: 221, 
    oem6: 221, 
    oemQuotes: 222, 
    oem7: 222, 
    oem8: 223, 
    oemBackslash: 226, 
    oem102: 226, 
    processKey: 229, 
    packet: 231, 
    attn: 246, 
    crsel: 247, 
    exsel: 248, 
    eraseEof: 249, 
    play: 250, 
    zoom: 251, 
    noName: 252, 
    pa1: 253, 
    oemClear: 254, 
    keyCode: 65535, 
    shift: 65536, 
    control: 131072, 
    alt: 262144
  };


  // wwtlib.DialogResult

  var DialogResult = {
    OK: 1
  };


  // wwtlib.Formatting

  var Formatting = {
    indented: 1
  };


  // wwtlib.StateType

  var StateType = {
    pending: 0, 
    received: 1, 
    error: 2
  };


  // wwtlib.SolarSystemObjects

  var SolarSystemObjects = {
    sun: 0, 
    mercury: 1, 
    venus: 2, 
    mars: 3, 
    jupiter: 4, 
    saturn: 5, 
    uranus: 6, 
    neptune: 7, 
    pluto: 8, 
    moon: 9, 
    io: 10, 
    europa: 11, 
    ganymede: 12, 
    callisto: 13, 
    ioShadow: 14, 
    europaShadow: 15, 
    ganymedeShadow: 16, 
    callistoShadow: 17, 
    sunEclipsed: 18, 
    earth: 19, 
    custom: 20, 
    undefined: 65536
  };


  // wwtlib.InterpolationType

  var InterpolationType = {
    linear: 0, 
    easeIn: 1, 
    easeOut: 2, 
    easeInOut: 3, 
    exponential: 4, 
    defaultV: 5
  };


  // wwtlib.PointType

  var PointType = {
    move: 0, 
    line: 1, 
    dash: 2, 
    start: 3
  };


  // wwtlib.LocationHint

  var LocationHint = {
    slash: 0, 
    backslash: 1, 
    top: 2
  };


  // wwtlib.FolderGroup

  var FolderGroup = {
    explorer: 0, 
    tour: 1, 
    search: 2, 
    constellation: 3, 
    view: 4, 
    goTo: 5, 
    community: 6, 
    context: 7, 
    voTable: 8, 
    imageStack: 9
  };


  // wwtlib.FolderRefreshType

  var FolderRefreshType = {
    interval: 0, 
    conditionalGet: 1, 
    viewChange: 2
  };


  // wwtlib.FolderType

  var FolderType = {
    earth: 0, 
    planet: 1, 
    sky: 2, 
    panorama: 3
  };


  // wwtlib.ThumbnailSize

  var ThumbnailSize = {
    small: 0, 
    big: 1
  };


  // wwtlib.ProjectionType

  var ProjectionType = {
    mercator: 0, 
    equirectangular: 1, 
    tangent: 2, 
    tan: 2, 
    toast: 3, 
    spherical: 4, 
    skyImage: 5, 
    plotted: 6
  };


  // wwtlib.ImageSetType

  var ImageSetType = {
    earth: 0, 
    planet: 1, 
    sky: 2, 
    panorama: 3, 
    solarSystem: 4, 
    sandbox: 5
  };


  // wwtlib.BandPass

  var BandPass = {
    gamma: 0, 
    xRay: 1, 
    ultraviolet: 2, 
    visible: 3, 
    hydrogenAlpha: 4, 
    IR: 4, 
    microwave: 5, 
    radio: 6, 
    visibleNight: 6
  };


  // wwtlib.Classification

  var Classification = {
    star: 1, 
    supernova: 2, 
    blackHole: 4, 
    neutronStar: 8, 
    doubleStar: 16, 
    multipleStars: 32, 
    asterism: 64, 
    constellation: 128, 
    openCluster: 256, 
    globularCluster: 512, 
    nebulousCluster: 1024, 
    nebula: 2048, 
    emissionNebula: 4096, 
    planetaryNebula: 8192, 
    reflectionNebula: 16384, 
    darkNebula: 32768, 
    giantMolecularCloud: 65536, 
    supernovaRemnant: 131072, 
    interstellarDust: 262144, 
    quasar: 524288, 
    galaxy: 1048576, 
    spiralGalaxy: 2097152, 
    irregularGalaxy: 4194304, 
    ellipticalGalaxy: 8388608, 
    knot: 16777216, 
    plateDefect: 33554432, 
    clusterOfGalaxies: 67108864, 
    otherNGC: 134217728, 
    unidentified: 268435456, 
    solarSystem: 536870912, 
    unfiltered: 1073741823, 
    stellar: 63, 
    stellarGroupings: 2032, 
    nebulae: 523264, 
    galactic: 133693440, 
    other: 436207616
  };


  // wwtlib.IUIServicesCallbacks

  function IUIServicesCallbacks() { }


  // wwtlib.ISettings

  function ISettings() { }


  // wwtlib.IUndoStep

  function IUndoStep() { }


  // wwtlib.IFolder

  function IFolder() { }


  // wwtlib.IThumbnail

  function IThumbnail() { }


  // wwtlib.IPlace

  function IPlace() { }


  // wwtlib.IUiController

  function IUiController() { }


  // wwtlib.IViewMover

  function IViewMover() { }


  // GFX

  function GFX() {
  }


  // ABR

  function ABR() {
  }
  ABR.earthVelocity = function(JD) {
    var T = (JD - 2451545) / 36525;
    var L2 = 3.1761467 + 1021.3285546 * T;
    var L3 = 1.7534703 + 628.3075849 * T;
    var L4 = 6.2034809 + 334.0612431 * T;
    var L5 = 0.5995465 + 52.9690965 * T;
    var L6 = 0.8740168 + 21.3299095 * T;
    var L7 = 5.4812939 + 7.4781599 * T;
    var L8 = 5.3118863 + 3.8133036 * T;
    var Ldash = 3.8103444 + 8399.6847337 * T;
    var D = 5.1984667 + 7771.3771486 * T;
    var Mdash = 2.3555559 + 8328.6914289 * T;
    var F = 1.6279052 + 8433.4661601 * T;
    var velocity = new C3D();
    var nAberrationCoefficients = GFX.g_ACft.length;
    for (var i = 0; i < nAberrationCoefficients; i++) {
      var Argument = GFX.g_ACft[i].l2 * L2 + GFX.g_ACft[i].l3 * L3 + GFX.g_ACft[i].l4 * L4 + GFX.g_ACft[i].l5 * L5 + GFX.g_ACft[i].l6 * L6 + GFX.g_ACft[i].l7 * L7 + GFX.g_ACft[i].l8 * L8 + GFX.g_ACft[i].ldash * Ldash + GFX.g_ACft[i].d * D + GFX.g_ACft[i].mdash * Mdash + GFX.g_ACft[i].f * F;
      velocity.x += (GFX.g_ACft[i].xsin + GFX.g_ACft[i].xsint * T) * Math.sin(Argument);
      velocity.x += (GFX.g_ACft[i].xcos + GFX.g_ACft[i].xcost * T) * Math.cos(Argument);
      velocity.y += (GFX.g_ACft[i].ysin + GFX.g_ACft[i].ysint * T) * Math.sin(Argument);
      velocity.y += (GFX.g_ACft[i].ycos + GFX.g_ACft[i].ycost * T) * Math.cos(Argument);
      velocity.z += (GFX.g_ACft[i].zsin + GFX.g_ACft[i].zsint * T) * Math.sin(Argument);
      velocity.z += (GFX.g_ACft[i].zcos + GFX.g_ACft[i].zcost * T) * Math.cos(Argument);
    }
    return velocity;
  };
  ABR.eclipticAberration = function(Lambda, Beta, JD) {
    var aberration = new COR();
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var e = 0.016708634 - 4.2037E-05 * T - 1.267E-07 * Tsquared;
    var pi = 102.93735 + 1.71946 * T + 0.00046 * Tsquared;
    var k = 20.49552;
    var SunLongitude = CAASun.geometricEclipticLongitude(JD);
    pi = CT.d2R(pi);
    Lambda = CT.d2R(Lambda);
    Beta = CT.d2R(Beta);
    SunLongitude = CT.d2R(SunLongitude);
    aberration.x = (-k * Math.cos(SunLongitude - Lambda) + e * k * Math.cos(pi - Lambda)) / Math.cos(Beta) / 3600;
    aberration.y = -k * Math.sin(Beta) * (Math.sin(SunLongitude - Lambda) - e * Math.sin(pi - Lambda)) / 3600;
    return aberration;
  };
  ABR.equatorialAberration = function(Alpha, Delta, JD) {
    Alpha = CT.d2R(Alpha * 15);
    Delta = CT.d2R(Delta);
    var cosAlpha = Math.cos(Alpha);
    var sinAlpha = Math.sin(Alpha);
    var cosDelta = Math.cos(Delta);
    var sinDelta = Math.sin(Delta);
    var velocity = ABR.earthVelocity(JD);
    var aberration = new COR();
    aberration.x = CT.r2H((velocity.y * cosAlpha - velocity.x * sinAlpha) / (17314463350 * cosDelta));
    aberration.y = CT.r2D(-(((velocity.x * cosAlpha + velocity.y * sinAlpha) * sinDelta - velocity.z * cosDelta) / 17314463350));
    return aberration;
  };
  var ABR$ = {

  };


  // ACFT

  function ACFT(L2, L3, L4, L5, L6, L7, L8, Ldash, D, Mdash, F, xsin, xsint, xcos, xcost, ysin, ysint, ycos, ycost, zsin, zsint, zcos, zcost) {
    this.l2 = 0;
    this.l3 = 0;
    this.l4 = 0;
    this.l5 = 0;
    this.l6 = 0;
    this.l7 = 0;
    this.l8 = 0;
    this.ldash = 0;
    this.d = 0;
    this.mdash = 0;
    this.f = 0;
    this.xsin = 0;
    this.xsint = 0;
    this.xcos = 0;
    this.xcost = 0;
    this.ysin = 0;
    this.ysint = 0;
    this.ycos = 0;
    this.ycost = 0;
    this.zsin = 0;
    this.zsint = 0;
    this.zcos = 0;
    this.zcost = 0;
    this.l2 = L2;
    this.l3 = L3;
    this.l4 = L4;
    this.l5 = L5;
    this.l6 = L6;
    this.l7 = L7;
    this.l8 = L8;
    this.ldash = Ldash;
    this.d = D;
    this.mdash = Mdash;
    this.f = F;
    this.xsin = xsin;
    this.xsint = xsint;
    this.xcos = xcos;
    this.xcost = xcost;
    this.ysin = ysin;
    this.ysint = ysint;
    this.ycos = ycos;
    this.ycost = ycost;
    this.zsin = zsin;
    this.zsint = zsint;
    this.zcos = zcos;
    this.zcost = zcost;
  }
  var ACFT$ = {

  };


  // ASEP

  function ASEP() {
  }
  ASEP.separation = function(Alpha1, Delta1, Alpha2, Delta2) {
    Delta1 = CT.d2R(Delta1);
    Delta2 = CT.d2R(Delta2);
    Alpha1 = CT.h2R(Alpha1);
    Alpha2 = CT.h2R(Alpha2);
    var x = Math.cos(Delta1) * Math.sin(Delta2) - Math.sin(Delta1) * Math.cos(Delta2) * Math.cos(Alpha2 - Alpha1);
    var y = Math.cos(Delta2) * Math.sin(Alpha2 - Alpha1);
    var z = Math.sin(Delta1) * Math.sin(Delta2) + Math.cos(Delta1) * Math.cos(Delta2) * Math.cos(Alpha2 - Alpha1);
    var vvalue = Math.atan2(Math.sqrt(x * x + y * y), z);
    vvalue = CT.r2D(vvalue);
    if (vvalue < 0) {
      vvalue += 180;
    }
    return vvalue;
  };
  ASEP.positionAngle = function(alpha1, delta1, alpha2, delta2) {
    var Alpha1;
    var Delta1;
    var Alpha2;
    var Delta2;
    Delta1 = CT.d2R(delta1);
    Delta2 = CT.d2R(delta2);
    Alpha1 = CT.h2R(alpha1);
    Alpha2 = CT.h2R(alpha2);
    var DeltaAlpha = Alpha1 - Alpha2;
    var demoninator = Math.cos(Delta2) * Math.tan(Delta1) - Math.sin(Delta2) * Math.cos(DeltaAlpha);
    var numerator = Math.sin(DeltaAlpha);
    var vvalue = Math.atan2(numerator, demoninator);
    vvalue = CT.r2D(vvalue);
    return vvalue;
  };
  ASEP.distanceFromGreatArc = function(Alpha1, Delta1, Alpha2, Delta2, Alpha3, Delta3) {
    Delta1 = CT.d2R(Delta1);
    Delta2 = CT.d2R(Delta2);
    Delta3 = CT.d2R(Delta3);
    Alpha1 = CT.h2R(Alpha1);
    Alpha2 = CT.h2R(Alpha2);
    Alpha3 = CT.h2R(Alpha3);
    var X1 = Math.cos(Delta1) * Math.cos(Alpha1);
    var X2 = Math.cos(Delta2) * Math.cos(Alpha2);
    var Y1 = Math.cos(Delta1) * Math.sin(Alpha1);
    var Y2 = Math.cos(Delta2) * Math.sin(Alpha2);
    var Z1 = Math.sin(Delta1);
    var Z2 = Math.sin(Delta2);
    var A = Y1 * Z2 - Z1 * Y2;
    var B = Z1 * X2 - X1 * Z2;
    var C = X1 * Y2 - Y1 * X2;
    var m = Math.tan(Alpha3);
    var n = Math.tan(Delta3) / Math.cos(Alpha3);
    var vvalue = Math.asin((A + B * m + C * n) / (Math.sqrt(A * A + B * B + C * C) * Math.sqrt(1 + m * m + n * n)));
    vvalue = CT.r2D(vvalue);
    if (vvalue < 0) {
      vvalue = Math.abs(vvalue);
    }
    return vvalue;
  };
  var ASEP$ = {

  };


  // COR

  function COR() {
    this.x = 0;
    this.y = 0;
    this.x = 0;
    this.y = 0;
  }
  COR.create = function(x, y) {
    var item = new COR();
    item.x = x;
    item.y = y;
    return item;
  };
  var COR$ = {

  };


  // C3D

  function C3D() {
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.x = 0;
    this.y = 0;
    this.z = 0;
  }
  C3D.create = function(x, y, z) {
    var item = new C3D();
    item.x = x;
    item.y = y;
    item.z = z;
    return item;
  };
  var C3D$ = {

  };


  // CT

  function CT() {
  }
  CT.eq2Ec = function(Alpha, Delta, Epsilon) {
    Alpha = CT.h2R(Alpha);
    Delta = CT.d2R(Delta);
    Epsilon = CT.d2R(Epsilon);
    var Ecliptic = new COR();
    Ecliptic.x = CT.r2D(Math.atan2(Math.sin(Alpha) * Math.cos(Epsilon) + Math.tan(Delta) * Math.sin(Epsilon), Math.cos(Alpha)));
    if (Ecliptic.x < 0) {
      Ecliptic.x += 360;
    }
    Ecliptic.y = CT.r2D(Math.asin(Math.sin(Delta) * Math.cos(Epsilon) - Math.cos(Delta) * Math.sin(Epsilon) * Math.sin(Alpha)));
    return Ecliptic;
  };
  CT.ec2Eq = function(Lambda, Beta, Epsilon) {
    Lambda = CT.d2R(Lambda);
    Beta = CT.d2R(Beta);
    Epsilon = CT.d2R(Epsilon);
    var Equatorial = new COR();
    Equatorial.x = CT.r2H(Math.atan2(Math.sin(Lambda) * Math.cos(Epsilon) - Math.tan(Beta) * Math.sin(Epsilon), Math.cos(Lambda)));
    if (Equatorial.x < 0) {
      Equatorial.x += 24;
    }
    Equatorial.y = CT.r2D(Math.asin(Math.sin(Beta) * Math.cos(Epsilon) + Math.cos(Beta) * Math.sin(Epsilon) * Math.sin(Lambda)));
    return Equatorial;
  };
  CT.eq2H = function(LocalHourAngle, Delta, Latitude) {
    LocalHourAngle = CT.h2R(LocalHourAngle);
    Delta = CT.d2R(Delta);
    Latitude = CT.d2R(Latitude);
    var Horizontal = new COR();
    Horizontal.x = CT.r2D(Math.atan2(Math.sin(LocalHourAngle), Math.cos(LocalHourAngle) * Math.sin(Latitude) - Math.tan(Delta) * Math.cos(Latitude)));
    if (Horizontal.x < 0) {
      Horizontal.x += 360;
    }
    Horizontal.y = CT.r2D(Math.asin(Math.sin(Latitude) * Math.sin(Delta) + Math.cos(Latitude) * Math.cos(Delta) * Math.cos(LocalHourAngle)));
    return Horizontal;
  };
  CT.h2Eq = function(Azimuth, Altitude, Latitude) {
    Azimuth = CT.d2R(Azimuth);
    Altitude = CT.d2R(Altitude);
    Latitude = CT.d2R(Latitude);
    var Equatorial = new COR();
    Equatorial.x = CT.r2H(Math.atan2(Math.sin(Azimuth), Math.cos(Azimuth) * Math.sin(Latitude) + Math.tan(Altitude) * Math.cos(Latitude)));
    if (Equatorial.x < 0) {
      Equatorial.x += 24;
    }
    Equatorial.y = CT.r2D(Math.asin(Math.sin(Latitude) * Math.sin(Altitude) - Math.cos(Latitude) * Math.cos(Altitude) * Math.cos(Azimuth)));
    return Equatorial;
  };
  CT.eq2G = function(Alpha, Delta) {
    Alpha = 192.25 - CT.h2D(Alpha);
    Alpha = CT.d2R(Alpha);
    Delta = CT.d2R(Delta);
    var Galactic = new COR();
    Galactic.x = CT.r2D(Math.atan2(Math.sin(Alpha), Math.cos(Alpha) * Math.sin(CT.d2R(27.4)) - Math.tan(Delta) * Math.cos(CT.d2R(27.4))));
    Galactic.x = 303 - Galactic.x;
    if (Galactic.x >= 360) {
      Galactic.x -= 360;
    }
    Galactic.y = CT.r2D(Math.asin(Math.sin(Delta) * Math.sin(CT.d2R(27.4)) + Math.cos(Delta) * Math.cos(CT.d2R(27.4)) * Math.cos(Alpha)));
    return Galactic;
  };
  CT.g2Eq = function(l, b) {
    l -= 123;
    l = CT.d2R(l);
    b = CT.d2R(b);
    var Equatorial = new COR();
    Equatorial.x = CT.r2D(Math.atan2(Math.sin(l), Math.cos(l) * Math.sin(CT.d2R(27.4)) - Math.tan(b) * Math.cos(CT.d2R(27.4))));
    Equatorial.x += 12.25;
    if (Equatorial.x < 0) {
      Equatorial.x += 360;
    }
    Equatorial.x = CT.d2H(Equatorial.x);
    Equatorial.y = CT.r2D(Math.asin(Math.sin(b) * Math.sin(CT.d2R(27.4)) + Math.cos(b) * Math.cos(CT.d2R(27.4)) * Math.cos(l)));
    return Equatorial;
  };
  CT.d2R = function(Degrees) {
    return Degrees * 0.0174532925199433;
  };
  CT.r2D = function(Radians) {
    return Radians * 57.2957795130823;
  };
  CT.r2H = function(Radians) {
    return Radians * 3.81971863420549;
  };
  CT.h2R = function(Hours) {
    return Hours * 0.261799387799149;
  };
  CT.h2D = function(Hours) {
    return Hours * 15;
  };
  CT.d2H = function(Degrees) {
    return Degrees / 15;
  };
  CT.PI = function() {
    return 3.14159265358979;
  };
  CT.m360 = function(Degrees) {
    return Degrees - Math.floor(Degrees / 360) * 360;
  };
  CT.m24 = function(HourAngle) {
    return HourAngle - Math.floor(HourAngle / 24) * 24;
  };
  CT.dmS2D = function(Degrees, Minutes, Seconds) {
    return CT.dmS2Dp(Degrees, Minutes, Seconds, true);
  };
  CT.dmS2Dp = function(Degrees, Minutes, Seconds, bPositive) {
    if (!bPositive) {
      console.assert(Degrees >= 0);
      console.assert(Minutes >= 0);
      console.assert(Seconds >= 0);
    }
    if (bPositive) {
      return Degrees + Minutes / 60 + Seconds / 3600;
    }
    else {
      return -Degrees - Minutes / 60 - Seconds / 3600;
    }
  };
  var CT$ = {

  };


  // CalD

  function CalD() {
    this.year = 0;
    this.month = 0;
    this.day = 0;
    this.year = 0;
    this.month = 0;
    this.day = 0;
  }
  CalD.create = function(year, month, day) {
    var item = new CalD();
    item.year = year;
    item.month = month;
    item.day = day;
    return item;
  };
  var CalD$ = {

  };


  // DT

  function DT() {
    this.m_dblJulian = 0;
    this.m_bGregorianCalendar = false;
    this.m_dblJulian = 0;
    this.m_bGregorianCalendar = false;
  }
  DT.create = function(Year, Month, Day, bGregorianCalendar) {
    var item = new DT();
    item.set(Year, Month, Day, 0, 0, 0, bGregorianCalendar);
    return item;
  };
  DT.createHMS = function(Year, Month, Day, Hour, Minute, Second, bGregorianCalendar) {
    var item = new DT();
    item.set(Year, Month, Day, Hour, Minute, Second, bGregorianCalendar);
    return item;
  };
  DT.createJD = function(JD, bGregorianCalendar) {
    var item = new DT();
    item.setJD(JD, bGregorianCalendar);
    return item;
  };
  DT.dateToJD = function(Year, Month, Day, bGregorianCalendar) {
    var Y = Year;
    var M = Month;
    if (M < 3) {
      Y = Y - 1;
      M = M + 12;
    }
    var A = 0;
    var B = 0;
    if (bGregorianCalendar) {
      A = ss.truncate((Y / 100));
      B = 2 - A + ss.truncate((A / 4));
    }
    return ss.truncate((365.25 * (Y + 4716))) + ss.truncate((30.6001 * (M + 1))) + Day + B - 1524.5;
  };
  DT.isLeap = function(Year, bGregorianCalendar) {
    if (bGregorianCalendar) {
      if (!(Year % 100)) {
        return (!(Year % 400)) ? true : false;
      }
      else {
        return (!(Year % 4)) ? true : false;
      }
    }
    else {
      return (!(Year % 4)) ? true : false;
    }
  };
  DT.afterPapalReform = function(Year, Month, Day) {
    return ((Year > 1582) || ((Year === 1582) && (Month > 10)) || ((Year === 1582) && (Month === 10) && (Day >= 15)));
  };
  DT.afterPapalReformJD = function(JD) {
    return (JD >= 2299160.5);
  };
  DT.dayOfYearJD = function(JD, Year, bGregorianCalendar) {
    return JD - DT.dateToJD(Year, 1, 1, bGregorianCalendar) + 1;
  };
  DT.daysInMonthForMonth = function(Month, bLeap) {
    console.assert(Month >= 1 && Month <= 12);
    var MonthLength = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 0 ];
    if (bLeap) {
      MonthLength[1]++;
    }
    return MonthLength[Month - 1];
  };
  DT.INT = function(vvalue) {
    if (vvalue >= 0) {
      return ss.truncate(vvalue);
    }
    else {
      return ss.truncate((vvalue - 1));
    }
  };
  var DT$ = {
    julian: function() {
      return this.m_dblJulian;
    },
    day: function() {
      var D = this.get();
      return ss.truncate(D[2]);
    },
    month: function() {
      var D = this.get();
      return ss.truncate(D[1]);
    },
    year: function() {
      var D = this.get();
      return ss.truncate(D[0]);
    },
    hour: function() {
      var D = this.get();
      return ss.truncate(D[3]);
    },
    minute: function() {
      var D = this.get();
      return ss.truncate(D[4]);
    },
    second: function() {
      var D = this.get();
      return ss.truncate(D[5]);
    },
    set: function(Year, Month, Day, Hour, Minute, Second, bGregorianCalendar) {
      var dblDay = Day + (Hour / 24) + (Minute / 1440) + (Second / 86400);
      this.setJD(DT.dateToJD(Year, Month, dblDay, bGregorianCalendar), bGregorianCalendar);
    },
    setJD: function(JD, bGregorianCalendar) {
      this.m_dblJulian = JD;
      this.setInGregorianCalendar(bGregorianCalendar);
    },
    setInGregorianCalendar: function(bGregorianCalendar) {
      var bAfterPapalReform = (this.m_dblJulian >= 2299160.5);
      this.m_bGregorianCalendar = bGregorianCalendar && bAfterPapalReform;
    },
    get: function() {
      var Year;
      var Month;
      var Day;
      var Hour;
      var Minute;
      var Second;
      var JD = this.m_dblJulian + 0.5;
      var tempZ = Math.floor(JD);
      var F = JD - tempZ;
      var Z = ss.truncate(tempZ);
      var A;
      if (this.m_bGregorianCalendar) {
        var alpha = ss.truncate(((Z - 1867216.25) / 36524.25));
        A = Z + 1 + alpha - ss.truncate((alpha / 4));
      }
      else {
        A = Z;
      }
      var B = A + 1524;
      var C = ss.truncate(((B - 122.1) / 365.25));
      var D = ss.truncate((365.25 * C));
      var E = ss.truncate(((B - D) / 30.6001));
      var dblDay = B - D - ss.truncate((30.6001 * E)) + F;
      Day = ss.truncate(dblDay);
      if (E < 14) {
        Month = E - 1;
      }
      else {
        Month = E - 13;
      }
      if (Month > 2) {
        Year = C - 4716;
      }
      else {
        Year = C - 4715;
      }
      tempZ = Math.floor(dblDay);
      F = dblDay - tempZ;
      Hour = ss.truncate((F * 24));
      Minute = ss.truncate(((F - Hour / 24) * 1440));
      Second = (F - (Hour / 24) - (Minute / 1440)) * 86400;
      return [ Year, Month, Day, Hour, Minute, Second ];
    },
    dayOfWeek: function() {
      return (ss.truncate((this.m_dblJulian + 1.5)) % 7);
    },
    dayOfYear: function() {
      var year = ss.truncate(this.get()[0]);
      return DT.dayOfYearJD(this.m_dblJulian, year, DT.afterPapalReform(year, 1, 1));
    },
    daysInMonth: function() {
      var D = this.get();
      var Year = ss.truncate(D[0]);
      var Month = ss.truncate(D[1]);
      return DT.daysInMonthForMonth(Month, DT.isLeap(Year, this.m_bGregorianCalendar));
    },
    daysInYear: function() {
      var D = this.get();
      var Year = ss.truncate(D[0]);
      if (DT.isLeap(Year, this.m_bGregorianCalendar)) {
        return 366;
      }
      else {
        return 365;
      }
    },
    leap: function() {
      return DT.isLeap(this.year(), this.m_bGregorianCalendar);
    },
    inGregorianCalendar: function() {
      return this.m_bGregorianCalendar;
    },
    fractionalYear: function() {
      var D = this.get();
      var Year = ss.truncate(D[0]);
      var Month = ss.truncate(D[1]);
      var Day = ss.truncate(D[2]);
      var Hour = ss.truncate(D[3]);
      var Minute = ss.truncate(D[4]);
      var Second = D[5];
      var DaysInYear;
      if (DT.isLeap(Year, this.m_bGregorianCalendar)) {
        DaysInYear = 366;
      }
      else {
        DaysInYear = 365;
      }
      return Year + ((this.m_dblJulian - DT.dateToJD(Year, 1, 1, DT.afterPapalReform(Year, 1, 1))) / DaysInYear);
    }
  };


  // DYT

  function DYT() {
  }
  DYT.deltaT = function(JD) {
    var date = DT.createJD(JD, DT.afterPapalReformJD(JD));
    var y = date.fractionalYear();
    var T = (y - 2000) / 100;
    var Delta;
    if (y < 948) {
      Delta = 2177 + (497 * T) + (44.1 * T * T);
    }
    else if (y < 1620) {
      Delta = 102 + (102 * T) + (25.3 * T * T);
    }
    else if (y < 1998) {
      var Index = ss.truncate(((y - 1620) / 2));
      console.assert(Index < GFX.deltaTTable.length);
      y = y / 2 - Index - 810;
      Delta = (GFX.deltaTTable[Index] + (GFX.deltaTTable[Index + 1] - GFX.deltaTTable[Index]) * y);
    }
    else if (y <= 2000) {
      var nLookupSize = GFX.deltaTTable.length;
      Delta = GFX.deltaTTable[nLookupSize - 1];
    }
    else if (y < 2100) {
      Delta = 102 + (102 * T) + (25.3 * T * T) + 0.37 * (y - 2100);
    }
    else {
      Delta = 102 + (102 * T) + (25.3 * T * T);
    }
    return Delta;
  };
  var DYT$ = {

  };


  // CAAEarth

  function CAAEarth() {
  }
  CAAEarth.eclipticLongitude = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nL0Coefficients = GFX.g_L0EarthCoefficients.length;
    var L0 = 0;
    var i;
    for (i = 0; i < nL0Coefficients; i++) {
      L0 += GFX.g_L0EarthCoefficients[i].a * Math.cos(GFX.g_L0EarthCoefficients[i].b + GFX.g_L0EarthCoefficients[i].c * rho);
    }
    var nL1Coefficients = GFX.g_L1EarthCoefficients.length;
    var L1 = 0;
    for (i = 0; i < nL1Coefficients; i++) {
      L1 += GFX.g_L1EarthCoefficients[i].a * Math.cos(GFX.g_L1EarthCoefficients[i].b + GFX.g_L1EarthCoefficients[i].c * rho);
    }
    var nL2Coefficients = GFX.g_L2EarthCoefficients.length;
    var L2 = 0;
    for (i = 0; i < nL2Coefficients; i++) {
      L2 += GFX.g_L2EarthCoefficients[i].a * Math.cos(GFX.g_L2EarthCoefficients[i].b + GFX.g_L2EarthCoefficients[i].c * rho);
    }
    var nL3Coefficients = GFX.g_L3EarthCoefficients.length;
    var L3 = 0;
    for (i = 0; i < nL3Coefficients; i++) {
      L3 += GFX.g_L3EarthCoefficients[i].a * Math.cos(GFX.g_L3EarthCoefficients[i].b + GFX.g_L3EarthCoefficients[i].c * rho);
    }
    var nL4Coefficients = GFX.g_L4EarthCoefficients.length;
    var L4 = 0;
    for (i = 0; i < nL4Coefficients; i++) {
      L4 += GFX.g_L4EarthCoefficients[i].a * Math.cos(GFX.g_L4EarthCoefficients[i].b + GFX.g_L4EarthCoefficients[i].c * rho);
    }
    var nL5Coefficients = GFX.g_L5EarthCoefficients.length;
    var L5 = 0;
    for (i = 0; i < nL5Coefficients; i++) {
      L5 += GFX.g_L5EarthCoefficients[i].a * Math.cos(GFX.g_L5EarthCoefficients[i].b + GFX.g_L5EarthCoefficients[i].c * rho);
    }
    var vvalue = (L0 + L1 * rho + L2 * rhosquared + L3 * rhocubed + L4 * rho4 + L5 * rho5) / 100000000;
    vvalue = CT.m360(CT.r2D(vvalue));
    return vvalue;
  };
  CAAEarth.eclipticLatitude = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nB0Coefficients = GFX.g_B0EarthCoefficients.length;
    var B0 = 0;
    var i;
    for (i = 0; i < nB0Coefficients; i++) {
      B0 += GFX.g_B0EarthCoefficients[i].a * Math.cos(GFX.g_B0EarthCoefficients[i].b + GFX.g_B0EarthCoefficients[i].c * rho);
    }
    var nB1Coefficients = GFX.g_B1EarthCoefficients.length;
    var B1 = 0;
    for (i = 0; i < nB1Coefficients; i++) {
      B1 += GFX.g_B1EarthCoefficients[i].a * Math.cos(GFX.g_B1EarthCoefficients[i].b + GFX.g_B1EarthCoefficients[i].c * rho);
    }
    var nB2Coefficients = GFX.g_B2EarthCoefficients.length;
    var B2 = 0;
    for (i = 0; i < nB2Coefficients; i++) {
      B2 += GFX.g_B2EarthCoefficients[i].a * Math.cos(GFX.g_B2EarthCoefficients[i].b + GFX.g_B2EarthCoefficients[i].c * rho);
    }
    var nB3Coefficients = GFX.g_B3EarthCoefficients.length;
    var B3 = 0;
    for (i = 0; i < nB3Coefficients; i++) {
      B3 += GFX.g_B3EarthCoefficients[i].a * Math.cos(GFX.g_B3EarthCoefficients[i].b + GFX.g_B3EarthCoefficients[i].c * rho);
    }
    var nB4Coefficients = GFX.g_B4EarthCoefficients.length;
    var B4 = 0;
    for (i = 0; i < nB4Coefficients; i++) {
      B4 += GFX.g_B4EarthCoefficients[i].a * Math.cos(GFX.g_B4EarthCoefficients[i].b + GFX.g_B4EarthCoefficients[i].c * rho);
    }
    var vvalue = (B0 + B1 * rho + B2 * rhosquared + B3 * rhocubed + B4 * rho4) / 100000000;
    vvalue = CT.r2D(vvalue);
    return vvalue;
  };
  CAAEarth.radiusVector = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nR0Coefficients = GFX.g_R0EarthCoefficients.length;
    var R0 = 0;
    var i;
    for (i = 0; i < nR0Coefficients; i++) {
      R0 += GFX.g_R0EarthCoefficients[i].a * Math.cos(GFX.g_R0EarthCoefficients[i].b + GFX.g_R0EarthCoefficients[i].c * rho);
    }
    var nR1Coefficients = GFX.g_R1EarthCoefficients.length;
    var R1 = 0;
    for (i = 0; i < nR1Coefficients; i++) {
      R1 += GFX.g_R1EarthCoefficients[i].a * Math.cos(GFX.g_R1EarthCoefficients[i].b + GFX.g_R1EarthCoefficients[i].c * rho);
    }
    var nR2Coefficients = GFX.g_R2EarthCoefficients.length;
    var R2 = 0;
    for (i = 0; i < nR2Coefficients; i++) {
      R2 += GFX.g_R2EarthCoefficients[i].a * Math.cos(GFX.g_R2EarthCoefficients[i].b + GFX.g_R2EarthCoefficients[i].c * rho);
    }
    var nR3Coefficients = GFX.g_R3EarthCoefficients.length;
    var R3 = 0;
    for (i = 0; i < nR3Coefficients; i++) {
      R3 += GFX.g_R3EarthCoefficients[i].a * Math.cos(GFX.g_R3EarthCoefficients[i].b + GFX.g_R3EarthCoefficients[i].c * rho);
    }
    var nR4Coefficients = GFX.g_R4EarthCoefficients.length;
    var R4 = 0;
    for (i = 0; i < nR4Coefficients; i++) {
      R4 += GFX.g_R4EarthCoefficients[i].a * Math.cos(GFX.g_R4EarthCoefficients[i].b + GFX.g_R4EarthCoefficients[i].c * rho);
    }
    return (R0 + R1 * rho + R2 * rhosquared + R3 * rhocubed + R4 * rho4) / 100000000;
  };
  CAAEarth.sunMeanAnomaly = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(357.5291092 + 35999.0502909 * T - 0.0001536 * Tsquared + Tcubed / 24490000);
  };
  CAAEarth.eccentricity = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    return 1 - 0.002516 * T - 7.4E-06 * Tsquared;
  };
  CAAEarth.eclipticLongitudeJ2000 = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nL0Coefficients = GFX.g_L0EarthCoefficients.length;
    var L0 = 0;
    var i;
    for (i = 0; i < nL0Coefficients; i++) {
      L0 += GFX.g_L0EarthCoefficients[i].a * Math.cos(GFX.g_L0EarthCoefficients[i].b + GFX.g_L0EarthCoefficients[i].c * rho);
    }
    var nL1Coefficients = GFX.g_L1EarthCoefficientsJ2000.length;
    var L1 = 0;
    for (i = 0; i < nL1Coefficients; i++) {
      L1 += GFX.g_L1EarthCoefficientsJ2000[i].a * Math.cos(GFX.g_L1EarthCoefficientsJ2000[i].b + GFX.g_L1EarthCoefficientsJ2000[i].c * rho);
    }
    var nL2Coefficients = GFX.g_L2EarthCoefficientsJ2000.length;
    var L2 = 0;
    for (i = 0; i < nL2Coefficients; i++) {
      L2 += GFX.g_L2EarthCoefficientsJ2000[i].a * Math.cos(GFX.g_L2EarthCoefficientsJ2000[i].b + GFX.g_L2EarthCoefficientsJ2000[i].c * rho);
    }
    var nL3Coefficients = GFX.g_L3EarthCoefficientsJ2000.length;
    var L3 = 0;
    for (i = 0; i < nL3Coefficients; i++) {
      L3 += GFX.g_L3EarthCoefficientsJ2000[i].a * Math.cos(GFX.g_L3EarthCoefficientsJ2000[i].b + GFX.g_L3EarthCoefficientsJ2000[i].c * rho);
    }
    var nL4Coefficients = GFX.g_L4EarthCoefficientsJ2000.length;
    var L4 = 0;
    for (i = 0; i < nL4Coefficients; i++) {
      L4 += GFX.g_L4EarthCoefficientsJ2000[i].a * Math.cos(GFX.g_L4EarthCoefficientsJ2000[i].b + GFX.g_L4EarthCoefficientsJ2000[i].c * rho);
    }
    var vvalue = (L0 + L1 * rho + L2 * rhosquared + L3 * rhocubed + L4 * rho4) / 100000000;
    vvalue = CT.m360(CT.r2D(vvalue));
    return vvalue;
  };
  CAAEarth.eclipticLatitudeJ2000 = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nB0Coefficients = GFX.g_B0EarthCoefficients.length;
    var B0 = 0;
    var i;
    for (i = 0; i < nB0Coefficients; i++) {
      B0 += GFX.g_B0EarthCoefficients[i].a * Math.cos(GFX.g_B0EarthCoefficients[i].b + GFX.g_B0EarthCoefficients[i].c * rho);
    }
    var nB1Coefficients = GFX.g_B1EarthCoefficientsJ2000.length;
    var B1 = 0;
    for (i = 0; i < nB1Coefficients; i++) {
      B1 += GFX.g_B1EarthCoefficientsJ2000[i].a * Math.cos(GFX.g_B1EarthCoefficientsJ2000[i].b + GFX.g_B1EarthCoefficientsJ2000[i].c * rho);
    }
    var nB2Coefficients = GFX.g_B2EarthCoefficientsJ2000.length;
    var B2 = 0;
    for (i = 0; i < nB2Coefficients; i++) {
      B2 += GFX.g_B2EarthCoefficientsJ2000[i].a * Math.cos(GFX.g_B2EarthCoefficientsJ2000[i].b + GFX.g_B2EarthCoefficientsJ2000[i].c * rho);
    }
    var nB3Coefficients = GFX.g_B3EarthCoefficientsJ2000.length;
    var B3 = 0;
    for (i = 0; i < nB3Coefficients; i++) {
      B3 += GFX.g_B3EarthCoefficientsJ2000[i].a * Math.cos(GFX.g_B3EarthCoefficientsJ2000[i].b + GFX.g_B3EarthCoefficientsJ2000[i].c * rho);
    }
    var nB4Coefficients = GFX.g_B4EarthCoefficientsJ2000.length;
    var B4 = 0;
    for (i = 0; i < nB4Coefficients; i++) {
      B4 += GFX.g_B4EarthCoefficientsJ2000[i].a * Math.cos(GFX.g_B4EarthCoefficientsJ2000[i].b + GFX.g_B4EarthCoefficientsJ2000[i].c * rho);
    }
    var vvalue = (B0 + B1 * rho + B2 * rhosquared + B3 * rhocubed + B4 * rho4) / 100000000;
    vvalue = CT.r2D(vvalue);
    return vvalue;
  };
  var CAAEarth$ = {

  };


  // VSC

  function VSC(a, b, c) {
    this.a = 0;
    this.b = 0;
    this.c = 0;
    this.a = a;
    this.b = b;
    this.c = c;
  }
  var VSC$ = {

  };


  // CAAEclipticalElementDetails

  function CAAEclipticalElementDetails() {
    this.i = 0;
    this.w = 0;
    this.omega = 0;
    this.i = 0;
    this.w = 0;
    this.omega = 0;
  }
  var CAAEclipticalElementDetails$ = {

  };


  // CAAEclipticalElements

  function CAAEclipticalElements() {
  }
  CAAEclipticalElements.calculate = function(i0, w0, omega0, JD0, JD) {
    var T = (JD0 - 2451545) / 36525;
    var Tsquared = T * T;
    var t = (JD - JD0) / 36525;
    var tsquared = t * t;
    var tcubed = tsquared * t;
    var i0rad = CT.d2R(i0);
    var omega0rad = CT.d2R(omega0);
    var eta = (47.0029 - 0.06603 * T + 0.000598 * Tsquared) * t + (-0.03302 + 0.000598 * T) * tsquared + 6E-05 * tcubed;
    eta = CT.d2R(CT.dmS2D(0, 0, eta));
    var pi = 174.876384 * 3600 + 3289.4789 * T + 0.60622 * Tsquared - (869.8089 + 0.50491 * T) * t + 0.03536 * tsquared;
    pi = CT.d2R(CT.dmS2D(0, 0, pi));
    var p = (5029.0966 + 2.22226 * T - 4.2E-05 * Tsquared) * t + (1.11113 - 4.2E-05 * T) * tsquared - 6E-06 * tcubed;
    p = CT.d2R(CT.dmS2D(0, 0, p));
    var sini0rad = Math.sin(i0rad);
    var cosi0rad = Math.cos(i0rad);
    var sinomega0rad_pi = Math.sin(omega0rad - pi);
    var cosomega0rad_pi = Math.cos(omega0rad - pi);
    var sineta = Math.sin(eta);
    var coseta = Math.cos(eta);
    var A = sini0rad * sinomega0rad_pi;
    var B = -sineta * cosi0rad + coseta * sini0rad * cosomega0rad_pi;
    var irad = Math.asin(Math.sqrt(A * A + B * B));
    var details = new CAAEclipticalElementDetails();
    details.i = CT.r2D(irad);
    var cosi = cosi0rad * coseta + sini0rad * sineta * cosomega0rad_pi;
    if (cosi < 0) {
      details.i = 180 - details.i;
    }
    var phi = pi + p;
    details.omega = CT.m360(CT.r2D(Math.atan2(A, B) + phi));
    A = -sineta * sinomega0rad_pi;
    B = sini0rad * coseta - cosi0rad * sineta * cosomega0rad_pi;
    var deltaw = CT.r2D(Math.atan2(A, B));
    details.w = CT.m360(w0 + deltaw);
    return details;
  };
  CAAEclipticalElements.fK4B1950ToFK5J2000 = function(i0, w0, omega0) {
    var L = CT.d2R(5.19856209);
    var J = CT.d2R(0.00651966);
    var i0rad = CT.d2R(i0);
    var omega0rad = CT.d2R(omega0);
    var sini0rad = Math.sin(i0rad);
    var cosi0rad = Math.cos(i0rad);
    var cosJ = Math.cos(J);
    var sinJ = Math.sin(J);
    var W = L + omega0rad;
    var cosW = Math.cos(W);
    var sinW = Math.sin(W);
    var A = sinJ * sinW;
    var B = sini0rad * cosJ + cosi0rad * sinJ * cosW;
    var details = new CAAEclipticalElementDetails();
    details.i = CT.r2D(Math.asin(Math.sqrt(A * A + B * B)));
    var cosi = cosi0rad * cosJ - sini0rad * sinJ * cosW;
    if (cosi < 0) {
      details.i = 180 - details.i;
    }
    details.w = CT.m360(w0 + CT.r2D(Math.atan2(A, B)));
    details.omega = CT.m360(CT.r2D(Math.atan2(sini0rad * sinW, cosi0rad * sinJ + sini0rad * cosJ * cosW)) - 4.50001688);
    return details;
  };
  var CAAEclipticalElements$ = {

  };


  // EPO

  function EPO() {
  }
  EPO.mercuryMeanLongitude = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(252.250906 + 149474.0722491 * T + 0.0003035 * Tsquared + 1.8E-08 * Tcubed);
  };
  EPO.mercurySemimajorAxis = function(UnnamedParameter1) {
    return 0.38709831;
  };
  EPO.mercuryEccentricity = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return 0.20563175 + 2.0407E-05 * T - 2.83E-08 * Tsquared - 1.8E-10 * Tcubed;
  };
  EPO.mercuryInclination = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(7.004986 + 0.0018215 * T - 1.81E-05 * Tsquared + 5.6E-08 * Tcubed);
  };
  EPO.mercuryLongitudeAscendingNode = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(48.330893 + 1.1861883 * T + 0.00017542 * Tsquared + 2.15E-07 * Tcubed);
  };
  EPO.mercuryLongitudePerihelion = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(77.456119 + 1.5564776 * T + 0.00029544 * Tsquared + 9E-09 * Tcubed);
  };
  EPO.venusMeanLongitude = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(181.979801 + 58519.2130302 * T + 0.00031014 * Tsquared + 1.5E-08 * Tcubed);
  };
  EPO.venusSemimajorAxis = function(UnnamedParameter1) {
    return 0.72332982;
  };
  EPO.venusEccentricity = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return 0.00677192 - 4.7765E-05 * T + 9.81E-08 * Tsquared + 4.6E-10 * Tcubed;
  };
  EPO.venusInclination = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(3.394662 + 0.0010037 * T - 8.8E-07 * Tsquared - 7E-09 * Tcubed);
  };
  EPO.venusLongitudeAscendingNode = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(76.67992 + 0.9011206 * T + 0.00040618 * Tsquared - 9.3E-08 * Tcubed);
  };
  EPO.venusLongitudePerihelion = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(131.563703 + 1.4022288 * T - 0.00107618 * Tsquared - 5.678E-06 * Tcubed);
  };
  EPO.earthMeanLongitude = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(100.466457 + 36000.7698278 * T + 0.00030322 * Tsquared + 2E-08 * Tcubed);
  };
  EPO.earthSemimajorAxis = function(UnnamedParameter1) {
    return 1.000001018;
  };
  EPO.earthEccentricity = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return 0.01670863 - 4.2037E-05 * T - 1.267E-07 * Tsquared + 1.4E-10 * Tcubed;
  };
  EPO.earthInclination = function(UnnamedParameter1) {
    return 0;
  };
  EPO.earthLongitudePerihelion = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(102.937348 + 1.17195366 * T + 0.00045688 * Tsquared - 1.8E-08 * Tcubed);
  };
  EPO.marsMeanLongitude = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(355.433 + 19141.6964471 * T + 0.00031052 * Tsquared + 1.6E-08 * Tcubed);
  };
  EPO.marsSemimajorAxis = function(UnnamedParameter1) {
    return 1.523679342;
  };
  EPO.marsEccentricity = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return 0.09340065 + 9.0484E-05 * T - 8.06E-08 * Tsquared - 2.5E-10 * Tcubed;
  };
  EPO.marsInclination = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(1.849726 - 0.0006011 * T + 1.276E-05 * Tsquared - 7E-09 * Tcubed);
  };
  EPO.marsLongitudeAscendingNode = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(49.588093 + 0.7720959 * T + 1.557E-05 * Tsquared + 2.267E-06 * Tcubed);
  };
  EPO.marsLongitudePerihelion = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(336.060234 + 1.8410449 * T + 0.00013477 * Tsquared + 5.36E-07 * Tcubed);
  };
  EPO.jupiterMeanLongitude = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(34.351519 + 3036.3027748 * T + 0.0002233 * Tsquared + 3.7E-08 * Tcubed);
  };
  EPO.jupiterSemimajorAxis = function(JD) {
    var T = (JD - 2451545) / 36525;
    return 5.202603209 + 1.913E-07 * T;
  };
  EPO.jupiterEccentricity = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return 0.04849793 + 0.000163225 * T - 4.714E-07 * Tsquared - 2.01E-09 * Tcubed;
  };
  EPO.jupiterInclination = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(1.303267 - 0.0054965 * T + 4.66E-06 * Tsquared - 2E-09 * Tcubed);
  };
  EPO.jupiterLongitudeAscendingNode = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(100.464407 + 1.0209774 * T + 0.00040315 * Tsquared + 4.04E-07 * Tcubed);
  };
  EPO.jupiterLongitudePerihelion = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(14.331207 + 1.6126352 * T + 0.00103042 * Tsquared - 4.464E-06 * Tcubed);
  };
  EPO.saturnMeanLongitude = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(50.077444 + 1223.5110686 * T + 0.00051908 * Tsquared - 3E-08 * Tcubed);
  };
  EPO.saturnSemimajorAxis = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    return 9.554909192 - 2.139E-06 * T + 4E-09 * Tsquared;
  };
  EPO.saturnEccentricity = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return 0.05554814 - 0.0003446641 * T - 6.436E-07 * Tsquared + 3.4E-09 * Tcubed;
  };
  EPO.saturnInclination = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(2.488879 - 0.0037362 * T - 1.519E-05 * Tsquared + 8.7E-08 * Tcubed);
  };
  EPO.saturnLongitudeAscendingNode = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(113.665503 + 0.877088 * T - 0.00012176 * Tsquared - 2.249E-06 * Tcubed);
  };
  EPO.saturnLongitudePerihelion = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(93.057237 + 1.19637613 * T + 0.00083753 * Tsquared + 4.928E-06 * Tcubed);
  };
  EPO.uranusMeanLongitude = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(314.055005 + 429.8640561 * T + 0.0003039 * Tsquared + 2.6E-08 * Tcubed);
  };
  EPO.uranusSemimajorAxis = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    return 19.218446062 - 3.72E-08 * T + 9.8E-10 * Tsquared;
  };
  EPO.uranusEccentricity = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return 0.04638122 - 2.7293E-05 * T + 7.89E-08 * Tsquared + 2.4E-10 * Tcubed;
  };
  EPO.uranusInclination = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(0.773197 + 0.0007744 * T + 3.749E-05 * Tsquared - 9.2E-08 * Tcubed);
  };
  EPO.uranusLongitudeAscendingNode = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(74.005957 + 0.5211278 * T + 0.00133947 * Tsquared + 1.8484E-05 * Tcubed);
  };
  EPO.uranusLongitudePerihelion = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(173.005291 + 1.486379 * T + 0.00021406 * Tsquared + 4.34E-07 * Tcubed);
  };
  EPO.neptuneMeanLongitude = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(304.348665 + 219.8833092 * T + 0.00030882 * Tsquared + 1.8E-08 * Tcubed);
  };
  EPO.neptuneSemimajorAxis = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    return 30.110386869 - 1.663E-07 * T + 6.9E-10 * Tsquared;
  };
  EPO.neptuneEccentricity = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tcubed = T * T * T;
    return 0.00945575 + 6.033E-06 * T - 5E-11 * Tcubed;
  };
  EPO.neptuneInclination = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(1.769953 - 0.0093082 * T - 7.08E-06 * Tsquared + 2.7E-08 * Tcubed);
  };
  EPO.neptuneLongitudeAscendingNode = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(131.784057 + 1.1022039 * T + 0.00025952 * Tsquared - 6.37E-07 * Tcubed);
  };
  EPO.neptuneLongitudePerihelion = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(48.120276 + 1.4262957 * T + 0.00038434 * Tsquared + 2E-08 * Tcubed);
  };
  EPO.mercuryMeanLongitudeJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(252.250906 + 149472.6746358 * T - 5.36E-06 * Tsquared + 2E-09 * Tcubed);
  };
  EPO.mercuryInclinationJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(7.004986 - 0.0059516 * T + 8E-07 * Tsquared + 4.3E-08 * Tcubed);
  };
  EPO.mercuryLongitudeAscendingNodeJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(48.330893 - 0.1254227 * T - 8.833E-05 * Tsquared - 2E-07 * Tcubed);
  };
  EPO.mercuryLongitudePerihelionJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(77.456119 + 0.1588643 * T - 1.342E-05 * Tsquared - 7E-09 * Tcubed);
  };
  EPO.venusMeanLongitudeJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(181.979801 + 58517.815676 * T + 1.65E-06 * Tsquared - 2E-09 * Tcubed);
  };
  EPO.venusInclinationJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(3.394662 - 0.0008568 * T - 3.244E-05 * Tsquared + 9E-09 * Tcubed);
  };
  EPO.venusLongitudeAscendingNodeJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(76.67992 - 0.2780134 * T - 0.00014257 * Tsquared - 1.64E-07 * Tcubed);
  };
  EPO.venusLongitudePerihelionJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(131.563703 + 0.0048746 * T - 0.00138467 * Tsquared - 5.695E-06 * Tcubed);
  };
  EPO.earthMeanLongitudeJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(100.466457 + 35999.3728565 * T - 5.68E-06 * Tsquared - 1E-09 * Tcubed);
  };
  EPO.earthInclinationJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return 0.0130548 * T - 9.31E-06 * Tsquared - 3.4E-08 * Tcubed;
  };
  EPO.earthLongitudeAscendingNodeJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(174.873176 - 0.241098 * T + 4.262E-05 * Tsquared + 1E-09 * Tcubed);
  };
  EPO.earthLongitudePerihelionJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(102.937348 + 0.3225654 * T + 0.00014799 * Tsquared - 3.9E-08 * Tcubed);
  };
  EPO.marsMeanLongitudeJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(355.433 + 19140.2993039 * T + 2.62E-06 * Tsquared - 3E-09 * Tcubed);
  };
  EPO.marsInclinationJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(1.849726 - 0.0081477 * T - 2.255E-05 * Tsquared - 2.9E-08 * Tcubed);
  };
  EPO.marsLongitudeAscendingNodeJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(49.588093 - 0.295025 * T - 0.00064048 * Tsquared - 1.964E-06 * Tcubed);
  };
  EPO.marsLongitudePerihelionJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(336.060234 + 0.4439016 * T - 0.00017313 * Tsquared + 5.18E-07 * Tcubed);
  };
  EPO.jupiterMeanLongitudeJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(34.351519 + 3034.9056606 * T - 8.501E-05 * Tsquared + 1.6E-08 * Tcubed);
  };
  EPO.jupiterInclinationJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(1.303267 - 0.0019877 * T + 3.32E-05 * Tsquared + 9.7E-08 * Tcubed);
  };
  EPO.jupiterLongitudeAscendingNodeJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(100.464407 + 0.1767232 * T + 0.000907 * Tsquared - 7.272E-06 * Tcubed);
  };
  EPO.jupiterLongitudePerihelionJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(14.331207 + 0.2155209 * T + 0.00072211 * Tsquared - 4.485E-06 * Tcubed);
  };
  EPO.saturnMeanLongitudeJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(50.077444 + 1222.1138488 * T + 0.00021004 * Tsquared - 4.6E-08 * Tcubed);
  };
  EPO.saturnInclinationJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(2.488879 + 0.0025514 * T - 4.906E-05 * Tsquared + 1.7E-08 * Tcubed);
  };
  EPO.saturnLongitudeAscendingNodeJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(113.665503 - 0.2566722 * T - 0.00018399 * Tsquared + 4.8E-07 * Tcubed);
  };
  EPO.saturnLongitudePerihelionJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(93.057237 + 0.5665415 * T + 0.0005285 * Tsquared + 4.912E-06 * Tcubed);
  };
  EPO.uranusMeanLongitudeJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(314.055005 + 428.4669983 * T - 4.86E-06 * Tsquared + 6E-09 * Tcubed);
  };
  EPO.uranusInclinationJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(0.773197 - 0.0016869 * T + 3.49E-06 * Tsquared + 1.6E-08 * Tcubed);
  };
  EPO.uranusLongitudeAscendingNodeJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(74.005957 + 0.0741431 * T + 0.00040539 * Tsquared + 1.19E-07 * Tcubed);
  };
  EPO.uranusLongitudePerihelionJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(173.005291 + 0.0893212 * T - 9.47E-05 * Tsquared + 4.14E-07 * Tcubed);
  };
  EPO.neptuneMeanLongitudeJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(304.348665 + 218.4862002 * T + 5.9E-07 * Tsquared - 2E-09 * Tcubed);
  };
  EPO.neptuneInclinationJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    return CT.m360(1.769953 + 0.0002256 * T + 2.3E-07 * Tsquared);
  };
  EPO.neptuneLongitudeAscendingNodeJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    return CT.m360(131.784057 - 0.0061651 * T - 2.19E-06 * Tsquared - 7.8E-08 * Tcubed);
  };
  EPO.neptuneLongitudePerihelionJ2000 = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    return CT.m360(48.120276 + 0.0291866 * T + 7.61E-05 * Tsquared);
  };
  var EPO$ = {

  };


  // EOE

  function EOE() {
    this.a = 0;
    this.e = 0;
    this.i = 0;
    this.w = 0;
    this.omega = 0;
    this.jdEquinox = 0;
    this.t = 0;
    this.n = 0;
    this.meanAnnomolyOut = 0;
    this.a = 0;
    this.e = 0;
    this.i = 0;
    this.w = 0;
    this.omega = 0;
    this.jdEquinox = 0;
    this.t = 0;
  }
  EOE._create = function(br) {
    var tmp = new EOE();
    tmp.a = br.readSingle();
    tmp.e = br.readSingle();
    tmp.i = br.readSingle();
    tmp.w = br.readSingle();
    tmp.omega = br.readSingle();
    tmp.jdEquinox = br.readSingle();
    tmp.t = br.readSingle();
    return tmp;
  };
  var EOE$ = {

  };


  // EPD

  function EPD() {
    this.apparentGeocentricLongitude = 0;
    this.apparentGeocentricLatitude = 0;
    this.apparentGeocentricDistance = 0;
    this.apparentLightTime = 0;
    this.apparentGeocentricRA = 0;
    this.apparentGeocentricDeclination = 0;
    this.apparentGeocentricLongitude = 0;
    this.apparentGeocentricLatitude = 0;
    this.apparentGeocentricDistance = 0;
    this.apparentLightTime = 0;
    this.apparentGeocentricRA = 0;
    this.apparentGeocentricDeclination = 0;
  }
  var EPD$ = {

  };


  // EOD

  function EOD() {
    this.heliocentricRectangularEquatorial = new C3D();
    this.heliocentricRectangularEcliptical = new C3D();
    this.heliocentricEclipticLongitude = 0;
    this.heliocentricEclipticLatitude = 0;
    this.trueGeocentricRA = 0;
    this.trueGeocentricDeclination = 0;
    this.trueGeocentricDistance = 0;
    this.trueGeocentricLightTime = 0;
    this.astrometricGeocenticRA = 0;
    this.astrometricGeocentricDeclination = 0;
    this.astrometricGeocentricDistance = 0;
    this.astrometricGeocentricLightTime = 0;
    this.elongation = 0;
    this.phaseAngle = 0;
    this.heliocentricEclipticLongitude = 0;
    this.heliocentricEclipticLatitude = 0;
    this.trueGeocentricRA = 0;
    this.trueGeocentricDeclination = 0;
    this.trueGeocentricDistance = 0;
    this.trueGeocentricLightTime = 0;
    this.astrometricGeocenticRA = 0;
    this.astrometricGeocentricDeclination = 0;
    this.astrometricGeocentricDistance = 0;
    this.astrometricGeocentricLightTime = 0;
    this.elongation = 0;
    this.phaseAngle = 0;
  }
  var EOD$ = {

  };


  // ELL

  function ELL() {
  }
  ELL.distanceToLightTime = function(Distance) {
    return Distance * 0.0057755183;
  };
  ELL.calculate = function(JD, oobject) {
    var details = new EPD();
    var JD0 = JD;
    var L0 = 0;
    var B0 = 0;
    var R0 = 0;
    var cosB0 = 0;
    if (!!oobject) {
      L0 = CAAEarth.eclipticLongitude(JD0);
      B0 = CAAEarth.eclipticLatitude(JD0);
      R0 = CAAEarth.radiusVector(JD0);
      L0 = CT.d2R(L0);
      B0 = CT.d2R(B0);
      cosB0 = Math.cos(B0);
    }
    var L = 0;
    var B = 0;
    var R = 0;
    var Lrad;
    var Brad;
    var cosB;
    var cosL;
    var x;
    var y;
    var z;
    var bRecalc = true;
    var bFirstRecalc = true;
    var LPrevious = 0;
    var BPrevious = 0;
    var RPrevious = 0;
    while (bRecalc) {
      switch (oobject) {
        case 0:
          L = CAASun.geometricEclipticLongitude(JD0);
          B = CAASun.geometricEclipticLatitude(JD0);
          R = CAAEarth.radiusVector(JD0);
          break;
        case 1:
          L = CAAMercury.eclipticLongitude(JD0);
          B = CAAMercury.eclipticLatitude(JD0);
          R = CAAMercury.radiusVector(JD0);
          break;
        case 2:
          L = CAAVenus.eclipticLongitude(JD0);
          B = CAAVenus.eclipticLatitude(JD0);
          R = CAAVenus.radiusVector(JD0);
          break;
        case 3:
          L = CAAMars.eclipticLongitude(JD0);
          B = CAAMars.eclipticLatitude(JD0);
          R = CAAMars.radiusVector(JD0);
          break;
        case 4:
          L = CAAJupiter.eclipticLongitude(JD0);
          B = CAAJupiter.eclipticLatitude(JD0);
          R = CAAJupiter.radiusVector(JD0);
          break;
        case 5:
          L = CAASaturn.eclipticLongitude(JD0);
          B = CAASaturn.eclipticLatitude(JD0);
          R = CAASaturn.radiusVector(JD0);
          break;
        case 6:
          L = CAAUranus.eclipticLongitude(JD0);
          B = CAAUranus.eclipticLatitude(JD0);
          R = CAAUranus.radiusVector(JD0);
          break;
        case 7:
          L = CAANeptune.eclipticLongitude(JD0);
          B = CAANeptune.eclipticLatitude(JD0);
          R = CAANeptune.radiusVector(JD0);
          break;
        case 8:
          L = CAAPluto.eclipticLongitude(JD0);
          B = CAAPluto.eclipticLatitude(JD0);
          R = CAAPluto.radiusVector(JD0);
          break;
        default:
          console.assert(false);
          break;
      }
      if (!bFirstRecalc) {
        bRecalc = ((Math.abs(L - LPrevious) > 1E-05) || (Math.abs(B - BPrevious) > 1E-05) || (Math.abs(R - RPrevious) > 1E-06));
        LPrevious = L;
        BPrevious = B;
        RPrevious = R;
      }
      else {
        bFirstRecalc = false;
      }
      if (bRecalc) {
        var distance = 0;
        if (!!oobject) {
          Lrad = CT.d2R(L);
          Brad = CT.d2R(B);
          cosB = Math.cos(Brad);
          cosL = Math.cos(Lrad);
          x = R * cosB * cosL - R0 * cosB0 * Math.cos(L0);
          y = R * cosB * Math.sin(Lrad) - R0 * cosB0 * Math.sin(L0);
          z = R * Math.sin(Brad) - R0 * Math.sin(B0);
          distance = Math.sqrt(x * x + y * y + z * z);
        }
        else {
          distance = R;
        }
        JD0 = JD - ELL.distanceToLightTime(distance);
      }
    }
    Lrad = CT.d2R(L);
    Brad = CT.d2R(B);
    cosB = Math.cos(Brad);
    cosL = Math.cos(Lrad);
    x = R * cosB * cosL - R0 * cosB0 * Math.cos(L0);
    y = R * cosB * Math.sin(Lrad) - R0 * cosB0 * Math.sin(L0);
    z = R * Math.sin(Brad) - R0 * Math.sin(B0);
    var x2 = x * x;
    var y2 = y * y;
    details.apparentGeocentricLatitude = CT.r2D(Math.atan2(z, Math.sqrt(x2 + y2)));
    details.apparentGeocentricDistance = Math.sqrt(x2 + y2 + z * z);
    details.apparentGeocentricLongitude = CT.m360(CT.r2D(Math.atan2(y, x)));
    details.apparentLightTime = ELL.distanceToLightTime(details.apparentGeocentricDistance);
    var Aberration = ABR.eclipticAberration(details.apparentGeocentricLongitude, details.apparentGeocentricLatitude, JD);
    details.apparentGeocentricLongitude += Aberration.x;
    details.apparentGeocentricLatitude += Aberration.y;
    var DeltaLong = CAAFK5.correctionInLongitude(details.apparentGeocentricLongitude, details.apparentGeocentricLatitude, JD);
    details.apparentGeocentricLatitude += CAAFK5.correctionInLatitude(details.apparentGeocentricLongitude, JD);
    details.apparentGeocentricLongitude += DeltaLong;
    var NutationInLongitude = CAANutation.nutationInLongitude(JD);
    var Epsilon = CAANutation.trueObliquityOfEcliptic(JD);
    details.apparentGeocentricLongitude += CT.dmS2D(0, 0, NutationInLongitude);
    var ApparentEqu = CT.ec2Eq(details.apparentGeocentricLongitude, details.apparentGeocentricLatitude, Epsilon);
    details.apparentGeocentricRA = ApparentEqu.x;
    details.apparentGeocentricDeclination = ApparentEqu.y;
    return details;
  };
  ELL.semiMajorAxisFromPerihelionDistance = function(q, e) {
    return q / (1 - e);
  };
  ELL.meanMotionFromSemiMajorAxis = function(a) {
    return 0.9856076686 / (a * Math.sqrt(a));
  };
  ELL.calculateRectangularJD = function(JD, elements) {
    var JD0 = JD;
    var omega = CT.d2R(elements.omega);
    var w = CT.d2R(elements.w);
    var i = CT.d2R(elements.i);
    var sinEpsilon = 0;
    var cosEpsilon = 1;
    var sinOmega = Math.sin(omega);
    var cosOmega = Math.cos(omega);
    var cosi = Math.cos(i);
    var sini = Math.sin(i);
    var F = cosOmega;
    var G = sinOmega * cosEpsilon;
    var H = sinOmega * sinEpsilon;
    var P = -sinOmega * cosi;
    var Q = cosOmega * cosi * cosEpsilon - sini * sinEpsilon;
    var R = cosOmega * cosi * sinEpsilon + sini * cosEpsilon;
    var a = Math.sqrt(F * F + P * P);
    var b = Math.sqrt(G * G + Q * Q);
    var c = Math.sqrt(H * H + R * R);
    var A = Math.atan2(F, P);
    var B = Math.atan2(G, Q);
    var C = Math.atan2(H, R);
    var M = elements.n * (JD0 - elements.t);
    elements.meanAnnomolyOut = M;
    var E = CAAKepler.calculate(M, elements.e);
    E = CT.d2R(E);
    var v = 2 * Math.atan(Math.sqrt((1 + elements.e) / (1 - elements.e)) * Math.tan(E / 2));
    var r = elements.a * (1 - elements.e * Math.cos(E));
    var x = r * a * Math.sin(A + w + v);
    var y = r * b * Math.sin(B + w + v);
    var z = r * c * Math.sin(C + w + v);
    return Vector3d.create(x, z, y);
  };
  ELL.calculateRectangular = function(elements, meanAnomoly) {
    var omega = CT.d2R(elements.omega);
    var w = CT.d2R(elements.w);
    var i = CT.d2R(elements.i);
    var sinEpsilon = 0;
    var cosEpsilon = 1;
    var sinOmega = Math.sin(omega);
    var cosOmega = Math.cos(omega);
    var cosi = Math.cos(i);
    var sini = Math.sin(i);
    var F = cosOmega;
    var G = sinOmega * cosEpsilon;
    var H = sinOmega * sinEpsilon;
    var P = -sinOmega * cosi;
    var Q = cosOmega * cosi * cosEpsilon - sini * sinEpsilon;
    var R = cosOmega * cosi * sinEpsilon + sini * cosEpsilon;
    var a = Math.sqrt(F * F + P * P);
    var b = Math.sqrt(G * G + Q * Q);
    var c = Math.sqrt(H * H + R * R);
    var A = Math.atan2(F, P);
    var B = Math.atan2(G, Q);
    var C = Math.atan2(H, R);
    var n = elements.n;
    var M = meanAnomoly;
    var E = CAAKepler.calculate(M, elements.e);
    E = CT.d2R(E);
    var v = 2 * Math.atan(Math.sqrt((1 + elements.e) / (1 - elements.e)) * Math.tan(E / 2));
    var r = elements.a * (1 - elements.e * Math.cos(E));
    var x = r * a * Math.sin(A + w + v);
    var y = r * b * Math.sin(B + w + v);
    var z = r * c * Math.sin(C + w + v);
    return Vector3d.create(x, z, y);
  };
  ELL.calculateElements = function(JD, elements) {
    var Epsilon = CAANutation.meanObliquityOfEcliptic(elements.jdEquinox);
    var JD0 = JD;
    var details = new EOD();
    Epsilon = CT.d2R(Epsilon);
    var omega = CT.d2R(elements.omega);
    var w = CT.d2R(elements.w);
    var i = CT.d2R(elements.i);
    var sinEpsilon = Math.sin(Epsilon);
    var cosEpsilon = Math.cos(Epsilon);
    var sinOmega = Math.sin(omega);
    var cosOmega = Math.cos(omega);
    var cosi = Math.cos(i);
    var sini = Math.sin(i);
    var F = cosOmega;
    var G = sinOmega * cosEpsilon;
    var H = sinOmega * sinEpsilon;
    var P = -sinOmega * cosi;
    var Q = cosOmega * cosi * cosEpsilon - sini * sinEpsilon;
    var R = cosOmega * cosi * sinEpsilon + sini * cosEpsilon;
    var a = Math.sqrt(F * F + P * P);
    var b = Math.sqrt(G * G + Q * Q);
    var c = Math.sqrt(H * H + R * R);
    var A = Math.atan2(F, P);
    var B = Math.atan2(G, Q);
    var C = Math.atan2(H, R);
    var n = ELL.meanMotionFromSemiMajorAxis(elements.a);
    var SunCoord = CAASun.equatorialRectangularCoordinatesAnyEquinox(JD, elements.jdEquinox);
    for (var j = 0; j < 2; j++) {
      var M = n * (JD0 - elements.t);
      var E = CAAKepler.calculate(M, elements.e);
      E = CT.d2R(E);
      var v = 2 * Math.atan(Math.sqrt((1 + elements.e) / (1 - elements.e)) * Math.tan(E / 2));
      var r = elements.a * (1 - elements.e * Math.cos(E));
      var x = r * a * Math.sin(A + w + v);
      var y = r * b * Math.sin(B + w + v);
      var z = r * c * Math.sin(C + w + v);
      if (!j) {
        details.heliocentricRectangularEquatorial.x = x;
        details.heliocentricRectangularEquatorial.y = y;
        details.heliocentricRectangularEquatorial.z = z;
        var u = omega + v;
        var cosu = Math.cos(u);
        var sinu = Math.sin(u);
        details.heliocentricRectangularEcliptical.x = r * (cosOmega * cosu - sinOmega * sinu * cosi);
        details.heliocentricRectangularEcliptical.y = r * (sinOmega * cosu + cosOmega * sinu * cosi);
        details.heliocentricRectangularEcliptical.z = r * sini * sinu;
        details.heliocentricEclipticLongitude = Math.atan2(y, x);
        details.heliocentricEclipticLongitude = CT.m24(CT.r2D(details.heliocentricEclipticLongitude) / 15);
        details.heliocentricEclipticLatitude = Math.asin(z / r);
        details.heliocentricEclipticLatitude = CT.r2D(details.heliocentricEclipticLatitude);
      }
      var psi = SunCoord.x + x;
      var nu = SunCoord.y + y;
      var sigma = SunCoord.z + z;
      var Alpha = Math.atan2(nu, psi);
      Alpha = CT.r2D(Alpha);
      var Delta = Math.atan2(sigma, Math.sqrt(psi * psi + nu * nu));
      Delta = CT.r2D(Delta);
      var Distance = Math.sqrt(psi * psi + nu * nu + sigma * sigma);
      if (!j) {
        details.trueGeocentricRA = CT.m24(Alpha / 15);
        details.trueGeocentricDeclination = Delta;
        details.trueGeocentricDistance = Distance;
        details.trueGeocentricLightTime = ELL.distanceToLightTime(Distance);
      }
      else {
        details.astrometricGeocenticRA = CT.m24(Alpha / 15);
        details.astrometricGeocentricDeclination = Delta;
        details.astrometricGeocentricDistance = Distance;
        details.astrometricGeocentricLightTime = ELL.distanceToLightTime(Distance);
        var RES = Math.sqrt(SunCoord.x * SunCoord.x + SunCoord.y * SunCoord.y + SunCoord.z * SunCoord.z);
        details.elongation = Math.acos((RES * RES + Distance * Distance - r * r) / (2 * RES * Distance));
        details.elongation = CT.r2D(details.elongation);
        details.phaseAngle = Math.acos((r * r + Distance * Distance - RES * RES) / (2 * r * Distance));
        details.phaseAngle = CT.r2D(details.phaseAngle);
      }
      if (!j) {
        JD0 = JD - details.trueGeocentricLightTime;
      }
    }
    return details;
  };
  ELL.instantaneousVelocity = function(r, a) {
    return 42.1219 * Math.sqrt((1 / r) - (1 / (2 * a)));
  };
  ELL.velocityAtPerihelion = function(e, a) {
    return 29.7847 / Math.sqrt(a) * Math.sqrt((1 + e) / (1 - e));
  };
  ELL.velocityAtAphelion = function(e, a) {
    return 29.7847 / Math.sqrt(a) * Math.sqrt((1 - e) / (1 + e));
  };
  ELL.lengthOfEllipse = function(e, a) {
    var b = a * Math.sqrt(1 - e * e);
    return CT.PI() * (3 * (a + b) - Math.sqrt((a + 3 * b) * (3 * a + b)));
  };
  ELL.cometMagnitude = function(g, delta, k, r) {
    return g + 5 * Util.log10(delta) + k * Util.log10(r);
  };
  ELL.minorPlanetMagnitude = function(H, delta, G, r, PhaseAngle) {
    PhaseAngle = CT.d2R(PhaseAngle);
    var phi1 = Math.exp(-3.33 * Math.pow(Math.tan(PhaseAngle / 2), 0.63));
    var phi2 = Math.exp(-1.87 * Math.pow(Math.tan(PhaseAngle / 2), 1.22));
    return H + 5 * Util.log10(r * delta) - 2.5 * Util.log10((1 - G) * phi1 + G * phi2);
  };
  var ELL$ = {

  };


  // EOT

  function EOT() {
  }
  EOT.calculate = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var L0 = CT.m360(280.4664567 + 360007.6982779 * rho + 0.03032028 * rhosquared + rhocubed / 49931 - rho4 / 15300 - rho5 / 2000000);
    var SunLong = CAASun.apparentEclipticLongitude(JD);
    var SunLat = CAASun.apparentEclipticLatitude(JD);
    var epsilon = CAANutation.trueObliquityOfEcliptic(JD);
    var Equatorial = CT.ec2Eq(SunLong, SunLat, epsilon);
    epsilon = CT.d2R(epsilon);
    var E = L0 - 0.0057183 - Equatorial.x * 15 + CT.dmS2D(0, 0, CAANutation.nutationInLongitude(JD)) * Math.cos(epsilon);
    if (E > 180) {
      E = -(360 - E);
    }
    E *= 4;
    return E;
  };
  var EOT$ = {

  };


  // CAAFK5

  function CAAFK5() {
  }
  CAAFK5.correctionInLongitude = function(Longitude, Latitude, JD) {
    var T = (JD - 2451545) / 36525;
    var Ldash = Longitude - 1.397 * T - 0.00031 * T * T;
    Ldash = CT.d2R(Ldash);
    Longitude = CT.d2R(Longitude);
    Latitude = CT.d2R(Latitude);
    var vvalue = -0.09033 + 0.03916 * (Math.cos(Ldash) + Math.sin(Ldash)) * Math.tan(Latitude);
    return CT.dmS2D(0, 0, vvalue);
  };
  CAAFK5.correctionInLatitude = function(Longitude, JD) {
    var T = (JD - 2451545) / 36525;
    var Ldash = Longitude - 1.397 * T - 0.00031 * T * T;
    Ldash = CT.d2R(Ldash);
    Longitude = CT.d2R(Longitude);
    var vvalue = 0.03916 * (Math.cos(Ldash) - Math.sin(Ldash));
    return CT.dmS2D(0, 0, vvalue);
  };
  CAAFK5.convertVSOPToFK5J2000 = function(vvalue) {
    var result = new C3D();
    result.x = vvalue.x + 4.4036E-07 * vvalue.y - 1.90919E-07 * vvalue.z;
    result.y = -4.79966E-07 * vvalue.x + 0.917482137087 * vvalue.y - 0.397776982902 * vvalue.z;
    result.z = 0.397776982902 * vvalue.y + 0.917482137087 * vvalue.z;
    return result;
  };
  CAAFK5.convertVSOPToFK5B1950 = function(vvalue) {
    var result = new C3D();
    result.x = 0.999925702634 * vvalue.x + 0.012189716217 * vvalue.y + 1.1134016E-05 * vvalue.z;
    result.y = -0.011179418036 * vvalue.x + 0.917413998946 * vvalue.y - 0.397777041885 * vvalue.z;
    result.z = -0.004859003787 * vvalue.x + 0.397747363646 * vvalue.y + 0.917482111428 * vvalue.z;
    return result;
  };
  CAAFK5.convertVSOPToFK5AnyEquinox = function(vvalue, JDEquinox) {
    var t = (JDEquinox - 2451545) / 36525;
    var tsquared = t * t;
    var tcubed = tsquared * t;
    var sigma = 2306.2181 * t + 0.30188 * tsquared + 0.017988 * tcubed;
    sigma = CT.d2R(CT.dmS2D(0, 0, sigma));
    var zeta = 2306.2181 * t + 1.09468 * tsquared + 0.018203 * tcubed;
    zeta = CT.d2R(CT.dmS2D(0, 0, zeta));
    var phi = 2004.3109 * t - 0.42665 * tsquared - 0.041833 * tcubed;
    phi = CT.d2R(CT.dmS2D(0, 0, phi));
    var cossigma = Math.cos(sigma);
    var coszeta = Math.cos(zeta);
    var cosphi = Math.cos(phi);
    var sinsigma = Math.sin(sigma);
    var sinzeta = Math.sin(zeta);
    var sinphi = Math.sin(phi);
    var xx = cossigma * coszeta * cosphi - sinsigma * sinzeta;
    var xy = sinsigma * coszeta + cossigma * sinzeta * cosphi;
    var xz = cossigma * sinphi;
    var yx = -cossigma * sinzeta - sinsigma * coszeta * cosphi;
    var yy = cossigma * coszeta - sinsigma * sinzeta * cosphi;
    var yz = -sinsigma * sinphi;
    var zx = -coszeta * sinphi;
    var zy = -sinzeta * sinphi;
    var zz = cosphi;
    var result = new C3D();
    result.x = xx * vvalue.x + yx * vvalue.y + zx * vvalue.z;
    result.y = xy * vvalue.x + yy * vvalue.y + zy * vvalue.z;
    result.z = xz * vvalue.x + yz * vvalue.y + zz * vvalue.z;
    return result;
  };
  var CAAFK5$ = {

  };


  // GMD

  function GMD() {
    this.meanLongitude = 0;
    this.trueLongitude = 0;
    this.tropicalLongitude = 0;
    this.equatorialLatitude = 0;
    this.r = 0;
    this.eclipticRectangularCoordinates = new C3D();
    this.trueRectangularCoordinates = new C3D();
    this.apparentRectangularCoordinates = new C3D();
    this.bInTransit = false;
    this.bInOccultation = false;
    this.bInEclipse = false;
    this.bInShadowTransit = false;
    this.apparentShadowRectangularCoordinates = new C3D();
    this.meanLongitude = 0;
    this.trueLongitude = 0;
    this.tropicalLongitude = 0;
    this.equatorialLatitude = 0;
    this.r = 0;
    this.bInTransit = false;
    this.bInOccultation = false;
    this.bInEclipse = false;
    this.bInShadowTransit = false;
  }
  var GMD$ = {

  };


  // GMDS

  function GMDS() {
    this.satellite1 = new GMD();
    this.satellite2 = new GMD();
    this.satellite3 = new GMD();
    this.satellite4 = new GMD();
  }
  var GMDS$ = {

  };


  // GM

  function GM() {
  }
  GM.calculate = function(JD) {
    var sunlong = CAASun.geometricEclipticLongitude(JD);
    var sunlongrad = CT.d2R(sunlong);
    var beta = CAASun.geometricEclipticLatitude(JD);
    var betarad = CT.d2R(beta);
    var R = CAAEarth.radiusVector(JD);
    var DELTA = 5;
    var PreviousEarthLightTravelTime = 0;
    var EarthLightTravelTime = ELL.distanceToLightTime(DELTA);
    var JD1 = JD - EarthLightTravelTime;
    var bIterate = true;
    var x = 0;
    var y = 0;
    var z = 0;
    var l = 0;
    var lrad = 0;
    var b = 0;
    var brad = 0;
    var r = 0;
    while (bIterate) {
      l = CAAJupiter.eclipticLongitude(JD1);
      lrad = CT.d2R(l);
      b = CAAJupiter.eclipticLatitude(JD1);
      brad = CT.d2R(b);
      r = CAAJupiter.radiusVector(JD1);
      x = r * Math.cos(brad) * Math.cos(lrad) + R * Math.cos(sunlongrad);
      y = r * Math.cos(brad) * Math.sin(lrad) + R * Math.sin(sunlongrad);
      z = r * Math.sin(brad) + R * Math.sin(betarad);
      DELTA = Math.sqrt(x * x + y * y + z * z);
      EarthLightTravelTime = ELL.distanceToLightTime(DELTA);
      bIterate = (Math.abs(EarthLightTravelTime - PreviousEarthLightTravelTime) > 2E-06);
      if (bIterate) {
        JD1 = JD - EarthLightTravelTime;
        PreviousEarthLightTravelTime = EarthLightTravelTime;
      }
    }
    var details1 = GM.calculateHelper(JD, sunlongrad, betarad, R);
    GM.fillInPhenomenaDetails(details1.satellite1);
    GM.fillInPhenomenaDetails(details1.satellite2);
    GM.fillInPhenomenaDetails(details1.satellite3);
    GM.fillInPhenomenaDetails(details1.satellite4);
    JD1 = JD - EarthLightTravelTime;
    l = CAAJupiter.eclipticLongitude(JD1);
    lrad = CT.d2R(l);
    b = CAAJupiter.eclipticLatitude(JD1);
    brad = CT.d2R(b);
    r = CAAJupiter.radiusVector(JD1);
    x = r * Math.cos(brad) * Math.cos(lrad);
    y = r * Math.cos(brad) * Math.sin(lrad);
    z = r * Math.sin(brad);
    DELTA = Math.sqrt(x * x + y * y + z * z);
    var SunLightTravelTime = ELL.distanceToLightTime(DELTA);
    var details2 = GM.calculateHelper(JD + SunLightTravelTime - EarthLightTravelTime, sunlongrad, betarad, 0);
    GM.fillInPhenomenaDetails(details2.satellite1);
    GM.fillInPhenomenaDetails(details2.satellite2);
    GM.fillInPhenomenaDetails(details2.satellite3);
    GM.fillInPhenomenaDetails(details2.satellite4);
    details1.satellite1.bInEclipse = details2.satellite1.bInOccultation;
    details1.satellite2.bInEclipse = details2.satellite2.bInOccultation;
    details1.satellite3.bInEclipse = details2.satellite3.bInOccultation;
    details1.satellite4.bInEclipse = details2.satellite4.bInOccultation;
    details1.satellite1.bInShadowTransit = details2.satellite1.bInTransit;
    details1.satellite2.bInShadowTransit = details2.satellite2.bInTransit;
    details1.satellite3.bInShadowTransit = details2.satellite3.bInTransit;
    details1.satellite4.bInShadowTransit = details2.satellite4.bInTransit;
    details1.satellite1.apparentShadowRectangularCoordinates = details2.satellite1.apparentRectangularCoordinates;
    details1.satellite2.apparentShadowRectangularCoordinates = details2.satellite2.apparentRectangularCoordinates;
    details1.satellite3.apparentShadowRectangularCoordinates = details2.satellite3.apparentRectangularCoordinates;
    details1.satellite4.apparentShadowRectangularCoordinates = details2.satellite4.apparentRectangularCoordinates;
    return details1;
  };
  GM.calculateHelper = function(JD, sunlongrad, betarad, R) {
    var details = new GMDS();
    var DELTA = 5;
    var PreviousLightTravelTime = 0;
    var LightTravelTime = ELL.distanceToLightTime(DELTA);
    var x = 0;
    var y = 0;
    var z = 0;
    var l = 0;
    var lrad = 0;
    var b = 0;
    var brad = 0;
    var r = 0;
    var JD1 = JD - LightTravelTime;
    var bIterate = true;
    while (bIterate) {
      l = CAAJupiter.eclipticLongitude(JD1);
      lrad = CT.d2R(l);
      b = CAAJupiter.eclipticLatitude(JD1);
      brad = CT.d2R(b);
      r = CAAJupiter.radiusVector(JD1);
      x = r * Math.cos(brad) * Math.cos(lrad) + R * Math.cos(sunlongrad);
      y = r * Math.cos(brad) * Math.sin(lrad) + R * Math.sin(sunlongrad);
      z = r * Math.sin(brad) + R * Math.sin(betarad);
      DELTA = Math.sqrt(x * x + y * y + z * z);
      LightTravelTime = ELL.distanceToLightTime(DELTA);
      bIterate = (Math.abs(LightTravelTime - PreviousLightTravelTime) > 2E-06);
      if (bIterate) {
        JD1 = JD - LightTravelTime;
        PreviousLightTravelTime = LightTravelTime;
      }
    }
    var lambda0 = Math.atan2(y, x);
    var beta0 = Math.atan(z / Math.sqrt(x * x + y * y));
    var t = JD - 2443000.5 - LightTravelTime;
    var l1 = 106.07719 + 203.48895579 * t;
    var l1rad = CT.d2R(l1);
    var l2 = 175.73161 + 101.374724735 * t;
    var l2rad = CT.d2R(l2);
    var l3 = 120.55883 + 50.317609207 * t;
    var l3rad = CT.d2R(l3);
    var l4 = 84.44459 + 21.571071177 * t;
    var l4rad = CT.d2R(l4);
    var pi1 = CT.d2R(CT.m360(97.0881 + 0.16138586 * t));
    var pi2 = CT.d2R(CT.m360(154.8663 + 0.04726307 * t));
    var pi3 = CT.d2R(CT.m360(188.184 + 0.00712734 * t));
    var pi4 = CT.d2R(CT.m360(335.2868 + 0.00184 * t));
    var w1 = 312.3346 - 0.13279386 * t;
    var w1rad = CT.d2R(w1);
    var w2 = 100.4411 - 0.03263064 * t;
    var w2rad = CT.d2R(w2);
    var w3 = 119.1942 - 0.00717703 * t;
    var w3rad = CT.d2R(w3);
    var w4 = 322.6186 - 0.00175934 * t;
    var w4rad = CT.d2R(w4);
    var GAMMA = 0.33033 * Math.sin(CT.d2R(163.679 + 0.0010512 * t)) + 0.03439 * Math.sin(CT.d2R(34.486 - 0.0161731 * t));
    var philambda = CT.d2R(199.6766 + 0.1737919 * t);
    var psi = CT.d2R(316.5182 - 2.08E-06 * t);
    var G = CT.d2R(30.23756 + 0.0830925701 * t + GAMMA);
    var Gdash = CT.d2R(31.97853 + 0.0334597339 * t);
    var PI = CT.d2R(13.469942);
    var Sigma1 = 0.47259 * Math.sin(2 * (l1rad - l2rad)) + -0.03478 * Math.sin(pi3 - pi4) + 0.01081 * Math.sin(l2rad - 2 * l3rad + pi3) + 0.00738 * Math.sin(philambda) + 0.00713 * Math.sin(l2rad - 2 * l3rad + pi2) + -0.00674 * Math.sin(pi1 + pi3 - 2 * PI - 2 * G) + 0.00666 * Math.sin(l2rad - 2 * l3rad + pi4) + 0.00445 * Math.sin(l1rad - pi3) + -0.00354 * Math.sin(l1rad - l2rad) + -0.00317 * Math.sin(2 * psi - 2 * PI) + 0.00265 * Math.sin(l1rad - pi4) + -0.00186 * Math.sin(G) + 0.00162 * Math.sin(pi2 - pi3) + 0.00158 * Math.sin(4 * (l1rad - l2rad)) + -0.00155 * Math.sin(l1rad - l3rad) + -0.00138 * Math.sin(psi + w3rad - 2 * PI - 2 * G) + -0.00115 * Math.sin(2 * (l1rad - 2 * l2rad + w2rad)) + 0.00089 * Math.sin(pi2 - pi4) + 0.00085 * Math.sin(l1rad + pi3 - 2 * PI - 2 * G) + 0.00083 * Math.sin(w2rad - w3rad) + 0.00053 * Math.sin(psi - w2rad);
    var Sigma2 = 1.06476 * Math.sin(2 * (l2rad - l3rad)) + 0.04256 * Math.sin(l1rad - 2 * l2rad + pi3) + 0.03581 * Math.sin(l2rad - pi3) + 0.02395 * Math.sin(l1rad - 2 * l2rad + pi4) + 0.01984 * Math.sin(l2rad - pi4) + -0.01778 * Math.sin(philambda) + 0.01654 * Math.sin(l2rad - pi2) + 0.01334 * Math.sin(l2rad - 2 * l3rad + pi2) + 0.01294 * Math.sin(pi3 - pi4) + -0.01142 * Math.sin(l2rad - l3rad) + -0.01057 * Math.sin(G) + -0.00775 * Math.sin(2 * (psi - PI)) + 0.00524 * Math.sin(2 * (l1rad - l2rad)) + -0.0046 * Math.sin(l1rad - l3rad) + 0.00316 * Math.sin(psi - 2 * G + w3rad - 2 * PI) + -0.00203 * Math.sin(pi1 + pi3 - 2 * PI - 2 * G) + 0.00146 * Math.sin(psi - w3rad) + -0.00145 * Math.sin(2 * G) + 0.00125 * Math.sin(psi - w4rad) + -0.00115 * Math.sin(l1rad - 2 * l3rad + pi3) + -0.00094 * Math.sin(2 * (l2rad - w2rad)) + 0.00086 * Math.sin(2 * (l1rad - 2 * l2rad + w2rad)) + -0.00086 * Math.sin(5 * Gdash - 2 * G + CT.d2R(52.225)) + -0.00078 * Math.sin(l2rad - l4rad) + -0.00064 * Math.sin(3 * l3rad - 7 * l4rad + 4 * pi4) + 0.00064 * Math.sin(pi1 - pi4) + -0.00063 * Math.sin(l1rad - 2 * l3rad + pi4) + 0.00058 * Math.sin(w3rad - w4rad) + 0.00056 * Math.sin(2 * (psi - PI - G)) + 0.00056 * Math.sin(2 * (l2rad - l4rad)) + 0.00055 * Math.sin(2 * (l1rad - l3rad)) + 0.00052 * Math.sin(3 * l3rad - 7 * l4rad + pi3 + 3 * pi4) + -0.00043 * Math.sin(l1rad - pi3) + 0.00041 * Math.sin(5 * (l2rad - l3rad)) + 0.00041 * Math.sin(pi4 - PI) + 0.00032 * Math.sin(w2rad - w3rad) + 0.00032 * Math.sin(2 * (l3rad - G - PI));
    var Sigma3 = 0.1649 * Math.sin(l3rad - pi3) + 0.09081 * Math.sin(l3rad - pi4) + -0.06907 * Math.sin(l2rad - l3rad) + 0.03784 * Math.sin(pi3 - pi4) + 0.01846 * Math.sin(2 * (l3rad - l4rad)) + -0.0134 * Math.sin(G) + -0.01014 * Math.sin(2 * (psi - PI)) + 0.00704 * Math.sin(l2rad - 2 * l3rad + pi3) + -0.0062 * Math.sin(l2rad - 2 * l3rad + pi2) + -0.00541 * Math.sin(l3rad - l4rad) + 0.00381 * Math.sin(l2rad - 2 * l3rad + pi4) + 0.00235 * Math.sin(psi - w3rad) + 0.00198 * Math.sin(psi - w4rad) + 0.00176 * Math.sin(philambda) + 0.0013 * Math.sin(3 * (l3rad - l4rad)) + 0.00125 * Math.sin(l1rad - l3rad) + -0.00119 * Math.sin(5 * Gdash - 2 * G + CT.d2R(52.225)) + 0.00109 * Math.sin(l1rad - l2rad) + -0.001 * Math.sin(3 * l3rad - 7 * l4rad + 4 * pi4) + 0.00091 * Math.sin(w3rad - w4rad) + 0.0008 * Math.sin(3 * l3rad - 7 * l4rad + pi3 + 3 * pi4) + -0.00075 * Math.sin(2 * l2rad - 3 * l3rad + pi3) + 0.00072 * Math.sin(pi1 + pi3 - 2 * PI - 2 * G) + 0.00069 * Math.sin(pi4 - PI) + -0.00058 * Math.sin(2 * l3rad - 3 * l4rad + pi4) + -0.00057 * Math.sin(l3rad - 2 * l4rad + pi4) + 0.00056 * Math.sin(l3rad + pi3 - 2 * PI - 2 * G) + -0.00052 * Math.sin(l2rad - 2 * l3rad + pi1) + -0.0005 * Math.sin(pi2 - pi3) + 0.00048 * Math.sin(l3rad - 2 * l4rad + pi3) + -0.00045 * Math.sin(2 * l2rad - 3 * l3rad + pi4) + -0.00041 * Math.sin(pi2 - pi4) + -0.00038 * Math.sin(2 * G) + -0.00037 * Math.sin(pi3 - pi4 + w3rad - w4rad) + -0.00032 * Math.sin(3 * l3rad - 7 * l4rad + 2 * pi3 + 2 * pi4) + 0.0003 * Math.sin(4 * (l3rad - l4rad)) + 0.00029 * Math.sin(l3rad + pi4 - 2 * PI - 2 * G) + -0.00028 * Math.sin(w3rad + psi - 2 * PI - 2 * G) + 0.00026 * Math.sin(l3rad - PI - G) + 0.00024 * Math.sin(l2rad - 3 * l3rad + 2 * l4rad) + 0.00021 * Math.sin(l3rad - PI - G) + -0.00021 * Math.sin(l3rad - pi2) + 0.00017 * Math.sin(2 * (l3rad - pi3));
    var Sigma4 = 0.84287 * Math.sin(l4rad - pi4) + 0.03431 * Math.sin(pi4 - pi3) + -0.03305 * Math.sin(2 * (psi - PI)) + -0.03211 * Math.sin(G) + -0.01862 * Math.sin(l4rad - pi3) + 0.01186 * Math.sin(psi - w4rad) + 0.00623 * Math.sin(l4rad + pi4 - 2 * G - 2 * PI) + 0.00387 * Math.sin(2 * (l4rad - pi4)) + -0.00284 * Math.sin(5 * Gdash - 2 * G + CT.d2R(52.225)) + -0.00234 * Math.sin(2 * (psi - pi4)) + -0.00223 * Math.sin(l3rad - l4rad) + -0.00208 * Math.sin(l4rad - PI) + 0.00178 * Math.sin(psi + w4rad - 2 * pi4) + 0.00134 * Math.sin(pi4 - PI) + 0.00125 * Math.sin(2 * (l4rad - G - PI)) + -0.00117 * Math.sin(2 * G) + -0.00112 * Math.sin(2 * (l3rad - l4rad)) + 0.00107 * Math.sin(3 * l3rad - 7 * l4rad + 4 * pi4) + 0.00102 * Math.sin(l4rad - G - PI) + 0.00096 * Math.sin(2 * l4rad - psi - w4rad) + 0.00087 * Math.sin(2 * (psi - w4rad)) + -0.00085 * Math.sin(3 * l3rad - 7 * l4rad + pi3 + 3 * pi4) + 0.00085 * Math.sin(l3rad - 2 * l4rad + pi4) + -0.00081 * Math.sin(2 * (l4rad - psi)) + 0.00071 * Math.sin(l4rad + pi4 - 2 * PI - 3 * G) + 0.00061 * Math.sin(l1rad - l4rad) + -0.00056 * Math.sin(psi - w3rad) + -0.00054 * Math.sin(l3rad - 2 * l4rad + pi3) + 0.00051 * Math.sin(l2rad - l4rad) + 0.00042 * Math.sin(2 * (psi - G - PI)) + 0.00039 * Math.sin(2 * (pi4 - w4rad)) + 0.00036 * Math.sin(psi + PI - pi4 - w4rad) + 0.00035 * Math.sin(2 * Gdash - G + CT.d2R(188.37)) + -0.00035 * Math.sin(l4rad - pi4 + 2 * PI - 2 * psi) + -0.00032 * Math.sin(l4rad + pi4 - 2 * PI - G) + 0.0003 * Math.sin(2 * Gdash - 2 * G + CT.d2R(149.15)) + 0.00029 * Math.sin(3 * l3rad - 7 * l4rad + 2 * pi3 + 2 * pi4) + 0.00028 * Math.sin(l4rad - pi4 + 2 * psi - 2 * PI) + -0.00028 * Math.sin(2 * (l4rad - w4rad)) + -0.00027 * Math.sin(pi3 - pi4 + w3rad - w4rad) + -0.00026 * Math.sin(5 * Gdash - 3 * G + CT.d2R(188.37)) + 0.00025 * Math.sin(w4rad - w3rad) + -0.00025 * Math.sin(l2rad - 3 * l3rad + 2 * l4rad) + -0.00023 * Math.sin(3 * (l3rad - l4rad)) + 0.00021 * Math.sin(2 * l4rad - 2 * PI - 3 * G) + -0.00021 * Math.sin(2 * l3rad - 3 * l4rad + pi4) + 0.00019 * Math.sin(l4rad - pi4 - G) + -0.00019 * Math.sin(2 * l4rad - pi3 - pi4) + -0.00018 * Math.sin(l4rad - pi4 + G) + -0.00016 * Math.sin(l4rad + pi3 - 2 * PI - 2 * G);
    details.satellite1.meanLongitude = CT.m360(l1);
    details.satellite1.trueLongitude = CT.m360(l1 + Sigma1);
    var L1 = CT.d2R(details.satellite1.trueLongitude);
    details.satellite2.meanLongitude = CT.m360(l2);
    details.satellite2.trueLongitude = CT.m360(l2 + Sigma2);
    var L2 = CT.d2R(details.satellite2.trueLongitude);
    details.satellite3.meanLongitude = CT.m360(l3);
    details.satellite3.trueLongitude = CT.m360(l3 + Sigma3);
    var L3 = CT.d2R(details.satellite3.trueLongitude);
    details.satellite4.meanLongitude = CT.m360(l4);
    details.satellite4.trueLongitude = CT.m360(l4 + Sigma4);
    var L4 = CT.d2R(details.satellite4.trueLongitude);
    var B1 = Math.atan(0.0006393 * Math.sin(L1 - w1rad) + 0.0001825 * Math.sin(L1 - w2rad) + 3.29E-05 * Math.sin(L1 - w3rad) + -3.11E-05 * Math.sin(L1 - psi) + 9.3E-06 * Math.sin(L1 - w4rad) + 7.5E-06 * Math.sin(3 * L1 - 4 * l2rad - 1.9927 * Sigma1 + w2rad) + 4.6E-06 * Math.sin(L1 + psi - 2 * PI - 2 * G));
    details.satellite1.equatorialLatitude = CT.r2D(B1);
    var B2 = Math.atan(0.0081004 * Math.sin(L2 - w2rad) + 0.0004512 * Math.sin(L2 - w3rad) + -0.0003284 * Math.sin(L2 - psi) + 0.000116 * Math.sin(L2 - w4rad) + 2.72E-05 * Math.sin(l1rad - 2 * l3rad + 1.0146 * Sigma2 + w2rad) + -1.44E-05 * Math.sin(L2 - w1rad) + 1.43E-05 * Math.sin(L2 + psi - 2 * PI - 2 * G) + 3.5E-06 * Math.sin(L2 - psi + G) + -2.8E-06 * Math.sin(l1rad - 2 * l3rad + 1.0146 * Sigma2 + w3rad));
    details.satellite2.equatorialLatitude = CT.r2D(B2);
    var B3 = Math.atan(0.0032402 * Math.sin(L3 - w3rad) + -0.0016911 * Math.sin(L3 - psi) + 0.0006847 * Math.sin(L3 - w4rad) + -0.0002797 * Math.sin(L3 - w2rad) + 3.21E-05 * Math.sin(L3 + psi - 2 * PI - 2 * G) + 5.1E-06 * Math.sin(L3 - psi + G) + -4.5E-06 * Math.sin(L3 - psi - G) + -4.5E-06 * Math.sin(L3 + psi - 2 * PI) + 3.7E-06 * Math.sin(L3 + psi - 2 * PI - 3 * G) + 3E-06 * Math.sin(2 * l2rad - 3 * L3 + 4.03 * Sigma3 + w2rad) + -2.1E-06 * Math.sin(2 * l2rad - 3 * L3 + 4.03 * Sigma3 + w3rad));
    details.satellite3.equatorialLatitude = CT.r2D(B3);
    var B4 = Math.atan(-0.0076579 * Math.sin(L4 - psi) + 0.0044134 * Math.sin(L4 - w4rad) + -0.0005112 * Math.sin(L4 - w3rad) + 7.73E-05 * Math.sin(L4 + psi - 2 * PI - 2 * G) + 1.04E-05 * Math.sin(L4 - psi + G) + -1.02E-05 * Math.sin(L4 - psi - G) + 8.8E-06 * Math.sin(L4 + psi - 2 * PI - 3 * G) + -3.8E-06 * Math.sin(L4 + psi - 2 * PI - G));
    details.satellite4.equatorialLatitude = CT.r2D(B4);
    details.satellite1.r = 5.90569 * (1 + (-0.0041339 * Math.cos(2 * (l1rad - l2rad)) + -3.87E-05 * Math.cos(l1rad - pi3) + -2.14E-05 * Math.cos(l1rad - pi4) + 1.7E-05 * Math.cos(l1rad - l2rad) + -1.31E-05 * Math.cos(4 * (l1rad - l2rad)) + 1.06E-05 * Math.cos(l1rad - l3rad) + -6.6E-06 * Math.cos(l1rad + pi3 - 2 * PI - 2 * G)));
    details.satellite2.r = 9.39657 * (1 + (0.0093848 * Math.cos(l1rad - l2rad) + -0.0003116 * Math.cos(l2rad - pi3) + -0.0001744 * Math.cos(l2rad - pi4) + -0.0001442 * Math.cos(l2rad - pi2) + 5.53E-05 * Math.cos(l2rad - l3rad) + 5.23E-05 * Math.cos(l1rad - l3rad) + -2.9E-05 * Math.cos(2 * (l1rad - l2rad)) + 1.64E-05 * Math.cos(2 * (l2rad - w2rad)) + 1.07E-05 * Math.cos(l1rad - 2 * l3rad + pi3) + -1.02E-05 * Math.cos(l2rad - pi1) + -9.1E-06 * Math.cos(2 * (l1rad - l3rad))));
    details.satellite3.r = 14.98832 * (1 + (-0.0014388 * Math.cos(l3rad - pi3) + -0.0007919 * Math.cos(l3rad - pi4) + 0.0006342 * Math.cos(l2rad - l3rad) + -0.0001761 * Math.cos(2 * (l3rad - l4rad)) + 2.94E-05 * Math.cos(l3rad - l4rad) + -1.56E-05 * Math.cos(3 * (l3rad - l4rad)) + 1.56E-05 * Math.cos(l1rad - l3rad) + -1.53E-05 * Math.cos(l1rad - l2rad) + 7E-06 * Math.cos(2 * l2rad - 3 * l3rad + pi3) + -5.1E-06 * Math.cos(l3rad + pi3 - 2 * PI - 2 * G)));
    details.satellite4.r = 26.36273 * (1 + (-0.0073546 * Math.cos(l4rad - pi4) + 0.0001621 * Math.cos(l4rad - pi3) + 9.74E-05 * Math.cos(l3rad - l4rad) + -5.43E-05 * Math.cos(l4rad + pi4 - 2 * PI - 2 * G) + -2.71E-05 * Math.cos(2 * (l4rad - pi4)) + 1.82E-05 * Math.cos(l4rad - PI) + 1.77E-05 * Math.cos(2 * (l3rad - l4rad)) + -1.67E-05 * Math.cos(2 * l4rad - psi - w4rad) + 1.67E-05 * Math.cos(psi - w4rad) + -1.55E-05 * Math.cos(2 * (l4rad - PI - G)) + 1.42E-05 * Math.cos(2 * (l4rad - psi)) + 1.05E-05 * Math.cos(l1rad - l4rad) + 9.2E-06 * Math.cos(l2rad - l4rad) + -8.9E-06 * Math.cos(l4rad - PI - G) + -6.2E-06 * Math.cos(l4rad + pi4 - 2 * PI - 3 * G) + 4.8E-06 * Math.cos(2 * (l4rad - w4rad))));
    var T0 = (JD - 2433282.423) / 36525;
    var P = CT.d2R(1.3966626 * T0 + 0.0003088 * T0 * T0);
    L1 += P;
    details.satellite1.tropicalLongitude = CT.m360(CT.r2D(L1));
    L2 += P;
    details.satellite2.tropicalLongitude = CT.m360(CT.r2D(L2));
    L3 += P;
    details.satellite3.tropicalLongitude = CT.m360(CT.r2D(L3));
    L4 += P;
    details.satellite4.tropicalLongitude = CT.m360(CT.r2D(L4));
    psi += P;
    var T = (JD - 2415020.5) / 36525;
    var I = 3.120262 + 0.0006 * T;
    var Irad = CT.d2R(I);
    var X1 = details.satellite1.r * Math.cos(L1 - psi) * Math.cos(B1);
    var X2 = details.satellite2.r * Math.cos(L2 - psi) * Math.cos(B2);
    var X3 = details.satellite3.r * Math.cos(L3 - psi) * Math.cos(B3);
    var X4 = details.satellite4.r * Math.cos(L4 - psi) * Math.cos(B4);
    var X5 = 0;
    var Y1 = details.satellite1.r * Math.sin(L1 - psi) * Math.cos(B1);
    var Y2 = details.satellite2.r * Math.sin(L2 - psi) * Math.cos(B2);
    var Y3 = details.satellite3.r * Math.sin(L3 - psi) * Math.cos(B3);
    var Y4 = details.satellite4.r * Math.sin(L4 - psi) * Math.cos(B4);
    var Y5 = 0;
    var Z1 = details.satellite1.r * Math.sin(B1);
    var Z2 = details.satellite2.r * Math.sin(B2);
    var Z3 = details.satellite3.r * Math.sin(B3);
    var Z4 = details.satellite4.r * Math.sin(B4);
    var Z5 = 1;
    var omega = CT.d2R(EPO.jupiterLongitudeAscendingNode(JD));
    var i = CT.d2R(EPO.jupiterInclination(JD));
    var A6 = 0;
    var B6 = 0;
    var C6 = 0;
    var north = new C3D();
    var abc = GM.rotations(X5, Y5, Z5, Irad, psi, i, omega, lambda0, beta0, north);
    A6 = abc[0];
    B6 = abc[1];
    C6 = abc[2];
    var D = Math.atan2(A6, C6);
    abc = GM.rotations(X1, Y1, Z1, Irad, psi, i, omega, lambda0, beta0, details.satellite1.eclipticRectangularCoordinates);
    A6 = abc[0];
    B6 = abc[1];
    C6 = abc[2];
    details.satellite1.trueRectangularCoordinates.x = A6 * Math.cos(D) - C6 * Math.sin(D);
    details.satellite1.trueRectangularCoordinates.y = A6 * Math.sin(D) + C6 * Math.cos(D);
    details.satellite1.trueRectangularCoordinates.z = B6;
    abc = GM.rotations(X2, Y2, Z2, Irad, psi, i, omega, lambda0, beta0, details.satellite2.eclipticRectangularCoordinates);
    A6 = abc[0];
    B6 = abc[1];
    C6 = abc[2];
    details.satellite2.trueRectangularCoordinates.x = A6 * Math.cos(D) - C6 * Math.sin(D);
    details.satellite2.trueRectangularCoordinates.y = A6 * Math.sin(D) + C6 * Math.cos(D);
    details.satellite2.trueRectangularCoordinates.z = B6;
    abc = GM.rotations(X3, Y3, Z3, Irad, psi, i, omega, lambda0, beta0, details.satellite3.eclipticRectangularCoordinates);
    A6 = abc[0];
    B6 = abc[1];
    C6 = abc[2];
    details.satellite3.trueRectangularCoordinates.x = A6 * Math.cos(D) - C6 * Math.sin(D);
    details.satellite3.trueRectangularCoordinates.y = A6 * Math.sin(D) + C6 * Math.cos(D);
    details.satellite3.trueRectangularCoordinates.z = B6;
    abc = GM.rotations(X4, Y4, Z4, Irad, psi, i, omega, lambda0, beta0, details.satellite4.eclipticRectangularCoordinates);
    A6 = abc[0];
    B6 = abc[1];
    C6 = abc[2];
    details.satellite4.trueRectangularCoordinates.x = A6 * Math.cos(D) - C6 * Math.sin(D);
    details.satellite4.trueRectangularCoordinates.y = A6 * Math.sin(D) + C6 * Math.cos(D);
    details.satellite4.trueRectangularCoordinates.z = B6;
    details.satellite1.apparentRectangularCoordinates.x = details.satellite1.trueRectangularCoordinates.x + Math.abs(details.satellite1.trueRectangularCoordinates.z) / 17295 * Math.sqrt(1 - (details.satellite1.trueRectangularCoordinates.x / details.satellite1.r) * (details.satellite1.trueRectangularCoordinates.x / details.satellite1.r));
    details.satellite1.apparentRectangularCoordinates.y = details.satellite1.trueRectangularCoordinates.y;
    details.satellite1.apparentRectangularCoordinates.z = details.satellite1.trueRectangularCoordinates.z;
    details.satellite2.apparentRectangularCoordinates.x = details.satellite2.trueRectangularCoordinates.x + Math.abs(details.satellite2.trueRectangularCoordinates.z) / 21819 * Math.sqrt(1 - (details.satellite2.trueRectangularCoordinates.x / details.satellite2.r) * (details.satellite2.trueRectangularCoordinates.x / details.satellite2.r));
    details.satellite2.apparentRectangularCoordinates.y = details.satellite2.trueRectangularCoordinates.y;
    details.satellite2.apparentRectangularCoordinates.z = details.satellite2.trueRectangularCoordinates.z;
    details.satellite3.apparentRectangularCoordinates.x = details.satellite3.trueRectangularCoordinates.x + Math.abs(details.satellite3.trueRectangularCoordinates.z) / 27558 * Math.sqrt(1 - (details.satellite3.trueRectangularCoordinates.x / details.satellite3.r) * (details.satellite3.trueRectangularCoordinates.x / details.satellite3.r));
    details.satellite3.apparentRectangularCoordinates.y = details.satellite3.trueRectangularCoordinates.y;
    details.satellite3.apparentRectangularCoordinates.z = details.satellite3.trueRectangularCoordinates.z;
    details.satellite4.apparentRectangularCoordinates.x = details.satellite4.trueRectangularCoordinates.x + Math.abs(details.satellite4.trueRectangularCoordinates.z) / 36548 * Math.sqrt(1 - (details.satellite4.trueRectangularCoordinates.x / details.satellite4.r) * (details.satellite4.trueRectangularCoordinates.x / details.satellite4.r));
    details.satellite4.apparentRectangularCoordinates.y = details.satellite4.trueRectangularCoordinates.y;
    details.satellite4.apparentRectangularCoordinates.z = details.satellite4.trueRectangularCoordinates.z;
    var W = DELTA / (DELTA + details.satellite1.trueRectangularCoordinates.z / 2095);
    details.satellite1.apparentRectangularCoordinates.x *= W;
    details.satellite1.apparentRectangularCoordinates.y *= W;
    W = DELTA / (DELTA + details.satellite2.trueRectangularCoordinates.z / 2095);
    details.satellite2.apparentRectangularCoordinates.x *= W;
    details.satellite2.apparentRectangularCoordinates.y *= W;
    W = DELTA / (DELTA + details.satellite3.trueRectangularCoordinates.z / 2095);
    details.satellite3.apparentRectangularCoordinates.x *= W;
    details.satellite3.apparentRectangularCoordinates.y *= W;
    W = DELTA / (DELTA + details.satellite4.trueRectangularCoordinates.z / 2095);
    details.satellite4.apparentRectangularCoordinates.x *= W;
    details.satellite4.apparentRectangularCoordinates.y *= W;
    return details;
  };
  GM.rotations = function(X, Y, Z, I, psi, i, omega, lambda0, beta0, eclipticCoord) {
    var A6;
    var B6;
    var C6;
    var phi = psi - omega;
    var A1 = X;
    var B1 = Y * Math.cos(I) - Z * Math.sin(I);
    var C1 = Y * Math.sin(I) + Z * Math.cos(I);
    var A2 = A1 * Math.cos(phi) - B1 * Math.sin(phi);
    var B2 = A1 * Math.sin(phi) + B1 * Math.cos(phi);
    var C2 = C1;
    var A3 = A2;
    var B3 = B2 * Math.cos(i) - C2 * Math.sin(i);
    var C3 = B2 * Math.sin(i) + C2 * Math.cos(i);
    var A4 = A3 * Math.cos(omega) - B3 * Math.sin(omega);
    var B4 = A3 * Math.sin(omega) + B3 * Math.cos(omega);
    var C4 = C3;
    var JupiterRadiiToAU = 1 / 2095;
    eclipticCoord.x = A4 * JupiterRadiiToAU;
    eclipticCoord.y = B4 * JupiterRadiiToAU;
    eclipticCoord.z = C4 * JupiterRadiiToAU;
    var A5 = A4 * Math.sin(lambda0) - B4 * Math.cos(lambda0);
    var B5 = A4 * Math.cos(lambda0) + B4 * Math.sin(lambda0);
    var C5 = C4;
    A6 = A5;
    B6 = C5 * Math.sin(beta0) + B5 * Math.cos(beta0);
    C6 = C5 * Math.cos(beta0) - B5 * Math.sin(beta0);
    return [ A6, B6, C6 ];
  };
  GM.fillInPhenomenaDetails = function(detail) {
    var Y1 = 1.071374 * detail.apparentRectangularCoordinates.y;
    var r = Y1 * Y1 + detail.apparentRectangularCoordinates.x * detail.apparentRectangularCoordinates.x;
    if (r < 1) {
      if (detail.apparentRectangularCoordinates.z < 0) {
        detail.bInTransit = true;
        detail.bInOccultation = false;
      }
      else {
        detail.bInTransit = false;
        detail.bInOccultation = true;
      }
    }
    else {
      detail.bInTransit = false;
      detail.bInOccultation = false;
    }
  };
  var GM$ = {

  };


  // CAAGlobe

  function CAAGlobe() {
  }
  CAAGlobe.rhoSinThetaPrime = function(GeographicalLatitude, Height) {
    GeographicalLatitude = CT.d2R(GeographicalLatitude);
    var U = Math.atan(0.99664719 * Math.tan(GeographicalLatitude));
    return 0.99664719 * Math.sin(U) + (Height / 6378149 * Math.sin(GeographicalLatitude));
  };
  CAAGlobe.rhoCosThetaPrime = function(GeographicalLatitude, Height) {
    GeographicalLatitude = CT.d2R(GeographicalLatitude);
    var U = Math.atan(0.99664719 * Math.tan(GeographicalLatitude));
    return Math.cos(U) + (Height / 6378149 * Math.cos(GeographicalLatitude));
  };
  CAAGlobe.radiusOfParallelOfLatitude = function(GeographicalLatitude) {
    GeographicalLatitude = CT.d2R(GeographicalLatitude);
    var sinGeo = Math.sin(GeographicalLatitude);
    return (6378.14 * Math.cos(GeographicalLatitude)) / Math.sqrt(1 - 0.0066943847614084 * sinGeo * sinGeo);
  };
  CAAGlobe.radiusOfCurvature = function(GeographicalLatitude) {
    GeographicalLatitude = CT.d2R(GeographicalLatitude);
    var sinGeo = Math.sin(GeographicalLatitude);
    return (6378.14 * (1 - 0.0066943847614084)) / Math.pow((1 - 0.0066943847614084 * sinGeo * sinGeo), 1.5);
  };
  CAAGlobe.distanceBetweenPoints = function(GeographicalLatitude1, GeographicalLongitude1, GeographicalLatitude2, GeographicalLongitude2) {
    GeographicalLatitude1 = CT.d2R(GeographicalLatitude1);
    GeographicalLatitude2 = CT.d2R(GeographicalLatitude2);
    GeographicalLongitude1 = CT.d2R(GeographicalLongitude1);
    GeographicalLongitude2 = CT.d2R(GeographicalLongitude2);
    var F = (GeographicalLatitude1 + GeographicalLatitude2) / 2;
    var G = (GeographicalLatitude1 - GeographicalLatitude2) / 2;
    var lambda = (GeographicalLongitude1 - GeographicalLongitude2) / 2;
    var sinG = Math.sin(G);
    var cosG = Math.cos(G);
    var cosF = Math.cos(F);
    var sinF = Math.sin(F);
    var sinLambda = Math.sin(lambda);
    var cosLambda = Math.cos(lambda);
    var S = (sinG * sinG * cosLambda * cosLambda) + (cosF * cosF * sinLambda * sinLambda);
    var C = (cosG * cosG * cosLambda * cosLambda) + (sinF * sinF * sinLambda * sinLambda);
    var w = Math.atan(Math.sqrt(S / C));
    var R = Math.sqrt(S * C) / w;
    var D = 2 * w * 6378.14;
    var Hprime = (3 * R - 1) / (2 * C);
    var Hprime2 = (3 * R + 1) / (2 * S);
    var f = 0.00335281317789691;
    return D * (1 + (f * Hprime * sinF * sinF * cosG * cosG) - (f * Hprime2 * cosF * cosF * sinG * sinG));
  };
  var CAAGlobe$ = {

  };


  // IFR

  function IFR() {
  }
  IFR.phaseAngle = function(r, R, Delta) {
    return CT.m360(CT.r2D(Math.acos((r * r + Delta * Delta - R * R) / (2 * r * Delta))));
  };
  IFR.phaseAngle2 = function(R, R0, B, L, L0, Delta) {
    B = CT.d2R(B);
    L = CT.d2R(L);
    L0 = CT.d2R(L0);
    return CT.m360(CT.r2D(Math.acos((R - R0 * Math.cos(B) * Math.cos(L - L0)) / Delta)));
  };
  IFR.phaseAngleRectangular = function(x, y, z, B, L, Delta) {
    B = CT.d2R(B);
    L = CT.d2R(L);
    var cosB = Math.cos(B);
    return CT.m360(CT.r2D(Math.acos((x * cosB * Math.cos(L) + y * cosB * Math.sin(L) + z * Math.sin(B)) / Delta)));
  };
  IFR.illuminatedFraction = function(PhaseAngle) {
    PhaseAngle = CT.d2R(PhaseAngle);
    return (1 + Math.cos(PhaseAngle)) / 2;
  };
  IFR.illuminatedFraction2 = function(r, R, Delta) {
    return (((r + Delta) * (r + Delta) - R * R) / (4 * r * Delta));
  };
  IFR.mercuryMagnitudeMuller = function(r, Delta, i) {
    var I_50 = i - 50;
    return 1.16 + 5 * Util.log10(r * Delta) + 0.02838 * I_50 + 0.0001023 * I_50 * I_50;
  };
  IFR.venusMagnitudeMuller = function(r, Delta, i) {
    return -4 + 5 * Util.log10(r * Delta) + 0.01322 * i + 4.247E-07 * i * i * i;
  };
  IFR.marsMagnitudeMuller = function(r, Delta, i) {
    return -1.3 + 5 * Util.log10(r * Delta) + 0.01486 * i;
  };
  IFR.jupiterMagnitudeMuller = function(r, Delta) {
    return -8.93 + 5 * Util.log10(r * Delta);
  };
  IFR.saturnMagnitudeMuller = function(r, Delta, DeltaU, B) {
    B = CT.d2R(B);
    var sinB = Math.sin(B);
    return -8.68 + 5 * Util.log10(r * Delta) + 0.044 * Math.abs(DeltaU) - 2.6 * Math.sin(Math.abs(B)) + 1.25 * sinB * sinB;
  };
  IFR.uranusMagnitudeMuller = function(r, Delta) {
    return -6.85 + 5 * Util.log10(r * Delta);
  };
  IFR.neptuneMagnitudeMuller = function(r, Delta) {
    return -7.05 + 5 * Util.log10(r * Delta);
  };
  IFR.mercuryMagnitudeAA = function(r, Delta, i) {
    var i2 = i * i;
    var i3 = i2 * i;
    return -0.42 + 5 * Util.log10(r * Delta) + 0.038 * i - 0.000273 * i2 + 2E-06 * i3;
  };
  IFR.venusMagnitudeAA = function(r, Delta, i) {
    var i2 = i * i;
    var i3 = i2 * i;
    return -4.4 + 5 * Util.log10(r * Delta) + 0.0009 * i + 0.000239 * i2 - 6.5E-07 * i3;
  };
  IFR.marsMagnitudeAA = function(r, Delta, i) {
    return -1.52 + 5 * Util.log10(r * Delta) + 0.016 * i;
  };
  IFR.jupiterMagnitudeAA = function(r, Delta, i) {
    return -9.4 + 5 * Util.log10(r * Delta) + 0.005 * i;
  };
  IFR.saturnMagnitudeAA = function(r, Delta, DeltaU, B) {
    B = CT.d2R(B);
    var sinB = Math.sin(B);
    return -8.88 + 5 * Util.log10(r * Delta) + 0.044 * Math.abs(DeltaU) - 2.6 * Math.sin(Math.abs(B)) + 1.25 * sinB * sinB;
  };
  IFR.uranusMagnitudeAA = function(r, Delta) {
    return -7.19 + 5 * Util.log10(r * Delta);
  };
  IFR.neptuneMagnitudeAA = function(r, Delta) {
    return -6.87 + 5 * Util.log10(r * Delta);
  };
  IFR.plutoMagnitudeAA = function(r, Delta) {
    return -1 + 5 * Util.log10(r * Delta);
  };
  var IFR$ = {

  };


  // INTP

  function INTP() {
  }
  INTP.interpolate = function(n, Y1, Y2, Y3) {
    var a = Y2 - Y1;
    var b = Y3 - Y2;
    var c = Y1 + Y3 - 2 * Y2;
    return Y2 + n / 2 * (a + b + n * c);
  };
  INTP.interpolate2 = function(n, Y1, Y2, Y3, Y4, Y5) {
    var A = Y2 - Y1;
    var B = Y3 - Y2;
    var C = Y4 - Y3;
    var D = Y5 - Y4;
    var E = B - A;
    var F = C - B;
    var G = D - C;
    var H = F - E;
    var J = G - F;
    var K = J - H;
    var N2 = n * n;
    var N3 = N2 * n;
    var N4 = N3 * n;
    return Y3 + n * ((B + C) / 2 - (H + J) / 12) + N2 * (F / 2 - K / 24) + N3 * ((H + J) / 12) + N4 * (K / 24);
  };
  INTP.interpolateToHalves = function(Y1, Y2, Y3, Y4) {
    return (9 * (Y2 + Y3) - Y1 - Y4) / 16;
  };
  INTP.lagrangeInterpolate = function(X, n, pX, pY) {
    var V = 0;
    for (var i = 1; i <= n; i++) {
      var C = 1;
      for (var j = 1; j <= n; j++) {
        if (j !== i) {
          C = C * (X - pX[j - 1]) / (pX[i - 1] - pX[j - 1]);
        }
      }
      V += C * pY[i - 1];
    }
    return V;
  };
  INTP.zero = function(Y1, Y2, Y3) {
    var a = Y2 - Y1;
    var b = Y3 - Y2;
    var c = Y1 + Y3 - 2 * Y2;
    var bRecalc = true;
    var n0prev = 0;
    var n0 = n0prev;
    while (bRecalc) {
      n0 = -2 * Y2 / (a + b + c * n0prev);
      bRecalc = (Math.abs(n0 - n0prev) > 1E-12);
      if (bRecalc) {
        n0prev = n0;
      }
    }
    return n0;
  };
  INTP.zeroB = function(Y1, Y2, Y3, Y4, Y5) {
    var A = Y2 - Y1;
    var B = Y3 - Y2;
    var C = Y4 - Y3;
    var D = Y5 - Y4;
    var E = B - A;
    var F = C - B;
    var G = D - C;
    var H = F - E;
    var J = G - F;
    var K = J - H;
    var bRecalc = true;
    var n0prev = 0;
    var n0 = n0prev;
    while (bRecalc) {
      var n0prev2 = n0prev * n0prev;
      var n0prev3 = n0prev2 * n0prev;
      var n0prev4 = n0prev3 * n0prev;
      n0 = (-24 * Y3 + n0prev2 * (K - 12 * F) - 2 * n0prev3 * (H + J) - n0prev4 * K) / (2 * (6 * B + 6 * C - H - J));
      bRecalc = (Math.abs(n0 - n0prev) > 1E-12);
      if (bRecalc) {
        n0prev = n0;
      }
    }
    return n0;
  };
  INTP.zero2 = function(Y1, Y2, Y3) {
    var a = Y2 - Y1;
    var b = Y3 - Y2;
    var c = Y1 + Y3 - 2 * Y2;
    var bRecalc = true;
    var n0prev = 0;
    var n0 = n0prev;
    while (bRecalc) {
      var deltan0 = -(2 * Y2 + n0prev * (a + b + c * n0prev)) / (a + b + 2 * c * n0prev);
      n0 = n0prev + deltan0;
      bRecalc = (Math.abs(deltan0) > 1E-12);
      if (bRecalc) {
        n0prev = n0;
      }
    }
    return n0;
  };
  INTP.zero2B = function(Y1, Y2, Y3, Y4, Y5) {
    var A = Y2 - Y1;
    var B = Y3 - Y2;
    var C = Y4 - Y3;
    var D = Y5 - Y4;
    var E = B - A;
    var F = C - B;
    var G = D - C;
    var H = F - E;
    var J = G - F;
    var K = J - H;
    var M = K / 24;
    var N = (H + J) / 12;
    var P = F / 2 - M;
    var Q = (B + C) / 2 - N;
    var bRecalc = true;
    var n0prev = 0;
    var n0 = n0prev;
    while (bRecalc) {
      var n0prev2 = n0prev * n0prev;
      var n0prev3 = n0prev2 * n0prev;
      var n0prev4 = n0prev3 * n0prev;
      var deltan0 = -(M * n0prev4 + N * n0prev3 + P * n0prev2 + Q * n0prev + Y3) / (4 * M * n0prev3 + 3 * N * n0prev2 + 2 * P * n0prev + Q);
      n0 = n0prev + deltan0;
      bRecalc = (Math.abs(deltan0) > 1E-12);
      if (bRecalc) {
        n0prev = n0;
      }
    }
    return n0;
  };
  var INTP$ = {

  };


  // CAAJupiter

  function CAAJupiter() {
  }
  CAAJupiter.eclipticLongitude = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nL0Coefficients = GFX.g_L0JupiterCoefficients.length;
    var L0 = 0;
    var i;
    for (i = 0; i < nL0Coefficients; i++) {
      L0 += GFX.g_L0JupiterCoefficients[i].a * Math.cos(GFX.g_L0JupiterCoefficients[i].b + GFX.g_L0JupiterCoefficients[i].c * rho);
    }
    var nL1Coefficients = GFX.g_L1JupiterCoefficients.length;
    var L1 = 0;
    for (i = 0; i < nL1Coefficients; i++) {
      L1 += GFX.g_L1JupiterCoefficients[i].a * Math.cos(GFX.g_L1JupiterCoefficients[i].b + GFX.g_L1JupiterCoefficients[i].c * rho);
    }
    var nL2Coefficients = GFX.g_L2JupiterCoefficients.length;
    var L2 = 0;
    for (i = 0; i < nL2Coefficients; i++) {
      L2 += GFX.g_L2JupiterCoefficients[i].a * Math.cos(GFX.g_L2JupiterCoefficients[i].b + GFX.g_L2JupiterCoefficients[i].c * rho);
    }
    var nL3Coefficients = GFX.g_L3JupiterCoefficients.length;
    var L3 = 0;
    for (i = 0; i < nL3Coefficients; i++) {
      L3 += GFX.g_L3JupiterCoefficients[i].a * Math.cos(GFX.g_L3JupiterCoefficients[i].b + GFX.g_L3JupiterCoefficients[i].c * rho);
    }
    var nL4Coefficients = GFX.g_L4JupiterCoefficients.length;
    var L4 = 0;
    for (i = 0; i < nL4Coefficients; i++) {
      L4 += GFX.g_L4JupiterCoefficients[i].a * Math.cos(GFX.g_L4JupiterCoefficients[i].b + GFX.g_L4JupiterCoefficients[i].c * rho);
    }
    var nL5Coefficients = GFX.g_L5JupiterCoefficients.length;
    var L5 = 0;
    for (i = 0; i < nL5Coefficients; i++) {
      L5 += GFX.g_L5JupiterCoefficients[i].a * Math.cos(GFX.g_L5JupiterCoefficients[i].b + GFX.g_L5JupiterCoefficients[i].c * rho);
    }
    var vvalue = (L0 + L1 * rho + L2 * rhosquared + L3 * rhocubed + L4 * rho4 + L5 * rho5) / 100000000;
    vvalue = CT.m360(CT.r2D(vvalue));
    return vvalue;
  };
  CAAJupiter.eclipticLatitude = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nB0Coefficients = GFX.g_B0JupiterCoefficients.length;
    var B0 = 0;
    var i;
    for (i = 0; i < nB0Coefficients; i++) {
      B0 += GFX.g_B0JupiterCoefficients[i].a * Math.cos(GFX.g_B0JupiterCoefficients[i].b + GFX.g_B0JupiterCoefficients[i].c * rho);
    }
    var nB1Coefficients = GFX.g_B1JupiterCoefficients.length;
    var B1 = 0;
    for (i = 0; i < nB1Coefficients; i++) {
      B1 += GFX.g_B1JupiterCoefficients[i].a * Math.cos(GFX.g_B1JupiterCoefficients[i].b + GFX.g_B1JupiterCoefficients[i].c * rho);
    }
    var nB2Coefficients = GFX.g_B2JupiterCoefficients.length;
    var B2 = 0;
    for (i = 0; i < nB2Coefficients; i++) {
      B2 += GFX.g_B2JupiterCoefficients[i].a * Math.cos(GFX.g_B2JupiterCoefficients[i].b + GFX.g_B2JupiterCoefficients[i].c * rho);
    }
    var nB3Coefficients = GFX.g_B3JupiterCoefficients.length;
    var B3 = 0;
    for (i = 0; i < nB3Coefficients; i++) {
      B3 += GFX.g_B3JupiterCoefficients[i].a * Math.cos(GFX.g_B3JupiterCoefficients[i].b + GFX.g_B3JupiterCoefficients[i].c * rho);
    }
    var nB4Coefficients = GFX.g_B4JupiterCoefficients.length;
    var B4 = 0;
    for (i = 0; i < nB4Coefficients; i++) {
      B4 += GFX.g_B4JupiterCoefficients[i].a * Math.cos(GFX.g_B4JupiterCoefficients[i].b + GFX.g_B4JupiterCoefficients[i].c * rho);
    }
    var nB5Coefficients = GFX.g_B5JupiterCoefficients.length;
    var B5 = 0;
    for (i = 0; i < nB5Coefficients; i++) {
      B5 += GFX.g_B5JupiterCoefficients[i].a * Math.cos(GFX.g_B5JupiterCoefficients[i].b + GFX.g_B5JupiterCoefficients[i].c * rho);
    }
    var vvalue = (B0 + B1 * rho + B2 * rhosquared + B3 * rhocubed + B4 * rho4 + B5 * rho5) / 100000000;
    vvalue = CT.r2D(vvalue);
    return vvalue;
  };
  CAAJupiter.radiusVector = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nR0Coefficients = GFX.g_R0JupiterCoefficients.length;
    var R0 = 0;
    var i;
    for (i = 0; i < nR0Coefficients; i++) {
      R0 += GFX.g_R0JupiterCoefficients[i].a * Math.cos(GFX.g_R0JupiterCoefficients[i].b + GFX.g_R0JupiterCoefficients[i].c * rho);
    }
    var nR1Coefficients = GFX.g_R1JupiterCoefficients.length;
    var R1 = 0;
    for (i = 0; i < nR1Coefficients; i++) {
      R1 += GFX.g_R1JupiterCoefficients[i].a * Math.cos(GFX.g_R1JupiterCoefficients[i].b + GFX.g_R1JupiterCoefficients[i].c * rho);
    }
    var nR2Coefficients = GFX.g_R2JupiterCoefficients.length;
    var R2 = 0;
    for (i = 0; i < nR2Coefficients; i++) {
      R2 += GFX.g_R2JupiterCoefficients[i].a * Math.cos(GFX.g_R2JupiterCoefficients[i].b + GFX.g_R2JupiterCoefficients[i].c * rho);
    }
    var nR3Coefficients = GFX.g_R3JupiterCoefficients.length;
    var R3 = 0;
    for (i = 0; i < nR3Coefficients; i++) {
      R3 += GFX.g_R3JupiterCoefficients[i].a * Math.cos(GFX.g_R3JupiterCoefficients[i].b + GFX.g_R3JupiterCoefficients[i].c * rho);
    }
    var nR4Coefficients = GFX.g_R4JupiterCoefficients.length;
    var R4 = 0;
    for (i = 0; i < nR4Coefficients; i++) {
      R4 += GFX.g_R4JupiterCoefficients[i].a * Math.cos(GFX.g_R4JupiterCoefficients[i].b + GFX.g_R4JupiterCoefficients[i].c * rho);
    }
    var nR5Coefficients = GFX.g_R5JupiterCoefficients.length;
    var R5 = 0;
    for (i = 0; i < nR5Coefficients; i++) {
      R5 += GFX.g_R5JupiterCoefficients[i].a * Math.cos(GFX.g_R5JupiterCoefficients[i].b + GFX.g_R5JupiterCoefficients[i].c * rho);
    }
    return (R0 + R1 * rho + R2 * rhosquared + R3 * rhocubed + R4 * rho4 + R5 * rho5) / 100000000;
  };
  var CAAJupiter$ = {

  };


  // CAAKepler

  function CAAKepler() {
  }
  CAAKepler.calculate = function(M, e) {
    return CAAKepler.calculateIter(M, e, 53);
  };
  CAAKepler.calculateIter = function(M, e, nIterations) {
    M = CT.d2R(M);
    var PI = CT.PI();
    var F = 1;
    if (M < 0) {
      F = -1;
    }
    M = Math.abs(M) / (2 * PI);
    M = (M - ss.truncate(M)) * 2 * PI * F;
    if (M < 0) {
      M += 2 * PI;
    }
    F = 1;
    if (M > PI) {
      F = -1;
    }
    if (M > PI) {
      M = 2 * PI - M;
    }
    var E = PI / 2;
    var scale = PI / 4;
    for (var i = 0; i < nIterations; i++) {
      var R = E - e * Math.sin(E);
      if (M > R) {
        E += scale;
      }
      else {
        E -= scale;
      }
      scale /= 2;
    }
    return CT.r2D(E) * F;
  };
  var CAAKepler$ = {

  };


  // CAAMars

  function CAAMars() {
  }
  CAAMars.eclipticLongitude = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nL0Coefficients = GFX.g_L0MarsCoefficients.length;
    var L0 = 0;
    var i;
    for (i = 0; i < nL0Coefficients; i++) {
      L0 += GFX.g_L0MarsCoefficients[i].a * Math.cos(GFX.g_L0MarsCoefficients[i].b + GFX.g_L0MarsCoefficients[i].c * rho);
    }
    var nL1Coefficients = GFX.g_L1MarsCoefficients.length;
    var L1 = 0;
    for (i = 0; i < nL1Coefficients; i++) {
      L1 += GFX.g_L1MarsCoefficients[i].a * Math.cos(GFX.g_L1MarsCoefficients[i].b + GFX.g_L1MarsCoefficients[i].c * rho);
    }
    var nL2Coefficients = GFX.g_L2MarsCoefficients.length;
    var L2 = 0;
    for (i = 0; i < nL2Coefficients; i++) {
      L2 += GFX.g_L2MarsCoefficients[i].a * Math.cos(GFX.g_L2MarsCoefficients[i].b + GFX.g_L2MarsCoefficients[i].c * rho);
    }
    var nL3Coefficients = GFX.g_L3MarsCoefficients.length;
    var L3 = 0;
    for (i = 0; i < nL3Coefficients; i++) {
      L3 += GFX.g_L3MarsCoefficients[i].a * Math.cos(GFX.g_L3MarsCoefficients[i].b + GFX.g_L3MarsCoefficients[i].c * rho);
    }
    var nL4Coefficients = GFX.g_L4MarsCoefficients.length;
    var L4 = 0;
    for (i = 0; i < nL4Coefficients; i++) {
      L4 += GFX.g_L4MarsCoefficients[i].a * Math.cos(GFX.g_L4MarsCoefficients[i].b + GFX.g_L4MarsCoefficients[i].c * rho);
    }
    var nL5Coefficients = GFX.g_L5MarsCoefficients.length;
    var L5 = 0;
    for (i = 0; i < nL5Coefficients; i++) {
      L5 += GFX.g_L5MarsCoefficients[i].a * Math.cos(GFX.g_L5MarsCoefficients[i].b + GFX.g_L5MarsCoefficients[i].c * rho);
    }
    var vvalue = (L0 + L1 * rho + L2 * rhosquared + L3 * rhocubed + L4 * rho4 + L5 * rho5) / 100000000;
    vvalue = CT.m360(CT.r2D(vvalue));
    return vvalue;
  };
  CAAMars.eclipticLatitude = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nB0Coefficients = GFX.g_B0MarsCoefficients.length;
    var B0 = 0;
    var i;
    for (i = 0; i < nB0Coefficients; i++) {
      B0 += GFX.g_B0MarsCoefficients[i].a * Math.cos(GFX.g_B0MarsCoefficients[i].b + GFX.g_B0MarsCoefficients[i].c * rho);
    }
    var nB1Coefficients = GFX.g_B1MarsCoefficients.length;
    var B1 = 0;
    for (i = 0; i < nB1Coefficients; i++) {
      B1 += GFX.g_B1MarsCoefficients[i].a * Math.cos(GFX.g_B1MarsCoefficients[i].b + GFX.g_B1MarsCoefficients[i].c * rho);
    }
    var nB2Coefficients = GFX.g_B2MarsCoefficients.length;
    var B2 = 0;
    for (i = 0; i < nB2Coefficients; i++) {
      B2 += GFX.g_B2MarsCoefficients[i].a * Math.cos(GFX.g_B2MarsCoefficients[i].b + GFX.g_B2MarsCoefficients[i].c * rho);
    }
    var nB3Coefficients = GFX.g_B3MarsCoefficients.length;
    var B3 = 0;
    for (i = 0; i < nB3Coefficients; i++) {
      B3 += GFX.g_B3MarsCoefficients[i].a * Math.cos(GFX.g_B3MarsCoefficients[i].b + GFX.g_B3MarsCoefficients[i].c * rho);
    }
    var nB4Coefficients = GFX.g_B4MarsCoefficients.length;
    var B4 = 0;
    for (i = 0; i < nB4Coefficients; i++) {
      B4 += GFX.g_B4MarsCoefficients[i].a * Math.cos(GFX.g_B4MarsCoefficients[i].b + GFX.g_B4MarsCoefficients[i].c * rho);
    }
    var vvalue = (B0 + B1 * rho + B2 * rhosquared + B3 * rhocubed + B4 * rho4) / 100000000;
    vvalue = CT.r2D(vvalue);
    return vvalue;
  };
  CAAMars.radiusVector = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nR0Coefficients = GFX.g_R0MarsCoefficients.length;
    var R0 = 0;
    var i;
    for (i = 0; i < nR0Coefficients; i++) {
      R0 += GFX.g_R0MarsCoefficients[i].a * Math.cos(GFX.g_R0MarsCoefficients[i].b + GFX.g_R0MarsCoefficients[i].c * rho);
    }
    var nR1Coefficients = GFX.g_R1MarsCoefficients.length;
    var R1 = 0;
    for (i = 0; i < nR1Coefficients; i++) {
      R1 += GFX.g_R1MarsCoefficients[i].a * Math.cos(GFX.g_R1MarsCoefficients[i].b + GFX.g_R1MarsCoefficients[i].c * rho);
    }
    var nR2Coefficients = GFX.g_R2MarsCoefficients.length;
    var R2 = 0;
    for (i = 0; i < nR2Coefficients; i++) {
      R2 += GFX.g_R2MarsCoefficients[i].a * Math.cos(GFX.g_R2MarsCoefficients[i].b + GFX.g_R2MarsCoefficients[i].c * rho);
    }
    var nR3Coefficients = GFX.g_R3MarsCoefficients.length;
    var R3 = 0;
    for (i = 0; i < nR3Coefficients; i++) {
      R3 += GFX.g_R3MarsCoefficients[i].a * Math.cos(GFX.g_R3MarsCoefficients[i].b + GFX.g_R3MarsCoefficients[i].c * rho);
    }
    var nR4Coefficients = GFX.g_R4MarsCoefficients.length;
    var R4 = 0;
    for (i = 0; i < nR4Coefficients; i++) {
      R4 += GFX.g_R4MarsCoefficients[i].a * Math.cos(GFX.g_R4MarsCoefficients[i].b + GFX.g_R4MarsCoefficients[i].c * rho);
    }
    return (R0 + R1 * rho + R2 * rhosquared + R3 * rhocubed + R4 * rho4) / 100000000;
  };
  var CAAMars$ = {

  };


  // CAAMercury

  function CAAMercury() {
  }
  CAAMercury.eclipticLongitude = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nL0Coefficients = GFX.g_L0MercuryCoefficients.length;
    var L0 = 0;
    var i;
    for (i = 0; i < nL0Coefficients; i++) {
      L0 += GFX.g_L0MercuryCoefficients[i].a * Math.cos(GFX.g_L0MercuryCoefficients[i].b + GFX.g_L0MercuryCoefficients[i].c * rho);
    }
    var nL1Coefficients = GFX.g_L1MercuryCoefficients.length;
    var L1 = 0;
    for (i = 0; i < nL1Coefficients; i++) {
      L1 += GFX.g_L1MercuryCoefficients[i].a * Math.cos(GFX.g_L1MercuryCoefficients[i].b + GFX.g_L1MercuryCoefficients[i].c * rho);
    }
    var nL2Coefficients = GFX.g_L2MercuryCoefficients.length;
    var L2 = 0;
    for (i = 0; i < nL2Coefficients; i++) {
      L2 += GFX.g_L2MercuryCoefficients[i].a * Math.cos(GFX.g_L2MercuryCoefficients[i].b + GFX.g_L2MercuryCoefficients[i].c * rho);
    }
    var nL3Coefficients = GFX.g_L3MercuryCoefficients.length;
    var L3 = 0;
    for (i = 0; i < nL3Coefficients; i++) {
      L3 += GFX.g_L3MercuryCoefficients[i].a * Math.cos(GFX.g_L3MercuryCoefficients[i].b + GFX.g_L3MercuryCoefficients[i].c * rho);
    }
    var nL4Coefficients = GFX.g_L4MercuryCoefficients.length;
    var L4 = 0;
    for (i = 0; i < nL4Coefficients; i++) {
      L4 += GFX.g_L4MercuryCoefficients[i].a * Math.cos(GFX.g_L4MercuryCoefficients[i].b + GFX.g_L4MercuryCoefficients[i].c * rho);
    }
    var nL5Coefficients = GFX.g_L5MercuryCoefficients.length;
    var L5 = 0;
    for (i = 0; i < nL5Coefficients; i++) {
      L5 += GFX.g_L5MercuryCoefficients[i].a * Math.cos(GFX.g_L5MercuryCoefficients[i].b + GFX.g_L5MercuryCoefficients[i].c * rho);
    }
    var vvalue = (L0 + L1 * rho + L2 * rhosquared + L3 * rhocubed + L4 * rho4 + L5 * rho5) / 100000000;
    vvalue = CT.m360(CT.r2D(vvalue));
    return vvalue;
  };
  CAAMercury.eclipticLatitude = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nB0Coefficients = GFX.g_B0MercuryCoefficients.length;
    var B0 = 0;
    var i;
    for (i = 0; i < nB0Coefficients; i++) {
      B0 += GFX.g_B0MercuryCoefficients[i].a * Math.cos(GFX.g_B0MercuryCoefficients[i].b + GFX.g_B0MercuryCoefficients[i].c * rho);
    }
    var nB1Coefficients = GFX.g_B1MercuryCoefficients.length;
    var B1 = 0;
    for (i = 0; i < nB1Coefficients; i++) {
      B1 += GFX.g_B1MercuryCoefficients[i].a * Math.cos(GFX.g_B1MercuryCoefficients[i].b + GFX.g_B1MercuryCoefficients[i].c * rho);
    }
    var nB2Coefficients = GFX.g_B2MercuryCoefficients.length;
    var B2 = 0;
    for (i = 0; i < nB2Coefficients; i++) {
      B2 += GFX.g_B2MercuryCoefficients[i].a * Math.cos(GFX.g_B2MercuryCoefficients[i].b + GFX.g_B2MercuryCoefficients[i].c * rho);
    }
    var nB3Coefficients = GFX.g_B3MercuryCoefficients.length;
    var B3 = 0;
    for (i = 0; i < nB3Coefficients; i++) {
      B3 += GFX.g_B3MercuryCoefficients[i].a * Math.cos(GFX.g_B3MercuryCoefficients[i].b + GFX.g_B3MercuryCoefficients[i].c * rho);
    }
    var nB4Coefficients = GFX.g_B4MercuryCoefficients.length;
    var B4 = 0;
    for (i = 0; i < nB4Coefficients; i++) {
      B4 += GFX.g_B4MercuryCoefficients[i].a * Math.cos(GFX.g_B4MercuryCoefficients[i].b + GFX.g_B4MercuryCoefficients[i].c * rho);
    }
    var vvalue = (B0 + B1 * rho + B2 * rhosquared + B3 * rhocubed + B4 * rho4) / 100000000;
    vvalue = CT.r2D(vvalue);
    return vvalue;
  };
  CAAMercury.radiusVector = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var nR0Coefficients = GFX.g_R0MercuryCoefficients.length;
    var R0 = 0;
    var i;
    for (i = 0; i < nR0Coefficients; i++) {
      R0 += GFX.g_R0MercuryCoefficients[i].a * Math.cos(GFX.g_R0MercuryCoefficients[i].b + GFX.g_R0MercuryCoefficients[i].c * rho);
    }
    var nR1Coefficients = GFX.g_R1MercuryCoefficients.length;
    var R1 = 0;
    for (i = 0; i < nR1Coefficients; i++) {
      R1 += GFX.g_R1MercuryCoefficients[i].a * Math.cos(GFX.g_R1MercuryCoefficients[i].b + GFX.g_R1MercuryCoefficients[i].c * rho);
    }
    var nR2Coefficients = GFX.g_R2MercuryCoefficients.length;
    var R2 = 0;
    for (i = 0; i < nR2Coefficients; i++) {
      R2 += GFX.g_R2MercuryCoefficients[i].a * Math.cos(GFX.g_R2MercuryCoefficients[i].b + GFX.g_R2MercuryCoefficients[i].c * rho);
    }
    var nR3Coefficients = GFX.g_R3MercuryCoefficients.length;
    var R3 = 0;
    for (i = 0; i < nR3Coefficients; i++) {
      R3 += GFX.g_R3MercuryCoefficients[i].a * Math.cos(GFX.g_R3MercuryCoefficients[i].b + GFX.g_R3MercuryCoefficients[i].c * rho);
    }
    return (R0 + R1 * rho + R2 * rhosquared + R3 * rhocubed) / 100000000;
  };
  var CAAMercury$ = {

  };


  // CAAMoon

  function CAAMoon() {
  }
  CAAMoon.meanLongitude = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    return CT.m360(218.3164477 + 481267.88123421 * T - 0.0015786 * Tsquared + Tcubed / 538841 - T4 / 65194000);
  };
  CAAMoon.meanElongation = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    return CT.m360(297.8501921 + 445267.1114034 * T - 0.0018819 * Tsquared + Tcubed / 545868 - T4 / 113065000);
  };
  CAAMoon.meanAnomaly = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    return CT.m360(134.9633964 + 477198.8675055 * T + 0.0087414 * Tsquared + Tcubed / 69699 - T4 / 14712000);
  };
  CAAMoon.argumentOfLatitude = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    return CT.m360(93.272095 + 483202.0175233 * T - 0.0036539 * Tsquared - Tcubed / 3526000 + T4 / 863310000);
  };
  CAAMoon.meanLongitudeAscendingNode = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    return CT.m360(125.0445479 - 1934.1362891 * T + 0.0020754 * Tsquared + Tcubed / 467441 - T4 / 60616000);
  };
  CAAMoon.meanLongitudePerigee = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    return CT.m360(83.3532465 + 4069.0137287 * T - 0.01032 * Tsquared - Tcubed / 80053 + T4 / 18999000);
  };
  CAAMoon.trueLongitudeAscendingNode = function(JD) {
    var TrueAscendingNode = CAAMoon.meanLongitudeAscendingNode(JD);
    var D = CAAMoon.meanElongation(JD);
    D = CT.d2R(D);
    var M = CAAEarth.sunMeanAnomaly(JD);
    M = CT.d2R(M);
    var Mdash = CAAMoon.meanAnomaly(JD);
    Mdash = CT.d2R(Mdash);
    var F = CAAMoon.argumentOfLatitude(JD);
    F = CT.d2R(F);
    TrueAscendingNode -= 1.4979 * Math.sin(2 * (D - F));
    TrueAscendingNode -= 0.15 * Math.sin(M);
    TrueAscendingNode -= 0.1226 * Math.sin(2 * D);
    TrueAscendingNode += 0.1176 * Math.sin(2 * F);
    TrueAscendingNode -= 0.0801 * Math.sin(2 * (Mdash - F));
    return CT.m360(TrueAscendingNode);
  };
  CAAMoon.eclipticLongitude = function(JD) {
    var Ldash = CAAMoon.meanLongitude(JD);
    var LdashDegrees = Ldash;
    Ldash = CT.d2R(Ldash);
    var D = CAAMoon.meanElongation(JD);
    D = CT.d2R(D);
    var M = CAAEarth.sunMeanAnomaly(JD);
    M = CT.d2R(M);
    var Mdash = CAAMoon.meanAnomaly(JD);
    Mdash = CT.d2R(Mdash);
    var F = CAAMoon.argumentOfLatitude(JD);
    F = CT.d2R(F);
    var E = CAAEarth.eccentricity(JD);
    var T = (JD - 2451545) / 36525;
    var A1 = CT.m360(119.75 + 131.849 * T);
    A1 = CT.d2R(A1);
    var A2 = CT.m360(53.09 + 479264.29 * T);
    A2 = CT.d2R(A2);
    var A3 = CT.m360(313.45 + 481266.484 * T);
    A3 = CT.d2R(A3);
    var nLCoefficients = GFX.g_MoonCoefficients1.length;
    console.assert(GFX.g_MoonCoefficients2.length === nLCoefficients);
    var SigmaL = 0;
    for (var i = 0; i < nLCoefficients; i++) {
      var ThisSigma = GFX.g_MoonCoefficients2[i].a * Math.sin(GFX.g_MoonCoefficients1[i].d * D + GFX.g_MoonCoefficients1[i].m * M + GFX.g_MoonCoefficients1[i].mdash * Mdash + GFX.g_MoonCoefficients1[i].f * F);
      if (!!GFX.g_MoonCoefficients1[i].m) {
        ThisSigma *= E;
      }
      SigmaL += ThisSigma;
    }
    SigmaL += 3958 * Math.sin(A1);
    SigmaL += 1962 * Math.sin(Ldash - F);
    SigmaL += 318 * Math.sin(A2);
    var NutationInLong = CAANutation.nutationInLongitude(JD);
    return CT.m360(LdashDegrees + SigmaL / 1000000 + NutationInLong / 3600);
  };
  CAAMoon.eclipticLatitude = function(JD) {
    var Ldash = CAAMoon.meanLongitude(JD);
    Ldash = CT.d2R(Ldash);
    var D = CAAMoon.meanElongation(JD);
    D = CT.d2R(D);
    var M = CAAEarth.sunMeanAnomaly(JD);
    M = CT.d2R(M);
    var Mdash = CAAMoon.meanAnomaly(JD);
    Mdash = CT.d2R(Mdash);
    var F = CAAMoon.argumentOfLatitude(JD);
    F = CT.d2R(F);
    var E = CAAEarth.eccentricity(JD);
    var T = (JD - 2451545) / 36525;
    var A1 = CT.m360(119.75 + 131.849 * T);
    A1 = CT.d2R(A1);
    var A2 = CT.m360(53.09 + 479264.29 * T);
    A2 = CT.d2R(A2);
    var A3 = CT.m360(313.45 + 481266.484 * T);
    A3 = CT.d2R(A3);
    var nBCoefficients = GFX.g_MoonCoefficients3.length;
    console.assert(GFX.g_MoonCoefficients4.length === nBCoefficients);
    var SigmaB = 0;
    for (var i = 0; i < nBCoefficients; i++) {
      var ThisSigma = GFX.g_MoonCoefficients4[i] * Math.sin(GFX.g_MoonCoefficients3[i].d * D + GFX.g_MoonCoefficients3[i].m * M + GFX.g_MoonCoefficients3[i].mdash * Mdash + GFX.g_MoonCoefficients3[i].f * F);
      if (!!GFX.g_MoonCoefficients3[i].m) {
        ThisSigma *= E;
      }
      SigmaB += ThisSigma;
    }
    SigmaB -= 2235 * Math.sin(Ldash);
    SigmaB += 382 * Math.sin(A3);
    SigmaB += 175 * Math.sin(A1 - F);
    SigmaB += 175 * Math.sin(A1 + F);
    SigmaB += 127 * Math.sin(Ldash - Mdash);
    SigmaB -= 115 * Math.sin(Ldash + Mdash);
    return SigmaB / 1000000;
  };
  CAAMoon.radiusVector = function(JD) {
    var Ldash = CAAMoon.meanLongitude(JD);
    Ldash = CT.d2R(Ldash);
    var D = CAAMoon.meanElongation(JD);
    D = CT.d2R(D);
    var M = CAAEarth.sunMeanAnomaly(JD);
    M = CT.d2R(M);
    var Mdash = CAAMoon.meanAnomaly(JD);
    Mdash = CT.d2R(Mdash);
    var F = CAAMoon.argumentOfLatitude(JD);
    F = CT.d2R(F);
    var E = CAAEarth.eccentricity(JD);
    var T = (JD - 2451545) / 36525;
    var A1 = CT.m360(119.75 + 131.849 * T);
    A1 = CT.d2R(A1);
    var A2 = CT.m360(53.09 + 479264.29 * T);
    A2 = CT.d2R(A2);
    var A3 = CT.m360(313.45 + 481266.484 * T);
    A3 = CT.d2R(A3);
    var nRCoefficients = GFX.g_MoonCoefficients1.length;
    console.assert(GFX.g_MoonCoefficients2.length === nRCoefficients);
    var SigmaR = 0;
    for (var i = 0; i < nRCoefficients; i++) {
      var ThisSigma = GFX.g_MoonCoefficients2[i].b * Math.cos(GFX.g_MoonCoefficients1[i].d * D + GFX.g_MoonCoefficients1[i].m * M + GFX.g_MoonCoefficients1[i].mdash * Mdash + GFX.g_MoonCoefficients1[i].f * F);
      if (!!GFX.g_MoonCoefficients1[i].m) {
        ThisSigma *= E;
      }
      SigmaR += ThisSigma;
    }
    return 385000.56 + SigmaR / 1000;
  };
  CAAMoon.radiusVectorToHorizontalParallax = function(RadiusVector) {
    return CT.r2D(Math.asin(6378.14 / RadiusVector));
  };
  CAAMoon.horizontalParallaxToRadiusVector = function(Parallax) {
    return 6378.14 / Math.sin(CT.d2R(Parallax));
  };
  var CAAMoon$ = {

  };


  // MoonCoefficient1

  function MoonCoefficient1(d, m, mdash, f) {
    this.d = 0;
    this.m = 0;
    this.mdash = 0;
    this.f = 0;
    this.d = d;
    this.m = m;
    this.mdash = mdash;
    this.f = f;
  }
  var MoonCoefficient1$ = {

  };


  // MoonCoefficient2

  function MoonCoefficient2(a, b) {
    this.a = 0;
    this.b = 0;
    this.a = a;
    this.b = b;
  }
  var MoonCoefficient2$ = {

  };


  // MIFR

  function MIFR() {
  }
  MIFR.geocentricElongation = function(ObjectAlpha, ObjectDelta, SunAlpha, SunDelta) {
    ObjectAlpha = CT.d2R(ObjectAlpha * 15);
    SunAlpha = CT.d2R(SunAlpha * 15);
    ObjectDelta = CT.d2R(ObjectDelta);
    SunDelta = CT.d2R(SunDelta);
    return CT.r2D(Math.acos(Math.sin(SunDelta) * Math.sin(ObjectDelta) + Math.cos(SunDelta) * Math.cos(ObjectDelta) * Math.cos(SunAlpha - ObjectAlpha)));
  };
  MIFR.phaseAngle = function(GeocentricElongation, EarthObjectDistance, EarthSunDistance) {
    GeocentricElongation = CT.d2R(GeocentricElongation);
    return CT.m360(CT.r2D(Math.atan2(EarthSunDistance * Math.sin(GeocentricElongation), EarthObjectDistance - EarthSunDistance * Math.cos(GeocentricElongation))));
  };
  MIFR.illuminatedFraction = function(PhaseAngle) {
    PhaseAngle = CT.d2R(PhaseAngle);
    return (1 + Math.cos(PhaseAngle)) / 2;
  };
  MIFR.positionAngle = function(Alpha0, Delta0, Alpha, Delta) {
    Alpha0 = CT.h2R(Alpha0);
    Alpha = CT.h2R(Alpha);
    Delta0 = CT.d2R(Delta0);
    Delta = CT.d2R(Delta);
    return CT.m360(CT.r2D(Math.atan2(Math.cos(Delta0) * Math.sin(Alpha0 - Alpha), Math.sin(Delta0) * Math.cos(Delta) - Math.cos(Delta0) * Math.sin(Delta) * Math.cos(Alpha0 - Alpha))));
  };
  var MIFR$ = {

  };


  // CAAMoonNodes

  function CAAMoonNodes() {
  }
  CAAMoonNodes.k = function(Year) {
    return 13.4223 * (Year - 2000.05);
  };
  CAAMoonNodes.passageThroNode = function(k) {
    var T = k / 1342.23;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    var D = CT.m360(183.638 + 331.73735682 * k + 0.0014852 * Tsquared + 2.09E-06 * Tcubed - 1E-08 * T4);
    var M = CT.m360(17.4006 + 26.8203725 * k + 0.0001186 * Tsquared + 6E-08 * Tcubed);
    var Mdash = CT.m360(38.3776 + 355.52747313 * k + 0.0123499 * Tsquared + 1.4627E-05 * Tcubed - 6.9E-08 * T4);
    var omega = CT.m360(123.9767 - 1.44098956 * k + 0.0020608 * Tsquared + 2.14E-06 * Tcubed - 1.6E-08 * T4);
    var V = CT.m360(299.75 + 132.85 * T - 0.009173 * Tsquared);
    var P = CT.m360(omega + 272.75 - 2.3 * T);
    var E = 1 - 0.002516 * T - 7.4E-06 * Tsquared;
    D = CT.d2R(D);
    var D2 = 2 * D;
    var D4 = D2 * D2;
    M = CT.d2R(M);
    Mdash = CT.d2R(Mdash);
    var Mdash2 = 2 * Mdash;
    omega = CT.d2R(omega);
    V = CT.d2R(V);
    P = CT.d2R(P);
    var JD = 2451565.1619 + 27.212220817 * k + 0.0002762 * Tsquared + 2.1E-08 * Tcubed - 8.8E-11 * T4 - 0.4721 * Math.sin(Mdash) - 0.1649 * Math.sin(D2) - 0.0868 * Math.sin(D2 - Mdash) + 0.0084 * Math.sin(D2 + Mdash) - E * 0.0083 * Math.sin(D2 - M) - E * 0.0039 * Math.sin(D2 - M - Mdash) + 0.0034 * Math.sin(Mdash2) - 0.0031 * Math.sin(D2 - Mdash2) + E * 0.003 * Math.sin(D2 + M) + E * 0.0028 * Math.sin(M - Mdash) + E * 0.0026 * Math.sin(M) + 0.0025 * Math.sin(D4) + 0.0024 * Math.sin(D) + E * 0.0022 * Math.sin(M + Mdash) + 0.0017 * Math.sin(omega) + 0.0014 * Math.sin(D4 - Mdash) + E * 0.0005 * Math.sin(D2 + M - Mdash) + E * 0.0004 * Math.sin(D2 - M + Mdash) - E * 0.0003 * Math.sin(D2 - M * M) + E * 0.0003 * Math.sin(D4 - M) + 0.0003 * Math.sin(V) + 0.0003 * Math.sin(P);
    return JD;
  };
  var CAAMoonNodes$ = {

  };


  // CAAMoonPerigeeApogee

  function CAAMoonPerigeeApogee() {
  }
  CAAMoonPerigeeApogee.k = function(Year) {
    return 13.2555 * (Year - 1999.97);
  };
  CAAMoonPerigeeApogee.meanPerigee = function(k) {
    var T = k / 1325.55;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    return 2451534.6698 + 27.55454989 * k - 0.0006691 * Tsquared - 1.098E-06 * Tcubed + 5.2E-09 * T4;
  };
  CAAMoonPerigeeApogee.meanApogee = function(k) {
    return CAAMoonPerigeeApogee.meanPerigee(k);
  };
  CAAMoonPerigeeApogee.truePerigee = function(k) {
    var MeanJD = CAAMoonPerigeeApogee.meanPerigee(k);
    var T = k / 1325.55;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    var D = CT.m360(171.9179 + 335.9106046 * k - 0.0100383 * Tsquared - 1.156E-05 * Tcubed + 5.5E-08 * T4);
    D = CT.d2R(D);
    var M = CT.m360(347.3477 + 27.1577721 * k - 0.000813 * Tsquared - 1E-06 * Tcubed);
    M = CT.d2R(M);
    var F = CT.m360(316.6109 + 364.5287911 * k - 0.0125053 * Tsquared - 1.48E-05 * Tcubed);
    F = CT.d2R(F);
    var nPerigeeCoefficients = GFX.g_MoonPerigeeApogeeCoefficients1.length;
    var Sigma = 0;
    for (var i = 0; i < nPerigeeCoefficients; i++) {
      Sigma += GFX.g_MoonPerigeeApogeeCoefficients1[i].c * Math.sin(D * GFX.g_MoonPerigeeApogeeCoefficients1[i].d + M * GFX.g_MoonPerigeeApogeeCoefficients1[i].m + F * GFX.g_MoonPerigeeApogeeCoefficients1[i].f + T * GFX.g_MoonPerigeeApogeeCoefficients1[i].t);
    }
    return MeanJD + Sigma;
  };
  CAAMoonPerigeeApogee.trueApogee = function(k) {
    var MeanJD = CAAMoonPerigeeApogee.meanApogee(k);
    var T = k / 1325.55;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    var D = CT.m360(171.9179 + 335.9106046 * k - 0.0100383 * Tsquared - 1.156E-05 * Tcubed + 5.5E-08 * T4);
    D = CT.d2R(D);
    var M = CT.m360(347.3477 + 27.1577721 * k - 0.000813 * Tsquared - 1E-06 * Tcubed);
    M = CT.d2R(M);
    var F = CT.m360(316.6109 + 364.5287911 * k - 0.0125053 * Tsquared - 1.48E-05 * Tcubed);
    F = CT.d2R(F);
    var nApogeeCoefficients = GFX.g_MoonPerigeeApogeeCoefficients2.length;
    var Sigma = 0;
    for (var i = 0; i < nApogeeCoefficients; i++) {
      Sigma += (GFX.g_MoonPerigeeApogeeCoefficients2[i].c + T * GFX.g_MoonPerigeeApogeeCoefficients2[i].t) * Math.sin(D * GFX.g_MoonPerigeeApogeeCoefficients2[i].d + M * GFX.g_MoonPerigeeApogeeCoefficients2[i].m + F * GFX.g_MoonPerigeeApogeeCoefficients2[i].f);
    }
    return MeanJD + Sigma;
  };
  CAAMoonPerigeeApogee.perigeeParallax = function(k) {
    var T = k / 1325.55;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    var D = CT.m360(171.9179 + 335.9106046 * k - 0.0100383 * Tsquared - 1.156E-05 * Tcubed + 5.5E-08 * T4);
    D = CT.d2R(D);
    var M = CT.m360(347.3477 + 27.1577721 * k - 0.000813 * Tsquared - 1E-06 * Tcubed);
    M = CT.d2R(M);
    var F = CT.m360(316.6109 + 364.5287911 * k - 0.0125053 * Tsquared - 1.48E-05 * Tcubed);
    F = CT.d2R(F);
    var nPerigeeCoefficients = GFX.g_MoonPerigeeApogeeCoefficients3.length;
    var Parallax = 3629.215;
    for (var i = 0; i < nPerigeeCoefficients; i++) {
      Parallax += (GFX.g_MoonPerigeeApogeeCoefficients3[i].c + T * GFX.g_MoonPerigeeApogeeCoefficients3[i].t) * Math.cos(D * GFX.g_MoonPerigeeApogeeCoefficients3[i].d + M * GFX.g_MoonPerigeeApogeeCoefficients3[i].m + F * GFX.g_MoonPerigeeApogeeCoefficients3[i].f);
    }
    return Parallax / 3600;
  };
  CAAMoonPerigeeApogee.apogeeParallax = function(k) {
    var T = k / 1325.55;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var T4 = Tcubed * T;
    var D = CT.m360(171.9179 + 335.9106046 * k - 0.0100383 * Tsquared - 1.156E-05 * Tcubed + 5.5E-08 * T4);
    D = CT.d2R(D);
    var M = CT.m360(347.3477 + 27.1577721 * k - 0.000813 * Tsquared - 1E-06 * Tcubed);
    M = CT.d2R(M);
    var F = CT.m360(316.6109 + 364.5287911 * k - 0.0125053 * Tsquared - 1.48E-05 * Tcubed);
    F = CT.d2R(F);
    var nApogeeCoefficients = GFX.g_MoonPerigeeApogeeCoefficients4.length;
    var Parallax = 3245.251;
    for (var i = 0; i < nApogeeCoefficients; i++) {
      Parallax += (GFX.g_MoonPerigeeApogeeCoefficients4[i].c + T * GFX.g_MoonPerigeeApogeeCoefficients4[i].t) * Math.cos(D * GFX.g_MoonPerigeeApogeeCoefficients4[i].d + M * GFX.g_MoonPerigeeApogeeCoefficients4[i].m + F * GFX.g_MoonPerigeeApogeeCoefficients4[i].f);
    }
    return Parallax / 3600;
  };
  var CAAMoonPerigeeApogee$ = {

  };


  // MPAC

  function MPAC(D, M, F, C, T) {
    this.d = 0;
    this.m = 0;
    this.f = 0;
    this.c = 0;
    this.t = 0;
    this.d = D;
    this.m = M;
    this.f = F;
    this.c = C;
    this.t = T;
  }
  var MPAC$ = {

  };


  // CAAMoonPhases

  function CAAMoonPhases() {
  }
  CAAMoonPhases.k = function(Year) {
    return 12.3685 * (Year - 2000);
  };
  CAAMoonPhases.meanPhase = function(k) {
    var T = k / 1236.85;
    var T2 = T * T;
    var T3 = T2 * T;
    var T4 = T3 * T;
    return 2451550.09766 + 29.530588861 * k + 0.00015437 * T2 - 1.5E-07 * T3 + 7.3E-10 * T4;
  };
  CAAMoonPhases.truePhase = function(k) {
    var JD = CAAMoonPhases.meanPhase(k);
    var T = k / 1236.85;
    var T2 = T * T;
    var T3 = T2 * T;
    var T4 = T3 * T;
    var E = 1 - 0.002516 * T - 7.4E-06 * T2;
    var E2 = E * E;
    var M = CT.m360(2.5534 + 29.1053567 * k - 1.4E-06 * T2 - 1.1E-07 * T3);
    M = CT.d2R(M);
    var Mdash = CT.m360(201.5643 + 385.81693528 * k + 0.0107582 * T2 + 1.238E-05 * T3 - 5.8E-08 * T4);
    Mdash = CT.d2R(Mdash);
    var F = CT.m360(160.7108 + 390.67050284 * k - 0.0016118 * T2 - 2.27E-06 * T3 + 1E-08 * T4);
    F = CT.d2R(F);
    var omega = CT.m360(124.7746 - 1.56375588 * k + 0.0020672 * T2 + 2.15E-06 * T3);
    omega = CT.d2R(omega);
    var A1 = CT.m360(299.77 + 0.107408 * k - 0.009173 * T2);
    A1 = CT.d2R(A1);
    var A2 = CT.m360(251.88 + 0.016321 * k);
    A2 = CT.d2R(A2);
    var A3 = CT.m360(251.83 + 26.651886 * k);
    A3 = CT.d2R(A3);
    var A4 = CT.m360(349.42 + 36.412478 * k);
    A4 = CT.d2R(A4);
    var A5 = CT.m360(84.66 + 18.206239 * k);
    A5 = CT.d2R(A5);
    var A6 = CT.m360(141.74 + 53.303771 * k);
    A6 = CT.d2R(A6);
    var A7 = CT.m360(207.14 + 2.453732 * k);
    A7 = CT.d2R(A7);
    var A8 = CT.m360(154.84 + 7.30686 * k);
    A8 = CT.d2R(A8);
    var A9 = CT.m360(34.52 + 27.261239 * k);
    A9 = CT.d2R(A9);
    var A10 = CT.m360(207.19 + 0.121824 * k);
    A10 = CT.d2R(A10);
    var A11 = CT.m360(291.34 + 1.844379 * k);
    A11 = CT.d2R(A11);
    var A12 = CT.m360(161.72 + 24.198154 * k);
    A12 = CT.d2R(A12);
    var A13 = CT.m360(239.56 + 25.513099 * k);
    A13 = CT.d2R(A13);
    var A14 = CT.m360(331.55 + 3.592518 * k);
    A14 = CT.d2R(A14);
    var kint = Math.floor(k);
    var kfrac = k - kint;
    if (kfrac < 0) {
      kfrac = 1 + kfrac;
    }
    if (!kfrac) {
      var DeltaJD = -0.4072 * Math.sin(Mdash) + 0.17241 * E * Math.sin(M) + 0.01608 * Math.sin(2 * Mdash) + 0.01039 * Math.sin(2 * F) + 0.00739 * E * Math.sin(Mdash - M) + -0.00514 * E * Math.sin(Mdash + M) + 0.00208 * E2 * Math.sin(2 * M) + -0.00111 * Math.sin(Mdash - 2 * F) + -0.00057 * Math.sin(Mdash + 2 * F) + 0.00056 * E * Math.sin(2 * Mdash + M) + -0.00042 * Math.sin(3 * Mdash) + 0.00042 * E * Math.sin(M + 2 * F) + 0.00038 * E * Math.sin(M - 2 * F) + -0.00024 * E * Math.sin(2 * Mdash - M) + -0.00017 * Math.sin(omega) + -7E-05 * Math.sin(Mdash + 2 * M) + 4E-05 * Math.sin(2 * Mdash - 2 * F) + 4E-05 * Math.sin(3 * M) + 3E-05 * Math.sin(Mdash + M - 2 * F) + 3E-05 * Math.sin(2 * Mdash + 2 * F) + -3E-05 * Math.sin(Mdash + M + 2 * F) + 3E-05 * Math.sin(Mdash - M + 2 * F) + -2E-05 * Math.sin(Mdash - M - 2 * F) + -2E-05 * Math.sin(3 * Mdash + M) + 2E-05 * Math.sin(4 * Mdash);
      JD += DeltaJD;
    }
    else if ((kfrac === 0.25) || (kfrac === 0.75)) {
      var DeltaJD = -0.62801 * Math.sin(Mdash) + 0.17172 * E * Math.sin(M) + -0.01183 * E * Math.sin(Mdash + M) + 0.00862 * Math.sin(2 * Mdash) + 0.00804 * Math.sin(2 * F) + 0.00454 * E * Math.sin(Mdash - M) + 0.00204 * E2 * Math.sin(2 * M) + -0.0018 * Math.sin(Mdash - 2 * F) + -0.0007 * Math.sin(Mdash + 2 * F) + -0.0004 * Math.sin(3 * Mdash) + -0.00034 * E * Math.sin(2 * Mdash - M) + 0.00032 * E * Math.sin(M + 2 * F) + 0.00032 * E * Math.sin(M - 2 * F) + -0.00028 * E2 * Math.sin(Mdash + 2 * M) + 0.00027 * E * Math.sin(2 * Mdash + M) + -0.00017 * Math.sin(omega) + -5E-05 * Math.sin(Mdash - M - 2 * F) + 4E-05 * Math.sin(2 * Mdash + 2 * F) + -4E-05 * Math.sin(Mdash + M + 2 * F) + 4E-05 * Math.sin(Mdash - 2 * M) + 3E-05 * Math.sin(Mdash + M - 2 * F) + 3E-05 * Math.sin(3 * M) + 2E-05 * Math.sin(2 * Mdash - 2 * F) + 2E-05 * Math.sin(Mdash - M + 2 * F) + -2E-05 * Math.sin(3 * Mdash + M);
      JD += DeltaJD;
      var W = 0.00306 - 0.00038 * E * Math.cos(M) + 0.00026 * Math.cos(Mdash) - 2E-05 * Math.cos(Mdash - M) + 2E-05 * Math.cos(Mdash + M) + 2E-05 * Math.cos(2 * F);
      if (kfrac === 0.25) {
        JD += W;
      }
      else {
        JD -= W;
      }
    }
    else if (kfrac === 0.5) {
      var DeltaJD = -0.40614 * Math.sin(Mdash) + 0.17302 * E * Math.sin(M) + 0.01614 * Math.sin(2 * Mdash) + 0.01043 * Math.sin(2 * F) + 0.00734 * E * Math.sin(Mdash - M) + -0.00514 * E * Math.sin(Mdash + M) + 0.00209 * E2 * Math.sin(2 * M) + -0.00111 * Math.sin(Mdash - 2 * F) + -0.00057 * Math.sin(Mdash + 2 * F) + 0.00056 * E * Math.sin(2 * Mdash + M) + -0.00042 * Math.sin(3 * Mdash) + 0.00042 * E * Math.sin(M + 2 * F) + 0.00038 * E * Math.sin(M - 2 * F) + -0.00024 * E * Math.sin(2 * Mdash - M) + -0.00017 * Math.sin(omega) + -7E-05 * Math.sin(Mdash + 2 * M) + 4E-05 * Math.sin(2 * Mdash - 2 * F) + 4E-05 * Math.sin(3 * M) + 3E-05 * Math.sin(Mdash + M - 2 * F) + 3E-05 * Math.sin(2 * Mdash + 2 * F) + -3E-05 * Math.sin(Mdash + M + 2 * F) + 3E-05 * Math.sin(Mdash - M + 2 * F) + -2E-05 * Math.sin(Mdash - M - 2 * F) + -2E-05 * Math.sin(3 * Mdash + M) + 2E-05 * Math.sin(4 * Mdash);
      JD += DeltaJD;
    }
    else {
      console.assert(false);
    }
    var DeltaJD2 = 0.000325 * Math.sin(A1) + 0.000165 * Math.sin(A2) + 0.000164 * Math.sin(A3) + 0.000126 * Math.sin(A4) + 0.00011 * Math.sin(A5) + 6.2E-05 * Math.sin(A6) + 6E-05 * Math.sin(A7) + 5.6E-05 * Math.sin(A8) + 4.7E-05 * Math.sin(A9) + 4.2E-05 * Math.sin(A10) + 4E-05 * Math.sin(A11) + 3.7E-05 * Math.sin(A12) + 3.5E-05 * Math.sin(A13) + 2.3E-05 * Math.sin(A14);
    JD += DeltaJD2;
    return JD;
  };
  var CAAMoonPhases$ = {

  };


  // CAANeptune

  function CAANeptune() {
  }
  CAANeptune.eclipticLongitude = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nL0Coefficients = GFX.g_L0NC.length;
    var L0 = 0;
    var i;
    for (i = 0; i < nL0Coefficients; i++) {
      L0 += GFX.g_L0NC[i].a * Math.cos(GFX.g_L0NC[i].b + GFX.g_L0NC[i].c * rho);
    }
    var nL1Coefficients = GFX.g_L1NC.length;
    var L1 = 0;
    for (i = 0; i < nL1Coefficients; i++) {
      L1 += GFX.g_L1NC[i].a * Math.cos(GFX.g_L1NC[i].b + GFX.g_L1NC[i].c * rho);
    }
    var nL2Coefficients = GFX.g_L2NC.length;
    var L2 = 0;
    for (i = 0; i < nL2Coefficients; i++) {
      L2 += GFX.g_L2NC[i].a * Math.cos(GFX.g_L2NC[i].b + GFX.g_L2NC[i].c * rho);
    }
    var nL3Coefficients = GFX.g_L3NC.length;
    var L3 = 0;
    for (i = 0; i < nL3Coefficients; i++) {
      L3 += GFX.g_L3NC[i].a * Math.cos(GFX.g_L3NC[i].b + GFX.g_L3NC[i].c * rho);
    }
    var nL4Coefficients = GFX.g_L4NC.length;
    var L4 = 0;
    for (i = 0; i < nL4Coefficients; i++) {
      L4 += GFX.g_L4NC[i].a * Math.cos(GFX.g_L4NC[i].b + GFX.g_L4NC[i].c * rho);
    }
    var vvalue = (L0 + L1 * rho + L2 * rhosquared + L3 * rhocubed + L4 * rho4) / 100000000;
    vvalue = CT.m360(CT.r2D(vvalue));
    return vvalue;
  };
  CAANeptune.eclipticLatitude = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nB0Coefficients = GFX.g_B0NC.length;
    var B0 = 0;
    var i;
    for (i = 0; i < nB0Coefficients; i++) {
      B0 += GFX.g_B0NC[i].a * Math.cos(GFX.g_B0NC[i].b + GFX.g_B0NC[i].c * rho);
    }
    var nB1Coefficients = GFX.g_B1NC.length;
    var B1 = 0;
    for (i = 0; i < nB1Coefficients; i++) {
      B1 += GFX.g_B1NC[i].a * Math.cos(GFX.g_B1NC[i].b + GFX.g_B1NC[i].c * rho);
    }
    var nB2Coefficients = GFX.g_B2NC.length;
    var B2 = 0;
    for (i = 0; i < nB2Coefficients; i++) {
      B2 += GFX.g_B2NC[i].a * Math.cos(GFX.g_B2NC[i].b + GFX.g_B2NC[i].c * rho);
    }
    var nB3Coefficients = GFX.g_B3NC.length;
    var B3 = 0;
    for (i = 0; i < nB3Coefficients; i++) {
      B3 += GFX.g_B3NC[i].a * Math.cos(GFX.g_B3NC[i].b + GFX.g_B3NC[i].c * rho);
    }
    var nB4Coefficients = GFX.g_B4NC.length;
    var B4 = 0;
    for (i = 0; i < nB4Coefficients; i++) {
      B4 += GFX.g_B4NC[i].a * Math.cos(GFX.g_B4NC[i].b + GFX.g_B4NC[i].c * rho);
    }
    var vvalue = (B0 + B1 * rho + B2 * rhosquared + B3 * rhocubed + B4 * rho4) / 100000000;
    vvalue = CT.r2D(vvalue);
    return vvalue;
  };
  CAANeptune.radiusVector = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var nR0Coefficients = GFX.g_R0NC.length;
    var R0 = 0;
    var i;
    for (i = 0; i < nR0Coefficients; i++) {
      R0 += GFX.g_R0NC[i].a * Math.cos(GFX.g_R0NC[i].b + GFX.g_R0NC[i].c * rho);
    }
    var nR1Coefficients = GFX.g_R1NC.length;
    var R1 = 0;
    for (i = 0; i < nR1Coefficients; i++) {
      R1 += GFX.g_R1NC[i].a * Math.cos(GFX.g_R1NC[i].b + GFX.g_R1NC[i].c * rho);
    }
    var nR2Coefficients = GFX.g_R2NC.length;
    var R2 = 0;
    for (i = 0; i < nR2Coefficients; i++) {
      R2 += GFX.g_R2NC[i].a * Math.cos(GFX.g_R2NC[i].b + GFX.g_R2NC[i].c * rho);
    }
    var nR3Coefficients = GFX.g_R3NC.length;
    var R3 = 0;
    for (i = 0; i < nR3Coefficients; i++) {
      R3 += GFX.g_R3NC[i].a * Math.cos(GFX.g_R3NC[i].b + GFX.g_R3NC[i].c * rho);
    }
    return (R0 + R1 * rho + R2 * rhosquared + R3 * rhocubed) / 100000000;
  };
  var CAANeptune$ = {

  };


  // CAANutation

  function CAANutation() {
  }
  CAANutation.nutationInLongitude = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var D = 297.85036 + 445267.11148 * T - 0.0019142 * Tsquared + Tcubed / 189474;
    D = CT.m360(D);
    var M = 357.52772 + 35999.05034 * T - 0.0001603 * Tsquared - Tcubed / 300000;
    M = CT.m360(M);
    var Mprime = 134.96298 + 477198.867398 * T + 0.0086972 * Tsquared + Tcubed / 56250;
    Mprime = CT.m360(Mprime);
    var F = 93.27191 + 483202.017538 * T - 0.0036825 * Tsquared + Tcubed / 327270;
    F = CT.m360(F);
    var omega = 125.04452 - 1934.136261 * T + 0.0020708 * Tsquared + Tcubed / 450000;
    omega = CT.m360(omega);
    var nCoefficients = GFX.g_NuC.length;
    var vvalue = 0;
    for (var i = 0; i < nCoefficients; i++) {
      var argument = GFX.g_NuC[i].d * D + GFX.g_NuC[i].m * M + GFX.g_NuC[i].mprime * Mprime + GFX.g_NuC[i].f * F + GFX.g_NuC[i].omega * omega;
      var radargument = CT.d2R(argument);
      vvalue += (GFX.g_NuC[i].sincoeff1 + GFX.g_NuC[i].sincoeff2 * T) * Math.sin(radargument) * 0.0001;
    }
    return vvalue;
  };
  CAANutation.nutationInObliquity = function(JD) {
    var T = (JD - 2451545) / 36525;
    var Tsquared = T * T;
    var Tcubed = Tsquared * T;
    var D = 297.85036 + 445267.11148 * T - 0.0019142 * Tsquared + Tcubed / 189474;
    D = CT.m360(D);
    var M = 357.52772 + 35999.05034 * T - 0.0001603 * Tsquared - Tcubed / 300000;
    M = CT.m360(M);
    var Mprime = 134.96298 + 477198.867398 * T + 0.0086972 * Tsquared + Tcubed / 56250;
    Mprime = CT.m360(Mprime);
    var F = 93.27191 + 483202.017538 * T - 0.0036825 * Tsquared + Tcubed / 327270;
    F = CT.m360(F);
    var omega = 125.04452 - 1934.136261 * T + 0.0020708 * Tsquared + Tcubed / 450000;
    omega = CT.m360(omega);
    var nCoefficients = GFX.g_NuC.length;
    var vvalue = 0;
    for (var i = 0; i < nCoefficients; i++) {
      var argument = GFX.g_NuC[i].d * D + GFX.g_NuC[i].m * M + GFX.g_NuC[i].mprime * Mprime + GFX.g_NuC[i].f * F + GFX.g_NuC[i].omega * omega;
      var radargument = CT.d2R(argument);
      vvalue += (GFX.g_NuC[i].coscoeff1 + GFX.g_NuC[i].coscoeff2 * T) * Math.cos(radargument) * 0.0001;
    }
    return vvalue;
  };
  CAANutation.nutationInRightAscension = function(Alpha, Delta, Obliquity, NutationInLongitude, NutationInObliquity) {
    Alpha = CT.h2R(Alpha);
    Delta = CT.d2R(Delta);
    Obliquity = CT.d2R(Obliquity);
    return (Math.cos(Obliquity) + Math.sin(Obliquity) * Math.sin(Alpha) * Math.tan(Delta)) * NutationInLongitude - Math.cos(Alpha) * Math.tan(Delta) * NutationInObliquity;
  };
  CAANutation.nutationInDeclination = function(Alpha, Delta, Obliquity, NutationInLongitude, NutationInObliquity) {
    Alpha = CT.h2R(Alpha);
    Delta = CT.d2R(Delta);
    Obliquity = CT.d2R(Obliquity);
    return Math.sin(Obliquity) * Math.cos(Alpha) * NutationInLongitude + Math.sin(Alpha) * NutationInObliquity;
  };
  CAANutation.meanObliquityOfEcliptic = function(JD) {
    var U = (JD - 2451545) / 3652500;
    var Usquared = U * U;
    var Ucubed = Usquared * U;
    var U4 = Ucubed * U;
    var U5 = U4 * U;
    var U6 = U5 * U;
    var U7 = U6 * U;
    var U8 = U7 * U;
    var U9 = U8 * U;
    var U10 = U9 * U;
    return CT.dmS2D(23, 26, 21.448) - CT.dmS2D(0, 0, 4680.93) * U - CT.dmS2D(0, 0, 1.55) * Usquared + CT.dmS2D(0, 0, 1999.25) * Ucubed - CT.dmS2D(0, 0, 51.38) * U4 - CT.dmS2D(0, 0, 249.67) * U5 - CT.dmS2D(0, 0, 39.05) * U6 + CT.dmS2D(0, 0, 7.12) * U7 + CT.dmS2D(0, 0, 27.87) * U8 + CT.dmS2D(0, 0, 5.79) * U9 + CT.dmS2D(0, 0, 2.45) * U10;
  };
  CAANutation.trueObliquityOfEcliptic = function(JD) {
    return CAANutation.meanObliquityOfEcliptic(JD) + CT.dmS2D(0, 0, CAANutation.nutationInObliquity(JD));
  };
  var CAANutation$ = {

  };


  // NUC

  function NUC(D, M, Mprime, F, omega, sincoeff1, sincoeff2, coscoeff1, coscoeff2) {
    this.d = 0;
    this.m = 0;
    this.mprime = 0;
    this.f = 0;
    this.omega = 0;
    this.sincoeff1 = 0;
    this.sincoeff2 = 0;
    this.coscoeff1 = 0;
    this.coscoeff2 = 0;
    this.d = D;
    this.m = M;
    this.mprime = Mprime;
    this.f = F;
    this.omega = omega;
    this.sincoeff1 = sincoeff1;
    this.sincoeff2 = sincoeff2;
    this.coscoeff1 = coscoeff1;
    this.coscoeff2 = coscoeff2;
  }
  var NUC$ = {

  };


  // CAATopocentricEclipticDetails

  function CAATopocentricEclipticDetails() {
    this.lambda = 0;
    this.beta = 0;
    this.semidiameter = 0;
    this.lambda = 0;
    this.beta = 0;
    this.semidiameter = 0;
  }
  var CAATopocentricEclipticDetails$ = {

  };


  // CAAParallax

  function CAAParallax() {
  }
  CAAParallax.equatorial2TopocentricDelta = function(Alpha, Delta, Distance, Longitude, Latitude, Height, JD) {
    var RhoSinThetaPrime = CAAGlobe.rhoSinThetaPrime(Latitude, Height);
    var RhoCosThetaPrime = CAAGlobe.rhoCosThetaPrime(Latitude, Height);
    var theta = CAASidereal.apparentGreenwichSiderealTime(JD);
    Delta = CT.d2R(Delta);
    var cosDelta = Math.cos(Delta);
    var pi = Math.asin(GFX.g_AAParallax_C1 / Distance);
    var H = CT.h2R(theta - Longitude / 15 - Alpha);
    var cosH = Math.cos(H);
    var sinH = Math.sin(H);
    var DeltaTopocentric = new COR();
    DeltaTopocentric.x = CT.r2H(-pi * RhoCosThetaPrime * sinH / cosDelta);
    DeltaTopocentric.y = CT.r2D(-pi * (RhoSinThetaPrime * cosDelta - RhoCosThetaPrime * cosH * Math.sin(Delta)));
    return DeltaTopocentric;
  };
  CAAParallax.equatorial2Topocentric = function(Alpha, Delta, Distance, Longitude, Latitude, Height, JD) {
    var RhoSinThetaPrime = CAAGlobe.rhoSinThetaPrime(Latitude, Height);
    var RhoCosThetaPrime = CAAGlobe.rhoCosThetaPrime(Latitude, Height);
    var theta = CAASidereal.apparentGreenwichSiderealTime(JD);
    Delta = CT.d2R(Delta);
    var cosDelta = Math.cos(Delta);
    var pi = Math.asin(GFX.g_AAParallax_C1 / Distance);
    var sinpi = Math.sin(pi);
    var H = CT.h2R(theta - Longitude / 15 - Alpha);
    var cosH = Math.cos(H);
    var sinH = Math.sin(H);
    var DeltaAlpha = Math.atan2(-RhoCosThetaPrime * sinpi * sinH, cosDelta - RhoCosThetaPrime * sinpi * cosH);
    var Topocentric = new COR();
    Topocentric.x = CT.m24(Alpha + CT.r2H(DeltaAlpha));
    Topocentric.y = CT.r2D(Math.atan2((Math.sin(Delta) - RhoSinThetaPrime * sinpi) * Math.cos(DeltaAlpha), cosDelta - RhoCosThetaPrime * sinpi * cosH));
    return Topocentric;
  };
  CAAParallax.ecliptic2Topocentric = function(Lambda, Beta, Semidiameter, Distance, Epsilon, Longitude, Latitude, Height, JD) {
    var S = CAAGlobe.rhoSinThetaPrime(Latitude, Height);
    var C = CAAGlobe.rhoCosThetaPrime(Latitude, Height);
    Lambda = CT.d2R(Lambda);
    Beta = CT.d2R(Beta);
    Epsilon = CT.d2R(Epsilon);
    Longitude = CT.d2R(Longitude);
    Latitude = CT.d2R(Latitude);
    Semidiameter = CT.d2R(Semidiameter);
    var sine = Math.sin(Epsilon);
    var cose = Math.cos(Epsilon);
    var cosBeta = Math.cos(Beta);
    var sinBeta = Math.sin(Beta);
    var theta = CAASidereal.apparentGreenwichSiderealTime(JD);
    theta = CT.h2R(theta);
    var sintheta = Math.sin(theta);
    var pi = Math.asin(GFX.g_AAParallax_C1 / Distance);
    var sinpi = Math.sin(pi);
    var N = Math.cos(Lambda) * cosBeta - C * sinpi * Math.cos(theta);
    var Topocentric = new CAATopocentricEclipticDetails();
    Topocentric.lambda = Math.atan2(Math.sin(Lambda) * cosBeta - sinpi * (S * sine + C * cose * sintheta), N);
    var cosTopocentricLambda = Math.cos(Topocentric.lambda);
    Topocentric.beta = Math.atan(cosTopocentricLambda * (sinBeta - sinpi * (S * cose - C * sine * sintheta)) / N);
    Topocentric.semidiameter = Math.asin(cosTopocentricLambda * Math.cos(Topocentric.beta) * Math.sin(Semidiameter) / N);
    Topocentric.semidiameter = CT.r2D(Topocentric.semidiameter);
    Topocentric.lambda = CT.m360(CT.r2D(Topocentric.lambda));
    Topocentric.beta = CT.r2D(Topocentric.beta);
    return Topocentric;
  };
  CAAParallax.parallaxToDistance = function(Parallax) {
    return GFX.g_AAParallax_C1 / Math.sin(CT.d2R(Parallax));
  };
  CAAParallax.distanceToParallax = function(Distance) {
    var pi = Math.asin(GFX.g_AAParallax_C1 / Distance);
    return CT.r2D(pi);
  };
  var CAAParallax$ = {

  };


  // CAAPhysicalJupiterDetails

  function CAAPhysicalJupiterDetails() {
    this.DE = 0;
    this.DS = 0;
    this.geometricw1 = 0;
    this.geometricw2 = 0;
    this.apparentw1 = 0;
    this.apparentw2 = 0;
    this.p = 0;
    this.DE = 0;
    this.DS = 0;
    this.geometricw1 = 0;
    this.geometricw2 = 0;
    this.apparentw1 = 0;
    this.apparentw2 = 0;
    this.p = 0;
  }
  var CAAPhysicalJupiterDetails$ = {

  };


  // CAAPhysicalJupiter

  function CAAPhysicalJupiter() {
  }
  CAAPhysicalJupiter.calculate = function(JD) {
    var details = new CAAPhysicalJupiterDetails();
    var d = JD - 2433282.5;
    var T1 = d / 36525;
    var alpha0 = 268 + 0.1061 * T1;
    var alpha0rad = CT.d2R(alpha0);
    var delta0 = 64.5 - 0.0164 * T1;
    var delta0rad = CT.d2R(delta0);
    var W1 = CT.m360(17.71 + 877.90003539 * d);
    var W2 = CT.m360(16.838 + 870.27003539 * d);
    var l0 = CAAEarth.eclipticLongitude(JD);
    var l0rad = CT.d2R(l0);
    var b0 = CAAEarth.eclipticLatitude(JD);
    var b0rad = CT.d2R(b0);
    var R = CAAEarth.radiusVector(JD);
    var l = CAAJupiter.eclipticLongitude(JD);
    var lrad = CT.d2R(l);
    var b = CAAJupiter.eclipticLatitude(JD);
    var brad = CT.d2R(b);
    var r = CAAJupiter.radiusVector(JD);
    var x = r * Math.cos(brad) * Math.cos(lrad) - R * Math.cos(l0rad);
    var y = r * Math.cos(brad) * Math.sin(lrad) - R * Math.sin(l0rad);
    var z = r * Math.sin(brad) - R * Math.sin(b0rad);
    var DELTA = Math.sqrt(x * x + y * y + z * z);
    l -= 0.01299 * DELTA / (r * r);
    lrad = CT.d2R(l);
    x = r * Math.cos(brad) * Math.cos(lrad) - R * Math.cos(l0rad);
    y = r * Math.cos(brad) * Math.sin(lrad) - R * Math.sin(l0rad);
    z = r * Math.sin(brad) - R * Math.sin(b0rad);
    DELTA = Math.sqrt(x * x + y * y + z * z);
    var e0 = CAANutation.meanObliquityOfEcliptic(JD);
    var e0rad = CT.d2R(e0);
    var alphas = Math.atan2(Math.cos(e0rad) * Math.sin(lrad) - Math.sin(e0rad) * Math.tan(brad), Math.cos(lrad));
    var deltas = Math.asin(Math.cos(e0rad) * Math.sin(brad) + Math.sin(e0rad) * Math.cos(brad) * Math.sin(lrad));
    details.DS = CT.r2D(Math.asin(-Math.sin(delta0rad) * Math.sin(deltas) - Math.cos(delta0rad) * Math.cos(deltas) * Math.cos(alpha0rad - alphas)));
    var u = y * Math.cos(e0rad) - z * Math.sin(e0rad);
    var v = y * Math.sin(e0rad) + z * Math.cos(e0rad);
    var alpharad = Math.atan2(u, x);
    var alpha = CT.r2D(alpharad);
    var deltarad = Math.atan2(v, Math.sqrt(x * x + u * u));
    var delta = CT.r2D(deltarad);
    var xi = Math.atan2(Math.sin(delta0rad) * Math.cos(deltarad) * Math.cos(alpha0rad - alpharad) - Math.sin(deltarad) * Math.cos(delta0rad), Math.cos(deltarad) * Math.sin(alpha0rad - alpharad));
    details.DE = CT.r2D(Math.asin(-Math.sin(delta0rad) * Math.sin(deltarad) - Math.cos(delta0rad) * Math.cos(deltarad) * Math.cos(alpha0rad - alpharad)));
    details.geometricw1 = CT.m360(W1 - CT.r2D(xi) - 5.07033 * DELTA);
    details.geometricw2 = CT.m360(W2 - CT.r2D(xi) - 5.02626 * DELTA);
    var C = 57.2958 * (2 * r * DELTA + R * R - r * r - DELTA * DELTA) / (4 * r * DELTA);
    if (Math.sin(lrad - l0rad) > 0) {
      details.apparentw1 = CT.m360(details.geometricw1 + C);
      details.apparentw2 = CT.m360(details.geometricw2 + C);
    }
    else {
      details.apparentw1 = CT.m360(details.geometricw1 - C);
      details.apparentw2 = CT.m360(details.geometricw2 - C);
    }
    var NutationInLongitude = CAANutation.nutationInLongitude(JD);
    var NutationInObliquity = CAANutation.nutationInObliquity(JD);
    e0 += NutationInObliquity / 3600;
    e0rad = CT.d2R(e0);
    alpha += 0.005693 * (Math.cos(alpharad) * Math.cos(l0rad) * Math.cos(e0rad) + Math.sin(alpharad) * Math.sin(l0rad)) / Math.cos(deltarad);
    alpha = CT.m360(alpha);
    alpharad = CT.d2R(alpha);
    delta += 0.005693 * (Math.cos(l0rad) * Math.cos(e0rad) * (Math.tan(e0rad) * Math.cos(deltarad) - Math.sin(alpharad) * Math.sin(deltarad)) + Math.cos(alpharad) * Math.sin(deltarad) * Math.sin(l0rad));
    deltarad = CT.d2R(delta);
    var NutationRA = CAANutation.nutationInRightAscension(alpha / 15, delta, e0, NutationInLongitude, NutationInObliquity);
    var alphadash = alpha + NutationRA / 3600;
    var alphadashrad = CT.d2R(alphadash);
    var NutationDec = CAANutation.nutationInDeclination(alpha / 15, delta, e0, NutationInLongitude, NutationInObliquity);
    var deltadash = delta + NutationDec / 3600;
    var deltadashrad = CT.d2R(deltadash);
    NutationRA = CAANutation.nutationInRightAscension(alpha0 / 15, delta0, e0, NutationInLongitude, NutationInObliquity);
    var alpha0dash = alpha0 + NutationRA / 3600;
    var alpha0dashrad = CT.d2R(alpha0dash);
    NutationDec = CAANutation.nutationInDeclination(alpha0 / 15, delta0, e0, NutationInLongitude, NutationInObliquity);
    var delta0dash = delta0 + NutationDec / 3600;
    var delta0dashrad = CT.d2R(delta0dash);
    details.p = CT.m360(CT.r2D(Math.atan2(Math.cos(delta0dashrad) * Math.sin(alpha0dashrad - alphadashrad), Math.sin(delta0dashrad) * Math.cos(deltadashrad) - Math.cos(delta0dashrad) * Math.sin(deltadashrad) * Math.cos(alpha0dashrad - alphadashrad))));
    return details;
  };
  var CAAPhysicalJupiter$ = {

  };


  // CAAPhysicalMarsDetails

  function CAAPhysicalMarsDetails() {
    this.DE = 0;
    this.DS = 0;
    this.w = 0;
    this.p = 0;
    this.x = 0;
    this.k = 0;
    this.q = 0;
    this.d = 0;
    this.DE = 0;
    this.DS = 0;
    this.w = 0;
    this.p = 0;
    this.x = 0;
    this.k = 0;
    this.q = 0;
    this.d = 0;
  }
  var CAAPhysicalMarsDetails$ = {

  };


  // CAAPhysicalMars

  function CAAPhysicalMars() {
  }
  CAAPhysicalMars.calculate = function(JD) {
    var details = new CAAPhysicalMarsDetails();
    var T = (JD - 2451545) / 36525;
    var Lambda0 = 352.9065 + 1.1733 * T;
    var Lambda0rad = CT.d2R(Lambda0);
    var Beta0 = 63.2818 - 0.00394 * T;
    var Beta0rad = CT.d2R(Beta0);
    var l0 = CAAEarth.eclipticLongitude(JD);
    var l0rad = CT.d2R(l0);
    var b0 = CAAEarth.eclipticLatitude(JD);
    var b0rad = CT.d2R(b0);
    var R = CAAEarth.radiusVector(JD);
    var PreviousLightTravelTime = 0;
    var LightTravelTime = 0;
    var x = 0;
    var y = 0;
    var z = 0;
    var bIterate = true;
    var DELTA = 0;
    var l = 0;
    var lrad = 0;
    var b = 0;
    var brad = 0;
    var r = 0;
    while (bIterate) {
      var JD2 = JD - LightTravelTime;
      l = CAAMars.eclipticLongitude(JD2);
      lrad = CT.d2R(l);
      b = CAAMars.eclipticLatitude(JD2);
      brad = CT.d2R(b);
      r = CAAMars.radiusVector(JD2);
      x = r * Math.cos(brad) * Math.cos(lrad) - R * Math.cos(l0rad);
      y = r * Math.cos(brad) * Math.sin(lrad) - R * Math.sin(l0rad);
      z = r * Math.sin(brad) - R * Math.sin(b0rad);
      DELTA = Math.sqrt(x * x + y * y + z * z);
      LightTravelTime = ELL.distanceToLightTime(DELTA);
      bIterate = (Math.abs(LightTravelTime - PreviousLightTravelTime) > 2E-06);
      if (bIterate) {
        PreviousLightTravelTime = LightTravelTime;
      }
    }
    var lambdarad = Math.atan2(y, x);
    var lambda = CT.r2D(lambdarad);
    var betarad = Math.atan2(z, Math.sqrt(x * x + y * y));
    var beta = CT.r2D(betarad);
    details.DE = CT.r2D(Math.asin(-Math.sin(Beta0rad) * Math.sin(betarad) - Math.cos(Beta0rad) * Math.cos(betarad) * Math.cos(Lambda0rad - lambdarad)));
    var N = 49.5581 + 0.7721 * T;
    var Nrad = CT.d2R(N);
    var ldash = l - 0.00697 / r;
    var ldashrad = CT.d2R(ldash);
    var bdash = b - 0.000225 * (Math.cos(lrad - Nrad) / r);
    var bdashrad = CT.d2R(bdash);
    details.DS = CT.r2D(Math.asin(-Math.sin(Beta0rad) * Math.sin(bdashrad) - Math.cos(Beta0rad) * Math.cos(bdashrad) * Math.cos(Lambda0rad - ldashrad)));
    var W = CT.m360(11.504 + 350.89200025 * (JD - LightTravelTime - 2433282.5));
    var e0 = CAANutation.meanObliquityOfEcliptic(JD);
    var e0rad = CT.d2R(e0);
    var PoleEquatorial = CT.ec2Eq(Lambda0, Beta0, e0);
    var alpha0rad = CT.h2R(PoleEquatorial.x);
    var delta0rad = CT.d2R(PoleEquatorial.y);
    var u = y * Math.cos(e0rad) - z * Math.sin(e0rad);
    var v = y * Math.sin(e0rad) + z * Math.cos(e0rad);
    var alpharad = Math.atan2(u, x);
    var alpha = CT.r2H(alpharad);
    var deltarad = Math.atan2(v, Math.sqrt(x * x + u * u));
    var delta = CT.r2D(deltarad);
    var xi = Math.atan2(Math.sin(delta0rad) * Math.cos(deltarad) * Math.cos(alpha0rad - alpharad) - Math.sin(deltarad) * Math.cos(delta0rad), Math.cos(deltarad) * Math.sin(alpha0rad - alpharad));
    details.w = CT.m360(W - CT.r2D(xi));
    var NutationInLongitude = CAANutation.nutationInLongitude(JD);
    var NutationInObliquity = CAANutation.nutationInObliquity(JD);
    lambda += 0.005693 * Math.cos(l0rad - lambdarad) / Math.cos(betarad);
    beta += 0.005693 * Math.sin(l0rad - lambdarad) * Math.sin(betarad);
    Lambda0 += NutationInLongitude / 3600;
    Lambda0rad = CT.d2R(Lambda0);
    lambda += NutationInLongitude / 3600;
    lambdarad = CT.d2R(lambda);
    e0 += NutationInObliquity / 3600;
    e0rad = CT.d2R(e0rad);
    var ApparentPoleEquatorial = CT.ec2Eq(Lambda0, Beta0, e0);
    var alpha0dash = CT.h2R(ApparentPoleEquatorial.x);
    var delta0dash = CT.d2R(ApparentPoleEquatorial.y);
    var ApparentMars = CT.ec2Eq(lambda, beta, e0);
    var alphadash = CT.h2R(ApparentMars.x);
    var deltadash = CT.d2R(ApparentMars.y);
    details.p = CT.m360(CT.r2D(Math.atan2(Math.cos(delta0dash) * Math.sin(alpha0dash - alphadash), Math.sin(delta0dash) * Math.cos(deltadash) - Math.cos(delta0dash) * Math.sin(deltadash) * Math.cos(alpha0dash - alphadash))));
    var SunLambda = CAASun.geometricEclipticLongitude(JD);
    var SunBeta = CAASun.geometricEclipticLatitude(JD);
    var SunEquatorial = CT.ec2Eq(SunLambda, SunBeta, e0);
    details.x = MIFR.positionAngle(SunEquatorial.x, SunEquatorial.y, alpha, delta);
    details.d = 9.36 / DELTA;
    details.k = IFR.illuminatedFraction2(r, R, DELTA);
    details.q = (1 - details.k) * details.d;
    return details;
  };
  var CAAPhysicalMars$ = {

  };


  // CAAPhysicalSunDetails

  function CAAPhysicalSunDetails() {
    this.p = 0;
    this.b0 = 0;
    this.l0 = 0;
    this.p = 0;
    this.b0 = 0;
    this.l0 = 0;
  }
  var CAAPhysicalSunDetails$ = {

  };


  // CAAPhysicalSun

  function CAAPhysicalSun() {
  }
  CAAPhysicalSun.calculate = function(JD) {
    var theta = CT.m360((JD - 2398220) * 360 / 25.38);
    var I = 7.25;
    var K = 73.6667 + 1.3958333 * (JD - 2396758) / 36525;
    var L = CAAEarth.eclipticLongitude(JD);
    var R = CAAEarth.radiusVector(JD);
    var SunLong = L + 180 - CT.dmS2D(0, 0, 20.4898 / R);
    var SunLongDash = SunLong + CT.dmS2D(0, 0, CAANutation.nutationInLongitude(JD));
    var epsilon = CAANutation.trueObliquityOfEcliptic(JD);
    epsilon = CT.d2R(epsilon);
    SunLong = CT.d2R(SunLong);
    SunLongDash = CT.d2R(SunLongDash);
    K = CT.d2R(K);
    I = CT.d2R(I);
    theta = CT.d2R(theta);
    var x = Math.atan(-Math.cos(SunLong) * Math.tan(epsilon));
    var y = Math.atan(-Math.cos(SunLong - K) * Math.tan(I));
    var details = new CAAPhysicalSunDetails();
    details.p = CT.r2D(x + y);
    details.b0 = CT.r2D(Math.asin(Math.sin(SunLong - K) * Math.sin(I)));
    var eta = Math.atan(Math.tan(SunLong - K) * Math.cos(I));
    details.l0 = CT.m360(CT.r2D(eta - theta));
    return details;
  };
  CAAPhysicalSun.timeOfStartOfRotation = function(C) {
    var JED = 2398140.227 + 27.2752316 * C;
    var M = CT.m360(281.96 + 26.882476 * C);
    M = CT.d2R(M);
    JED += (0.1454 * Math.sin(M) - 0.0085 * Math.sin(2 * M) - 0.0141 * Math.cos(2 * M));
    return JED;
  };
  var CAAPhysicalSun$ = {

  };


  // CAAPluto

  function CAAPluto() {
  }
  CAAPluto.eclipticLongitude = function(JD) {
    var T = (JD - 2451545) / 36525;
    var J = 34.35 + 3034.9057 * T;
    var S = 50.08 + 1222.1138 * T;
    var P = 238.96 + 144.96 * T;
    var L = 0;
    var nPlutoCoefficients = GFX.g_PlutoArgumentCoefficients.length;
    for (var i = 0; i < nPlutoCoefficients; i++) {
      var Alpha = GFX.g_PlutoArgumentCoefficients[i].j * J + GFX.g_PlutoArgumentCoefficients[i].s * S + GFX.g_PlutoArgumentCoefficients[i].p * P;
      Alpha = CT.d2R(Alpha);
      L += ((GFX.g_PlutoLongitudeCoefficients[i].a * Math.sin(Alpha)) + (GFX.g_PlutoLongitudeCoefficients[i].b * Math.cos(Alpha)));
    }
    L = L / 1000000;
    L += (238.958116 + 144.96 * T);
    L = CT.m360(L);
    return L;
  };
  CAAPluto.eclipticLatitude = function(JD) {
    var T = (JD - 2451545) / 36525;
    var J = 34.35 + 3034.9057 * T;
    var S = 50.08 + 1222.1138 * T;
    var P = 238.96 + 144.96 * T;
    var L = 0;
    var nPlutoCoefficients = GFX.g_PlutoArgumentCoefficients.length;
    for (var i = 0; i < nPlutoCoefficients; i++) {
      var Alpha = GFX.g_PlutoArgumentCoefficients[i].j * J + GFX.g_PlutoArgumentCoefficients[i].s * S + GFX.g_PlutoArgumentCoefficients[i].p * P;
      Alpha = CT.d2R(Alpha);
      L += ((GFX.g_PlutoLatitudeCoefficients[i].a * Math.sin(Alpha)) + (GFX.g_PlutoLatitudeCoefficients[i].b * Math.cos(Alpha)));
    }
    L = L / 1000000;
    L += -3.908239;
    return L;
  };
  CAAPluto.radiusVector = function(JD) {
    var T = (JD - 2451545) / 36525;
    var J = 34.35 + 3034.9057 * T;
    var S = 50.08 + 1222.1138 * T;
    var P = 238.96 + 144.96 * T;
    var R = 0;
    var nPlutoCoefficients = GFX.g_PlutoArgumentCoefficients.length;
    for (var i = 0; i < nPlutoCoefficients; i++) {
      var Alpha = GFX.g_PlutoArgumentCoefficients[i].j * J + GFX.g_PlutoArgumentCoefficients[i].s * S + GFX.g_PlutoArgumentCoefficients[i].p * P;
      Alpha = CT.d2R(Alpha);
      R += ((GFX.g_PlutoRadiusCoefficients[i].a * Math.sin(Alpha)) + (GFX.g_PlutoRadiusCoefficients[i].b * Math.cos(Alpha)));
    }
    R = R / 10000000;
    R += 40.7241346;
    return R;
  };
  var CAAPluto$ = {

  };


  // PlutoCoefficient1

  function PlutoCoefficient1(j, s, p) {
    this.j = 0;
    this.s = 0;
    this.p = 0;
    this.j = j;
    this.s = s;
    this.p = p;
  }
  var PlutoCoefficient1$ = {

  };


  // PlutoCoefficient2

  function PlutoCoefficient2(a, b) {
    this.a = 0;
    this.b = 0;
    this.a = a;
    this.b = b;
  }
  var PlutoCoefficient2$ = {

  };


  // CAAPrecession

  function CAAPrecession() {
  }
  CAAPrecession.precessEquatorial = function(Alpha, Delta, JD0, JD) {
    var T = (JD0 - 2451545) / 36525;
    var Tsquared = T * T;
    var t = (JD - JD0) / 36525;
    var tsquared = t * t;
    var tcubed = tsquared * t;
    Alpha = CT.h2R(Alpha);
    Delta = CT.d2R(Delta);
    var sigma = (2306.2181 + 1.39656 * T - 0.000139 * Tsquared) * t + (0.30188 - 3.44E-05 * T) * tsquared + 0.017988 * tcubed;
    sigma = CT.d2R(CT.dmS2D(0, 0, sigma));
    var zeta = (2306.2181 + 1.39656 * T - 0.000138 * Tsquared) * t + (1.09468 + 6.6E-05 * T) * tsquared + 0.018203 * tcubed;
    zeta = CT.d2R(CT.dmS2D(0, 0, zeta));
    var phi = (2004.3109 - 0.8533 * T - 0.000217 * Tsquared) * t - (0.42665 + 0.000217 * T) * tsquared - 0.041833 * tcubed;
    phi = CT.d2R(CT.dmS2D(0, 0, phi));
    var A = Math.cos(Delta) * Math.sin(Alpha + sigma);
    var B = Math.cos(phi) * Math.cos(Delta) * Math.cos(Alpha + sigma) - Math.sin(phi) * Math.sin(Delta);
    var C = Math.sin(phi) * Math.cos(Delta) * Math.cos(Alpha + sigma) + Math.cos(phi) * Math.sin(Delta);
    var vvalue = new COR();
    vvalue.x = CT.r2H(Math.atan2(A, B) + zeta);
    if (vvalue.x < 0) {
      vvalue.x += 24;
    }
    vvalue.y = CT.r2D(Math.asin(C));
    return vvalue;
  };
  CAAPrecession.precessEquatorialFK4 = function(Alpha, Delta, JD0, JD) {
    var T = (JD0 - 2415020.3135) / 36524.2199;
    var t = (JD - JD0) / 36524.2199;
    var tsquared = t * t;
    var tcubed = tsquared * t;
    Alpha = CT.h2R(Alpha);
    Delta = CT.d2R(Delta);
    var sigma = (2304.25 + 1.396 * T) * t + 0.302 * tsquared + 0.018 * tcubed;
    sigma = CT.d2R(CT.dmS2D(0, 0, sigma));
    var zeta = 0.791 * tsquared + 0.001 * tcubed;
    zeta = CT.d2R(CT.dmS2D(0, 0, zeta));
    zeta += sigma;
    var phi = (2004.682 - 0.853 * T) * t - 0.426 * tsquared - 0.042 * tcubed;
    phi = CT.d2R(CT.dmS2D(0, 0, phi));
    var A = Math.cos(Delta) * Math.sin(Alpha + sigma);
    var B = Math.cos(phi) * Math.cos(Delta) * Math.cos(Alpha + sigma) - Math.sin(phi) * Math.sin(Delta);
    var C = Math.sin(phi) * Math.cos(Delta) * Math.cos(Alpha + sigma) + Math.cos(phi) * Math.sin(Delta);
    var vvalue = new COR();
    vvalue.x = CT.r2H(Math.atan2(A, B) + zeta);
    if (vvalue.x < 0) {
      vvalue.x += 24;
    }
    vvalue.y = CT.r2D(Math.asin(C));
    return vvalue;
  };
  CAAPrecession.precessEcliptic = function(Lambda, Beta, JD0, JD) {
    var T = (JD0 - 2451545) / 36525;
    var Tsquared = T * T;
    var t = (JD - JD0) / 36525;
    var tsquared = t * t;
    var tcubed = tsquared * t;
    Lambda = CT.d2R(Lambda);
    Beta = CT.d2R(Beta);
    var eta = (47.0029 - 0.06603 * T + 0.000598 * Tsquared) * t + (-0.03302 + 0.000598 * T) * tsquared + 6E-05 * tcubed;
    eta = CT.d2R(CT.dmS2D(0, 0, eta));
    var pi = 174.876384 * 3600 + 3289.4789 * T + 0.60622 * Tsquared - (869.8089 + 0.50491 * T) * t + 0.03536 * tsquared;
    pi = CT.d2R(CT.dmS2D(0, 0, pi));
    var p = (5029.0966 + 2.22226 * T - 4.2E-05 * Tsquared) * t + (1.11113 - 4.2E-05 * T) * tsquared - 6E-06 * tcubed;
    p = CT.d2R(CT.dmS2D(0, 0, p));
    var A = Math.cos(eta) * Math.cos(Beta) * Math.sin(pi - Lambda) - Math.sin(eta) * Math.sin(Beta);
    var B = Math.cos(Beta) * Math.cos(pi - Lambda);
    var C = Math.cos(eta) * Math.sin(Beta) + Math.sin(eta) * Math.cos(Beta) * Math.sin(pi - Lambda);
    var vvalue = new COR();
    vvalue.x = CT.r2D(p + pi - Math.atan2(A, B));
    if (vvalue.x < 0) {
      vvalue.x += 360;
    }
    vvalue.y = CT.r2D(Math.asin(C));
    return vvalue;
  };
  CAAPrecession.equatorialPMToEcliptic = function(Alpha, Delta, Beta, PMAlpha, PMDelta, Epsilon) {
    Epsilon = CT.d2R(Epsilon);
    Alpha = CT.h2R(Alpha);
    Delta = CT.d2R(Delta);
    Beta = CT.d2R(Beta);
    var cosb = Math.cos(Beta);
    var sinEpsilon = Math.sin(Epsilon);
    var vvalue = new COR();
    vvalue.x = (PMDelta * sinEpsilon * Math.cos(Alpha) + PMAlpha * Math.cos(Delta) * (Math.cos(Epsilon) * Math.cos(Delta) + sinEpsilon * Math.sin(Delta) * Math.sin(Alpha))) / (cosb * cosb);
    vvalue.y = (PMDelta * (Math.cos(Epsilon) * Math.cos(Delta) + sinEpsilon * Math.sin(Delta) * Math.sin(Alpha)) - PMAlpha * sinEpsilon * Math.cos(Alpha) * Math.cos(Delta)) / cosb;
    return vvalue;
  };
  CAAPrecession.adjustPositionUsingUniformProperMotion = function(t, Alpha, Delta, PMAlpha, PMDelta) {
    var vvalue = new COR();
    vvalue.x = Alpha + (PMAlpha * t / 3600);
    vvalue.y = Delta + (PMDelta * t / 3600);
    return vvalue;
  };
  CAAPrecession.adjustPositionUsingMotionInSpace = function(r, DeltaR, t, Alpha, Delta, PMAlpha, PMDelta) {
    DeltaR /= 977792;
    PMAlpha /= 13751;
    PMDelta /= 206265;
    Alpha = CT.h2R(Alpha);
    Delta = CT.d2R(Delta);
    var x = r * Math.cos(Delta) * Math.cos(Alpha);
    var y = r * Math.cos(Delta) * Math.sin(Alpha);
    var z = r * Math.sin(Delta);
    var DeltaX = x / r * DeltaR - z * PMDelta * Math.cos(Alpha) - y * PMAlpha;
    var DeltaY = y / r * DeltaR - z * PMDelta * Math.sin(Alpha) + x * PMAlpha;
    var DeltaZ = z / r * DeltaR + r * PMDelta * Math.cos(Delta);
    x += t * DeltaX;
    y += t * DeltaY;
    z += t * DeltaZ;
    var vvalue = new COR();
    vvalue.x = CT.r2H(Math.atan2(y, x));
    if (vvalue.x < 0) {
      vvalue.x += 24;
    }
    vvalue.y = CT.r2D(Math.atan2(z, Math.sqrt(x * x + y * y)));
    return vvalue;
  };
  var CAAPrecession$ = {

  };


  // CAARiseTransitSetDetails

  function CAARiseTransitSetDetails() {
    this.bValid = false;
    this.rise = 0;
    this.transit = 0;
    this.set = 0;
    this.bValid = false;
    this.rise = 0;
    this.transit = 0;
    this.set = 0;
  }
  var CAARiseTransitSetDetails$ = {

  };


  // CAARiseTransitSet

  function CAARiseTransitSet() {
  }
  CAARiseTransitSet.rise = function(JD, Alpha1, Delta1, Alpha2, Delta2, Alpha3, Delta3, Longitude, Latitude, h0) {
    var details = new CAARiseTransitSetDetails();
    details.bValid = false;
    var theta0 = CAASidereal.apparentGreenwichSiderealTime(JD);
    theta0 *= 15;
    var deltaT = DYT.deltaT(JD);
    var Delta2Rad = CT.d2R(Delta2);
    var LatitudeRad = CT.d2R(Latitude);
    var h0Rad = CT.d2R(h0);
    var cosH0 = (Math.sin(h0Rad) - Math.sin(LatitudeRad) * Math.sin(Delta2Rad)) / (Math.cos(LatitudeRad) * Math.cos(Delta2Rad));
    if ((cosH0 > 1) || (cosH0 < -1)) {
      return details;
    }
    var H0 = Math.acos(cosH0);
    H0 = CT.r2D(H0);
    var M0 = (Alpha2 * 15 + Longitude - theta0) / 360;
    var M1 = M0 - H0 / 360;
    var M2 = M0 + H0 / 360;
    if (M0 > 1) {
      M0 -= 1;
    }
    else if (M0 < 0) {
      M0 += 1;
    }
    if (M1 > 1) {
      M1 -= 1;
    }
    else if (M1 < 0) {
      M1 += 1;
    }
    if (M2 > 1) {
      M2 -= 1;
    }
    else if (M2 < 0) {
      M2 += 1;
    }
    for (var i = 0; i < 2; i++) {
      var theta1 = theta0 + 360.985647 * M1;
      theta1 = CT.m360(theta1);
      var n = M1 + deltaT / 86400;
      var Alpha = INTP.interpolate(n, Alpha1, Alpha2, Alpha3);
      var Delta = INTP.interpolate(n, Delta1, Delta2, Delta3);
      var H = theta1 - Longitude - Alpha * 15;
      var Horizontal = CT.eq2H(H / 15, Delta, Latitude);
      var DeltaM = (Horizontal.y - h0) / (360 * Math.cos(CT.d2R(Delta)) * Math.cos(LatitudeRad) * Math.sin(CT.d2R(H)));
      M1 += DeltaM;
      theta1 = theta0 + 360.985647 * M0;
      theta1 = CT.m360(theta1);
      n = M0 + deltaT / 86400;
      Alpha = INTP.interpolate(n, Alpha1, Alpha2, Alpha3);
      H = theta1 - Longitude - Alpha * 15;
      if (H < -180) {
        H += 360;
      }
      DeltaM = -H / 360;
      M0 += DeltaM;
      theta1 = theta0 + 360.985647 * M2;
      theta1 = CT.m360(theta1);
      n = M2 + deltaT / 86400;
      Alpha = INTP.interpolate(n, Alpha1, Alpha2, Alpha3);
      Delta = INTP.interpolate(n, Delta1, Delta2, Delta3);
      H = theta1 - Longitude - Alpha * 15;
      Horizontal = CT.eq2H(H / 15, Delta, Latitude);
      DeltaM = (Horizontal.y - h0) / (360 * Math.cos(CT.d2R(Delta)) * Math.cos(LatitudeRad) * Math.sin(CT.d2R(H)));
      M2 += DeltaM;
    }
    details.bValid = true;
    details.rise = M1 * 24;
    details.set = M2 * 24;
    details.transit = M0 * 24;
    return details;
  };
  var CAARiseTransitSet$ = {

  };


  // CAASaturn

  function CAASaturn() {
  }
  CAASaturn.eclipticLongitude = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nL0Coefficients = GFX.g_L0SaturnCoefficients.length;
    var L0 = 0;
    var i;
    for (i = 0; i < nL0Coefficients; i++) {
      L0 += GFX.g_L0SaturnCoefficients[i].a * Math.cos(GFX.g_L0SaturnCoefficients[i].b + GFX.g_L0SaturnCoefficients[i].c * rho);
    }
    var nL1Coefficients = GFX.g_L1SaturnCoefficients.length;
    var L1 = 0;
    for (i = 0; i < nL1Coefficients; i++) {
      L1 += GFX.g_L1SaturnCoefficients[i].a * Math.cos(GFX.g_L1SaturnCoefficients[i].b + GFX.g_L1SaturnCoefficients[i].c * rho);
    }
    var nL2Coefficients = GFX.g_L2SaturnCoefficients.length;
    var L2 = 0;
    for (i = 0; i < nL2Coefficients; i++) {
      L2 += GFX.g_L2SaturnCoefficients[i].a * Math.cos(GFX.g_L2SaturnCoefficients[i].b + GFX.g_L2SaturnCoefficients[i].c * rho);
    }
    var nL3Coefficients = GFX.g_L3SaturnCoefficients.length;
    var L3 = 0;
    for (i = 0; i < nL3Coefficients; i++) {
      L3 += GFX.g_L3SaturnCoefficients[i].a * Math.cos(GFX.g_L3SaturnCoefficients[i].b + GFX.g_L3SaturnCoefficients[i].c * rho);
    }
    var nL4Coefficients = GFX.g_L4SaturnCoefficients.length;
    var L4 = 0;
    for (i = 0; i < nL4Coefficients; i++) {
      L4 += GFX.g_L4SaturnCoefficients[i].a * Math.cos(GFX.g_L4SaturnCoefficients[i].b + GFX.g_L4SaturnCoefficients[i].c * rho);
    }
    var nL5Coefficients = GFX.g_L5SaturnCoefficients.length;
    var L5 = 0;
    for (i = 0; i < nL5Coefficients; i++) {
      L5 += GFX.g_L5SaturnCoefficients[i].a * Math.cos(GFX.g_L5SaturnCoefficients[i].b + GFX.g_L5SaturnCoefficients[i].c * rho);
    }
    var vvalue = (L0 + L1 * rho + L2 * rhosquared + L3 * rhocubed + L4 * rho4 + L5 * rho5) / 100000000;
    vvalue = CT.m360(CT.r2D(vvalue));
    return vvalue;
  };
  CAASaturn.eclipticLatitude = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nB0Coefficients = GFX.g_B0SaturnCoefficients.length;
    var B0 = 0;
    var i;
    for (i = 0; i < nB0Coefficients; i++) {
      B0 += GFX.g_B0SaturnCoefficients[i].a * Math.cos(GFX.g_B0SaturnCoefficients[i].b + GFX.g_B0SaturnCoefficients[i].c * rho);
    }
    var nB1Coefficients = GFX.g_B1SaturnCoefficients.length;
    var B1 = 0;
    for (i = 0; i < nB1Coefficients; i++) {
      B1 += GFX.g_B1SaturnCoefficients[i].a * Math.cos(GFX.g_B1SaturnCoefficients[i].b + GFX.g_B1SaturnCoefficients[i].c * rho);
    }
    var nB2Coefficients = GFX.g_B2SaturnCoefficients.length;
    var B2 = 0;
    for (i = 0; i < nB2Coefficients; i++) {
      B2 += GFX.g_B2SaturnCoefficients[i].a * Math.cos(GFX.g_B2SaturnCoefficients[i].b + GFX.g_B2SaturnCoefficients[i].c * rho);
    }
    var nB3Coefficients = GFX.g_B3SaturnCoefficients.length;
    var B3 = 0;
    for (i = 0; i < nB3Coefficients; i++) {
      B3 += GFX.g_B3SaturnCoefficients[i].a * Math.cos(GFX.g_B3SaturnCoefficients[i].b + GFX.g_B3SaturnCoefficients[i].c * rho);
    }
    var nB4Coefficients = GFX.g_B4SaturnCoefficients.length;
    var B4 = 0;
    for (i = 0; i < nB4Coefficients; i++) {
      B4 += GFX.g_B4SaturnCoefficients[i].a * Math.cos(GFX.g_B4SaturnCoefficients[i].b + GFX.g_B4SaturnCoefficients[i].c * rho);
    }
    var nB5Coefficients = GFX.g_B5SaturnCoefficients.length;
    var B5 = 0;
    for (i = 0; i < nB5Coefficients; i++) {
      B5 += GFX.g_B5SaturnCoefficients[i].a * Math.cos(GFX.g_B5SaturnCoefficients[i].b + GFX.g_B5SaturnCoefficients[i].c * rho);
    }
    var vvalue = (B0 + B1 * rho + B2 * rhosquared + B3 * rhocubed + B4 * rho4 + B5 * rho5) / 100000000;
    vvalue = CT.r2D(vvalue);
    return vvalue;
  };
  CAASaturn.radiusVector = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nR0Coefficients = GFX.g_R0SaturnCoefficients.length;
    var R0 = 0;
    var i;
    for (i = 0; i < nR0Coefficients; i++) {
      R0 += GFX.g_R0SaturnCoefficients[i].a * Math.cos(GFX.g_R0SaturnCoefficients[i].b + GFX.g_R0SaturnCoefficients[i].c * rho);
    }
    var nR1Coefficients = GFX.g_R1SaturnCoefficients.length;
    var R1 = 0;
    for (i = 0; i < nR1Coefficients; i++) {
      R1 += GFX.g_R1SaturnCoefficients[i].a * Math.cos(GFX.g_R1SaturnCoefficients[i].b + GFX.g_R1SaturnCoefficients[i].c * rho);
    }
    var nR2Coefficients = GFX.g_R2SaturnCoefficients.length;
    var R2 = 0;
    for (i = 0; i < nR2Coefficients; i++) {
      R2 += GFX.g_R2SaturnCoefficients[i].a * Math.cos(GFX.g_R2SaturnCoefficients[i].b + GFX.g_R2SaturnCoefficients[i].c * rho);
    }
    var nR3Coefficients = GFX.g_R3SaturnCoefficients.length;
    var R3 = 0;
    for (i = 0; i < nR3Coefficients; i++) {
      R3 += GFX.g_R3SaturnCoefficients[i].a * Math.cos(GFX.g_R3SaturnCoefficients[i].b + GFX.g_R3SaturnCoefficients[i].c * rho);
    }
    var nR4Coefficients = GFX.g_R4SaturnCoefficients.length;
    var R4 = 0;
    for (i = 0; i < nR4Coefficients; i++) {
      R4 += GFX.g_R4SaturnCoefficients[i].a * Math.cos(GFX.g_R4SaturnCoefficients[i].b + GFX.g_R4SaturnCoefficients[i].c * rho);
    }
    var nR5Coefficients = GFX.g_R5SaturnCoefficients.length;
    var R5 = 0;
    for (i = 0; i < nR5Coefficients; i++) {
      R5 += GFX.g_R5SaturnCoefficients[i].a * Math.cos(GFX.g_R5SaturnCoefficients[i].b + GFX.g_R5SaturnCoefficients[i].c * rho);
    }
    return (R0 + R1 * rho + R2 * rhosquared + R3 * rhocubed + R4 * rho4 + R5 * rho5) / 100000000;
  };
  var CAASaturn$ = {

  };


  // CAASaturnRingDetails

  function CAASaturnRingDetails() {
    this.b = 0;
    this.bdash = 0;
    this.p = 0;
    this.a = 0;
    this.b = 0;
    this.deltaU = 0;
    this.b = 0;
    this.bdash = 0;
    this.p = 0;
    this.a = 0;
    this.b = 0;
    this.deltaU = 0;
  }
  var CAASaturnRingDetails$ = {

  };


  // CAASaturnRings

  function CAASaturnRings() {
  }
  CAASaturnRings.calculate = function(JD) {
    var details = new CAASaturnRingDetails();
    var T = (JD - 2451545) / 36525;
    var T2 = T * T;
    var i = 28.075216 - 0.012998 * T + 4E-06 * T2;
    var irad = CT.d2R(i);
    var omega = 169.50847 + 1.394681 * T + 0.000412 * T2;
    var omegarad = CT.d2R(omega);
    var l0 = CAAEarth.eclipticLongitude(JD);
    var b0 = CAAEarth.eclipticLatitude(JD);
    l0 += CAAFK5.correctionInLongitude(l0, b0, JD);
    var l0rad = CT.d2R(l0);
    b0 += CAAFK5.correctionInLatitude(l0, JD);
    var b0rad = CT.d2R(b0);
    var R = CAAEarth.radiusVector(JD);
    var DELTA = 9;
    var PreviousEarthLightTravelTime = 0;
    var EarthLightTravelTime = ELL.distanceToLightTime(DELTA);
    var JD1 = JD - EarthLightTravelTime;
    var bIterate = true;
    var x = 0;
    var y = 0;
    var z = 0;
    var l = 0;
    var b = 0;
    var r = 0;
    while (bIterate) {
      l = CAASaturn.eclipticLongitude(JD1);
      b = CAASaturn.eclipticLatitude(JD1);
      l += CAAFK5.correctionInLongitude(l, b, JD1);
      b += CAAFK5.correctionInLatitude(l, JD1);
      var lrad = CT.d2R(l);
      var brad = CT.d2R(b);
      r = CAASaturn.radiusVector(JD1);
      x = r * Math.cos(brad) * Math.cos(lrad) - R * Math.cos(l0rad);
      y = r * Math.cos(brad) * Math.sin(lrad) - R * Math.sin(l0rad);
      z = r * Math.sin(brad) - R * Math.sin(b0rad);
      DELTA = Math.sqrt(x * x + y * y + z * z);
      EarthLightTravelTime = ELL.distanceToLightTime(DELTA);
      bIterate = (Math.abs(EarthLightTravelTime - PreviousEarthLightTravelTime) > 2E-06);
      if (bIterate) {
        JD1 = JD - EarthLightTravelTime;
        PreviousEarthLightTravelTime = EarthLightTravelTime;
      }
    }
    var lambda = Math.atan2(y, x);
    var beta = Math.atan2(z, Math.sqrt(x * x + y * y));
    details.b = Math.asin(Math.sin(irad) * Math.cos(beta) * Math.sin(lambda - omegarad) - Math.cos(irad) * Math.sin(beta));
    details.a = 375.35 / DELTA;
    details.b = details.a * Math.sin(Math.abs(details.b));
    details.b = CT.r2D(details.b);
    var N = 113.6655 + 0.8771 * T;
    var Nrad = CT.d2R(N);
    var ldash = l - 0.01759 / r;
    var ldashrad = CT.d2R(ldash);
    var bdash = b - 0.000764 * Math.cos(ldashrad - Nrad) / r;
    var bdashrad = CT.d2R(bdash);
    details.bdash = CT.r2D(Math.asin(Math.sin(irad) * Math.cos(bdashrad) * Math.sin(ldashrad - omegarad) - Math.cos(irad) * Math.sin(bdashrad)));
    var U1 = Math.atan2(Math.sin(irad) * Math.sin(bdashrad) + Math.cos(irad) * Math.cos(bdashrad) * Math.sin(ldashrad - omegarad), Math.cos(bdashrad) * Math.cos(ldashrad - omegarad));
    var U2 = Math.atan2(Math.sin(irad) * Math.sin(beta) + Math.cos(irad) * Math.cos(beta) * Math.sin(lambda - omegarad), Math.cos(beta) * Math.cos(lambda - omegarad));
    details.deltaU = CT.r2D(Math.abs(U1 - U2));
    var Obliquity = CAANutation.trueObliquityOfEcliptic(JD);
    var NutationInLongitude = CAANutation.nutationInLongitude(JD);
    var lambda0 = omega - 90;
    var beta0 = 90 - i;
    lambda += CT.d2R(0.005693 * Math.cos(l0rad - lambda) / Math.cos(beta));
    beta += CT.d2R(0.005693 * Math.sin(l0rad - lambda) * Math.sin(beta));
    lambda = CT.r2D(lambda);
    lambda += NutationInLongitude / 3600;
    lambda = CT.m360(lambda);
    lambda0 += NutationInLongitude / 3600;
    lambda0 = CT.m360(lambda0);
    beta = CT.r2D(beta);
    var GeocentricEclipticSaturn = CT.ec2Eq(lambda, beta, Obliquity);
    var alpha = CT.h2R(GeocentricEclipticSaturn.x);
    var delta = CT.d2R(GeocentricEclipticSaturn.y);
    var GeocentricEclipticNorthPole = CT.ec2Eq(lambda0, beta0, Obliquity);
    var alpha0 = CT.h2R(GeocentricEclipticNorthPole.x);
    var delta0 = CT.d2R(GeocentricEclipticNorthPole.y);
    details.p = CT.r2D(Math.atan2(Math.cos(delta0) * Math.sin(alpha0 - alpha), Math.sin(delta0) * Math.cos(delta) - Math.cos(delta0) * Math.sin(delta) * Math.cos(alpha0 - alpha)));
    return details;
  };
  var CAASaturnRings$ = {

  };


  // CAASidereal

  function CAASidereal() {
  }
  CAASidereal.meanGreenwichSiderealTime = function(JD) {
    var date = new DT();
    date.setJD(JD, DT.afterPapalReformJD(JD));
    var D = date.get();
    var Year = ss.truncate(D[0]);
    var Month = ss.truncate(D[1]);
    var Day = ss.truncate(D[2]);
    var Hour = ss.truncate(D[3]);
    var Minute = ss.truncate(D[4]);
    var Second = D[5];
    date.set(Year, Month, Day, 0, 0, 0, date.inGregorianCalendar());
    var JDMidnight = date.julian();
    var T = (JDMidnight - 2451545) / 36525;
    var TSquared = T * T;
    var TCubed = TSquared * T;
    var Value = 100.46061837 + (36000.770053608 * T) + (0.000387933 * TSquared) - (TCubed / 38710000);
    Value += (((Hour * 15) + (Minute * 0.25) + (Second * 0.00416666666666667)) * 1.00273790935);
    Value = CT.d2H(Value);
    return CT.m24(Value);
  };
  CAASidereal.apparentGreenwichSiderealTime = function(JD) {
    var MeanObliquity = CAANutation.meanObliquityOfEcliptic(JD);
    var TrueObliquity = MeanObliquity + CAANutation.nutationInObliquity(JD) / 3600;
    var NutationInLongitude = CAANutation.nutationInLongitude(JD);
    var Value = CAASidereal.meanGreenwichSiderealTime(JD) + (NutationInLongitude * Math.cos(CT.d2R(TrueObliquity)) / 54000);
    return CT.m24(Value);
  };
  var CAASidereal$ = {

  };


  // CAAStellarMagnitudes

  function CAAStellarMagnitudes() {
  }
  CAAStellarMagnitudes.combinedMagnitude = function(m1, m2) {
    var x = 0.4 * (m2 - m1);
    return m2 - 2.5 * Util.log10(Math.pow(10, x) + 1);
  };
  CAAStellarMagnitudes.combinedMagnitude2 = function(Magnitudes, pMagnitudes) {
    var vvalue = 0;
    for (var i = 0; i < Magnitudes; i++) {
      vvalue += Math.pow(10, -0.4 * pMagnitudes[i]);
    }
    return -2.5 * Util.log10(vvalue);
  };
  CAAStellarMagnitudes.brightnessRatio = function(m1, m2) {
    var x = 0.4 * (m2 - m1);
    return Math.pow(10, x);
  };
  CAAStellarMagnitudes.magnitudeDifference = function(brightnessRatio) {
    return 2.5 * Util.log10(brightnessRatio);
  };
  var CAAStellarMagnitudes$ = {

  };


  // CAASun

  function CAASun() {
  }
  CAASun.geometricEclipticLongitude = function(JD) {
    return CT.m360(CAAEarth.eclipticLongitude(JD) + 180);
  };
  CAASun.geometricEclipticLatitude = function(JD) {
    return -CAAEarth.eclipticLatitude(JD);
  };
  CAASun.geometricEclipticLongitudeJ2000 = function(JD) {
    return CT.m360(CAAEarth.eclipticLongitudeJ2000(JD) + 180);
  };
  CAASun.geometricEclipticLatitudeJ2000 = function(JD) {
    return -CAAEarth.eclipticLatitudeJ2000(JD);
  };
  CAASun.geometricFK5EclipticLongitude = function(JD) {
    var Longitude = CAASun.geometricEclipticLongitude(JD);
    var Latitude = CAASun.geometricEclipticLatitude(JD);
    Longitude += CAAFK5.correctionInLongitude(Longitude, Latitude, JD);
    return Longitude;
  };
  CAASun.geometricFK5EclipticLatitude = function(JD) {
    var Longitude = CAASun.geometricEclipticLongitude(JD);
    var Latitude = CAASun.geometricEclipticLatitude(JD);
    var SunLatCorrection = CAAFK5.correctionInLatitude(Longitude, JD);
    Latitude += SunLatCorrection;
    return Latitude;
  };
  CAASun.apparentEclipticLongitude = function(JD) {
    var Longitude = CAASun.geometricFK5EclipticLongitude(JD);
    Longitude += CT.dmS2D(0, 0, CAANutation.nutationInLongitude(JD));
    var R = CAAEarth.radiusVector(JD);
    Longitude -= CT.dmS2D(0, 0, 20.4898 / R);
    return Longitude;
  };
  CAASun.apparentEclipticLatitude = function(JD) {
    return CAASun.geometricFK5EclipticLatitude(JD);
  };
  CAASun.eclipticRectangularCoordinatesMeanEquinox = function(JD) {
    var Longitude = CT.d2R(CAASun.geometricFK5EclipticLongitude(JD));
    var Latitude = CT.d2R(CAASun.geometricFK5EclipticLatitude(JD));
    var R = CAAEarth.radiusVector(JD);
    var epsilon = CT.d2R(CAANutation.meanObliquityOfEcliptic(JD));
    var vvalue = new C3D();
    vvalue.x = R * Math.cos(Latitude) * Math.cos(Longitude);
    vvalue.y = R * (Math.cos(Latitude) * Math.sin(Longitude) * Math.cos(epsilon) - Math.sin(Latitude) * Math.sin(epsilon));
    vvalue.z = R * (Math.cos(Latitude) * Math.sin(Longitude) * Math.sin(epsilon) + Math.sin(Latitude) * Math.cos(epsilon));
    return vvalue;
  };
  CAASun.eclipticRectangularCoordinatesJ2000 = function(JD) {
    var Longitude = CAASun.geometricEclipticLongitudeJ2000(JD);
    Longitude = CT.d2R(Longitude);
    var Latitude = CAASun.geometricEclipticLatitudeJ2000(JD);
    Latitude = CT.d2R(Latitude);
    var R = CAAEarth.radiusVector(JD);
    var vvalue = new C3D();
    var coslatitude = Math.cos(Latitude);
    vvalue.x = R * coslatitude * Math.cos(Longitude);
    vvalue.y = R * coslatitude * Math.sin(Longitude);
    vvalue.z = R * Math.sin(Latitude);
    return vvalue;
  };
  CAASun.equatorialRectangularCoordinatesJ2000 = function(JD) {
    var vvalue = CAASun.eclipticRectangularCoordinatesJ2000(JD);
    vvalue = CAAFK5.convertVSOPToFK5J2000(vvalue);
    return vvalue;
  };
  CAASun.equatorialRectangularCoordinatesB1950 = function(JD) {
    var vvalue = CAASun.eclipticRectangularCoordinatesJ2000(JD);
    vvalue = CAAFK5.convertVSOPToFK5B1950(vvalue);
    return vvalue;
  };
  CAASun.equatorialRectangularCoordinatesAnyEquinox = function(JD, JDEquinox) {
    var vvalue = CAASun.equatorialRectangularCoordinatesJ2000(JD);
    vvalue = CAAFK5.convertVSOPToFK5AnyEquinox(vvalue, JDEquinox);
    return vvalue;
  };
  var CAASun$ = {

  };


  // CAAUranus

  function CAAUranus() {
  }
  CAAUranus.eclipticLongitude = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nL0Coefficients = GFX.g_L0UranusCoefficients.length;
    var L0 = 0;
    var i;
    for (i = 0; i < nL0Coefficients; i++) {
      L0 += GFX.g_L0UranusCoefficients[i].a * Math.cos(GFX.g_L0UranusCoefficients[i].b + GFX.g_L0UranusCoefficients[i].c * rho);
    }
    var nL1Coefficients = GFX.g_L1UranusCoefficients.length;
    var L1 = 0;
    for (i = 0; i < nL1Coefficients; i++) {
      L1 += GFX.g_L1UranusCoefficients[i].a * Math.cos(GFX.g_L1UranusCoefficients[i].b + GFX.g_L1UranusCoefficients[i].c * rho);
    }
    var nL2Coefficients = GFX.g_L2UranusCoefficients.length;
    var L2 = 0;
    for (i = 0; i < nL2Coefficients; i++) {
      L2 += GFX.g_L2UranusCoefficients[i].a * Math.cos(GFX.g_L2UranusCoefficients[i].b + GFX.g_L2UranusCoefficients[i].c * rho);
    }
    var nL3Coefficients = GFX.g_L3UranusCoefficients.length;
    var L3 = 0;
    for (i = 0; i < nL3Coefficients; i++) {
      L3 += GFX.g_L3UranusCoefficients[i].a * Math.cos(GFX.g_L3UranusCoefficients[i].b + GFX.g_L3UranusCoefficients[i].c * rho);
    }
    var nL4Coefficients = GFX.g_L4UranusCoefficients.length;
    var L4 = 0;
    for (i = 0; i < nL4Coefficients; i++) {
      L4 += GFX.g_L4UranusCoefficients[i].a * Math.cos(GFX.g_L4UranusCoefficients[i].b + GFX.g_L4UranusCoefficients[i].c * rho);
    }
    var vvalue = (L0 + L1 * rho + L2 * rhosquared + L3 * rhocubed + L4 * rho4) / 100000000;
    vvalue = CT.m360(CT.r2D(vvalue));
    return vvalue;
  };
  CAAUranus.eclipticLatitude = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nB0Coefficients = GFX.g_B0UranusCoefficients.length;
    var B0 = 0;
    var i;
    for (i = 0; i < nB0Coefficients; i++) {
      B0 += GFX.g_B0UranusCoefficients[i].a * Math.cos(GFX.g_B0UranusCoefficients[i].b + GFX.g_B0UranusCoefficients[i].c * rho);
    }
    var nB1Coefficients = GFX.g_B1UranusCoefficients.length;
    var B1 = 0;
    for (i = 0; i < nB1Coefficients; i++) {
      B1 += GFX.g_B1UranusCoefficients[i].a * Math.cos(GFX.g_B1UranusCoefficients[i].b + GFX.g_B1UranusCoefficients[i].c * rho);
    }
    var nB2Coefficients = GFX.g_B2UranusCoefficients.length;
    var B2 = 0;
    for (i = 0; i < nB2Coefficients; i++) {
      B2 += GFX.g_B2UranusCoefficients[i].a * Math.cos(GFX.g_B2UranusCoefficients[i].b + GFX.g_B2UranusCoefficients[i].c * rho);
    }
    var nB3Coefficients = GFX.g_B3UranusCoefficients.length;
    var B3 = 0;
    for (i = 0; i < nB3Coefficients; i++) {
      B3 += GFX.g_B3UranusCoefficients[i].a * Math.cos(GFX.g_B3UranusCoefficients[i].b + GFX.g_B3UranusCoefficients[i].c * rho);
    }
    var nB4Coefficients = GFX.g_B4UranusCoefficients.length;
    var B4 = 0;
    for (i = 0; i < nB4Coefficients; i++) {
      B4 += GFX.g_B4UranusCoefficients[i].a * Math.cos(GFX.g_B4UranusCoefficients[i].b + GFX.g_B4UranusCoefficients[i].c * rho);
    }
    var vvalue = (B0 + B1 * rho + B2 * rhosquared + B3 * rhocubed + B4 * rho4) / 100000000;
    vvalue = CT.r2D(vvalue);
    return vvalue;
  };
  CAAUranus.radiusVector = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nR0Coefficients = GFX.g_R0UranusCoefficients.length;
    var R0 = 0;
    var i;
    for (i = 0; i < nR0Coefficients; i++) {
      R0 += GFX.g_R0UranusCoefficients[i].a * Math.cos(GFX.g_R0UranusCoefficients[i].b + GFX.g_R0UranusCoefficients[i].c * rho);
    }
    var nR1Coefficients = GFX.g_R1UranusCoefficients.length;
    var R1 = 0;
    for (i = 0; i < nR1Coefficients; i++) {
      R1 += GFX.g_R1UranusCoefficients[i].a * Math.cos(GFX.g_R1UranusCoefficients[i].b + GFX.g_R1UranusCoefficients[i].c * rho);
    }
    var nR2Coefficients = GFX.g_R2UranusCoefficients.length;
    var R2 = 0;
    for (i = 0; i < nR2Coefficients; i++) {
      R2 += GFX.g_R2UranusCoefficients[i].a * Math.cos(GFX.g_R2UranusCoefficients[i].b + GFX.g_R2UranusCoefficients[i].c * rho);
    }
    var nR3Coefficients = GFX.g_R3UranusCoefficients.length;
    var R3 = 0;
    for (i = 0; i < nR3Coefficients; i++) {
      R3 += GFX.g_R3UranusCoefficients[i].a * Math.cos(GFX.g_R3UranusCoefficients[i].b + GFX.g_R3UranusCoefficients[i].c * rho);
    }
    var nR4Coefficients = GFX.g_R4UranusCoefficients.length;
    var R4 = 0;
    for (i = 0; i < nR4Coefficients; i++) {
      R4 += GFX.g_R4UranusCoefficients[i].a * Math.cos(GFX.g_R4UranusCoefficients[i].b + GFX.g_R4UranusCoefficients[i].c * rho);
    }
    return (R0 + R1 * rho + R2 * rhosquared + R3 * rhocubed + R4 * rho4) / 100000000;
  };
  var CAAUranus$ = {

  };


  // CAAVenus

  function CAAVenus() {
  }
  CAAVenus.eclipticLongitude = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var rho5 = rho4 * rho;
    var nL0Coefficients = GFX.g_L0VenusCoefficients.length;
    var L0 = 0;
    var i;
    for (i = 0; i < nL0Coefficients; i++) {
      L0 += GFX.g_L0VenusCoefficients[i].a * Math.cos(GFX.g_L0VenusCoefficients[i].b + GFX.g_L0VenusCoefficients[i].c * rho);
    }
    var nL1Coefficients = GFX.g_L1VenusCoefficients.length;
    var L1 = 0;
    for (i = 0; i < nL1Coefficients; i++) {
      L1 += GFX.g_L1VenusCoefficients[i].a * Math.cos(GFX.g_L1VenusCoefficients[i].b + GFX.g_L1VenusCoefficients[i].c * rho);
    }
    var nL2Coefficients = GFX.g_L2VenusCoefficients.length;
    var L2 = 0;
    for (i = 0; i < nL2Coefficients; i++) {
      L2 += GFX.g_L2VenusCoefficients[i].a * Math.cos(GFX.g_L2VenusCoefficients[i].b + GFX.g_L2VenusCoefficients[i].c * rho);
    }
    var nL3Coefficients = GFX.g_L3VenusCoefficients.length;
    var L3 = 0;
    for (i = 0; i < nL3Coefficients; i++) {
      L3 += GFX.g_L3VenusCoefficients[i].a * Math.cos(GFX.g_L3VenusCoefficients[i].b + GFX.g_L3VenusCoefficients[i].c * rho);
    }
    var nL4Coefficients = GFX.g_L4VenusCoefficients.length;
    var L4 = 0;
    for (i = 0; i < nL4Coefficients; i++) {
      L4 += GFX.g_L4VenusCoefficients[i].a * Math.cos(GFX.g_L4VenusCoefficients[i].b + GFX.g_L4VenusCoefficients[i].c * rho);
    }
    var nL5Coefficients = GFX.g_L5VenusCoefficients.length;
    var L5 = 0;
    for (i = 0; i < nL5Coefficients; i++) {
      L5 += GFX.g_L5VenusCoefficients[i].a * Math.cos(GFX.g_L5VenusCoefficients[i].b + GFX.g_L5VenusCoefficients[i].c * rho);
    }
    var vvalue = (L0 + L1 * rho + L2 * rhosquared + L3 * rhocubed + L4 * rho4 + L5 * rho5) / 100000000;
    vvalue = CT.m360(CT.r2D(vvalue));
    return vvalue;
  };
  CAAVenus.eclipticLatitude = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nB0Coefficients = GFX.g_B0VenusCoefficients.length;
    var B0 = 0;
    var i;
    for (i = 0; i < nB0Coefficients; i++) {
      B0 += GFX.g_B0VenusCoefficients[i].a * Math.cos(GFX.g_B0VenusCoefficients[i].b + GFX.g_B0VenusCoefficients[i].c * rho);
    }
    var nB1Coefficients = GFX.g_B1VenusCoefficients.length;
    var B1 = 0;
    for (i = 0; i < nB1Coefficients; i++) {
      B1 += GFX.g_B1VenusCoefficients[i].a * Math.cos(GFX.g_B1VenusCoefficients[i].b + GFX.g_B1VenusCoefficients[i].c * rho);
    }
    var nB2Coefficients = GFX.g_B2VenusCoefficients.length;
    var B2 = 0;
    for (i = 0; i < nB2Coefficients; i++) {
      B2 += GFX.g_B2VenusCoefficients[i].a * Math.cos(GFX.g_B2VenusCoefficients[i].b + GFX.g_B2VenusCoefficients[i].c * rho);
    }
    var nB3Coefficients = GFX.g_B3VenusCoefficients.length;
    var B3 = 0;
    for (i = 0; i < nB3Coefficients; i++) {
      B3 += GFX.g_B3VenusCoefficients[i].a * Math.cos(GFX.g_B3VenusCoefficients[i].b + GFX.g_B3VenusCoefficients[i].c * rho);
    }
    var nB4Coefficients = GFX.g_B4VenusCoefficients.length;
    var B4 = 0;
    for (i = 0; i < nB4Coefficients; i++) {
      B4 += GFX.g_B4VenusCoefficients[i].a * Math.cos(GFX.g_B4VenusCoefficients[i].b + GFX.g_B4VenusCoefficients[i].c * rho);
    }
    var vvalue = (B0 + B1 * rho + B2 * rhosquared + B3 * rhocubed + B4 * rho4) / 100000000;
    vvalue = CT.r2D(vvalue);
    return vvalue;
  };
  CAAVenus.radiusVector = function(JD) {
    var rho = (JD - 2451545) / 365250;
    var rhosquared = rho * rho;
    var rhocubed = rhosquared * rho;
    var rho4 = rhocubed * rho;
    var nR0Coefficients = GFX.g_R0VenusCoefficients.length;
    var R0 = 0;
    var i;
    for (i = 0; i < nR0Coefficients; i++) {
      R0 += GFX.g_R0VenusCoefficients[i].a * Math.cos(GFX.g_R0VenusCoefficients[i].b + GFX.g_R0VenusCoefficients[i].c * rho);
    }
    var nR1Coefficients = GFX.g_R1VenusCoefficients.length;
    var R1 = 0;
    for (i = 0; i < nR1Coefficients; i++) {
      R1 += GFX.g_R1VenusCoefficients[i].a * Math.cos(GFX.g_R1VenusCoefficients[i].b + GFX.g_R1VenusCoefficients[i].c * rho);
    }
    var nR2Coefficients = GFX.g_R2VenusCoefficients.length;
    var R2 = 0;
    for (i = 0; i < nR2Coefficients; i++) {
      R2 += GFX.g_R2VenusCoefficients[i].a * Math.cos(GFX.g_R2VenusCoefficients[i].b + GFX.g_R2VenusCoefficients[i].c * rho);
    }
    var nR3Coefficients = GFX.g_R3VenusCoefficients.length;
    var R3 = 0;
    for (i = 0; i < nR3Coefficients; i++) {
      R3 += GFX.g_R3VenusCoefficients[i].a * Math.cos(GFX.g_R3VenusCoefficients[i].b + GFX.g_R3VenusCoefficients[i].c * rho);
    }
    var nR4Coefficients = GFX.g_R4VenusCoefficients.length;
    var R4 = 0;
    for (i = 0; i < nR4Coefficients; i++) {
      R4 += GFX.g_R4VenusCoefficients[i].a * Math.cos(GFX.g_R4VenusCoefficients[i].b + GFX.g_R4VenusCoefficients[i].c * rho);
    }
    return (R0 + R1 * rho + R2 * rhosquared + R3 * rhocubed + R4 * rho4) / 100000000;
  };
  var CAAVenus$ = {

  };


  // wwtlib.AstroRaDec

  function AstroRaDec(ra, dec, dist, shadow, eclipsed) {
    this.RA = 0;
    this.dec = 0;
    this.distance = 0;
    this.shadow = false;
    this.eclipsed = false;
    this.RA = ra;
    this.dec = dec;
    this.distance = dist;
    this.shadow = shadow;
    this.eclipsed = eclipsed;
  }
  var AstroRaDec$ = {

  };


  // wwtlib.RiseSetDetails

  function RiseSetDetails(bValid, Rise, Transit, Set, neverRises) {
    this.bValid = false;
    this.rise = 0;
    this.transit = 0;
    this.set = 0;
    this.bNeverRises = false;
    this.bValid = bValid;
    this.rise = Rise;
    this.transit = Transit;
    this.set = Set;
    this.bNeverRises = neverRises;
  }
  var RiseSetDetails$ = {

  };


  // wwtlib.AstroCalc

  function AstroCalc() {
  }
  AstroCalc.getPlanet = function(jDate, planetIn, locLat, locLong, locHeight) {
    var planet = planetIn;
    locLong = -locLong;
    if (planet < 9) {
      var Details = ELL.calculate(jDate, planetIn);
      var corrected = CAAParallax.equatorial2Topocentric(Details.apparentGeocentricRA, Details.apparentGeocentricDeclination, Details.apparentGeocentricDistance, locLong, locLat, locHeight, jDate);
      return new AstroRaDec(corrected.x, corrected.y, Details.apparentGeocentricDistance, false, false);
    }
    else if (planet === 9) {
      var lat = CAAMoon.eclipticLatitude(jDate);
      var lng = CAAMoon.eclipticLongitude(jDate);
      var dis = CAAMoon.radiusVector(jDate) / 149598000;
      var epsilon = CAANutation.trueObliquityOfEcliptic(jDate);
      var d = CT.ec2Eq(lng, lat, epsilon);
      var corrected = CAAParallax.equatorial2Topocentric(d.x, d.y, dis, locLong, locLat, locHeight, jDate);
      return new AstroRaDec(corrected.x, corrected.y, dis, false, false);
    }
    else {
      if (jDate !== AstroCalc._jDateLast) {
        AstroCalc._jupDetails = ELL.calculate(jDate, 4);
        AstroCalc._jupPhisical = CAAPhysicalJupiter.calculate(jDate);
        var corrected = CAAParallax.equatorial2Topocentric(AstroCalc._jupDetails.apparentGeocentricRA, AstroCalc._jupDetails.apparentGeocentricDeclination, AstroCalc._jupDetails.apparentGeocentricDistance, locLong, locLat, locHeight, jDate);
        AstroCalc._jupDetails.apparentGeocentricRA = corrected.x;
        AstroCalc._jupDetails.apparentGeocentricDeclination = corrected.y;
        AstroCalc._galDetails = GM.calculate(jDate);
        AstroCalc._jDateLast = jDate;
      }
      var jupiterDiameter = 0.000954501;
      var scale = Math.atan(0.5 * (jupiterDiameter / AstroCalc._jupDetails.apparentGeocentricDistance)) / 3.1415927 * 180;
      var raScale = (scale / Math.cos(AstroCalc._jupDetails.apparentGeocentricDeclination / 180 * 3.1415927)) / 15;
      var xMoon = 0;
      var yMoon = 0;
      var zMoon = 0;
      var shadow = false;
      var eclipsed = false;
      switch (planet) {
        case 10:
          xMoon = AstroCalc._galDetails.satellite1.apparentRectangularCoordinates.x;
          yMoon = AstroCalc._galDetails.satellite1.apparentRectangularCoordinates.y;
          zMoon = AstroCalc._galDetails.satellite1.apparentRectangularCoordinates.z;
          eclipsed = AstroCalc._galDetails.satellite1.bInEclipse;
          shadow = AstroCalc._galDetails.satellite1.bInShadowTransit;
          break;
        case 11:
          xMoon = AstroCalc._galDetails.satellite2.apparentRectangularCoordinates.x;
          yMoon = AstroCalc._galDetails.satellite2.apparentRectangularCoordinates.y;
          zMoon = AstroCalc._galDetails.satellite2.apparentRectangularCoordinates.z;
          eclipsed = AstroCalc._galDetails.satellite2.bInEclipse;
          shadow = AstroCalc._galDetails.satellite2.bInShadowTransit;
          break;
        case 12:
          xMoon = AstroCalc._galDetails.satellite3.apparentRectangularCoordinates.x;
          yMoon = AstroCalc._galDetails.satellite3.apparentRectangularCoordinates.y;
          zMoon = AstroCalc._galDetails.satellite3.apparentRectangularCoordinates.z;
          eclipsed = AstroCalc._galDetails.satellite3.bInEclipse;
          shadow = AstroCalc._galDetails.satellite3.bInShadowTransit;
          break;
        case 13:
          xMoon = AstroCalc._galDetails.satellite4.apparentRectangularCoordinates.x;
          yMoon = AstroCalc._galDetails.satellite4.apparentRectangularCoordinates.y;
          zMoon = AstroCalc._galDetails.satellite4.apparentRectangularCoordinates.z;
          eclipsed = AstroCalc._galDetails.satellite4.bInEclipse;
          shadow = AstroCalc._galDetails.satellite4.bInShadowTransit;
          break;
        case 14:
          xMoon = AstroCalc._galDetails.satellite1.apparentShadowRectangularCoordinates.x;
          yMoon = AstroCalc._galDetails.satellite1.apparentShadowRectangularCoordinates.y;
          zMoon = AstroCalc._galDetails.satellite1.apparentShadowRectangularCoordinates.z * 0.9;
          shadow = AstroCalc._galDetails.satellite1.bInShadowTransit;
          break;
        case 15:
          xMoon = AstroCalc._galDetails.satellite2.apparentShadowRectangularCoordinates.x;
          yMoon = AstroCalc._galDetails.satellite2.apparentShadowRectangularCoordinates.y;
          zMoon = AstroCalc._galDetails.satellite2.apparentShadowRectangularCoordinates.z * 0.9;
          shadow = AstroCalc._galDetails.satellite2.bInShadowTransit;
          break;
        case 16:
          xMoon = AstroCalc._galDetails.satellite3.apparentShadowRectangularCoordinates.x;
          yMoon = AstroCalc._galDetails.satellite3.apparentShadowRectangularCoordinates.y;
          zMoon = AstroCalc._galDetails.satellite3.apparentShadowRectangularCoordinates.z * 0.9;
          shadow = AstroCalc._galDetails.satellite3.bInShadowTransit;
          break;
        case 17:
          xMoon = AstroCalc._galDetails.satellite4.apparentShadowRectangularCoordinates.x;
          yMoon = AstroCalc._galDetails.satellite4.apparentShadowRectangularCoordinates.y;
          zMoon = AstroCalc._galDetails.satellite4.apparentShadowRectangularCoordinates.z * 0.9;
          shadow = AstroCalc._galDetails.satellite4.bInShadowTransit;
          break;
      }
      var xTemp;
      var yTemp;
      var radians = AstroCalc._jupPhisical.p / 180 * 3.1415927;
      xTemp = xMoon * Math.cos(radians) - yMoon * Math.sin(radians);
      yTemp = xMoon * Math.sin(radians) + yMoon * Math.cos(radians);
      xMoon = xTemp;
      yMoon = yTemp;
      return new AstroRaDec(AstroCalc._jupDetails.apparentGeocentricRA - (xMoon * raScale), AstroCalc._jupDetails.apparentGeocentricDeclination + yMoon * scale, AstroCalc._jupDetails.apparentGeocentricDistance + (zMoon * jupiterDiameter / 2), shadow, eclipsed);
    }
  };
  AstroCalc.getJulianDay = function(year, month, day) {
    return DT.dateToJD(ss.truncate(year), ss.truncate(month), day, true);
  };
  AstroCalc.eclipticToJ2000 = function(l, b, jNow) {
    var radec = CT.ec2Eq(l, b, CAANutation.trueObliquityOfEcliptic(jNow));
    return new AstroRaDec(radec.x, radec.y, 0, false, false);
  };
  AstroCalc.galacticToJ2000 = function(l, b) {
    var radec = CT.g2Eq(l, b);
    return new AstroRaDec(radec.x, radec.y, 0, false, false);
  };
  AstroCalc.j2000ToGalactic = function(ra, dec) {
    var galactic = CT.eq2G(ra, dec);
    return new AstroRaDec(galactic.x, galactic.y, 0, false, false);
  };
  AstroCalc.getRiseTrinsitSet = function(jd, lat, lng, ra1, dec1, ra2, dec2, ra3, dec3, type) {
    var alt = -0.5667;
    switch (type) {
      case 0:
        alt = -0.5667;
        break;
      case 1:
        alt = -0.8333;
        break;
      case 2:
        alt = 0.125;
        break;
    }
    var RiseTransitSetTime = CAARiseTransitSet.rise(jd, ra1, dec1, ra2, dec2, ra3, dec3, lng, lat, alt);
    var neverRises = false;
    if (!RiseTransitSetTime.bValid) {
      neverRises = Util.sign(lat) !== Util.sign(dec2);
    }
    return new RiseSetDetails(RiseTransitSetTime.bValid, RiseTransitSetTime.rise, RiseTransitSetTime.transit, RiseTransitSetTime.set, neverRises);
  };
  var AstroCalc$ = {

  };


  // wwtlib.ShortIndexBuffer

  function ShortIndexBuffer(indexes) {
    this.buffer = Tile.prepDevice.createBuffer();
    Tile.prepDevice.bindBuffer(34963, this.buffer);
    Tile.prepDevice.bufferData(34963, indexes, 35044);
  }
  var ShortIndexBuffer$ = {

  };


  // wwtlib.IndexBuffer

  function IndexBuffer(indexes) {
    this.buffer = Tile.prepDevice.createBuffer();
    Tile.prepDevice.bindBuffer(34963, this.buffer);
    Tile.prepDevice.bufferData(34963, indexes, 35044);
  }
  var IndexBuffer$ = {
    dispose: function() {
      Tile.prepDevice.bindBuffer(34963, null);
      Tile.prepDevice.deleteBuffer(this.buffer);
      this.buffer = null;
    }
  };


  // wwtlib.VertexBufferBase

  function VertexBufferBase() {
  }
  var VertexBufferBase$ = {
    dispose: function() {
      Tile.prepDevice.bindBuffer(34962, null);
      Tile.prepDevice.deleteBuffer(this.vertexBuffer);
      this.vertexBuffer = null;
    }
  };


  // wwtlib.Dates

  function Dates(start, end) {
    this.startDate = 0;
    this.endDate = 0;
    this.startDate = start;
    this.endDate = end;
  }
  Dates.empty = function() {
    return new Dates(0, 0);
  };
  var Dates$ = {
    copy: function() {
      return new Dates(this.startDate, this.endDate);
    }
  };


  // wwtlib.SimpleLineList

  function SimpleLineList() {
    this._zBuffer = true;
    this._linePoints = [];
    this._usingLocalCenter = false;
    this.sky = true;
    this.aaFix = true;
    this.pure2D = false;
    this.viewTransform = Matrix3d.get_identity();
    this._lineBuffers = [];
    this._lineBufferCounts = [];
    this.useLocalCenters = false;
  }
  var SimpleLineList$ = {
    get_depthBuffered: function() {
      return this._zBuffer;
    },
    set_depthBuffered: function(value) {
      this._zBuffer = value;
      return value;
    },
    addLine: function(v1, v2) {
      this._linePoints.push(v1);
      this._linePoints.push(v2);
      this._emptyLineBuffer();
    },
    clear: function() {
      this._linePoints.length = 0;
      this._emptyLineBuffer();
    },
    drawLines: function(renderContext, opacity, color) {
      if (this._linePoints.length < 2) {
        return;
      }
      this._initLineBuffer(renderContext);
      var count = this._linePoints.length;
      if (renderContext.gl == null) {
        var viewPoint = Vector3d._transformCoordinate(renderContext.get_viewPoint(), this.viewTransform);
        var ctx = renderContext.device;
        ctx.save();
        ctx.strokeStyle = color.toString();
        ctx.lineWidth = 2;
        ctx.globalAlpha = 0.25;
        var firstPoint = new Vector3d();
        var secondPoint = new Vector3d();
        for (var i = 0; i < count; i += 2) {
          firstPoint = renderContext.WVP.transform(this._linePoints[i]);
          secondPoint = renderContext.WVP.transform(this._linePoints[i + 1]);
          if (Vector3d.dot(this._linePoints[i], viewPoint) > 0.6) {
            ctx.beginPath();
            ctx.moveTo(firstPoint.x, firstPoint.y);
            ctx.lineTo(secondPoint.x, secondPoint.y);
            ctx.stroke();
          }
        }
        ctx.restore();
      }
      else {
        var $enum1 = ss.enumerate(this._lineBuffers);
        while ($enum1.moveNext()) {
          var lineBuffer = $enum1.current;
          if (this.pure2D) {
            SimpleLineShader2D.use(renderContext, lineBuffer.vertexBuffer, color, this._zBuffer);
          }
          else {
            SimpleLineShader.use(renderContext, lineBuffer.vertexBuffer, color, this._zBuffer);
          }
          renderContext.gl.drawArrays(1, 0, lineBuffer.count);
        }
      }
    },
    _initLineBuffer: function(renderContext) {
      if (renderContext.gl != null) {
        if (!this._lineBuffers.length) {
          var count = this._linePoints.length;
          var lineBuffer = null;
          var linePointList = null;
          this._localCenter = new Vector3d();
          if (this.get_depthBuffered()) {
            var $enum1 = ss.enumerate(this._linePoints);
            while ($enum1.moveNext()) {
              var point = $enum1.current;
              this._localCenter.add(point);
            }
            this._localCenter.x /= count;
            this._localCenter.y /= count;
            this._localCenter.z /= count;
          }
          var countLeft = count;
          var index = 0;
          var counter = 0;
          var temp;
          var $enum2 = ss.enumerate(this._linePoints);
          while ($enum2.moveNext()) {
            var point = $enum2.current;
            if (counter >= 100000 || linePointList == null) {
              if (lineBuffer != null) {
                lineBuffer.unlock();
              }
              var thisCount = Math.min(100000, countLeft);
              countLeft -= thisCount;
              lineBuffer = new PositionVertexBuffer(thisCount);
              linePointList = lineBuffer.lock();
              this._lineBuffers.push(lineBuffer);
              this._lineBufferCounts.push(thisCount);
              counter = 0;
            }
            if (this.useLocalCenters) {
              temp = Vector3d.subtractVectors(point, this._localCenter);
              linePointList[counter] = temp;
            }
            else {
              linePointList[counter] = point;
            }
            index++;
            counter++;
          }
          if (lineBuffer != null) {
            lineBuffer.unlock();
          }
        }
      }
    },
    _emptyLineBuffer: function() {
    }
  };


  // wwtlib.OrbitLineList

  function OrbitLineList() {
    this._zBuffer = true;
    this._linePoints = [];
    this._lineColors = [];
    this.sky = true;
    this.aaFix = true;
    this.viewTransform = Matrix3d.get_identity();
    this._lineBuffers = [];
    this._lineBufferCounts = [];
    this.useLocalCenters = false;
  }
  var OrbitLineList$ = {
    get_depthBuffered: function() {
      return this._zBuffer;
    },
    set_depthBuffered: function(value) {
      this._zBuffer = value;
      return value;
    },
    addLine: function(v1, v2, c1, c2) {
      this._linePoints.push(v1);
      this._lineColors.push(c1);
      this._linePoints.push(v2);
      this._lineColors.push(c2);
      this._emptyLineBuffer();
    },
    clear: function() {
      this._linePoints.length = 0;
      this._emptyLineBuffer();
    },
    drawLines: function(renderContext, opacity, color) {
      if (this._linePoints.length < 2) {
        return;
      }
      this._initLineBuffer(renderContext);
      var count = this._linePoints.length;
      var $enum1 = ss.enumerate(this._lineBuffers);
      while ($enum1.moveNext()) {
        var lineBuffer = $enum1.current;
        OrbitLineShader.use(renderContext, lineBuffer.vertexBuffer, color);
        renderContext.gl.drawArrays(1, 0, lineBuffer.count);
      }
    },
    _initLineBuffer: function(renderContext) {
      if (renderContext.gl != null) {
        if (!this._lineBuffers.length) {
          var count = this._linePoints.length;
          var lineBuffer = null;
          var linePointList = null;
          this._localCenter = new Vector3d();
          if (this.get_depthBuffered()) {
            var $enum1 = ss.enumerate(this._linePoints);
            while ($enum1.moveNext()) {
              var point = $enum1.current;
              this._localCenter.add(point);
            }
            this._localCenter.x /= count;
            this._localCenter.y /= count;
            this._localCenter.z /= count;
          }
          var countLeft = count;
          var index = 0;
          var counter = 0;
          var temp;
          var $enum2 = ss.enumerate(this._linePoints);
          while ($enum2.moveNext()) {
            var point = $enum2.current;
            if (counter >= 100000 || linePointList == null) {
              if (lineBuffer != null) {
                lineBuffer.unlock();
              }
              var thisCount = Math.min(100000, countLeft);
              countLeft -= thisCount;
              lineBuffer = new PositionColoredVertexBuffer(thisCount);
              linePointList = lineBuffer.lock();
              this._lineBuffers.push(lineBuffer);
              this._lineBufferCounts.push(thisCount);
              counter = 0;
            }
            if (this.useLocalCenters) {
              temp = Vector3d.subtractVectors(point, this._localCenter);
              linePointList[counter] = new PositionColored(temp, this._lineColors[index]);
            }
            else {
              linePointList[counter] = new PositionColored(point, this._lineColors[index]);
            }
            index++;
            counter++;
          }
          if (lineBuffer != null) {
            lineBuffer.unlock();
          }
        }
      }
    },
    _emptyLineBuffer: function() {
      var $enum1 = ss.enumerate(this._lineBuffers);
      while ($enum1.moveNext()) {
        var lineBuffer = $enum1.current;
        lineBuffer.dispose();
      }
      this._lineBuffers.length = 0;
    }
  };


  // wwtlib.LineList

  function LineList() {
    this._zBuffer = true;
    this.timeSeries = false;
    this.showFarSide = true;
    this.sky = false;
    this.decay = 0;
    this.useNonRotatingFrame = false;
    this.jNow = 0;
    this._linePoints = [];
    this._lineColors = [];
    this._lineDates = [];
    this._usingLocalCenter = true;
    this._lineBuffers = [];
    this._lineBufferCounts = [];
  }
  var LineList$ = {
    get_depthBuffered: function() {
      return this._zBuffer;
    },
    set_depthBuffered: function(value) {
      this._zBuffer = value;
      return value;
    },
    addLine: function(v1, v2, color, date) {
      this._linePoints.push(v1);
      this._linePoints.push(v2);
      this._lineColors.push(color);
      this._lineDates.push(date);
      this._emptyLineBuffer();
    },
    addLineNoDate: function(v1, v2, color) {
      this._linePoints.push(v1);
      this._linePoints.push(v2);
      this._lineColors.push(color);
      this._lineDates.push(new Dates(0, 0));
      this._emptyLineBuffer();
    },
    clear: function() {
      this._linePoints.length = 0;
      this._lineColors.length = 0;
      this._lineDates.length = 0;
    },
    drawLines: function(renderContext, opacity) {
      if (this._linePoints.length < 2 || opacity <= 0) {
        return;
      }
      if (renderContext.gl == null) {
      }
      else {
        this._initLineBuffer();
        var $enum1 = ss.enumerate(this._lineBuffers);
        while ($enum1.moveNext()) {
          var lineBuffer = $enum1.current;
          LineShaderNormalDates.use(renderContext, lineBuffer.vertexBuffer, Color.fromArgb(255, 255, 255, 255), this._zBuffer, this.jNow, (this.timeSeries) ? this.decay : 0);
          renderContext.gl.drawArrays(1, 0, lineBuffer.count);
        }
      }
    },
    _initLineBuffer: function() {
      if (!this._lineBuffers.length) {
        var count = this._linePoints.length;
        var lineBuffer = null;
        var linePointList = null;
        var countLeft = count;
        var index = 0;
        var counter = 0;
        var temp;
        var $enum1 = ss.enumerate(this._linePoints);
        while ($enum1.moveNext()) {
          var point = $enum1.current;
          if (counter >= 100000 || linePointList == null) {
            if (lineBuffer != null) {
              lineBuffer.unlock();
            }
            var thisCount = Math.min(100000, countLeft);
            countLeft -= thisCount;
            lineBuffer = new TimeSeriesLineVertexBuffer(thisCount);
            linePointList = lineBuffer.lock();
            this._lineBuffers.push(lineBuffer);
            this._lineBufferCounts.push(thisCount);
            counter = 0;
          }
          var div2 = ss.truncate((index / 2));
          temp = point;
          linePointList[counter] = new TimeSeriesLineVertex();
          linePointList[counter].position = temp;
          linePointList[counter].normal = point;
          linePointList[counter].tu = this._lineDates[div2].startDate;
          linePointList[counter].tv = this._lineDates[div2].endDate;
          linePointList[counter].set_color(this._lineColors[div2]);
          index++;
          counter++;
        }
        if (lineBuffer != null) {
          lineBuffer.unlock();
        }
      }
    },
    _emptyLineBuffer: function() {
    }
  };


  // wwtlib.TriangleList

  function TriangleList() {
    this._trianglePoints = [];
    this._triangleColors = [];
    this._triangleDates = [];
    this.timeSeries = false;
    this.showFarSide = false;
    this.sky = false;
    this.depthBuffered = true;
    this.writeZbuffer = false;
    this.decay = 0;
    this.autoTime = true;
    this.jNow = 0;
    this._dataToDraw = false;
    this._triangleBuffers = [];
    this._triangleBufferCounts = [];
  }
  var TriangleList$ = {
    addTriangle: function(v1, v2, v3, color, date) {
      this._trianglePoints.push(v1);
      this._trianglePoints.push(v2);
      this._trianglePoints.push(v3);
      this._triangleColors.push(color);
      this._triangleDates.push(date);
      this._emptyTriangleBuffer();
    },
    addSubdividedTriangles: function(v1, v2, v3, color, date, subdivisions) {
      subdivisions--;
      if (subdivisions < 0) {
        this.addTriangle(v1, v2, v3, color, date);
      }
      else {
        var v12;
        var v23;
        var v31;
        v12 = Vector3d.midPointByLength(v1, v2);
        v23 = Vector3d.midPointByLength(v2, v3);
        v31 = Vector3d.midPointByLength(v3, v1);
        this.addSubdividedTriangles(v1, v12, v31, color, date, subdivisions);
        this.addSubdividedTriangles(v12, v23, v31, color, date, subdivisions);
        this.addSubdividedTriangles(v12, v2, v23, color, date, subdivisions);
        this.addSubdividedTriangles(v23, v3, v31, color, date, subdivisions);
      }
    },
    addQuad: function(v1, v2, v3, v4, color, date) {
      this._trianglePoints.push(v1);
      this._trianglePoints.push(v3);
      this._trianglePoints.push(v2);
      this._trianglePoints.push(v2);
      this._trianglePoints.push(v3);
      this._trianglePoints.push(v4);
      this._triangleColors.push(color);
      this._triangleDates.push(date);
      this._triangleColors.push(color);
      this._triangleDates.push(date);
      this._emptyTriangleBuffer();
    },
    clear: function() {
      this._triangleColors.length = 0;
      this._trianglePoints.length = 0;
      this._triangleDates.length = 0;
      this._emptyTriangleBuffer();
    },
    _emptyTriangleBuffer: function() {
    },
    _initTriangleBuffer: function() {
      if (!this._triangleBuffers.length) {
        var count = this._trianglePoints.length;
        var triangleBuffer = null;
        var triPointList = null;
        var countLeft = count;
        var index = 0;
        var counter = 0;
        var $enum1 = ss.enumerate(this._trianglePoints);
        while ($enum1.moveNext()) {
          var point = $enum1.current;
          if (counter >= 90000 || triangleBuffer == null) {
            if (triangleBuffer != null) {
              triangleBuffer.unlock();
            }
            var thisCount = Math.min(90000, countLeft);
            countLeft -= thisCount;
            triangleBuffer = new TimeSeriesLineVertexBuffer(thisCount);
            this._triangleBuffers.push(triangleBuffer);
            this._triangleBufferCounts.push(thisCount);
            triPointList = triangleBuffer.lock();
            counter = 0;
          }
          triPointList[counter] = new TimeSeriesLineVertex();
          triPointList[counter].position = point;
          triPointList[counter].normal = point;
          var div3 = ss.truncate((index / 3));
          triPointList[counter].set_color(this._triangleColors[div3]);
          triPointList[counter].tu = this._triangleDates[div3].startDate;
          triPointList[counter].tv = this._triangleDates[div3].endDate;
          index++;
          counter++;
        }
        if (triangleBuffer != null) {
          triangleBuffer.unlock();
        }
        this._triangleColors.length = 0;
        this._triangleDates.length = 0;
        this._trianglePoints.length = 0;
        this._dataToDraw = true;
      }
    },
    draw: function(renderContext, opacity, cull) {
      if (this._trianglePoints.length < 1 && !this._dataToDraw) {
        return;
      }
      if (renderContext.gl == null) {
      }
      else {
        this._initTriangleBuffer();
        var $enum1 = ss.enumerate(this._triangleBuffers);
        while ($enum1.moveNext()) {
          var triBuffer = $enum1.current;
          LineShaderNormalDates.use(renderContext, triBuffer.vertexBuffer, Color.fromArgb(255, 255, 255, 255), this.depthBuffered, this.jNow, (this.timeSeries) ? this.decay : 0);
          renderContext.gl.drawArrays(4, 0, triBuffer.count);
        }
      }
    }
  };


  // wwtlib.PointList

  function PointList(device) {
    this._points = [];
    this._colors = [];
    this._dates = [];
    this._sizes = [];
    this.timeSeries = false;
    this.showFarSide = false;
    this.sky = false;
    this.depthBuffered = true;
    this.decay = 0;
    this.scale = 1;
    this.autoTime = true;
    this.jNow = 0;
    this._dataToDraw = false;
    this.items = [];
    this._imageReady = false;
    this._init = false;
    this.minSize = 2;
    this._pointBuffers = [];
    this._pointBufferCounts = [];
    this._device = device;
  }
  var PointList$ = {
    addPoint: function(v1, color, date, size) {
      this._points.push(v1);
      this._colors.push(color._clone());
      this._dates.push(date);
      this._sizes.push(size);
      this._emptyPointBuffer();
    },
    clear: function() {
      this._colors.length = 0;
      this._points.length = 0;
      this._dates.length = 0;
      this._emptyPointBuffer();
    },
    _emptyPointBuffer: function() {
      var $enum1 = ss.enumerate(this._pointBuffers);
      while ($enum1.moveNext()) {
        var pointBuffer = $enum1.current;
        pointBuffer.dispose();
      }
      this._pointBuffers.length = 0;
      this._init = false;
    },
    _initBuffer: function(renderContext) {
      var $this = this;

      if (!this._init) {
        if (renderContext.gl == null) {
          this._starProfile = document.createElement('img');
          this._starProfile.addEventListener('load', function(e) {
            $this._imageReady = true;
          }, false);
          this._starProfile.src = '/webclient/images/StarProfileAlpha.png';
          this._worldList = new Array(this._points.length);
          this._transformedList = new Array(this._points.length);
          var index = 0;
          var $enum1 = ss.enumerate(this._points);
          while ($enum1.moveNext()) {
            var pnt = $enum1.current;
            var item = new DataItem();
            item.location = pnt;
            item.tranformed = new Vector3d();
            item.size = this._sizes[index];
            item.color = this._colors[index];
            this._worldList[index] = item.location;
            this._transformedList[index] = item.tranformed;
            this.items.push(item);
            index++;
          }
        }
        else {
          if (!this._pointBuffers.length) {
            if (PointList.starTexture == null) {
              PointList.starTexture = Planets.loadPlanetTexture('//cdn.worldwidetelescope.org/webclient/images/StarProfileAlpha.png');
            }
            var count = this._points.length;
            var pointBuffer = null;
            var pointList = null;
            var countLeft = count;
            var index = 0;
            var counter = 0;
            var $enum2 = ss.enumerate(this._points);
            while ($enum2.moveNext()) {
              var point = $enum2.current;
              if (counter >= 100000 || pointList == null) {
                if (pointBuffer != null) {
                  pointBuffer.unlock();
                }
                var thisCount = Math.min(100000, countLeft);
                countLeft -= thisCount;
                pointBuffer = new TimeSeriesPointVertexBuffer(thisCount);
                pointList = pointBuffer.lock();
                this._pointBuffers.push(pointBuffer);
                this._pointBufferCounts.push(thisCount);
                counter = 0;
              }
              pointList[counter] = new TimeSeriesPointVertex();
              pointList[counter].position = point;
              pointList[counter].pointSize = this._sizes[index];
              pointList[counter].tu = this._dates[index].startDate;
              pointList[counter].tv = this._dates[index].endDate;
              pointList[counter].set_color(this._colors[index]);
              index++;
              counter++;
            }
            if (pointBuffer != null) {
              pointBuffer.unlock();
            }
          }
        }
        this._init = true;
      }
    },
    draw: function(renderContext, opacity, cull) {
      this._initBuffer(renderContext);
      if (renderContext.gl == null) {
        if (!this._imageReady) {
          return;
        }
        renderContext.device.save();
        renderContext.WVP.projectArrayToScreen(this._worldList, this._transformedList);
        var ctx = renderContext.device;
        ctx.globalAlpha = 0.4;
        var width = renderContext.width;
        var height = renderContext.height;
        var viewPoint = Vector3d.makeCopy(renderContext.get_viewPoint());
        var scaleFactor = renderContext.get_fovScale() / 100;
        var $enum1 = ss.enumerate(this.items);
        while ($enum1.moveNext()) {
          var item = $enum1.current;
          if (item.tranformed.z < 1) {
            var x = item.tranformed.x;
            var y = item.tranformed.y;
            var size = 0.1 * item.size / scaleFactor;
            var half = size / 2;
            if (x > -half && x < width + half && y > -half && y < height + half) {
              ctx.beginPath();
              ctx.fillStyle = item.color.toFormat();
              ctx.arc(x, y, size, 0, Math.PI * 2, true);
              ctx.fill();
            }
          }
        }
        renderContext.device.restore();
      }
      else {
        var zero = new Vector3d();
        var matInv = Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
        matInv.invert();
        var cam = Vector3d._transformCoordinate(zero, matInv);
        var $enum2 = ss.enumerate(this._pointBuffers);
        while ($enum2.moveNext()) {
          var pointBuffer = $enum2.current;
          TimeSeriesPointSpriteShader.use(renderContext, pointBuffer.vertexBuffer, PointList.starTexture.texture2d, Color.fromArgb(255 * opacity, 255, 255, 255), this.depthBuffered, this.jNow, (this.timeSeries) ? this.decay : 0, cam, (this.scale * (renderContext.height / 960)), this.minSize, this.showFarSide, this.sky);
          renderContext.gl.drawArrays(0, 0, pointBuffer.count);
        }
      }
    },
    drawTextured: function(renderContext, texture, opacity) {
      this._initBuffer(renderContext);
      var zero = new Vector3d();
      var matInv = Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
      matInv.invert();
      var cam = Vector3d._transformCoordinate(zero, matInv);
      var $enum1 = ss.enumerate(this._pointBuffers);
      while ($enum1.moveNext()) {
        var pointBuffer = $enum1.current;
        TimeSeriesPointSpriteShader.use(renderContext, pointBuffer.vertexBuffer, texture, Color.fromArgb(255 * opacity, 255, 255, 255), this.depthBuffered, this.jNow, this.decay, cam, (this.scale * (renderContext.height / 960)), this.minSize, this.showFarSide, this.sky);
        renderContext.gl.drawArrays(0, 0, pointBuffer.count);
      }
    }
  };


  // wwtlib.TimeSeriesLineVertex

  function TimeSeriesLineVertex() {
    this.position = new Vector3d();
    this.normal = new Vector3d();
    this.tu = 0;
    this.tv = 0;
  }
  TimeSeriesLineVertex.create = function(position, normal, time, color) {
    var temp = new TimeSeriesLineVertex();
    temp.position = position;
    temp.normal = normal;
    temp.tu = time;
    temp.tv = 0;
    temp.color = color;
    return temp;
  };
  var TimeSeriesLineVertex$ = {
    get_color: function() {
      return this.color;
    },
    set_color: function(value) {
      this.color = value;
      return value;
    }
  };


  // wwtlib.TimeSeriesPointVertex

  function TimeSeriesPointVertex() {
    this.pointSize = 0;
    this.tu = 0;
    this.tv = 0;
  }
  TimeSeriesPointVertex.create = function(position, size, time, color) {
    var tmp = new TimeSeriesPointVertex();
    tmp.position = position;
    tmp.pointSize = size;
    tmp.tu = time;
    tmp.tv = 0;
    tmp.color = color;
    return tmp;
  };
  var TimeSeriesPointVertex$ = {
    get_color: function() {
      return this.color;
    },
    set_color: function(value) {
      this.color = value;
      return value;
    }
  };


  // wwtlib.SimpleLineShader

  function SimpleLineShader() {
  }
  SimpleLineShader.init = function(renderContext) {
    var gl = renderContext.gl;
    var fragShaderText = '   precision highp float;                                                          \n' + '   uniform vec4 lineColor;                                                         \n' + '                                                                                   \n' + '   void main(void) {                                                               \n' + '       gl_FragColor = lineColor;                                                   \n' + '   }                                                                               \n';
    var vertexShaderText = '     attribute vec3 aVertexPosition;                                              \n' + '                                                                                  \n' + '     uniform mat4 uMVMatrix;                                                      \n' + '     uniform mat4 uPMatrix;                                                       \n' + '                                                                                  \n' + '                                                                                  \n' + '                                                                                  \n' + '     void main(void) {                                                            \n' + '         gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);         \n' + '     }                                                                            \n' + '                                                                                  \n';
    SimpleLineShader._frag = gl.createShader(35632);
    gl.shaderSource(SimpleLineShader._frag, fragShaderText);
    gl.compileShader(SimpleLineShader._frag);
    var stat = gl.getShaderParameter(SimpleLineShader._frag, 35713);
    SimpleLineShader._vert = gl.createShader(35633);
    gl.shaderSource(SimpleLineShader._vert, vertexShaderText);
    gl.compileShader(SimpleLineShader._vert);
    var stat1 = gl.getShaderParameter(SimpleLineShader._vert, 35713);
    SimpleLineShader._prog = gl.createProgram();
    gl.attachShader(SimpleLineShader._prog, SimpleLineShader._vert);
    gl.attachShader(SimpleLineShader._prog, SimpleLineShader._frag);
    gl.linkProgram(SimpleLineShader._prog);
    var errcode = gl.getProgramParameter(SimpleLineShader._prog, 35714);
    gl.useProgram(SimpleLineShader._prog);
    SimpleLineShader.vertLoc = gl.getAttribLocation(SimpleLineShader._prog, 'aVertexPosition');
    SimpleLineShader.lineColorLoc = gl.getUniformLocation(SimpleLineShader._prog, 'lineColor');
    SimpleLineShader.projMatLoc = gl.getUniformLocation(SimpleLineShader._prog, 'uPMatrix');
    SimpleLineShader.mvMatLoc = gl.getUniformLocation(SimpleLineShader._prog, 'uMVMatrix');
    gl.enable(3042);
    gl.blendFunc(770, 771);
    SimpleLineShader.initialized = true;
  };
  SimpleLineShader.use = function(renderContext, vertex, lineColor, useDepth) {
    var gl = renderContext.gl;
    if (gl != null) {
      if (!SimpleLineShader.initialized) {
        SimpleLineShader.init(renderContext);
      }
      gl.useProgram(SimpleLineShader._prog);
      var mvMat = Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
      gl.uniformMatrix4fv(SimpleLineShader.mvMatLoc, false, mvMat.floatArray());
      gl.uniformMatrix4fv(SimpleLineShader.projMatLoc, false, renderContext.get_projection().floatArray());
      gl.uniform4f(SimpleLineShader.lineColorLoc, lineColor.r / 255, lineColor.g / 255, lineColor.b / 255, 1);
      if (renderContext.space || !useDepth) {
        gl.disable(2929);
      }
      else {
        gl.enable(2929);
      }
      gl.disableVertexAttribArray(0);
      gl.disableVertexAttribArray(1);
      gl.disableVertexAttribArray(2);
      gl.disableVertexAttribArray(3);
      gl.enableVertexAttribArray(SimpleLineShader.vertLoc);
      gl.bindBuffer(34962, vertex);
      gl.bindBuffer(34963, null);
      gl.vertexAttribPointer(SimpleLineShader.vertLoc, 3, 5126, false, 0, 0);
      gl.lineWidth(1);
      gl.enable(3042);
      gl.blendFunc(770, 771);
    }
  };
  var SimpleLineShader$ = {

  };


  // wwtlib.SimpleLineShader2D

  function SimpleLineShader2D() {
  }
  SimpleLineShader2D.init = function(renderContext) {
    var gl = renderContext.gl;
    var fragShaderText = '   precision highp float;                                                          \n' + '   uniform vec4 lineColor;                                                         \n' + '                                                                                   \n' + '   void main(void) {                                                               \n' + '       gl_FragColor = lineColor;                                                   \n' + '   }                                                                               \n';
    var vertexShaderText = '     attribute vec3 aVertexPosition;                                              \n' + '                                                                                  \n' + '                                                                                  \n' + '     void main(void) {                                                            \n' + '         gl_Position = vec4(aVertexPosition, 1.0);                                \n' + '     }                                                                            \n' + '                                                                                  \n';
    SimpleLineShader2D._frag = gl.createShader(35632);
    gl.shaderSource(SimpleLineShader2D._frag, fragShaderText);
    gl.compileShader(SimpleLineShader2D._frag);
    var stat = gl.getShaderParameter(SimpleLineShader2D._frag, 35713);
    SimpleLineShader2D._vert = gl.createShader(35633);
    gl.shaderSource(SimpleLineShader2D._vert, vertexShaderText);
    gl.compileShader(SimpleLineShader2D._vert);
    var stat1 = gl.getShaderParameter(SimpleLineShader2D._vert, 35713);
    SimpleLineShader2D._prog = gl.createProgram();
    gl.attachShader(SimpleLineShader2D._prog, SimpleLineShader2D._vert);
    gl.attachShader(SimpleLineShader2D._prog, SimpleLineShader2D._frag);
    gl.linkProgram(SimpleLineShader2D._prog);
    var errcode = gl.getProgramParameter(SimpleLineShader2D._prog, 35714);
    gl.useProgram(SimpleLineShader2D._prog);
    SimpleLineShader2D.vertLoc = gl.getAttribLocation(SimpleLineShader2D._prog, 'aVertexPosition');
    SimpleLineShader2D.lineColorLoc = gl.getUniformLocation(SimpleLineShader2D._prog, 'lineColor');
    gl.enable(3042);
    gl.blendFunc(770, 771);
    SimpleLineShader2D.initialized = true;
  };
  SimpleLineShader2D.use = function(renderContext, vertex, lineColor, useDepth) {
    var gl = renderContext.gl;
    if (gl != null) {
      if (!SimpleLineShader2D.initialized) {
        SimpleLineShader2D.init(renderContext);
      }
      gl.useProgram(SimpleLineShader2D._prog);
      var mvMat = Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
      gl.uniform4f(SimpleLineShader2D.lineColorLoc, lineColor.r / 255, lineColor.g / 255, lineColor.b / 255, 1);
      if (renderContext.space || !useDepth) {
        gl.disable(2929);
      }
      else {
        gl.enable(2929);
      }
      gl.disableVertexAttribArray(0);
      gl.disableVertexAttribArray(1);
      gl.disableVertexAttribArray(2);
      gl.disableVertexAttribArray(3);
      gl.enableVertexAttribArray(SimpleLineShader2D.vertLoc);
      gl.bindBuffer(34962, vertex);
      gl.bindBuffer(34963, null);
      gl.vertexAttribPointer(SimpleLineShader2D.vertLoc, 3, 5126, false, 0, 0);
      gl.lineWidth(1);
      gl.enable(3042);
      gl.blendFunc(770, 771);
    }
  };
  var SimpleLineShader2D$ = {

  };


  // wwtlib.OrbitLineShader

  function OrbitLineShader() {
  }
  OrbitLineShader.init = function(renderContext) {
    var gl = renderContext.gl;
    var fragShaderText = '    precision highp float;                                                        \n' + '    uniform vec4 lineColor;                                                       \n' + '    varying lowp vec4 vColor;                                                     \n' + '                                                                                  \n' + '    void main(void) {                                                             \n' + '        gl_FragColor = lineColor * vColor;                                        \n' + '    }                                                                             \n';
    var vertexShaderText = '     attribute vec3 aVertexPosition;                                              \n' + '     attribute vec4 aVertexColor;                                                 \n' + '                                                                                  \n' + '     uniform mat4 uMVMatrix;                                                      \n' + '     uniform mat4 uPMatrix;                                                       \n' + '     varying lowp vec4 vColor;                                                    \n' + '                                                                                  \n' + '                                                                                  \n' + '                                                                                  \n' + '     void main(void) {                                                            \n' + '         gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);         \n' + '         vColor = aVertexColor;                                                   \n' + '     }                                                                            \n' + '                                                                                  \n';
    OrbitLineShader._frag = gl.createShader(35632);
    gl.shaderSource(OrbitLineShader._frag, fragShaderText);
    gl.compileShader(OrbitLineShader._frag);
    var stat = gl.getShaderParameter(OrbitLineShader._frag, 35713);
    OrbitLineShader._vert = gl.createShader(35633);
    gl.shaderSource(OrbitLineShader._vert, vertexShaderText);
    gl.compileShader(OrbitLineShader._vert);
    var stat1 = gl.getShaderParameter(OrbitLineShader._vert, 35713);
    OrbitLineShader._prog = gl.createProgram();
    gl.attachShader(OrbitLineShader._prog, OrbitLineShader._vert);
    gl.attachShader(OrbitLineShader._prog, OrbitLineShader._frag);
    gl.linkProgram(OrbitLineShader._prog);
    var errcode = gl.getProgramParameter(OrbitLineShader._prog, 35714);
    gl.useProgram(OrbitLineShader._prog);
    OrbitLineShader.vertLoc = gl.getAttribLocation(OrbitLineShader._prog, 'aVertexPosition');
    OrbitLineShader.colorLoc = gl.getAttribLocation(OrbitLineShader._prog, 'aVertexColor');
    OrbitLineShader.lineColorLoc = gl.getUniformLocation(OrbitLineShader._prog, 'lineColor');
    OrbitLineShader.projMatLoc = gl.getUniformLocation(OrbitLineShader._prog, 'uPMatrix');
    OrbitLineShader.mvMatLoc = gl.getUniformLocation(OrbitLineShader._prog, 'uMVMatrix');
    gl.enable(3042);
    gl.blendFunc(770, 771);
    OrbitLineShader.initialized = true;
  };
  OrbitLineShader.use = function(renderContext, vertex, lineColor) {
    var gl = renderContext.gl;
    if (gl != null) {
      if (!OrbitLineShader.initialized) {
        OrbitLineShader.init(renderContext);
      }
      gl.useProgram(OrbitLineShader._prog);
      var mvMat = Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
      gl.uniformMatrix4fv(OrbitLineShader.mvMatLoc, false, mvMat.floatArray());
      gl.uniformMatrix4fv(OrbitLineShader.projMatLoc, false, renderContext.get_projection().floatArray());
      gl.uniform4f(OrbitLineShader.lineColorLoc, lineColor.r / 255, lineColor.g / 255, lineColor.b / 255, 1);
      if (renderContext.space) {
        gl.disable(2929);
      }
      else {
        gl.enable(2929);
      }
      gl.disableVertexAttribArray(0);
      gl.disableVertexAttribArray(1);
      gl.disableVertexAttribArray(2);
      gl.disableVertexAttribArray(3);
      gl.bindBuffer(34962, vertex);
      gl.bindBuffer(34963, null);
      gl.enableVertexAttribArray(OrbitLineShader.vertLoc);
      gl.enableVertexAttribArray(OrbitLineShader.colorLoc);
      gl.vertexAttribPointer(OrbitLineShader.vertLoc, 3, 5126, false, 28, 0);
      gl.vertexAttribPointer(OrbitLineShader.colorLoc, 4, 5126, false, 28, 12);
      gl.lineWidth(1);
      gl.enable(3042);
      gl.blendFunc(770, 771);
    }
  };
  var OrbitLineShader$ = {

  };


  // wwtlib.LineShaderNormalDates

  function LineShaderNormalDates() {
  }
  LineShaderNormalDates.init = function(renderContext) {
    var gl = renderContext.gl;
    var fragShaderText = '    precision highp float;                                                              \n' + '    uniform vec4 lineColor;                                                             \n' + '    varying lowp vec4 vColor;                                                           \n' + '    void main(void)                                                                     \n' + '    {                                                                                   \n' + '        gl_FragColor = lineColor * vColor;                                              \n' + '    }                                                                                   \n';
    var vertexShaderText = '    attribute vec3 aVertexPosition;                                                     \n' + '    attribute vec4 aVertexColor;                                                        \n' + '    attribute vec2 aTime;                                                               \n' + '    uniform mat4 uMVMatrix;                                                             \n' + '    uniform mat4 uPMatrix;                                                              \n' + '    uniform float jNow;                                                                 \n' + '    uniform float decay;                                                                \n' + '                                                                                        \n' + '    varying lowp vec4 vColor;                                                           \n' + '                                                                                        \n' + '    void main(void)                                                                     \n' + '    {                                                                                   \n' + '        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);                \n' + '        float dAlpha = 1.0;                                                             \n' + '        if ( decay > 0.0)                                                               \n' + '        {                                                                               \n' + '             dAlpha = 1.0 - ((jNow - aTime.y) / decay);                                 \n ' + '             if (dAlpha > 1.0 )                                                         \n' + '             {                                                                          \n' + '                  dAlpha = 1.0;                                                         \n' + '             }                                                                          \n' + '        }                                                                               \n' + '        if (jNow < aTime.x && decay > 0.0)                                              \n' + '        {                                                                               \n' + '            vColor = vec4(1, 1, 1, 1);                                                  \n' + '        }                                                                               \n' + '        else                                                                            \n' + '        {                                                                               \n' + '           vColor = vec4(aVertexColor.r, aVertexColor.g, aVertexColor.b, dAlpha * aVertexColor.a);          \n' + '        }                                                                                \n' + '    }                                                                                    \n' + '                                                                                         \n';
    LineShaderNormalDates._frag = gl.createShader(35632);
    gl.shaderSource(LineShaderNormalDates._frag, fragShaderText);
    gl.compileShader(LineShaderNormalDates._frag);
    var stat = gl.getShaderParameter(LineShaderNormalDates._frag, 35713);
    LineShaderNormalDates._vert = gl.createShader(35633);
    gl.shaderSource(LineShaderNormalDates._vert, vertexShaderText);
    gl.compileShader(LineShaderNormalDates._vert);
    var stat1 = gl.getShaderParameter(LineShaderNormalDates._vert, 35713);
    LineShaderNormalDates._prog = gl.createProgram();
    gl.attachShader(LineShaderNormalDates._prog, LineShaderNormalDates._vert);
    gl.attachShader(LineShaderNormalDates._prog, LineShaderNormalDates._frag);
    gl.linkProgram(LineShaderNormalDates._prog);
    var errcode = gl.getProgramParameter(LineShaderNormalDates._prog, 35714);
    gl.useProgram(LineShaderNormalDates._prog);
    LineShaderNormalDates.vertLoc = gl.getAttribLocation(LineShaderNormalDates._prog, 'aVertexPosition');
    LineShaderNormalDates.colorLoc = gl.getAttribLocation(LineShaderNormalDates._prog, 'aVertexColor');
    LineShaderNormalDates.timeLoc = gl.getAttribLocation(LineShaderNormalDates._prog, 'aTime');
    LineShaderNormalDates.lineColorLoc = gl.getUniformLocation(LineShaderNormalDates._prog, 'lineColor');
    LineShaderNormalDates.projMatLoc = gl.getUniformLocation(LineShaderNormalDates._prog, 'uPMatrix');
    LineShaderNormalDates.mvMatLoc = gl.getUniformLocation(LineShaderNormalDates._prog, 'uMVMatrix');
    LineShaderNormalDates.jNowLoc = gl.getUniformLocation(LineShaderNormalDates._prog, 'jNow');
    LineShaderNormalDates.decayLoc = gl.getUniformLocation(LineShaderNormalDates._prog, 'decay');
    gl.enable(3042);
    gl.blendFunc(770, 771);
    LineShaderNormalDates.initialized = true;
  };
  LineShaderNormalDates.use = function(renderContext, vertex, lineColor, zBuffer, jNow, decay) {
    var gl = renderContext.gl;
    if (gl != null) {
      if (!LineShaderNormalDates.initialized) {
        LineShaderNormalDates.init(renderContext);
      }
      gl.useProgram(LineShaderNormalDates._prog);
      var mvMat = Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
      gl.uniformMatrix4fv(LineShaderNormalDates.mvMatLoc, false, mvMat.floatArray());
      gl.uniformMatrix4fv(LineShaderNormalDates.projMatLoc, false, renderContext.get_projection().floatArray());
      gl.uniform4f(LineShaderNormalDates.lineColorLoc, lineColor.r / 255, lineColor.g / 255, lineColor.b / 255, 1);
      gl.uniform1f(LineShaderNormalDates.jNowLoc, jNow);
      gl.uniform1f(LineShaderNormalDates.decayLoc, decay);
      if (zBuffer) {
        gl.enable(2929);
      }
      else {
        gl.disable(2929);
      }
      gl.disableVertexAttribArray(0);
      gl.disableVertexAttribArray(1);
      gl.disableVertexAttribArray(2);
      gl.disableVertexAttribArray(3);
      gl.bindBuffer(34962, vertex);
      gl.bindBuffer(34963, null);
      gl.enableVertexAttribArray(LineShaderNormalDates.vertLoc);
      gl.enableVertexAttribArray(LineShaderNormalDates.colorLoc);
      gl.vertexAttribPointer(LineShaderNormalDates.vertLoc, 3, 5126, false, 36, 0);
      gl.vertexAttribPointer(LineShaderNormalDates.colorLoc, 4, 5126, false, 36, 12);
      gl.vertexAttribPointer(LineShaderNormalDates.timeLoc, 2, 5126, false, 36, 28);
      gl.lineWidth(1);
      gl.enable(3042);
      gl.blendFunc(770, 771);
    }
  };
  var LineShaderNormalDates$ = {

  };


  // wwtlib.TimeSeriesPointSpriteShader

  function TimeSeriesPointSpriteShader() {
  }
  TimeSeriesPointSpriteShader.init = function(renderContext) {
    var gl = renderContext.gl;
    var fragShaderText = '    precision mediump float;                                                            \n' + '    uniform vec4 lineColor;                                                             \n' + '    varying lowp vec4 vColor;                                                           \n' + '    uniform sampler2D uSampler;                                                         \n' + '    void main(void)                                                                     \n' + '    {                                                                                   \n' + '        vec4 texColor;                                                                  \n' + '        texColor = texture2D(uSampler, gl_PointCoord);                                  \n' + '                                                                                        \n' + '                                                                                        \n' + '        gl_FragColor = lineColor * vColor * texColor;                                   \n' + '    }                                                                                   \n';
    var vertexShaderText = '    attribute vec3 aVertexPosition;                                                     \n' + '    attribute vec4 aVertexColor;                                                        \n' + '    attribute vec2 aTime;                                                               \n' + '    attribute float aPointSize;                                                         \n' + '    uniform mat4 uMVMatrix;                                                             \n' + '    uniform mat4 uPMatrix;                                                              \n' + '    uniform float jNow;                                                                 \n' + '    uniform vec3 cameraPosition;                                                        \n' + '    uniform float decay;                                                                \n' + '    uniform float scale;                                                                \n' + '    uniform float minSize;                                                              \n' + '    uniform float sky;                                                                  \n' + '    uniform float showFarSide;                                                          \n' + '                                                                                        \n' + '    varying lowp vec4 vColor;                                                           \n' + '                                                                                        \n' + '    void main(void)                                                                     \n' + '    {                                                                                   \n' + '        float dotCam = dot( normalize(cameraPosition-aVertexPosition), normalize(aVertexPosition));                                  \n' + '        float dist = distance(aVertexPosition, cameraPosition);                         \n' + '        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);                \n' + '        float dAlpha = 1.0;                                                             \n' + '        if ( decay > 0.0)                                                               \n' + '        {                                                                               \n' + '             dAlpha = 1.0 - ((jNow - aTime.y) / decay);                                 \n ' + '             if (dAlpha > 1.0 )                                                         \n' + '             {                                                                          \n' + '                  dAlpha = 1.0;                                                         \n' + '             }                                                                          \n' + '        }                                                                               \n' + '        if ( showFarSide == 0.0 && (dotCam * sky) < 0.0 || (jNow < aTime.x && decay > 0.0))                                              \n' + '        {                                                                               \n' + '            vColor = vec4(0.0, 0.0, 0.0, 0.0);                                          \n' + '        }                                                                               \n' + '        else                                                                            \n' + '        {                                                                               \n' + '           vColor = vec4(aVertexColor.r, aVertexColor.g, aVertexColor.b, dAlpha);       \n' + '        }                                                                               \n' + '        float lSize = scale;                                                            \n' + '        if (scale < 0.0)                                                                \n' + '        {                                                                               \n' + '           lSize = -scale;                                                              \n' + '           dist = 1.0;                                                                  \n' + '        }                                                                               \n' + '        gl_PointSize = max(minSize, (lSize * ( aPointSize ) / dist));                   \n' + '    }                                                                                   \n' + '                                                                                        \n';
    TimeSeriesPointSpriteShader._frag = gl.createShader(35632);
    gl.shaderSource(TimeSeriesPointSpriteShader._frag, fragShaderText);
    gl.compileShader(TimeSeriesPointSpriteShader._frag);
    var stat = gl.getShaderParameter(TimeSeriesPointSpriteShader._frag, 35713);
    TimeSeriesPointSpriteShader._vert = gl.createShader(35633);
    gl.shaderSource(TimeSeriesPointSpriteShader._vert, vertexShaderText);
    gl.compileShader(TimeSeriesPointSpriteShader._vert);
    var stat1 = gl.getShaderParameter(TimeSeriesPointSpriteShader._vert, 35713);
    var compilationLog = gl.getShaderInfoLog(TimeSeriesPointSpriteShader._vert);
    TimeSeriesPointSpriteShader._prog = gl.createProgram();
    gl.attachShader(TimeSeriesPointSpriteShader._prog, TimeSeriesPointSpriteShader._vert);
    gl.attachShader(TimeSeriesPointSpriteShader._prog, TimeSeriesPointSpriteShader._frag);
    gl.linkProgram(TimeSeriesPointSpriteShader._prog);
    var errcode = gl.getProgramParameter(TimeSeriesPointSpriteShader._prog, 35714);
    gl.useProgram(TimeSeriesPointSpriteShader._prog);
    TimeSeriesPointSpriteShader.vertLoc = gl.getAttribLocation(TimeSeriesPointSpriteShader._prog, 'aVertexPosition');
    TimeSeriesPointSpriteShader.colorLoc = gl.getAttribLocation(TimeSeriesPointSpriteShader._prog, 'aVertexColor');
    TimeSeriesPointSpriteShader.pointSizeLoc = gl.getAttribLocation(TimeSeriesPointSpriteShader._prog, 'aPointSize');
    TimeSeriesPointSpriteShader.timeLoc = gl.getAttribLocation(TimeSeriesPointSpriteShader._prog, 'aTime');
    TimeSeriesPointSpriteShader.projMatLoc = gl.getUniformLocation(TimeSeriesPointSpriteShader._prog, 'uPMatrix');
    TimeSeriesPointSpriteShader.mvMatLoc = gl.getUniformLocation(TimeSeriesPointSpriteShader._prog, 'uMVMatrix');
    TimeSeriesPointSpriteShader.sampLoc = gl.getUniformLocation(TimeSeriesPointSpriteShader._prog, 'uSampler');
    TimeSeriesPointSpriteShader.jNowLoc = gl.getUniformLocation(TimeSeriesPointSpriteShader._prog, 'jNow');
    TimeSeriesPointSpriteShader.decayLoc = gl.getUniformLocation(TimeSeriesPointSpriteShader._prog, 'decay');
    TimeSeriesPointSpriteShader.lineColorLoc = gl.getUniformLocation(TimeSeriesPointSpriteShader._prog, 'lineColor');
    TimeSeriesPointSpriteShader.cameraPosLoc = gl.getUniformLocation(TimeSeriesPointSpriteShader._prog, 'cameraPosition');
    TimeSeriesPointSpriteShader.scaleLoc = gl.getUniformLocation(TimeSeriesPointSpriteShader._prog, 'scale');
    TimeSeriesPointSpriteShader.skyLoc = gl.getUniformLocation(TimeSeriesPointSpriteShader._prog, 'sky');
    TimeSeriesPointSpriteShader.showFarSideLoc = gl.getUniformLocation(TimeSeriesPointSpriteShader._prog, 'showFarSide');
    TimeSeriesPointSpriteShader.minSizeLoc = gl.getUniformLocation(TimeSeriesPointSpriteShader._prog, 'minSize');
    gl.enable(3042);
    TimeSeriesPointSpriteShader.initialized = true;
  };
  TimeSeriesPointSpriteShader.use = function(renderContext, vertex, texture, lineColor, zBuffer, jNow, decay, camera, scale, minSize, showFarSide, sky) {
    if (texture == null) {
      texture = Texture.getEmpty();
    }
    var gl = renderContext.gl;
    if (gl != null) {
      if (!TimeSeriesPointSpriteShader.initialized) {
        TimeSeriesPointSpriteShader.init(renderContext);
      }
      gl.useProgram(TimeSeriesPointSpriteShader._prog);
      var mvMat = Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
      gl.uniformMatrix4fv(TimeSeriesPointSpriteShader.mvMatLoc, false, mvMat.floatArray());
      gl.uniformMatrix4fv(TimeSeriesPointSpriteShader.projMatLoc, false, renderContext.get_projection().floatArray());
      gl.uniform1i(TimeSeriesPointSpriteShader.sampLoc, 0);
      gl.uniform1f(TimeSeriesPointSpriteShader.jNowLoc, jNow);
      gl.uniform1f(TimeSeriesPointSpriteShader.decayLoc, decay);
      gl.uniform4f(TimeSeriesPointSpriteShader.lineColorLoc, lineColor.r / 255, lineColor.g / 255, lineColor.b / 255, lineColor.a / 255);
      gl.uniform3f(TimeSeriesPointSpriteShader.cameraPosLoc, camera.x, camera.y, camera.z);
      gl.uniform1f(TimeSeriesPointSpriteShader.scaleLoc, scale);
      gl.uniform1f(TimeSeriesPointSpriteShader.minSizeLoc, minSize);
      gl.uniform1f(TimeSeriesPointSpriteShader.showFarSideLoc, (showFarSide) ? 1 : 0);
      gl.uniform1f(TimeSeriesPointSpriteShader.skyLoc, (sky) ? -1 : 1);
      if (zBuffer) {
        gl.enable(2929);
      }
      else {
        gl.disable(2929);
      }
      gl.disableVertexAttribArray(0);
      gl.disableVertexAttribArray(1);
      gl.disableVertexAttribArray(2);
      gl.disableVertexAttribArray(3);
      gl.bindBuffer(34962, vertex);
      gl.bindBuffer(34963, null);
      gl.enableVertexAttribArray(TimeSeriesPointSpriteShader.vertLoc);
      gl.enableVertexAttribArray(TimeSeriesPointSpriteShader.colorLoc);
      gl.enableVertexAttribArray(TimeSeriesPointSpriteShader.pointSizeLoc);
      gl.enableVertexAttribArray(TimeSeriesPointSpriteShader.timeLoc);
      gl.vertexAttribPointer(TimeSeriesPointSpriteShader.vertLoc, 3, 5126, false, 40, 0);
      gl.vertexAttribPointer(TimeSeriesPointSpriteShader.colorLoc, 4, 5126, false, 40, 12);
      gl.vertexAttribPointer(TimeSeriesPointSpriteShader.pointSizeLoc, 1, 5126, false, 40, 36);
      gl.vertexAttribPointer(TimeSeriesPointSpriteShader.timeLoc, 2, 5126, false, 40, 28);
      gl.activeTexture(33984);
      gl.bindTexture(3553, texture);
      gl.lineWidth(1);
      gl.enable(3042);
      gl.blendFunc(770, 1);
    }
  };
  var TimeSeriesPointSpriteShader$ = {

  };


  // wwtlib.KeplerPointSpriteShader

  function KeplerPointSpriteShader() {
  }
  KeplerPointSpriteShader.init = function(renderContext) {
    var gl = renderContext.gl;
    var fragShaderText = '    precision mediump float;                                                            \n' + '    uniform vec4 lineColor;                                                             \n' + '    varying lowp vec4 vColor;                                                           \n' + '    uniform sampler2D uSampler;                                                         \n' + '    void main(void)                                                                     \n' + '    {                                                                                   \n' + '        vec4 texColor;                                                                  \n' + '        texColor = texture2D(uSampler, gl_PointCoord);                                  \n' + '                                                                                        \n' + '                                                                                        \n' + '        gl_FragColor = lineColor * vColor * texColor;                                   \n' + '    }                                                                                   \n';
    var vertexShaderText = '    attribute vec3 ABC;                                                                 \n' + '    attribute vec3 abc;                                                                 \n' + '    attribute float PointSize;                                                          \n' + '    attribute vec4 Color;                                                               \n' + '    attribute vec2 we;                                                                  \n' + '    attribute vec2 nT;                                                                  \n' + '    attribute vec2 az;                                                                  \n' + '    attribute vec2 orbit;                                                               \n' + '    uniform mat4 uMVMatrix;                                                             \n' + '    uniform mat4 uPMatrix;                                                              \n' + '    uniform float jNow;                                                                 \n' + '    uniform vec3 cameraPosition;                                                        \n' + '    uniform float MM;                                                                   \n' + '    uniform float scaling;                                                              \n' + '    uniform float minSize;                                                              \n' + '    uniform float opacity;                                                              \n' + '    varying lowp vec4 vColor;                                                           \n' + '                                                                                        \n' + '    void main(void)                                                                     \n' + '    {                                                                                   \n' + '     float M = nT.x * (jNow - nT.y) * 0.01745329251994;                                 \n' + '     float e = we.y;                                                                    \n' + '     float a = az.x;                                                                    \n' + '     float PI = 3.1415926535897932384;                                                  \n' + '     float w = we.x* 0.01745329251994;                                                  \n' + '     float F = 1.0;                                                                     \n' + '     if (M < 0.0)                                                                       \n' + '       F = -1.0;                                                                        \n' + '     M = abs(M) / (2.0 * PI);                                                           \n' + '     M = (M - float(int(M)))*2.0 *PI *F;                                                \n' + '     if (MM != 0.0)                                                                     \n' + '     {                                                                                  \n' + '       M = MM + (1.0- orbit.x) *2.0 *PI;                                                \n' + '       if (M > (2.0*PI))                                                                \n' + '           M = M - (2.0*PI);                                                            \n' + '     }                                                                                  \n' + '                                                                                        \n' + '     if (M < 0.0)                                                                       \n' + '       M += 2.0 *PI;                                                                    \n' + '     F = 1.0;                                                                           \n' + '     if (M > PI)                                                                        \n' + '        F = -1.0;                                                                       \n' + '     if (M > PI)                                                                        \n' + '       M = 2.0 *PI - M;                                                                 \n' + '                                                                                        \n' + '     float E = PI / 2.0;                                                                \n' + '     float scale = PI / 4.0;                                                            \n' + '     for (int i =0; i<23; i++)                                                          \n' + '     {                                                                                  \n' + '       float R = E - e *sin(E);                                                         \n' + '       if (M > R)                                                                       \n' + '      \tE += scale;                                                                      \n' + '       else                                                                             \n' + '     \tE -= scale;                                                                      \n' + '       scale /= 2.0;                                                                    \n' + '     }                                                                                  \n' + '      E = E * F;                                                                        \n' + '                                                                                        \n' + '     float v = 2.0 * atan(sqrt((1.0 + e) / (1.0 -e )) * tan(E/2.0));                    \n' + '     float r = a * (1.0-e * cos(E));                                                    \n' + '                                                                                        \n' + '     vec4 pnt;                                                                          \n' + '     pnt.x = r * abc.x * sin(ABC.x + w + v);                                            \n' + '     pnt.z = r * abc.y * sin(ABC.y + w + v);                                            \n' + '     pnt.y = r * abc.z * sin(ABC.z + w + v);                                            \n' + '     pnt.w = 1.0;                                                                       \n' + '                                                                                        \n' + '     float dist = distance(pnt.xyz, cameraPosition.xyz);                                \n' + '     gl_Position = uPMatrix * uMVMatrix * pnt;                                          \n' + '     vColor.a = opacity * (1.0-(orbit.x));                                              \n' + '     vColor.r = Color.r;                                                                \n' + '     vColor.g = Color.g;                                                                \n' + '     vColor.b = Color.b;                                                                \n' + '     gl_PointSize = max(minSize, scaling * (PointSize / dist));                         \n' + ' }                                                                                      \n';
    KeplerPointSpriteShader._frag = gl.createShader(35632);
    gl.shaderSource(KeplerPointSpriteShader._frag, fragShaderText);
    gl.compileShader(KeplerPointSpriteShader._frag);
    var stat = gl.getShaderParameter(KeplerPointSpriteShader._frag, 35713);
    KeplerPointSpriteShader._vert = gl.createShader(35633);
    gl.shaderSource(KeplerPointSpriteShader._vert, vertexShaderText);
    gl.compileShader(KeplerPointSpriteShader._vert);
    var stat1 = gl.getShaderParameter(KeplerPointSpriteShader._vert, 35713);
    var compilationLog = gl.getShaderInfoLog(KeplerPointSpriteShader._vert);
    KeplerPointSpriteShader._prog = gl.createProgram();
    gl.attachShader(KeplerPointSpriteShader._prog, KeplerPointSpriteShader._vert);
    gl.attachShader(KeplerPointSpriteShader._prog, KeplerPointSpriteShader._frag);
    gl.linkProgram(KeplerPointSpriteShader._prog);
    var errcode = gl.getProgramParameter(KeplerPointSpriteShader._prog, 35714);
    gl.useProgram(KeplerPointSpriteShader._prog);
    KeplerPointSpriteShader.abcLoc1 = gl.getAttribLocation(KeplerPointSpriteShader._prog, 'abc');
    KeplerPointSpriteShader.abcLoc = gl.getAttribLocation(KeplerPointSpriteShader._prog, 'ABC');
    KeplerPointSpriteShader.pointSizeLoc = gl.getAttribLocation(KeplerPointSpriteShader._prog, 'PointSize');
    KeplerPointSpriteShader.colorLoc = gl.getAttribLocation(KeplerPointSpriteShader._prog, 'Color');
    KeplerPointSpriteShader.weLoc = gl.getAttribLocation(KeplerPointSpriteShader._prog, 'we');
    KeplerPointSpriteShader.nTLoc = gl.getAttribLocation(KeplerPointSpriteShader._prog, 'nT');
    KeplerPointSpriteShader.azLoc = gl.getAttribLocation(KeplerPointSpriteShader._prog, 'az');
    KeplerPointSpriteShader.orbitLoc = gl.getAttribLocation(KeplerPointSpriteShader._prog, 'orbit');
    KeplerPointSpriteShader.projMatLoc = gl.getUniformLocation(KeplerPointSpriteShader._prog, 'uPMatrix');
    KeplerPointSpriteShader.mvMatLoc = gl.getUniformLocation(KeplerPointSpriteShader._prog, 'uMVMatrix');
    KeplerPointSpriteShader.jNowLoc = gl.getUniformLocation(KeplerPointSpriteShader._prog, 'jNow');
    KeplerPointSpriteShader.cameraPosLoc = gl.getUniformLocation(KeplerPointSpriteShader._prog, 'cameraPosition');
    KeplerPointSpriteShader.mmLoc = gl.getUniformLocation(KeplerPointSpriteShader._prog, 'MM');
    KeplerPointSpriteShader.scaleLoc = gl.getUniformLocation(KeplerPointSpriteShader._prog, 'scaling');
    KeplerPointSpriteShader.minSizeLoc = gl.getUniformLocation(KeplerPointSpriteShader._prog, 'minSize');
    KeplerPointSpriteShader.lineColorLoc = gl.getUniformLocation(KeplerPointSpriteShader._prog, 'lineColor');
    KeplerPointSpriteShader.opacityLoc = gl.getUniformLocation(KeplerPointSpriteShader._prog, 'opacity');
    KeplerPointSpriteShader.sampLoc = gl.getUniformLocation(KeplerPointSpriteShader._prog, 'uSampler');
    gl.enable(3042);
    KeplerPointSpriteShader.initialized = true;
  };
  KeplerPointSpriteShader.use = function(renderContext, worldView, vertex, texture, lineColor, opacity, zBuffer, jNow, MM, camera, scale, minSize) {
    if (texture == null) {
      texture = Texture.getEmpty();
    }
    var gl = renderContext.gl;
    if (gl != null) {
      if (!KeplerPointSpriteShader.initialized) {
        KeplerPointSpriteShader.init(renderContext);
      }
      gl.useProgram(KeplerPointSpriteShader._prog);
      gl.uniformMatrix4fv(KeplerPointSpriteShader.mvMatLoc, false, worldView.floatArray());
      gl.uniformMatrix4fv(KeplerPointSpriteShader.projMatLoc, false, renderContext.get_projection().floatArray());
      gl.uniform1i(KeplerPointSpriteShader.sampLoc, 0);
      gl.uniform1f(KeplerPointSpriteShader.jNowLoc, jNow);
      gl.uniform1f(KeplerPointSpriteShader.mmLoc, MM);
      gl.uniform4f(KeplerPointSpriteShader.lineColorLoc, lineColor.r / 255, lineColor.g / 255, lineColor.b / 255, lineColor.a / 255);
      gl.uniform1f(KeplerPointSpriteShader.opacityLoc, opacity);
      gl.uniform3f(KeplerPointSpriteShader.cameraPosLoc, camera.x, camera.y, camera.z);
      gl.uniform1f(KeplerPointSpriteShader.scaleLoc, scale);
      gl.uniform1f(KeplerPointSpriteShader.minSizeLoc, minSize);
      if (zBuffer) {
        gl.enable(2929);
      }
      else {
        gl.disable(2929);
      }
      gl.disableVertexAttribArray(0);
      gl.disableVertexAttribArray(1);
      gl.disableVertexAttribArray(2);
      gl.disableVertexAttribArray(3);
      gl.bindBuffer(34962, vertex);
      gl.bindBuffer(34963, null);
      gl.enableVertexAttribArray(KeplerPointSpriteShader.abcLoc);
      gl.enableVertexAttribArray(KeplerPointSpriteShader.abcLoc1);
      gl.enableVertexAttribArray(KeplerPointSpriteShader.colorLoc);
      gl.enableVertexAttribArray(KeplerPointSpriteShader.pointSizeLoc);
      gl.enableVertexAttribArray(KeplerPointSpriteShader.weLoc);
      gl.enableVertexAttribArray(KeplerPointSpriteShader.nTLoc);
      gl.enableVertexAttribArray(KeplerPointSpriteShader.azLoc);
      gl.enableVertexAttribArray(KeplerPointSpriteShader.orbitLoc);
      gl.enableVertexAttribArray(KeplerPointSpriteShader.weLoc);
      gl.vertexAttribPointer(KeplerPointSpriteShader.abcLoc, 3, 5126, false, 76, 0);
      gl.vertexAttribPointer(KeplerPointSpriteShader.abcLoc1, 3, 5126, false, 76, 12);
      gl.vertexAttribPointer(KeplerPointSpriteShader.pointSizeLoc, 1, 5126, false, 76, 24);
      gl.vertexAttribPointer(KeplerPointSpriteShader.colorLoc, 4, 5126, false, 76, 28);
      gl.vertexAttribPointer(KeplerPointSpriteShader.weLoc, 2, 5126, false, 76, 44);
      gl.vertexAttribPointer(KeplerPointSpriteShader.nTLoc, 2, 5126, false, 76, 52);
      gl.vertexAttribPointer(KeplerPointSpriteShader.azLoc, 2, 5126, false, 76, 60);
      gl.vertexAttribPointer(KeplerPointSpriteShader.orbitLoc, 2, 5126, false, 76, 68);
      gl.activeTexture(33984);
      gl.bindTexture(3553, texture);
      gl.lineWidth(1);
      gl.enable(3042);
      gl.blendFunc(770, 1);
    }
  };
  var KeplerPointSpriteShader$ = {

  };


  // wwtlib.EllipseShader

  function EllipseShader() {
  }
  EllipseShader.init = function(renderContext) {
    var gl = renderContext.gl;
    var fragShaderText = '    precision mediump float;                                                            \n' + '    varying lowp vec4 vColor;                                                           \n' + '    void main(void)                                                                     \n' + '    {                                                                                   \n' + '        gl_FragColor = vColor;                                          \n' + '    }                                                                                   \n';
    var vertexShaderText = '    attribute vec3 Angle;                                                               \n' + '    uniform mat4 matWVP;                                                             \n' + '    uniform mat4 matPosition;                                                              \n' + '    uniform vec3 positionNow;                                                        \n' + '    uniform float semiMajorAxis;                                                                   \n' + '    uniform float eccentricity;                                                              \n' + '    uniform vec4 color;                                                             \n' + '    uniform float eccentricAnomaly;                                                              \n' + '    varying lowp vec4 vColor;                                                           \n' + '                                                                                        \n' + '    void main(void)                                                                     \n' + '    {                                                                                   \n' + '        float fade = (1.0 - Angle.x);                                                    \n' + '        float PI = 3.1415927;                                                          \n' + '        float E = eccentricAnomaly - Angle.x * 2.0 * PI;                                   \n' + '        vec2 semiAxes = vec2(1.0, sqrt(1.0 - eccentricity * eccentricity)) * semiMajorAxis;   \n' + '        vec2 planePos = semiAxes * vec2(cos(E) - eccentricity, sin(E));              \n' + '        if (Angle.x == 0.0)                                                         \n' + '           gl_Position =  matPosition * vec4(positionNow, 1.0);                                \n' + '        else                                                                           \n' + '           gl_Position = matWVP * vec4(planePos.x, planePos.y, 0.0, 1.0);              \n' + '        vColor = vec4(color.rgb, fade * color.a);                                      \n' + '    }                                                                                  \n';
    EllipseShader._frag = gl.createShader(35632);
    gl.shaderSource(EllipseShader._frag, fragShaderText);
    gl.compileShader(EllipseShader._frag);
    var stat = gl.getShaderParameter(EllipseShader._frag, 35713);
    EllipseShader._vert = gl.createShader(35633);
    gl.shaderSource(EllipseShader._vert, vertexShaderText);
    gl.compileShader(EllipseShader._vert);
    var stat1 = gl.getShaderParameter(EllipseShader._vert, 35713);
    var compilationLog = gl.getShaderInfoLog(EllipseShader._vert);
    EllipseShader._prog = gl.createProgram();
    gl.attachShader(EllipseShader._prog, EllipseShader._vert);
    gl.attachShader(EllipseShader._prog, EllipseShader._frag);
    gl.linkProgram(EllipseShader._prog);
    var errcode = gl.getProgramParameter(EllipseShader._prog, 35714);
    gl.useProgram(EllipseShader._prog);
    EllipseShader.angleLoc = gl.getAttribLocation(EllipseShader._prog, 'Angle');
    EllipseShader.matWVPLoc = gl.getUniformLocation(EllipseShader._prog, 'matWVP');
    EllipseShader.matPositionLoc = gl.getUniformLocation(EllipseShader._prog, 'matPosition');
    EllipseShader.positionNowLoc = gl.getUniformLocation(EllipseShader._prog, 'positionNow');
    EllipseShader.colorLoc = gl.getUniformLocation(EllipseShader._prog, 'color');
    EllipseShader.semiMajorAxisLoc = gl.getUniformLocation(EllipseShader._prog, 'semiMajorAxis');
    EllipseShader.eccentricityLoc = gl.getUniformLocation(EllipseShader._prog, 'eccentricity');
    EllipseShader.eccentricAnomalyLoc = gl.getUniformLocation(EllipseShader._prog, 'eccentricAnomaly');
    gl.enable(3042);
    EllipseShader.initialized = true;
  };
  EllipseShader.use = function(renderContext, semiMajorAxis, eccentricity, eccentricAnomaly, lineColor, opacity, world, positionNow) {
    var gl = renderContext.gl;
    if (gl != null) {
      if (!EllipseShader.initialized) {
        EllipseShader.init(renderContext);
      }
      gl.useProgram(EllipseShader._prog);
      var WVPPos = Matrix3d.multiplyMatrix(Matrix3d.multiplyMatrix(world, renderContext.get_view()), renderContext.get_projection());
      var WVP = Matrix3d.multiplyMatrix(Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view()), renderContext.get_projection());
      gl.uniformMatrix4fv(EllipseShader.matWVPLoc, false, WVP.floatArray());
      gl.uniformMatrix4fv(EllipseShader.matPositionLoc, false, WVPPos.floatArray());
      gl.uniform3f(EllipseShader.positionNowLoc, positionNow.x, positionNow.y, positionNow.z);
      gl.uniform4f(EllipseShader.colorLoc, lineColor.r / 255, lineColor.g / 255, lineColor.b / 255, lineColor.a / 255);
      gl.uniform1f(EllipseShader.semiMajorAxisLoc, semiMajorAxis);
      gl.uniform1f(EllipseShader.eccentricityLoc, eccentricity);
      gl.uniform1f(EllipseShader.eccentricAnomalyLoc, eccentricAnomaly);
      gl.disable(2929);
      gl.disableVertexAttribArray(0);
      gl.disableVertexAttribArray(1);
      gl.disableVertexAttribArray(2);
      gl.disableVertexAttribArray(3);
      gl.enableVertexAttribArray(EllipseShader.angleLoc);
      gl.vertexAttribPointer(EllipseShader.angleLoc, 3, 5126, false, 0, 0);
      gl.lineWidth(1);
      gl.enable(3042);
      gl.blendFunc(770, 1);
    }
  };
  var EllipseShader$ = {

  };


  // wwtlib.ModelShader

  function ModelShader() {
  }
  ModelShader.init = function(renderContext) {
    var gl = renderContext.gl;
    var fragShaderText = ' precision mediump float;                                                              \n' + '                                                                                       \n' + '   varying vec2 vTextureCoord;                                                         \n' + '   varying vec3 vNormal;                                                               \n' + '   varying vec3 vCamVector;                                                               \n' + '                                                                                       \n' + '   uniform sampler2D uSampler;                                                         \n' + '   uniform float opacity;                                                              \n' + '   uniform vec3 uSunPosition;                                                          \n' + '   uniform float uMinBrightness;                                                       \n' + '   uniform vec3 uAtmosphereColor;                                                       \n' + '                                                                                       \n' + '   void main(void) {                                                                   \n' + '     vec3 normal = normalize(vNormal);                                                 \n' + '     vec3 camVN = normalize(vCamVector);                                               \n' + '     vec3 cam = normalize(vec3(0.0,0.0,-1.0));                                                    \n' + '     float dt = uMinBrightness + pow(max(0.0,- dot(normal,uSunPosition)),0.5);                  \n' + '     float atm = max(0.0, 1.0 - 2.5 * dot(cam,camVN)) + 0.3 * dt;                             \n' + '     atm = (dt > uMinBrightness) ? atm : 0.0;                                          \n' + '     if ( uMinBrightness == 1.0 ) { dt = 1.0; atm= 0.0; }                                        \n' + '     vec4 col = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));           \n' + '     gl_FragColor = col * opacity;                                                     \n' + '     gl_FragColor.rgb *= dt;                                                           \n' + '     gl_FragColor.rgb += atm * uAtmosphereColor;                                  \n' + '   }                                                                                   \n';
    var vertexShaderText = '     attribute vec3 aVertexPosition;                                              \n' + '     attribute vec3 aNormal;                                                     \n' + '     attribute vec2 aTextureCoord;                                                \n' + '                                                                                  \n' + '     uniform mat4 uMVMatrix;                                                      \n' + '     uniform mat4 uPMatrix;                                                       \n' + '                                                                                  \n' + '     varying vec2 vTextureCoord;                                                  \n' + '     varying vec3 vNormal;                                                        \n' + '     varying vec3 vCamVector;                                                     \n' + '                                                                                  \n' + '                                                                                  \n' + '     void main(void) {                                                            \n' + '         gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);         \n' + '         vCamVector = normalize((mat3(uMVMatrix) * aVertexPosition).xyz);              \n' + '         vec3 normalT = normalize(mat3(uMVMatrix) * aNormal);                      \n' + '         vTextureCoord = aTextureCoord;                                           \n' + '         vNormal = normalT;                                                       \n' + '     }                                                                            \n' + '                                                                                  \n';
    ModelShader._frag = gl.createShader(35632);
    gl.shaderSource(ModelShader._frag, fragShaderText);
    gl.compileShader(ModelShader._frag);
    var stat = gl.getShaderParameter(ModelShader._frag, 35713);
    if (!stat) {
      var errorF = gl.getShaderInfoLog(ModelShader._frag);
    }
    ModelShader._vert = gl.createShader(35633);
    gl.shaderSource(ModelShader._vert, vertexShaderText);
    gl.compileShader(ModelShader._vert);
    var stat1 = gl.getShaderParameter(ModelShader._vert, 35713);
    if (!stat1) {
      var errorV = gl.getShaderInfoLog(ModelShader._vert);
    }
    ModelShader._prog = gl.createProgram();
    gl.attachShader(ModelShader._prog, ModelShader._vert);
    gl.attachShader(ModelShader._prog, ModelShader._frag);
    gl.linkProgram(ModelShader._prog);
    var errcode = gl.getProgramParameter(ModelShader._prog, 35714);
    gl.useProgram(ModelShader._prog);
    ModelShader.vertLoc = gl.getAttribLocation(ModelShader._prog, 'aVertexPosition');
    ModelShader.normalLoc = gl.getAttribLocation(ModelShader._prog, 'aNormal');
    ModelShader.textureLoc = gl.getAttribLocation(ModelShader._prog, 'aTextureCoord');
    ModelShader.projMatLoc = gl.getUniformLocation(ModelShader._prog, 'uPMatrix');
    ModelShader.mvMatLoc = gl.getUniformLocation(ModelShader._prog, 'uMVMatrix');
    ModelShader.sampLoc = gl.getUniformLocation(ModelShader._prog, 'uSampler');
    ModelShader.sunLoc = gl.getUniformLocation(ModelShader._prog, 'uSunPosition');
    ModelShader.minBrightnessLoc = gl.getUniformLocation(ModelShader._prog, 'uMinBrightness');
    ModelShader.opacityLoc = gl.getUniformLocation(ModelShader._prog, 'opacity');
    ModelShader.atmosphereColorLoc = gl.getUniformLocation(ModelShader._prog, 'uAtmosphereColor');
    Tile.uvMultiple = 1;
    Tile.demEnabled = true;
    gl.enable(3042);
    gl.blendFunc(770, 771);
    ModelShader.initialized = true;
  };
  ModelShader.use = function(renderContext, vertex, index, texture, opacity, noDepth, stride) {
    if (texture == null) {
      texture = Texture.getEmpty();
    }
    var gl = renderContext.gl;
    if (gl != null) {
      if (!ModelShader.initialized) {
        ModelShader.init(renderContext);
      }
      gl.useProgram(ModelShader._prog);
      var mvMat = Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
      gl.uniform1f(ModelShader.opacityLoc, opacity);
      gl.uniform1f(ModelShader.minBrightnessLoc, (renderContext.lighting) ? ModelShader.minLightingBrightness : 1);
      if (renderContext.lighting) {
        gl.uniform3f(ModelShader.atmosphereColorLoc, ModelShader.atmosphereColor.r / 255, ModelShader.atmosphereColor.g / 255, ModelShader.atmosphereColor.b / 255);
      }
      else {
        gl.uniform3f(ModelShader.atmosphereColorLoc, 0, 0, 0);
      }
      gl.uniformMatrix4fv(ModelShader.mvMatLoc, false, mvMat.floatArray());
      gl.uniformMatrix4fv(ModelShader.projMatLoc, false, renderContext.get_projection().floatArray());
      ModelShader.sunPosition.normalize();
      var mvInv = renderContext.get_view().clone();
      mvInv.set_m41(0);
      mvInv.set_m42(0);
      mvInv.set_m43(0);
      mvInv.set_m44(1);
      var sp = Vector3d._transformCoordinate(ModelShader.sunPosition, mvInv);
      sp.normalize();
      gl.uniform3f(ModelShader.sunLoc, sp.x, sp.y, sp.z);
      gl.uniform1i(ModelShader.sampLoc, 0);
      if (renderContext.space || noDepth) {
        gl.disable(2929);
      }
      else {
        gl.enable(2929);
      }
      gl.disableVertexAttribArray(0);
      gl.disableVertexAttribArray(1);
      gl.disableVertexAttribArray(2);
      gl.disableVertexAttribArray(3);
      gl.bindBuffer(34962, vertex);
      gl.enableVertexAttribArray(ModelShader.vertLoc);
      gl.enableVertexAttribArray(ModelShader.normalLoc);
      gl.enableVertexAttribArray(ModelShader.textureLoc);
      gl.vertexAttribPointer(ModelShader.vertLoc, 3, 5126, false, stride, 0);
      gl.vertexAttribPointer(ModelShader.normalLoc, 3, 5126, false, stride, 12);
      gl.vertexAttribPointer(ModelShader.textureLoc, 2, 5126, false, stride, stride - 8);
      gl.activeTexture(33984);
      gl.bindTexture(3553, texture);
      gl.bindBuffer(34963, index);
      gl.enable(3042);
      if (noDepth) {
        gl.blendFunc(770, 1);
      }
      else {
        gl.blendFunc(770, 771);
      }
    }
  };
  var ModelShader$ = {

  };


  // wwtlib.ModelShaderTan

  function ModelShaderTan() {
  }
  ModelShaderTan.init = function(renderContext) {
    var gl = renderContext.gl;
    var fragShaderText = ' precision mediump float;                                                              \n' + '                                                                                       \n' + '   varying vec2 vTextureCoord;                                                         \n' + '   varying vec3 vNormal;                                                               \n' + '   varying vec3 vCamVector;                                                               \n' + '                                                                                       \n' + '   uniform sampler2D uSampler;                                                         \n' + '   uniform float opacity;                                                              \n' + '   uniform vec3 uSunPosition;                                                          \n' + '   uniform float uMinBrightness;                                                       \n' + '   uniform vec3 uAtmosphereColor;                                                       \n' + '                                                                                       \n' + '   void main(void) {                                                                   \n' + '     vec3 normal = normalize(vNormal);                                                 \n' + '     vec3 camVN = normalize(vCamVector);                                               \n' + '     vec3 cam = normalize(vec3(0.0,0.0,-1.0));                                                    \n' + '     float dt = uMinBrightness + pow(max(0.0,- dot(normal,uSunPosition)),0.5);                  \n' + '     float atm = max(0.0, 1.0 - 2.5 * dot(cam,camVN)) + 0.3 * dt;                             \n' + '     atm = (dt > uMinBrightness) ? atm : 0.0;                                          \n' + '     if ( uMinBrightness == 1.0 ) { dt = 1.0; atm= 0.0; }                                        \n' + '     vec4 col = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));           \n' + '     gl_FragColor = col * opacity;                                                     \n' + '     gl_FragColor.rgb *= dt;                                                           \n' + '     gl_FragColor.rgb += atm * uAtmosphereColor;                                  \n' + '   }                                                                                   \n';
    var vertexShaderText = '     attribute vec3 aVertexPosition;                                              \n' + '     attribute vec3 aNormal;                                                     \n' + '     attribute vec2 aTextureCoord;                                                \n' + '                                                                                  \n' + '     uniform mat4 uMVMatrix;                                                      \n' + '     uniform mat4 uPMatrix;                                                       \n' + '                                                                                  \n' + '     varying vec2 vTextureCoord;                                                  \n' + '     varying vec3 vNormal;                                                        \n' + '     varying vec3 vCamVector;                                                     \n' + '                                                                                  \n' + '                                                                                  \n' + '     void main(void) {                                                            \n' + '         gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);         \n' + '         vCamVector = normalize((mat3(uMVMatrix) * aVertexPosition).xyz);              \n' + '         vec3 normalT = normalize(mat3(uMVMatrix) * aNormal);                      \n' + '         vTextureCoord = aTextureCoord;                                           \n' + '         vNormal = normalT;                                                       \n' + '     }                                                                            \n' + '                                                                                  \n';
    ModelShaderTan._frag = gl.createShader(35632);
    gl.shaderSource(ModelShaderTan._frag, fragShaderText);
    gl.compileShader(ModelShaderTan._frag);
    var stat = gl.getShaderParameter(ModelShaderTan._frag, 35713);
    if (!stat) {
      var errorF = gl.getShaderInfoLog(ModelShaderTan._frag);
    }
    ModelShaderTan._vert = gl.createShader(35633);
    gl.shaderSource(ModelShaderTan._vert, vertexShaderText);
    gl.compileShader(ModelShaderTan._vert);
    var stat1 = gl.getShaderParameter(ModelShaderTan._vert, 35713);
    if (!stat1) {
      var errorV = gl.getShaderInfoLog(ModelShaderTan._vert);
    }
    ModelShaderTan._prog = gl.createProgram();
    gl.attachShader(ModelShaderTan._prog, ModelShaderTan._vert);
    gl.attachShader(ModelShaderTan._prog, ModelShaderTan._frag);
    gl.linkProgram(ModelShaderTan._prog);
    var errcode = gl.getProgramParameter(ModelShaderTan._prog, 35714);
    gl.useProgram(ModelShaderTan._prog);
    ModelShaderTan.vertLoc = gl.getAttribLocation(ModelShaderTan._prog, 'aVertexPosition');
    ModelShaderTan.normalLoc = gl.getAttribLocation(ModelShaderTan._prog, 'aNormal');
    ModelShaderTan.textureLoc = gl.getAttribLocation(ModelShaderTan._prog, 'aTextureCoord');
    ModelShaderTan.projMatLoc = gl.getUniformLocation(ModelShaderTan._prog, 'uPMatrix');
    ModelShaderTan.mvMatLoc = gl.getUniformLocation(ModelShaderTan._prog, 'uMVMatrix');
    ModelShaderTan.sampLoc = gl.getUniformLocation(ModelShaderTan._prog, 'uSampler');
    ModelShaderTan.sunLoc = gl.getUniformLocation(ModelShaderTan._prog, 'uSunPosition');
    ModelShaderTan.minBrightnessLoc = gl.getUniformLocation(ModelShaderTan._prog, 'uMinBrightness');
    ModelShaderTan.opacityLoc = gl.getUniformLocation(ModelShaderTan._prog, 'opacity');
    ModelShaderTan.atmosphereColorLoc = gl.getUniformLocation(ModelShaderTan._prog, 'uAtmosphereColor');
    Tile.uvMultiple = 1;
    Tile.demEnabled = true;
    gl.enable(3042);
    gl.blendFunc(770, 771);
    ModelShaderTan.initialized = true;
  };
  ModelShaderTan.use = function(renderContext, vertex, index, texture, opacity, noDepth, stride) {
    if (texture == null) {
      texture = Texture.getEmpty();
    }
    var gl = renderContext.gl;
    if (gl != null) {
      if (!ModelShaderTan.initialized) {
        ModelShaderTan.init(renderContext);
      }
      gl.useProgram(ModelShaderTan._prog);
      var mvMat = Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
      gl.uniform1f(ModelShaderTan.opacityLoc, opacity);
      gl.uniform1f(ModelShaderTan.minBrightnessLoc, (renderContext.lighting) ? ModelShaderTan.minLightingBrightness : 1);
      if (renderContext.lighting) {
        gl.uniform3f(ModelShaderTan.atmosphereColorLoc, ModelShaderTan.atmosphereColor.r / 255, ModelShaderTan.atmosphereColor.g / 255, ModelShaderTan.atmosphereColor.b / 255);
      }
      else {
        gl.uniform3f(ModelShaderTan.atmosphereColorLoc, 0, 0, 0);
      }
      gl.uniformMatrix4fv(ModelShaderTan.mvMatLoc, false, mvMat.floatArray());
      gl.uniformMatrix4fv(ModelShaderTan.projMatLoc, false, renderContext.get_projection().floatArray());
      ModelShaderTan.sunPosition.normalize();
      var mvInv = renderContext.get_view().clone();
      mvInv.set_m41(0);
      mvInv.set_m42(0);
      mvInv.set_m43(0);
      mvInv.set_m44(1);
      var sp = Vector3d._transformCoordinate(ModelShaderTan.sunPosition, mvInv);
      sp.normalize();
      gl.uniform3f(ModelShaderTan.sunLoc, -sp.x, -sp.y, -sp.z);
      gl.uniform1i(ModelShaderTan.sampLoc, 0);
      if (renderContext.space || noDepth) {
        gl.disable(2929);
      }
      else {
        gl.enable(2929);
      }
      gl.disableVertexAttribArray(0);
      gl.disableVertexAttribArray(1);
      gl.disableVertexAttribArray(2);
      gl.disableVertexAttribArray(3);
      gl.bindBuffer(34962, vertex);
      gl.enableVertexAttribArray(ModelShaderTan.vertLoc);
      gl.enableVertexAttribArray(ModelShaderTan.normalLoc);
      gl.enableVertexAttribArray(ModelShaderTan.textureLoc);
      gl.vertexAttribPointer(ModelShaderTan.vertLoc, 3, 5126, false, stride, 0);
      gl.vertexAttribPointer(ModelShaderTan.normalLoc, 3, 5126, false, stride, 12);
      gl.vertexAttribPointer(ModelShaderTan.textureLoc, 2, 5126, false, stride, stride - 8);
      gl.activeTexture(33984);
      gl.bindTexture(3553, texture);
      gl.bindBuffer(34963, index);
      gl.enable(3042);
      if (noDepth) {
        gl.blendFunc(770, 1);
      }
      else {
        gl.blendFunc(770, 771);
      }
    }
  };
  var ModelShaderTan$ = {

  };


  // wwtlib.TileShader

  function TileShader() {
  }
  TileShader.init = function(renderContext) {
    var gl = renderContext.gl;
    var fragShaderText = ' precision mediump float;                                                              \n' + '                                                                                       \n' + '   varying vec2 vTextureCoord;                                                         \n' + '   varying vec3 vNormal;                                                               \n' + '   varying vec3 vCamVector;                                                               \n' + '                                                                                       \n' + '   uniform sampler2D uSampler;                                                         \n' + '   uniform float opacity;                                                              \n' + '   uniform vec3 uSunPosition;                                                          \n' + '   uniform float uMinBrightness;                                                       \n' + '   uniform vec3 uAtmosphereColor;                                                       \n' + '                                                                                       \n' + '   void main(void) {                                                                   \n' + '     vec3 normal = normalize(vNormal);                                                 \n' + '     vec3 camVN = normalize(vCamVector);                                               \n' + '     vec3 cam = normalize(vec3(0.0,0.0,-1.0));                                                    \n' + '     float dt = uMinBrightness + pow(max(0.0,- dot(normal,uSunPosition)),0.5);                  \n' + '     float atm = max(0.0, 1.0 - 2.5 * dot(cam,camVN)) + 0.3 * dt;                             \n' + '     atm = (dt > uMinBrightness) ? atm : 0.0;                                          \n' + '     if ( uMinBrightness == 1.0 ) { dt = 1.0; atm= 0.0; }                                        \n' + '     vec4 col = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));           \n' + '     gl_FragColor = col * opacity;                                                     \n' + '     gl_FragColor.rgb *= dt;                                                           \n' + '     gl_FragColor.rgb += atm * uAtmosphereColor;                                  \n' + '   }                                                                                   \n';
    var vertexShaderText = '     attribute vec3 aVertexPosition;                                              \n' + '     attribute vec2 aTextureCoord;                                                \n' + '                                                                                  \n' + '     uniform mat4 uMVMatrix;                                                      \n' + '     uniform mat4 uPMatrix;                                                       \n' + '                                                                                  \n' + '     varying vec2 vTextureCoord;                                                  \n' + '     varying vec3 vNormal;                                                        \n' + '     varying vec3 vCamVector;                                                     \n' + '                                                                                  \n' + '                                                                                  \n' + '     void main(void) {                                                            \n' + '         gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);         \n' + '         vCamVector = normalize((mat3(uMVMatrix) * aVertexPosition).xyz);              \n' + '         vec3 normal = normalize(aVertexPosition);                                \n' + '         vec3 normalT = normalize(mat3(uMVMatrix) * normal);                      \n' + '         vTextureCoord = aTextureCoord;                                           \n' + '         vNormal = normalT;                                                       \n' + '     }                                                                            \n' + '                                                                                  \n';
    TileShader._frag = gl.createShader(35632);
    gl.shaderSource(TileShader._frag, fragShaderText);
    gl.compileShader(TileShader._frag);
    var stat = gl.getShaderParameter(TileShader._frag, 35713);
    if (!stat) {
      var errorF = gl.getShaderInfoLog(TileShader._frag);
    }
    TileShader._vert = gl.createShader(35633);
    gl.shaderSource(TileShader._vert, vertexShaderText);
    gl.compileShader(TileShader._vert);
    var stat1 = gl.getShaderParameter(TileShader._vert, 35713);
    if (!stat1) {
      var errorV = gl.getShaderInfoLog(TileShader._vert);
    }
    TileShader._prog = gl.createProgram();
    gl.attachShader(TileShader._prog, TileShader._vert);
    gl.attachShader(TileShader._prog, TileShader._frag);
    gl.linkProgram(TileShader._prog);
    var errcode = gl.getProgramParameter(TileShader._prog, 35714);
    gl.useProgram(TileShader._prog);
    TileShader.vertLoc = gl.getAttribLocation(TileShader._prog, 'aVertexPosition');
    TileShader.textureLoc = gl.getAttribLocation(TileShader._prog, 'aTextureCoord');
    TileShader.projMatLoc = gl.getUniformLocation(TileShader._prog, 'uPMatrix');
    TileShader.mvMatLoc = gl.getUniformLocation(TileShader._prog, 'uMVMatrix');
    TileShader.sampLoc = gl.getUniformLocation(TileShader._prog, 'uSampler');
    TileShader.sunLoc = gl.getUniformLocation(TileShader._prog, 'uSunPosition');
    TileShader.minBrightnessLoc = gl.getUniformLocation(TileShader._prog, 'uMinBrightness');
    TileShader.opacityLoc = gl.getUniformLocation(TileShader._prog, 'opacity');
    TileShader.atmosphereColorLoc = gl.getUniformLocation(TileShader._prog, 'uAtmosphereColor');
    Tile.uvMultiple = 1;
    Tile.demEnabled = true;
    gl.enable(3042);
    gl.blendFunc(770, 771);
    TileShader.initialized = true;
  };
  TileShader.use = function(renderContext, vertex, index, texture, opacity, noDepth) {
    if (texture == null) {
      texture = Texture.getEmpty();
    }
    var gl = renderContext.gl;
    if (gl != null) {
      if (!TileShader.initialized) {
        TileShader.init(renderContext);
      }
      gl.useProgram(TileShader._prog);
      var mvMat = Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
      gl.uniform1f(TileShader.opacityLoc, opacity);
      gl.uniform1f(TileShader.minBrightnessLoc, (renderContext.lighting) ? TileShader.minLightingBrightness : 1);
      if (renderContext.lighting) {
        gl.uniform3f(TileShader.atmosphereColorLoc, TileShader.atmosphereColor.r / 255, TileShader.atmosphereColor.g / 255, TileShader.atmosphereColor.b / 255);
      }
      else {
        gl.uniform3f(TileShader.atmosphereColorLoc, 0, 0, 0);
      }
      gl.uniformMatrix4fv(TileShader.mvMatLoc, false, mvMat.floatArray());
      gl.uniformMatrix4fv(TileShader.projMatLoc, false, renderContext.get_projection().floatArray());
      TileShader.sunPosition.normalize();
      var mvInv = renderContext.get_view().clone();
      mvInv.set_m41(0);
      mvInv.set_m42(0);
      mvInv.set_m43(0);
      mvInv.set_m44(1);
      var sp = Vector3d._transformCoordinate(TileShader.sunPosition, mvInv);
      sp.normalize();
      gl.uniform3f(TileShader.sunLoc, -sp.x, -sp.y, -sp.z);
      gl.uniform1i(TileShader.sampLoc, 0);
      if (renderContext.space || noDepth) {
        gl.disable(2929);
      }
      else {
        gl.enable(2929);
      }
      gl.disableVertexAttribArray(0);
      gl.disableVertexAttribArray(1);
      gl.disableVertexAttribArray(2);
      gl.disableVertexAttribArray(3);
      gl.bindBuffer(34962, vertex);
      gl.enableVertexAttribArray(TileShader.vertLoc);
      gl.enableVertexAttribArray(TileShader.textureLoc);
      gl.vertexAttribPointer(TileShader.vertLoc, 3, 5126, false, 20, 0);
      gl.vertexAttribPointer(TileShader.textureLoc, 2, 5126, false, 20, 12);
      gl.activeTexture(33984);
      gl.bindTexture(3553, texture);
      gl.bindBuffer(34963, index);
      gl.enable(3042);
      if (noDepth) {
        gl.blendFunc(770, 1);
      }
      else {
        gl.blendFunc(770, 771);
      }
    }
  };
  var TileShader$ = {

  };


  // wwtlib.ImageShader

  function ImageShader() {
  }
  ImageShader.init = function(renderContext) {
    var gl = renderContext.gl;
    var fragShaderText = ' precision mediump float;                                                              \n' + '                                                                                       \n' + '   varying vec2 vTextureCoord;                                                         \n' + '                                                                                       \n' + '   uniform sampler2D uSampler;                                                         \n' + '   uniform float opacity;                                                              \n' + '                                                                                       \n' + '   void main(void) {                                                                   \n' + '     vec4 col = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));           \n' + '     gl_FragColor = col * opacity;                                                     \n' + '   }                                                                                   \n';
    var vertexShaderText = '     attribute vec3 aVertexPosition;                                              \n' + '     attribute vec2 aTextureCoord;                                                \n' + '                                                                                  \n' + '     uniform mat4 uMVMatrix;                                                      \n' + '     uniform mat4 uPMatrix;                                                       \n' + '                                                                                  \n' + '     varying vec2 vTextureCoord;                                                  \n' + '     varying vec3 vNormal;                                                        \n' + '     varying vec3 vCamVector;                                                     \n' + '                                                                                  \n' + '                                                                                  \n' + '     void main(void) {                                                            \n' + '         gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);         \n' + '         vTextureCoord = aTextureCoord;                                           \n' + '     }                                                                            \n' + '                                                                                  \n';
    ImageShader._frag = gl.createShader(35632);
    gl.shaderSource(ImageShader._frag, fragShaderText);
    gl.compileShader(ImageShader._frag);
    var stat = gl.getShaderParameter(ImageShader._frag, 35713);
    if (!stat) {
      var errorF = gl.getShaderInfoLog(ImageShader._frag);
    }
    ImageShader._vert = gl.createShader(35633);
    gl.shaderSource(ImageShader._vert, vertexShaderText);
    gl.compileShader(ImageShader._vert);
    var stat1 = gl.getShaderParameter(ImageShader._vert, 35713);
    if (!stat1) {
      var errorV = gl.getShaderInfoLog(ImageShader._vert);
    }
    ImageShader._prog = gl.createProgram();
    gl.attachShader(ImageShader._prog, ImageShader._vert);
    gl.attachShader(ImageShader._prog, ImageShader._frag);
    gl.linkProgram(ImageShader._prog);
    var errcode = gl.getProgramParameter(ImageShader._prog, 35714);
    gl.useProgram(ImageShader._prog);
    ImageShader.vertLoc = gl.getAttribLocation(ImageShader._prog, 'aVertexPosition');
    ImageShader.textureLoc = gl.getAttribLocation(ImageShader._prog, 'aTextureCoord');
    ImageShader.projMatLoc = gl.getUniformLocation(ImageShader._prog, 'uPMatrix');
    ImageShader.mvMatLoc = gl.getUniformLocation(ImageShader._prog, 'uMVMatrix');
    ImageShader.sampLoc = gl.getUniformLocation(ImageShader._prog, 'uSampler');
    ImageShader.opacityLoc = gl.getUniformLocation(ImageShader._prog, 'opacity');
    Tile.uvMultiple = 1;
    Tile.demEnabled = true;
    gl.enable(3042);
    gl.blendFunc(770, 771);
    ImageShader.initialized = true;
  };
  ImageShader.use = function(renderContext, vertex, index, texture, opacity, noDepth) {
    if (texture == null) {
      texture = Texture.getEmpty();
    }
    var gl = renderContext.gl;
    if (gl != null) {
      if (!ImageShader.initialized) {
        ImageShader.init(renderContext);
      }
      gl.useProgram(ImageShader._prog);
      var mvMat = Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
      gl.uniform1f(ImageShader.opacityLoc, opacity);
      gl.uniformMatrix4fv(ImageShader.mvMatLoc, false, mvMat.floatArray());
      gl.uniformMatrix4fv(ImageShader.projMatLoc, false, renderContext.get_projection().floatArray());
      gl.uniform1i(ImageShader.sampLoc, 0);
      if (renderContext.space || noDepth) {
        gl.disable(2929);
      }
      else {
        gl.enable(2929);
      }
      gl.disableVertexAttribArray(0);
      gl.disableVertexAttribArray(1);
      gl.disableVertexAttribArray(2);
      gl.disableVertexAttribArray(3);
      gl.bindBuffer(34962, vertex);
      gl.enableVertexAttribArray(ImageShader.vertLoc);
      gl.enableVertexAttribArray(ImageShader.textureLoc);
      gl.vertexAttribPointer(ImageShader.vertLoc, 3, 5126, false, 20, 0);
      gl.vertexAttribPointer(ImageShader.textureLoc, 2, 5126, false, 20, 12);
      gl.activeTexture(33984);
      gl.bindTexture(3553, texture);
      gl.bindBuffer(34963, index);
      gl.enable(3042);
      if (noDepth) {
        gl.blendFunc(770, 1);
      }
      else {
        gl.blendFunc(770, 771);
      }
    }
  };
  var ImageShader$ = {

  };


  // wwtlib.ImageShader2

  function ImageShader2() {
  }
  ImageShader2.init = function(renderContext) {
    var gl = renderContext.gl;
    var fragShaderText = ' precision mediump float;                                                              \n' + '                                                                                       \n' + '   varying vec2 vTextureCoord;                                                         \n' + '                                                                                       \n' + '   uniform sampler2D uSampler;                                                         \n' + '   uniform float opacity;                                                              \n' + '                                                                                       \n' + '   void main(void) {                                                                   \n' + '     vec4 col = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));           \n' + '     gl_FragColor = col * opacity;                                                     \n' + '   }                                                                                   \n';
    var vertexShaderText = '     attribute vec3 aVertexPosition;                                              \n' + '     attribute vec2 aTextureCoord;                                                \n' + '                                                                                  \n' + '     uniform mat4 uMVMatrix;                                                      \n' + '     uniform mat4 uPMatrix;                                                       \n' + '                                                                                  \n' + '     varying vec2 vTextureCoord;                                                  \n' + '     varying vec3 vNormal;                                                        \n' + '     varying vec3 vCamVector;                                                     \n' + '                                                                                  \n' + '                                                                                  \n' + '     void main(void) {                                                            \n' + '         gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);         \n' + '         vTextureCoord = aTextureCoord;                                           \n' + '     }                                                                            \n' + '                                                                                  \n';
    ImageShader2._frag = gl.createShader(35632);
    gl.shaderSource(ImageShader2._frag, fragShaderText);
    gl.compileShader(ImageShader2._frag);
    var stat = gl.getShaderParameter(ImageShader2._frag, 35713);
    if (!stat) {
      var errorF = gl.getShaderInfoLog(ImageShader2._frag);
    }
    ImageShader2._vert = gl.createShader(35633);
    gl.shaderSource(ImageShader2._vert, vertexShaderText);
    gl.compileShader(ImageShader2._vert);
    var stat1 = gl.getShaderParameter(ImageShader2._vert, 35713);
    if (!stat1) {
      var errorV = gl.getShaderInfoLog(ImageShader2._vert);
    }
    ImageShader2._prog = gl.createProgram();
    gl.attachShader(ImageShader2._prog, ImageShader2._vert);
    gl.attachShader(ImageShader2._prog, ImageShader2._frag);
    gl.linkProgram(ImageShader2._prog);
    var errcode = gl.getProgramParameter(ImageShader2._prog, 35714);
    gl.useProgram(ImageShader2._prog);
    ImageShader2.vertLoc = gl.getAttribLocation(ImageShader2._prog, 'aVertexPosition');
    ImageShader2.textureLoc = gl.getAttribLocation(ImageShader2._prog, 'aTextureCoord');
    ImageShader2.projMatLoc = gl.getUniformLocation(ImageShader2._prog, 'uPMatrix');
    ImageShader2.mvMatLoc = gl.getUniformLocation(ImageShader2._prog, 'uMVMatrix');
    ImageShader2.sampLoc = gl.getUniformLocation(ImageShader2._prog, 'uSampler');
    ImageShader2.opacityLoc = gl.getUniformLocation(ImageShader2._prog, 'opacity');
    Tile.uvMultiple = 1;
    Tile.demEnabled = true;
    gl.enable(3042);
    gl.blendFunc(770, 771);
    ImageShader2.initialized = true;
  };
  ImageShader2.use = function(renderContext, vertex, index, texture, opacity, noDepth) {
    if (texture == null) {
      texture = Texture.getEmpty();
    }
    var gl = renderContext.gl;
    if (gl != null) {
      if (!ImageShader2.initialized) {
        ImageShader2.init(renderContext);
      }
      gl.useProgram(ImageShader2._prog);
      var mvMat = Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
      gl.uniform1f(ImageShader2.opacityLoc, opacity);
      gl.uniformMatrix4fv(ImageShader2.mvMatLoc, false, mvMat.floatArray());
      gl.uniformMatrix4fv(ImageShader2.projMatLoc, false, renderContext.get_projection().floatArray());
      gl.uniform1i(ImageShader2.sampLoc, 0);
      if (renderContext.space || noDepth) {
        gl.disable(2929);
      }
      else {
        gl.enable(2929);
      }
      gl.disableVertexAttribArray(0);
      gl.disableVertexAttribArray(1);
      gl.disableVertexAttribArray(2);
      gl.disableVertexAttribArray(3);
      gl.bindBuffer(34962, vertex);
      gl.enableVertexAttribArray(ImageShader2.vertLoc);
      gl.enableVertexAttribArray(ImageShader2.textureLoc);
      gl.vertexAttribPointer(ImageShader2.vertLoc, 3, 5126, false, 32, 0);
      gl.vertexAttribPointer(ImageShader2.textureLoc, 2, 5126, false, 32, 24);
      gl.activeTexture(33984);
      gl.bindTexture(3553, texture);
      gl.bindBuffer(34963, index);
      gl.enable(3042);
      if (noDepth) {
        gl.blendFunc(770, 1);
      }
      else {
        gl.blendFunc(770, 771);
      }
    }
  };
  var ImageShader2$ = {

  };


  // wwtlib.SpriteShader

  function SpriteShader() {
  }
  SpriteShader.init = function(renderContext) {
    var gl = renderContext.gl;
    var fragShaderText = ' precision mediump float;                                                                \n' + '                                                                                         \n' + '   varying vec2 vTextureCoord;                                                           \n' + '   varying lowp vec4 vColor;                                                             \n' + '   uniform sampler2D uSampler;                                                           \n' + '                                                                                         \n' + '   void main(void) {                                                                     \n' + '   gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t)) * vColor;  \n' + '   }                                                                                     \n';
    var vertexShaderText = '     attribute vec3 aVertexPosition;                                              \n' + '     attribute vec2 aTextureCoord;                                                \n' + '     attribute lowp vec4 aColor;                                                  \n' + '                                                                                  \n' + '     uniform mat4 uMVMatrix;                                                      \n' + '     uniform mat4 uPMatrix;                                                       \n' + '                                                                                  \n' + '     varying vec2 vTextureCoord;                                                  \n' + '     varying vec4 vColor;                                                         \n' + '                                                                                  \n' + '                                                                                  \n' + '     void main(void) {                                                            \n' + '         gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);         \n' + '         vTextureCoord = aTextureCoord;                                           \n' + '         vColor = aColor;                                                         \n' + '     }                                                                            \n' + '                                                                                  \n';
    SpriteShader._frag = gl.createShader(35632);
    gl.shaderSource(SpriteShader._frag, fragShaderText);
    gl.compileShader(SpriteShader._frag);
    var stat = gl.getShaderParameter(SpriteShader._frag, 35713);
    SpriteShader._vert = gl.createShader(35633);
    gl.shaderSource(SpriteShader._vert, vertexShaderText);
    gl.compileShader(SpriteShader._vert);
    var stat1 = gl.getShaderParameter(SpriteShader._vert, 35713);
    SpriteShader._prog = gl.createProgram();
    gl.attachShader(SpriteShader._prog, SpriteShader._vert);
    gl.attachShader(SpriteShader._prog, SpriteShader._frag);
    gl.linkProgram(SpriteShader._prog);
    var errcode = gl.getProgramParameter(SpriteShader._prog, 35714);
    gl.useProgram(SpriteShader._prog);
    SpriteShader.vertLoc = gl.getAttribLocation(SpriteShader._prog, 'aVertexPosition');
    SpriteShader.textureLoc = gl.getAttribLocation(SpriteShader._prog, 'aTextureCoord');
    SpriteShader.colorLoc = gl.getAttribLocation(SpriteShader._prog, 'aColor');
    SpriteShader.projMatLoc = gl.getUniformLocation(SpriteShader._prog, 'uPMatrix');
    SpriteShader.mvMatLoc = gl.getUniformLocation(SpriteShader._prog, 'uMVMatrix');
    SpriteShader.sampLoc = gl.getUniformLocation(SpriteShader._prog, 'uSampler');
    Tile.uvMultiple = 1;
    Tile.demEnabled = true;
    gl.enable(3042);
    gl.blendFunc(770, 771);
    SpriteShader.initialized = true;
  };
  SpriteShader.use = function(renderContext, vertex, texture) {
    if (texture == null) {
      texture = Texture.getEmpty();
    }
    var gl = renderContext.gl;
    if (gl != null) {
      if (!SpriteShader.initialized) {
        SpriteShader.init(renderContext);
      }
      gl.useProgram(SpriteShader._prog);
      var mvMat = Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
      gl.uniformMatrix4fv(SpriteShader.mvMatLoc, false, mvMat.floatArray());
      gl.uniformMatrix4fv(SpriteShader.projMatLoc, false, renderContext.get_projection().floatArray());
      gl.uniform1i(SpriteShader.sampLoc, 0);
      gl.disable(2929);
      gl.disableVertexAttribArray(0);
      gl.disableVertexAttribArray(1);
      gl.disableVertexAttribArray(2);
      gl.disableVertexAttribArray(3);
      gl.bindBuffer(34962, vertex);
      gl.enableVertexAttribArray(SpriteShader.vertLoc);
      gl.enableVertexAttribArray(SpriteShader.textureLoc);
      gl.enableVertexAttribArray(SpriteShader.colorLoc);
      gl.vertexAttribPointer(SpriteShader.vertLoc, 3, 5126, false, 36, 0);
      gl.vertexAttribPointer(SpriteShader.colorLoc, 4, 5126, false, 36, 12);
      gl.vertexAttribPointer(SpriteShader.textureLoc, 2, 5126, false, 36, 28);
      gl.activeTexture(33984);
      gl.bindTexture(3553, texture);
      gl.bindBuffer(34963, null);
      gl.enable(3042);
      gl.blendFunc(770, 771);
    }
  };
  var SpriteShader$ = {

  };


  // wwtlib.ShapeSpriteShader

  function ShapeSpriteShader() {
  }
  ShapeSpriteShader.init = function(renderContext) {
    var gl = renderContext.gl;
    var fragShaderText = ' precision mediump float;                                                                \n' + '                                                                                         \n' + '   varying lowp vec4 vColor;                                                             \n' + '                                                                                         \n' + '   void main(void) {                                                                     \n' + '   gl_FragColor =  vColor;                                                               \n' + '   }                                                                                     \n';
    var vertexShaderText = '     attribute vec3 aVertexPosition;                                              \n' + '     attribute lowp vec4 aColor;                                                  \n' + '                                                                                  \n' + '     uniform mat4 uMVMatrix;                                                      \n' + '     uniform mat4 uPMatrix;                                                       \n' + '                                                                                  \n' + '     varying vec2 vTextureCoord;                                                  \n' + '     varying vec4 vColor;                                                         \n' + '                                                                                  \n' + '                                                                                  \n' + '     void main(void) {                                                            \n' + '         gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);         \n' + '         vColor = aColor;                                                         \n' + '     }                                                                            \n' + '                                                                                  \n';
    ShapeSpriteShader._frag = gl.createShader(35632);
    gl.shaderSource(ShapeSpriteShader._frag, fragShaderText);
    gl.compileShader(ShapeSpriteShader._frag);
    var stat = gl.getShaderParameter(ShapeSpriteShader._frag, 35713);
    ShapeSpriteShader._vert = gl.createShader(35633);
    gl.shaderSource(ShapeSpriteShader._vert, vertexShaderText);
    gl.compileShader(ShapeSpriteShader._vert);
    var stat1 = gl.getShaderParameter(ShapeSpriteShader._vert, 35713);
    ShapeSpriteShader._prog = gl.createProgram();
    gl.attachShader(ShapeSpriteShader._prog, ShapeSpriteShader._vert);
    gl.attachShader(ShapeSpriteShader._prog, ShapeSpriteShader._frag);
    gl.linkProgram(ShapeSpriteShader._prog);
    var errcode = gl.getProgramParameter(ShapeSpriteShader._prog, 35714);
    gl.useProgram(ShapeSpriteShader._prog);
    ShapeSpriteShader.vertLoc = gl.getAttribLocation(ShapeSpriteShader._prog, 'aVertexPosition');
    ShapeSpriteShader.colorLoc = gl.getAttribLocation(ShapeSpriteShader._prog, 'aColor');
    ShapeSpriteShader.projMatLoc = gl.getUniformLocation(ShapeSpriteShader._prog, 'uPMatrix');
    ShapeSpriteShader.mvMatLoc = gl.getUniformLocation(ShapeSpriteShader._prog, 'uMVMatrix');
    gl.disable(2929);
    gl.enable(3042);
    gl.blendFunc(770, 771);
    ShapeSpriteShader.initialized = true;
  };
  ShapeSpriteShader.use = function(renderContext, vertex) {
    var gl = renderContext.gl;
    if (gl != null) {
      if (!ShapeSpriteShader.initialized) {
        ShapeSpriteShader.init(renderContext);
      }
      gl.useProgram(ShapeSpriteShader._prog);
      var mvMat = Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
      gl.uniformMatrix4fv(ShapeSpriteShader.mvMatLoc, false, mvMat.floatArray());
      gl.uniformMatrix4fv(ShapeSpriteShader.projMatLoc, false, renderContext.get_projection().floatArray());
      gl.uniform1i(ShapeSpriteShader.sampLoc, 0);
      gl.disable(2929);
      gl.disableVertexAttribArray(0);
      gl.disableVertexAttribArray(1);
      gl.disableVertexAttribArray(2);
      gl.disableVertexAttribArray(3);
      gl.bindBuffer(34962, vertex);
      gl.enableVertexAttribArray(ShapeSpriteShader.vertLoc);
      gl.enableVertexAttribArray(ShapeSpriteShader.textureLoc);
      gl.enableVertexAttribArray(ShapeSpriteShader.colorLoc);
      gl.vertexAttribPointer(ShapeSpriteShader.vertLoc, 3, 5126, false, 36, 0);
      gl.vertexAttribPointer(ShapeSpriteShader.colorLoc, 4, 5126, false, 36, 12);
      gl.bindBuffer(34963, null);
      gl.enable(3042);
      gl.blendFunc(770, 771);
    }
  };
  var ShapeSpriteShader$ = {

  };


  // wwtlib.TextShader

  function TextShader() {
  }
  TextShader.init = function(renderContext) {
    var gl = renderContext.gl;
    var fragShaderText = ' precision mediump float;                                                              \n' + '                                                                                       \n' + '   varying vec2 vTextureCoord;                                                         \n' + '                                                                                       \n' + '   uniform sampler2D uSampler;                                                         \n' + '                                                                                       \n' + '   void main(void) {                                                                   \n' + '   gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));         \n' + '   }                                                                                   \n';
    var vertexShaderText = '     attribute vec3 aVertexPosition;                                              \n' + '     attribute vec2 aTextureCoord;                                                \n' + '                                                                                  \n' + '     uniform mat4 uMVMatrix;                                                      \n' + '     uniform mat4 uPMatrix;                                                       \n' + '                                                                                  \n' + '     varying vec2 vTextureCoord;                                                  \n' + '                                                                                  \n' + '                                                                                  \n' + '     void main(void) {                                                            \n' + '         gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);         \n' + '         vTextureCoord = aTextureCoord;                                           \n' + '     }                                                                            \n' + '                                                                                  \n';
    TextShader._frag = gl.createShader(35632);
    gl.shaderSource(TextShader._frag, fragShaderText);
    gl.compileShader(TextShader._frag);
    var stat = gl.getShaderParameter(TextShader._frag, 35713);
    TextShader._vert = gl.createShader(35633);
    gl.shaderSource(TextShader._vert, vertexShaderText);
    gl.compileShader(TextShader._vert);
    var stat1 = gl.getShaderParameter(TextShader._vert, 35713);
    TextShader._prog = gl.createProgram();
    gl.attachShader(TextShader._prog, TextShader._vert);
    gl.attachShader(TextShader._prog, TextShader._frag);
    gl.linkProgram(TextShader._prog);
    var errcode = gl.getProgramParameter(TextShader._prog, 35714);
    gl.useProgram(TextShader._prog);
    TextShader.vertLoc = gl.getAttribLocation(TextShader._prog, 'aVertexPosition');
    TextShader.textureLoc = gl.getAttribLocation(TextShader._prog, 'aTextureCoord');
    TextShader.projMatLoc = gl.getUniformLocation(TextShader._prog, 'uPMatrix');
    TextShader.mvMatLoc = gl.getUniformLocation(TextShader._prog, 'uMVMatrix');
    TextShader.sampLoc = gl.getUniformLocation(TextShader._prog, 'uSampler');
    Tile.uvMultiple = 1;
    Tile.demEnabled = true;
    gl.enable(3042);
    gl.blendFunc(770, 771);
    TextShader.initialized = true;
  };
  TextShader.use = function(renderContext, vertex, texture) {
    if (texture == null) {
      texture = Texture.getEmpty();
    }
    var gl = renderContext.gl;
    if (gl != null) {
      if (!TextShader.initialized) {
        TextShader.init(renderContext);
      }
      gl.useProgram(TextShader._prog);
      var mvMat = Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
      gl.uniformMatrix4fv(TextShader.mvMatLoc, false, mvMat.floatArray());
      gl.uniformMatrix4fv(TextShader.projMatLoc, false, renderContext.get_projection().floatArray());
      gl.uniform1i(TextShader.sampLoc, 0);
      if (renderContext.space) {
        gl.disable(2929);
      }
      else {
        gl.enable(2929);
      }
      gl.disableVertexAttribArray(0);
      gl.disableVertexAttribArray(1);
      gl.disableVertexAttribArray(2);
      gl.disableVertexAttribArray(3);
      gl.bindBuffer(34962, vertex);
      gl.enableVertexAttribArray(TextShader.vertLoc);
      gl.enableVertexAttribArray(TextShader.textureLoc);
      gl.vertexAttribPointer(TextShader.vertLoc, 3, 5126, false, 20, 0);
      gl.vertexAttribPointer(TextShader.textureLoc, 2, 5126, false, 20, 12);
      gl.activeTexture(33984);
      gl.bindTexture(3553, texture);
      gl.enable(3042);
      gl.blendFunc(770, 771);
    }
  };
  var TextShader$ = {

  };


  // wwtlib.Sprite2d

  function Sprite2d() {
    this.vertCount = 0;
  }
  var Sprite2d$ = {
    draw: function(renderContext, points, count, texture, triangleStrips, opacity) {
      if (this.vertexBuffer == null) {
        this.create(points);
      }
      else {
        this.update(points);
      }
      if (texture == null) {
        ShapeSpriteShader.use(renderContext, this.vertexBuffer);
        renderContext.gl.drawArrays((triangleStrips) ? 5 : 4, 0, points.length);
      }
      else {
        SpriteShader.use(renderContext, this.vertexBuffer, (texture != null) ? texture.texture2d : null);
        renderContext.gl.drawArrays((triangleStrips) ? 5 : 4, 0, points.length);
      }
    },
    create: function(verts) {
      this.vertexBuffer = Tile.prepDevice.createBuffer();
      Tile.prepDevice.bindBuffer(34962, this.vertexBuffer);
      var f32array = new Float32Array(verts.length * 9);
      var buffer = f32array;
      var index = 0;
      var $enum1 = ss.enumerate(verts);
      while ($enum1.moveNext()) {
        var pt = $enum1.current;
        buffer[index++] = pt.position.x;
        buffer[index++] = pt.position.y;
        buffer[index++] = pt.position.z;
        buffer[index++] = pt.color.r / 255;
        buffer[index++] = pt.color.g / 255;
        buffer[index++] = pt.color.b / 255;
        buffer[index++] = pt.color.a / 255;
        buffer[index++] = pt.tu;
        buffer[index++] = pt.tv;
      }
      Tile.prepDevice.bufferData(34962, f32array, 35048);
    },
    update: function(verts) {
      if (this.vertCount < verts.length) {
        Tile.prepDevice.deleteBuffer(this.vertexBuffer);
        this.create(verts);
        return;
      }
      Tile.prepDevice.bindBuffer(34962, this.vertexBuffer);
      var f32array = new Float32Array(verts.length * 9);
      var buffer = f32array;
      var index = 0;
      var $enum1 = ss.enumerate(verts);
      while ($enum1.moveNext()) {
        var pt = $enum1.current;
        buffer[index++] = pt.position.x;
        buffer[index++] = pt.position.y;
        buffer[index++] = pt.position.z;
        buffer[index++] = pt.color.r / 255;
        buffer[index++] = pt.color.g / 255;
        buffer[index++] = pt.color.b / 255;
        buffer[index++] = pt.color.a / 255;
        buffer[index++] = pt.tu;
        buffer[index++] = pt.tv;
      }
      Tile.prepDevice.bufferSubData(34962, 0, f32array);
    }
  };


  // wwtlib.Tessellator

  function Tessellator() {
  }
  Tessellator.tesselateSimplePoly = function(inputList) {
    var results = [];
    var tess = new Tessellator();
    tess.process(inputList, results);
    return results;
  };
  var Tessellator$ = {
    _isLeftOfHalfSpace: function(pntA, pntB, pntTest) {
      pntA.normalize();
      pntB.normalize();
      var cross = Vector3d.cross(pntA, pntB);
      var dot = Vector3d.dot(cross, pntTest);
      return dot > 0;
    },
    _insideTriangle: function(pntA, pntB, pntC, pntTest) {
      if (!this._isLeftOfHalfSpace(pntA, pntB, pntTest)) {
        return false;
      }
      if (!this._isLeftOfHalfSpace(pntB, pntC, pntTest)) {
        return false;
      }
      if (!this._isLeftOfHalfSpace(pntC, pntA, pntTest)) {
        return false;
      }
      return true;
    },
    _canClipEar: function(poly, u, v, w, n, verts) {
      var p;
      var a = poly[verts[u]].copy();
      var b = poly[verts[v]].copy();
      var c = poly[verts[w]].copy();
      var P;
      var d = Vector3d.subtractVectors(b, a);
      d.normalize();
      var e = Vector3d.subtractVectors(b, c);
      e.normalize();
      var g = Vector3d.cross(d, e);
      var bn = b.copy();
      bn.normalize();
      if (Vector3d.dot(g, bn) > 0) {
        return false;
      }
      for (p = 0; p < n; p++) {
        if ((p === u) || (p === v) || (p === w)) {
          continue;
        }
        P = poly[verts[p]].copy();
        if (this._insideTriangle(a, b, c, P)) {
          return false;
        }
      }
      return true;
    },
    process: function(poly, result) {
      var n = poly.length;
      if (poly.length < 3) {
        return false;
      }
      var verts = new Array(poly.length);
      for (var i = 0; i < n; i++) {
        verts[i] = i;
      }
      var nv = n;
      var count = 2 * nv;
      for (var m = 0, v = nv - 1; nv > 2; ) {
        if (0 >= (count--)) {
          return false;
        }
        var u = v;
        if (nv <= u) {
          u = 0;
        }
        v = u + 1;
        if (nv <= v) {
          v = 0;
        }
        var w = v + 1;
        if (nv <= w) {
          w = 0;
        }
        if (this._canClipEar(poly, u, v, w, nv, verts)) {
          var s, t;
          result.push(verts[u]);
          result.push(verts[v]);
          result.push(verts[w]);
          m++;
          for (s = v, t = v + 1; t < nv; s++, t++) {
            verts[s] = verts[t];
          }
          nv--;
          count = 2 * nv;
        }
      }
      return true;
    }
  };


  // wwtlib.Texture

  function Texture() {
    this.imageElement = null;
    this.texture2d = null;
    this._downloading = false;
    this._ready = false;
    this._errored = false;
    this.URL = '';
  }
  Texture.getEmpty = function() {
    if (Texture.empty == null) {
      Texture.empty = Tile.prepDevice.createTexture();
      Tile.prepDevice.bindTexture(3553, Texture.empty);
      Tile.prepDevice.texImage2D(3553, 0, 6408, 1, 1, 0, 6408, 5121, new Uint8Array([ 0, 0, 0, 0 ]));
      Tile.prepDevice.bindTexture(3553, null);
    }
    return Texture.empty;
  };
  Texture.fromUrl = function(url) {
    var tex = new Texture();
    tex.load(url);
    return tex;
  };
  Texture.isPowerOfTwo = function(val) {
    return !(val & (val - 1));
  };
  Texture.fitPowerOfTwo = function(val) {
    val--;
    for (var i = 1; i < 32; i <<= 1) {
      val = val | val >> i;
    }
    return val + 1;
  };
  var Texture$ = {
    cleanUp: function() {
      this.imageElement = null;
      Tile.prepDevice.deleteTexture(this.texture2d);
    },
    dispose: function() {
      this.cleanUp();
    },
    load: function(url) {
      var $this = this;

      this.URL = url;
      if (!this._downloading) {
        this._downloading = true;
        this.imageElement = document.createElement('img');
        var xdomimg = this.imageElement;
        this.imageElement.addEventListener('load', function(e) {
          $this._ready = true;
          $this._downloading = false;
          $this._errored = false;
          $this.makeTexture();
        }, false);
        this.imageElement.addEventListener('error', function(e) {
          if (!$this.imageElement.hasAttribute('proxyattempt')) {
            $this.imageElement.src = Util.getProxiedUrl($this.URL);
            $this.imageElement.setAttribute('proxyattempt', true);
          }
          else {
            $this._downloading = false;
            $this._ready = false;
            $this._errored = true;
          }
        }, false);
        xdomimg.crossOrigin = 'anonymous';
        this.imageElement.src = this.URL;
      }
    },
    makeTexture: function() {
      if (Tile.prepDevice != null) {
        try {
          this.texture2d = Tile.prepDevice.createTexture();
          Tile.prepDevice.bindTexture(3553, this.texture2d);
          var image = this.imageElement;
          if ((!Texture.isPowerOfTwo(this.imageElement.height) | !Texture.isPowerOfTwo(this.imageElement.width)) === 1) {
            var temp = document.createElement('canvas');
            temp.height = Texture.fitPowerOfTwo(image.height);
            temp.width = Texture.fitPowerOfTwo(image.width);
            var ctx = temp.getContext('2d');
            ctx.drawImage(image, 0, 0, temp.width, temp.height);
            image = temp;
          }
          Tile.prepDevice.texParameteri(3553, 10242, 33071);
          Tile.prepDevice.texParameteri(3553, 10243, 33071);
          Tile.prepDevice.texImage2D(3553, 0, 6408, 6408, 5121, image);
          Tile.prepDevice.texParameteri(3553, 10241, 9985);
          Tile.prepDevice.generateMipmap(3553);
          Tile.prepDevice.bindTexture(3553, null);
        }
        catch ($e1) {
          this._errored = true;
        }
      }
    }
  };


  // wwtlib.Grids

  function Grids() {
  }
  Grids._createGalaxyImage = function(renderContext) {
    if (Grids._milkyWayImage == null) {
      Grids._milkyWayImage = Planets.loadPlanetTexture('//cdn.worldwidetelescope.org/webclient/images/milkywaybar.jpg');
    }
    var subdivs = 50;
    var lat, lng;
    var index = 0;
    var latMin = 64;
    var latMax = -64;
    var lngMin = -64;
    var lngMax = 64;
    Grids._galaxyImageVertexBuffer = new PositionTextureVertexBuffer((subdivs + 1) * (subdivs + 1));
    var verts = Grids._galaxyImageVertexBuffer.lock();
    var x1, y1;
    var latDegrees = latMax - latMin;
    var lngDegrees = lngMax - lngMin;
    var scaleFactor = 60800000;
    var ecliptic = Coordinates.meanObliquityOfEcliptic(SpaceTimeController.get_jNow()) / 180 * Math.PI;
    var point;
    var textureStepX = 1 / subdivs;
    var textureStepY = 1 / subdivs;
    for (y1 = 0; y1 <= subdivs; y1++) {
      if (y1 !== subdivs) {
        lat = latMax - (textureStepY * latDegrees * y1);
      }
      else {
        lat = latMin;
      }
      for (x1 = 0; x1 <= subdivs; x1++) {
        if (x1 !== subdivs) {
          lng = lngMin + (textureStepX * lngDegrees * x1);
        }
        else {
          lng = lngMax;
        }
        index = y1 * (subdivs + 1) + x1;
        point = Vector3d.create(lng * scaleFactor, 0, (lat - 28) * scaleFactor);
        point.rotateY(213 / 180 * Math.PI);
        point.rotateZ((-62.87175) / 180 * Math.PI);
        point.rotateY((-192.8595083) / 180 * Math.PI);
        point.rotateX(ecliptic);
        verts[index] = PositionTexture.createPosRaw(point, (1 - x1 * textureStepX), (y1 * textureStepY));
      }
    }
    Grids._galaxyImageVertexBuffer.unlock();
    Grids._galaxyImageTriangleCount = subdivs * subdivs * 2;
    var ui16array = new Uint16Array(subdivs * subdivs * 6);
    var indexArray = ui16array;
    for (y1 = 0; y1 < subdivs; y1++) {
      for (x1 = 0; x1 < subdivs; x1++) {
        index = (y1 * subdivs * 6) + 6 * x1;
        indexArray[index] = (y1 * (subdivs + 1) + x1);
        indexArray[index + 2] = ((y1 + 1) * (subdivs + 1) + x1);
        indexArray[index + 1] = (y1 * (subdivs + 1) + (x1 + 1));
        indexArray[index + 3] = (y1 * (subdivs + 1) + (x1 + 1));
        indexArray[index + 5] = ((y1 + 1) * (subdivs + 1) + x1);
        indexArray[index + 4] = ((y1 + 1) * (subdivs + 1) + (x1 + 1));
      }
    }
    Grids._galaxyImageIndexBuffer = Tile.prepDevice.createBuffer();
    Tile.prepDevice.bindBuffer(34963, Grids._galaxyImageIndexBuffer);
    Tile.prepDevice.bufferData(34963, ui16array, 35044);
  };
  Grids.drawGalaxyImage = function(renderContext, opacity) {
    if (Grids._galaxyImageIndexBuffer == null) {
      Grids._createGalaxyImage(renderContext);
    }
    var zoom = renderContext.viewCamera.zoom;
    var log = Math.log(Math.max(1, zoom)) / Math.log(4);
    var distAlpha = (log - 14) * 128;
    var alpha = (Math.min(255, Math.max(0, distAlpha)) * opacity);
    ImageShader.use(renderContext, Grids._galaxyImageVertexBuffer.vertexBuffer, Grids._galaxyImageIndexBuffer, Grids._milkyWayImage.texture2d, opacity, true);
    renderContext.gl.drawElements(4, Grids._galaxyImageTriangleCount * 3, 5123, 0);
  };
  Grids.drawStars3D = function(renderContext, opacity) {
    var zoom = renderContext.viewCamera.zoom;
    var distAlpha = Math.max(Math.min(255, (Math.log(zoom) - 15.5) * 40.8), 0);
    var alpha = Math.min(255, Math.max(0, ss.truncate(distAlpha)));
    if (alpha > 254) {
      return;
    }
    alpha = ((255 - alpha) * opacity);
    if (Grids._starSprites == null) {
      Grids.initStarVertexBuffer(renderContext);
    }
    if (Grids._starSprites != null) {
      Grids._starSprites.draw(renderContext, alpha / 255, false);
    }
  };
  Grids.initStarVertexBuffer = function(renderContext) {
    if (!Grids._starsDownloading) {
      Grids.getStarFile('//worldwidetelescope.org/wwtweb/catalog.aspx?Q=hipparcos');
      Grids._starsDownloading = true;
    }
    if (Grids._starSprites == null && Grids._starCount > 0) {
      var ecliptic = Coordinates.meanObliquityOfEcliptic(SpaceTimeController.get_jNow()) / 180 * Math.PI;
      var count = Grids._stars.length;
      Grids._starCount = count;
      Grids._starSprites = new PointList(renderContext);
      Grids._starSprites.depthBuffered = false;
      Grids._starSprites.showFarSide = true;
      var $enum1 = ss.enumerate(Grids._stars);
      while ($enum1.moveNext()) {
        var star = $enum1.current;
        var pos = Coordinates.raDecTo3dAu(star.RA, star.dec, star.distance);
        pos.rotateX(ecliptic);
        star.position = pos;
        var radDec = (1200000) / Math.pow(1.6, star.absoluteMagnitude);
        Grids._starSprites.addPoint(pos, star.col, new Dates(0, 1), radDec * 100);
      }
    }
  };
  Grids.initializeStarDB = function(text) {
    if (Grids._stars == null) {
      if (Grids._stars == null) {
        Grids._stars = [];
        var rows = text.split('\r\n');
        var star;
        var $enum1 = ss.enumerate(rows);
        while ($enum1.moveNext()) {
          var row = $enum1.current;
          var line = row;
          star = new Star(line);
          if (star.magnitude < Grids._limitingMagnitude && star.par > 0.001) {
            Grids._stars.push(star);
            Grids._hipparcosIndex[star.id] = star;
          }
        }
        Grids._starCount = Grids._stars.length;
      }
    }
  };
  Grids.getStarFile = function(url) {
    Grids._webFileStar = new WebFile(url);
    Grids._webFileStar.onStateChange = Grids.starFileStateChange;
    Grids._webFileStar.send();
  };
  Grids.starFileStateChange = function() {
    if (Grids._webFileStar.get_state() === 2) {
      alert(Grids._webFileStar.get_message());
    }
    else if (Grids._webFileStar.get_state() === 1) {
      Grids.initializeStarDB(Grids._webFileStar.getText());
    }
  };
  Grids.getGalaxyFile = function(url) {
    Grids._webFileGalaxy = new WebFile(url);
    Grids._webFileGalaxy.responseType = 'blob';
    Grids._webFileGalaxy.onStateChange = Grids.galaxyFileStateChange;
    Grids._webFileGalaxy.send();
  };
  Grids.galaxyFileStateChange = function() {
    if (Grids._webFileGalaxy.get_state() === 2) {
      alert(Grids._webFileGalaxy.get_message());
    }
    else if (Grids._webFileGalaxy.get_state() === 1) {
      var mainBlob = Grids._webFileGalaxy.getBlob();
      var chunck = new FileReader();
      chunck.onloadend = function(e) {
        var br = new BinaryReader(new Uint8Array(chunck.result));
        Grids.initializeCosmos(br);
      };
      chunck.readAsArrayBuffer(mainBlob);
    }
  };
  Grids.drawCosmos3D = function(renderContext, opacity) {
    var device = renderContext.gl;
    var zoom = renderContext.viewCamera.zoom;
    var distAlpha = ((Math.log(Math.max(1, zoom)) / Math.log(4)) - 15.5) * 90;
    var alpha = Math.min(255, Math.max(0, ss.truncate(distAlpha)));
    if (alpha < 3) {
      return;
    }
    Grids.initCosmosVertexBuffer();
    if (Grids._galaxyTextures == null) {
      if (Grids._largeSet) {
        Grids._galaxyTextures = new Array(256);
        for (var i = 0; i < 256; i++) {
          var num = i.toString();
          while (num.length < 4) {
            num = '0' + num;
          }
          var name = ss.format('//cdn.worldwidetelescope.org/webclient/images/gal_{0}.jpg', num);
          Grids._galaxyTextures[i] = Planets.loadPlanetTexture(name);
        }
      }
    }
    if (Grids._cosmosReady) {
      var count = 256;
      for (var i = 0; i < count; i++) {
        Grids._cosmosSprites[i].drawTextured(renderContext, Grids._galaxyTextures[i].texture2d, (alpha * opacity) / 255);
      }
    }
  };
  Grids.initCosmosVertexBuffer = function() {
    if (Grids._cosmosSprites == null) {
      Grids._downloadCosmosFile();
    }
  };
  Grids._createCosmosVertexBuffer = function(renderContext) {
    var device = Tile.prepDevice;
    var bucketCount = 256;
    if (Grids._cosmosSprites != null) {
      for (var ij = 0; ij < bucketCount; ij++) {
        if (Grids._cosmosSprites[ij] != null) {
          Grids._cosmosSprites[ij] = null;
        }
      }
    }
    Grids._cosmosSprites = null;
    var ecliptic = Coordinates.meanObliquityOfEcliptic(SpaceTimeController.get_jNow()) / 180 * Math.PI;
    Grids._cosmosSprites = new Array(bucketCount);
    var indexList = new Array(bucketCount);
    for (var i = 0; i < bucketCount; i++) {
      var count = Grids._galaxyVertexCounts[i];
      Grids._cosmosSprites[i] = new PointList(renderContext);
      Grids._cosmosSprites[i].depthBuffered = false;
      Grids._cosmosSprites[i].showFarSide = true;
      indexList[i] = 0;
    }
    var $enum1 = ss.enumerate(Grids._cosmos);
    while ($enum1.moveNext()) {
      var galaxy = $enum1.current;
      var bucket = galaxy.eTypeBucket;
      var index = indexList[bucket];
      var pos = Coordinates.raDecTo3dAu(galaxy.RA, galaxy.dec, (galaxy.distance * 206264.806 * 1000000) / 0.73);
      pos.rotateX(ecliptic);
      galaxy.position = pos;
      Grids._cosmosSprites[bucket].addPoint(pos, Colors.get_white(), new Dates(0, 1), (1E+09 * galaxy.size * 100));
      indexList[bucket]++;
    }
    Grids._cosmosReady = true;
  };
  Grids.initializeCosmos = function(br) {
    var max = Math.pow(100, 2.849485002);
    if (Grids._cosmos == null) {
      Grids._galaxyVertexCounts = new Array((Grids._largeSet) ? 256 : 20);
      if (Grids._cosmos == null) {
        Grids._cosmos = [];
        var galaxy;
        try {
          var count = 0;
          while (br.get_position() < br.get_length()) {
            galaxy = new Galaxy(br);
            Grids._cosmos.push(galaxy);
            Grids._galaxyVertexCounts[galaxy.eTypeBucket]++;
            count++;
          }
        }
        catch ($e1) {
        }
        br.close();
      }
      Grids._createCosmosVertexBuffer(WWTControl.singleton.renderContext);
    }
  };
  Grids._downloadCosmosFile = function() {
    if (!Grids._downloadingGalaxy) {
      Grids.getGalaxyFile('//worldwidetelescope.org/wwtweb/catalog.aspx?Q=cosmosnewbin');
      Grids._downloadingGalaxy = true;
    }
    return false;
  };
  Grids.drawEquitorialGrid = function(renderContext, opacity, drawColor) {
    if (Grids._equLineList == null) {
      Grids._equLineList = new SimpleLineList();
      Grids._equLineList.set_depthBuffered(false);
      for (var hour = 0; hour < 24; hour++) {
        for (var dec = -80; dec < 80; dec += 2) {
          Grids._equLineList.addLine(Coordinates.raDecTo3dAu(hour, dec, 1), Coordinates.raDecTo3dAu(hour, dec + 2, 1));
        }
      }
      for (var dec = -80; dec <= 80; dec += 10) {
        for (var hour = 0; hour < 23.8; hour += 0.2) {
          Grids._equLineList.addLine(Coordinates.raDecTo3dAu(hour, dec, 1), Coordinates.raDecTo3dAu(hour + 0.2, dec, 1));
        }
      }
      var counter = 0;
      for (var ra = 0; ra < 24; ra += 0.25) {
        var dec = 0.5;
        switch (counter % 4) {
          case 0:
            counter++;
            continue;
          case 3:
          case 1:
            dec = 0.25;
            break;
        }
        counter++;
        Grids._equLineList.addLine(Coordinates.raDecTo3dAu(ra, dec, 1), Coordinates.raDecTo3dAu(ra, -dec, 1));
      }
      counter = 0;
      for (var ra = 0; ra < 24; ra += 3) {
        counter = 0;
        for (var dec = -80; dec <= 80; dec += 1) {
          var width = 0.5 / 30;
          switch (counter % 10) {
            case 0:
              counter++;
              continue;
            case 5:
              width = 0.5 / 15;
              break;
          }
          counter++;
          Grids._equLineList.addLine(Coordinates.raDecTo3dAu(ra + width, dec, 1), Coordinates.raDecTo3dAu(ra - width, dec, 1));
        }
      }
    }
    Grids._equLineList.drawLines(renderContext, opacity, drawColor);
    return true;
  };
  Grids.drawEquitorialGridText = function(renderContext, opacity, drawColor) {
    Grids._makeEquitorialGridText();
    Grids._equTextBatch.draw(renderContext, opacity, drawColor);
    return true;
  };
  Grids._makeEquitorialGridText = function() {
    if (Grids._equTextBatch == null) {
      Grids._equTextBatch = new Text3dBatch(30);
      var index = 0;
      for (var ra = 0; ra < 24; ra++) {
        var text = ra.toString() + ' hr';
        if (ra < 10) {
          text = '  ' + ra.toString() + ' hr';
        }
        Grids._equTextBatch.add(new Text3d(Coordinates.raDecTo3dAu(ra + 0.005, 0.4, 1), Coordinates.raDecTo3dAu(ra + 0.005, 0.5, 1), text, 45, 0.00018));
      }
      index = 0;
      for (var ra = 0; ra < 24; ra += 3) {
        for (var dec = -80; dec <= 80; dec += 10) {
          if (!dec) {
            continue;
          }
          var text = dec.toString();
          if (dec > 0) {
            text = '  +' + dec.toString();
            Grids._equTextBatch.add(new Text3d(Coordinates.raDecTo3dAu(ra, dec - 0.4, 1), Coordinates.raDecTo3dAu(ra, dec - 0.3, 1), text, 45, 0.00018));
          }
          else {
            text = '  - ' + text.substr(1);
            Grids._equTextBatch.add(new Text3d(Coordinates.raDecTo3dAu(ra, dec + 0.4, 1), Coordinates.raDecTo3dAu(ra, dec + 0.5, 1), text, 45, 0.00018));
          }
          index++;
        }
      }
    }
  };
  Grids.drawEcliptic = function(renderContext, opacity, drawColor) {
    var col = drawColor;
    var year = SpaceTimeController.get_now().getUTCFullYear();
    if (Grids._eclipticOverviewLineList == null || year !== Grids._eclipticYear) {
      if (Grids._eclipticOverviewLineList != null) {
        Grids._eclipticOverviewLineList.clear();
        Grids._eclipticOverviewLineList = null;
      }
      Grids._eclipticYear = year;
      var obliquity = Coordinates.meanObliquityOfEcliptic(SpaceTimeController.get_jNow());
      var mat = Matrix3d._rotationX((-obliquity / 360 * (Math.PI * 2)));
      var daysPerYear = 365.25;
      if (DT.isLeap(year, true)) {
        Grids._monthDays[1] = 29;
        daysPerYear = 366;
      }
      else {
        Grids._monthDays[1] = 28;
        daysPerYear = 365;
      }
      var count = 2 * ss.truncate(daysPerYear);
      Grids._eclipticCount = ss.truncate(daysPerYear);
      var jYear = SpaceTimeController.utcToJulian(new Date(year, 0, 1, 12, 0, 0));
      var index = 0;
      var d = 0;
      Grids._eclipticOverviewLineList = new SimpleLineList();
      Grids._eclipticOverviewLineList.set_depthBuffered(false);
      for (var m = 0; m < 12; m++) {
        var daysThisMonth = ss.truncate(Grids._monthDays[m]);
        for (var i = 0; i < daysThisMonth; i++) {
          var sunRaDec = Planets.getPlanetLocationJD('Sun', jYear);
          var sunEcliptic = CT.eq2Ec(sunRaDec.RA, sunRaDec.dec, obliquity);
          d = sunEcliptic.x;
          var width = 0.005;
          if (!i) {
            width = 0.01;
          }
          var dd = d;
          Grids._eclipticOverviewLineList.addLine(Vector3d._transformCoordinate(Vector3d.create(Math.cos((dd * Math.PI * 2) / 360), width, Math.sin((dd * Math.PI * 2) / 360)), mat), Vector3d._transformCoordinate(Vector3d.create(Math.cos((dd * Math.PI * 2) / 360), -width, Math.sin((dd * Math.PI * 2) / 360)), mat));
          index++;
          jYear += 1;
        }
        d += Grids._monthDays[m];
      }
    }
    Grids._eclipticOverviewLineList.drawLines(renderContext, opacity, drawColor);
    return true;
  };
  Grids.drawEclipticText = function(renderContext, opacity, drawColor) {
    Grids._makeEclipticText();
    Grids._eclipOvTextBatch.draw(renderContext, opacity, drawColor);
    return true;
  };
  Grids._makeEclipticText = function() {
    var year = SpaceTimeController.get_now().getUTCFullYear();
    if (Grids._eclipOvTextBatch == null) {
      Grids._eclipOvTextBatch = new Text3dBatch(80);
      Grids._eclipticTextYear = year;
      var obliquity = Coordinates.meanObliquityOfEcliptic(SpaceTimeController.get_jNow());
      var mat = Matrix3d._rotationX((-obliquity / 360 * (Math.PI * 2)));
      var daysPerYear = 365.25;
      if (DT.isLeap(year, true)) {
        Grids._monthDays[1] = 29;
        daysPerYear = 366;
      }
      else {
        Grids._monthDays[1] = 28;
        daysPerYear = 365;
      }
      var count = 2 * ss.truncate(daysPerYear);
      Grids._eclipticCount = ss.truncate(daysPerYear);
      var jYear = SpaceTimeController.utcToJulian(new Date(year, 0, 1, 12, 0, 0));
      var index = 0;
      var d = 0;
      for (var m = 0; m < 12; m++) {
        var daysThisMonth = ss.truncate(Grids._monthDays[m]);
        for (var i = 0; i < daysThisMonth; i++) {
          var sunRaDec = Planets.getPlanetLocationJD('Sun', jYear);
          var sunEcliptic = CT.eq2Ec(sunRaDec.RA, sunRaDec.dec, obliquity);
          d = sunEcliptic.x;
          var dd = d;
          if (i === Math.floor(daysThisMonth / 2)) {
            var center = Vector3d._transformCoordinate(Vector3d.create(Math.cos((dd * Math.PI * 2) / 360), 0.025, Math.sin((dd * Math.PI * 2) / 360)), mat);
            var up = Vector3d._transformCoordinate(Vector3d.create(Math.cos((dd * Math.PI * 2) / 360), 0.045, Math.sin((dd * Math.PI * 2) / 360)), mat);
            up.subtract(center);
            up.normalize();
            Grids._eclipOvTextBatch.add(new Text3d(center, up, Grids._monthNames[m], 80, 0.000159375));
          }
          index++;
          index++;
          jYear += 1;
        }
        d += Grids._monthDays[m];
      }
    }
  };
  Grids.drawPrecessionChart = function(renderContext, opacity, drawColor) {
    Grids._makePrecessionChart();
    Grids._precTextBatch.draw(renderContext, opacity, drawColor);
    Grids._precLineList.drawLines(renderContext, opacity, drawColor);
    return true;
  };
  Grids._makePrecessionChart = function() {
    var obliquity = Coordinates.meanObliquityOfEcliptic(SpaceTimeController.get_jNow());
    var mat = Matrix3d._rotationX((obliquity / 360 * (Math.PI * 2)));
    var col = Colors.get_white();
    if (Grids._precLineList == null) {
      Grids._precLineList = new SimpleLineList();
      Grids._precLineList.set_depthBuffered(false);
      for (var l = 0; l < 360; l++) {
        var b = 90 - obliquity;
        Grids._precLineList.addLine(Vector3d._transformCoordinate(Coordinates.raDecTo3dAu(l / 15, b, 1), mat), Vector3d._transformCoordinate(Coordinates.raDecTo3dAu((l + 1) / 15, b, 1), mat));
      }
      for (var l = -12000; l < 13000; l += 2000) {
        var b = 90 - obliquity;
        var p = -((l - 2000) / 25772 * 24) - 6;
        Grids._precLineList.addLine(Vector3d._transformCoordinate(Coordinates.raDecTo3dAu(p, b - 0.5, 1), mat), Vector3d._transformCoordinate(Coordinates.raDecTo3dAu(p, b + 0.5, 1), mat));
      }
    }
    if (Grids._precTextBatch == null) {
      Grids._precTextBatch = new Text3dBatch(50);
      var index = 0;
      for (var l = -12000; l < 13000; l += 2000) {
        var b = 90 - obliquity + 3;
        var p = -((l - 2000) / 25772 * 24) - 6;
        var text = l.toString();
        if (!l) {
          b = 90 - obliquity + 2;
          text = '1 CE';
        }
        else if (l < 0) {
          text = '  ' + Math.abs(l).toString() + ' BCE';
        }
        else {
          text = Math.abs(l).toString() + ' CE';
        }
        if (text.length === 9) {
          text = '   ' + text;
        }
        Grids._precTextBatch.add(new Text3d(Vector3d._transformCoordinate(Coordinates.raDecTo3dAu(p, b, 1), mat), Vector3d._transformCoordinate(Coordinates.raDecTo3dAu(p + 0.01, b, 1), mat), text, 75, 0.00015));
      }
    }
    return;
  };
  Grids.drawAltAzGrid = function(renderContext, opacity, drawColor) {
    var zenithAltAz = new Coordinates(0, 0);
    var zenith = Coordinates.horizonToEquitorial(zenithAltAz, SpaceTimeController.get_location(), SpaceTimeController.get_now());
    var raPart = -((zenith.get_RA() + 6) / 24 * (Math.PI * 2));
    var decPart = -(zenith.get_dec() / 360 * (Math.PI * 2));
    var raText = Coordinates.formatDMS(zenith.get_RA());
    var mat = Matrix3d._rotationY(-raPart);
    mat._multiply(Matrix3d._rotationX(decPart));
    mat.invert();
    if (Grids._altAzLineList == null) {
      Grids._altAzLineList = new SimpleLineList();
      Grids._altAzLineList.set_depthBuffered(false);
      for (var l = 0; l < 360; l += 10) {
        for (var b = -80; b < 80; b += 2) {
          Grids._altAzLineList.addLine(Coordinates.raDecTo3dAu(l / 15, b, 1), Coordinates.raDecTo3dAu(l / 15, b + 2, 1));
        }
      }
      for (var b = -80; b <= 80; b += 10) {
        for (var l = 0; l < 360; l += 5) {
          Grids._altAzLineList.addLine(Coordinates.raDecTo3dAu(l / 15, b, 1), Coordinates.raDecTo3dAu((l + 5) / 15, b, 1));
        }
      }
      var counter = 0;
      for (var l = 0; l < 360; l += 1) {
        var b = 0.25;
        switch (counter % 10) {
          case 0:
            counter++;
            continue;
          case 5:
            b = 0.5;
            break;
        }
        counter++;
        Grids._altAzLineList.addLine(Coordinates.raDecTo3dAu(l / 15, b, 1), Coordinates.raDecTo3dAu(l / 15, -b, 1));
      }
      counter = 0;
      for (var l = 0; l < 360; l += 90) {
        counter = 0;
        for (var b = -80; b <= 80; b += 1) {
          var width = 0.5 / 2;
          switch (counter % 10) {
            case 0:
              counter++;
              continue;
            case 5:
              width = 0.5;
              break;
          }
          counter++;
          Grids._altAzLineList.addLine(Coordinates.raDecTo3dAu((l + width) / 15, b, 1), Coordinates.raDecTo3dAu((l - width) / 15, b, 1));
        }
      }
    }
    var matOldWorld = renderContext.get_world().clone();
    var matOldWorldBase = renderContext.get_worldBase().clone();
    renderContext.set_worldBase(Matrix3d.multiplyMatrix(mat, renderContext.get_world()));
    renderContext.set_world(renderContext.get_worldBase().clone());
    renderContext.makeFrustum();
    Grids._altAzLineList.viewTransform = Matrix3d.invertMatrix(mat);
    Grids._altAzLineList.drawLines(renderContext, opacity, drawColor);
    renderContext.set_worldBase(matOldWorldBase);
    renderContext.set_world(matOldWorld);
    renderContext.makeFrustum();
    return true;
  };
  Grids.drawAltAzGridText = function(renderContext, opacity, drawColor) {
    var zenithAltAz = new Coordinates(0, 0);
    var zenith = Coordinates.horizonToEquitorial(zenithAltAz, SpaceTimeController.get_location(), SpaceTimeController.get_now());
    var raPart = -((zenith.get_RA() - 6) / 24 * (Math.PI * 2));
    var decPart = -(zenith.get_dec() / 360 * (Math.PI * 2));
    var raText = Coordinates.formatDMS(zenith.get_RA());
    var mat = Matrix3d._rotationY(-raPart - Math.PI);
    mat._multiply(Matrix3d._rotationX(decPart));
    mat.invert();
    Grids._makeAltAzGridText();
    var matOldWorld = renderContext.get_world().clone();
    var matOldWorldBase = renderContext.get_worldBase().clone();
    renderContext.set_worldBase(Matrix3d.multiplyMatrix(mat, renderContext.get_world()));
    renderContext.set_world(renderContext.get_worldBase().clone());
    renderContext.makeFrustum();
    Grids._altAzTextBatch.viewTransform = Matrix3d.invertMatrix(mat);
    Grids._altAzTextBatch.draw(renderContext, opacity, drawColor);
    renderContext.set_worldBase(matOldWorldBase);
    renderContext.set_world(matOldWorld);
    renderContext.makeFrustum();
    return true;
  };
  Grids._makeAltAzGridText = function() {
    var drawColor = Colors.get_white();
    var index = 0;
    if (Grids._altAzTextBatch == null) {
      Grids._altAzTextBatch = new Text3dBatch(30);
      for (var l = 0; l < 360; l += 10) {
        var text = '       ' + l.toString();
        if (l < 10) {
          text = '   ' + l.toString();
        }
        else if (l < 100) {
          text = '     ' + l.toString();
        }
        var lc = 360 - l;
        Grids._altAzTextBatch.add(new Text3d(Coordinates.raDecTo3dAu(lc / 15 - 6, 0.4, 1), Coordinates.raDecTo3dAu(lc / 15 - 6, 0.5, 1), text, 75, 0.00018));
      }
      index = 0;
      for (var l = 0; l < 360; l += 90) {
        for (var b = -80; b <= 80; b += 10) {
          if (!b) {
            continue;
          }
          var text = b.toString();
          if (b > 0) {
            text = '  +' + b.toString();
            Grids._altAzTextBatch.add(new Text3d(Coordinates.raDecTo3dAu(l / 15, b - 0.4, 1), Coordinates.raDecTo3dAu(l / 15, b - 0.3, 1), text, 75, 0.00018));
          }
          else {
            text = '  - ' + text.substr(1);
            Grids._altAzTextBatch.add(new Text3d(Coordinates.raDecTo3dAu(l / 15, b + 0.4, 1), Coordinates.raDecTo3dAu(l / 15, b + 0.5, 1), text, 75, 0.00018));
          }
          index++;
        }
      }
    }
    return;
  };
  Grids.drawEclipticGrid = function(renderContext, opacity, drawColor) {
    if (Grids._eclipticLineList == null) {
      Grids._eclipticLineList = new SimpleLineList();
      Grids._eclipticLineList.set_depthBuffered(false);
      var obliquity = Coordinates.meanObliquityOfEcliptic(2451545);
      var mat = Matrix3d._rotationX((-obliquity / 360 * (Math.PI * 2)));
      for (var l = 0; l < 360; l += 10) {
        for (var b = -80; b < 80; b += 2) {
          Grids._eclipticLineList.addLine(Vector3d._transformCoordinate(Coordinates.raDecTo3dAu(l / 15, b, 1), mat), Vector3d._transformCoordinate(Coordinates.raDecTo3dAu(l / 15, b + 2, 1), mat));
        }
      }
      for (var b = -80; b <= 80; b += 10) {
        for (var l = 0; l < 360; l += 5) {
          Grids._eclipticLineList.addLine(Vector3d._transformCoordinate(Coordinates.raDecTo3dAu(l / 15, b, 1), mat), Vector3d._transformCoordinate(Coordinates.raDecTo3dAu((l + 5) / 15, b, 1), mat));
        }
      }
      var counter = 0;
      for (var l = 0; l < 360; l += 1) {
        var b = 0.25;
        switch (counter % 10) {
          case 0:
            counter++;
            continue;
          case 5:
            b = 0.5;
            break;
        }
        counter++;
        Grids._eclipticLineList.addLine(Vector3d._transformCoordinate(Coordinates.raDecTo3dAu(l / 15, b, 1), mat), Vector3d._transformCoordinate(Coordinates.raDecTo3dAu(l / 15, -b, 1), mat));
      }
      counter = 0;
      for (var l = 0; l < 360; l += 90) {
        counter = 0;
        for (var b = -80; b <= 80; b += 1) {
          var width = 0.5 / 2;
          switch (counter % 10) {
            case 0:
              counter++;
              continue;
            case 5:
              width = 0.5;
              break;
          }
          counter++;
          Grids._eclipticLineList.addLine(Vector3d._transformCoordinate(Coordinates.raDecTo3dAu((l + width) / 15, b, 1), mat), Vector3d._transformCoordinate(Coordinates.raDecTo3dAu((l - width) / 15, b, 1), mat));
        }
      }
    }
    Grids._eclipticLineList.drawLines(renderContext, opacity, drawColor);
    return true;
  };
  Grids.drawEclipticGridText = function(renderContext, opacity, drawColor) {
    Grids._makeEclipticGridText();
    Grids._eclipticTextBatch.draw(renderContext, opacity, drawColor);
    return true;
  };
  Grids._makeEclipticGridText = function() {
    var drawColor = Colors.get_white();
    var obliquity = Coordinates.meanObliquityOfEcliptic(SpaceTimeController.get_jNow());
    var mat = Matrix3d._rotationX((-obliquity / 360 * (Math.PI * 2)));
    if (Grids._eclipticTextBatch == null) {
      Grids._eclipticTextBatch = new Text3dBatch(30);
      for (var l = 0; l < 360; l += 10) {
        var text = '       ' + l.toString();
        if (l < 10) {
          text = '   ' + l.toString();
        }
        else if (l < 100) {
          text = '     ' + l.toString();
        }
        Grids._eclipticTextBatch.add(new Text3d(Vector3d._transformCoordinate(Coordinates.raDecTo3dAu(l / 15, 0.4, 1), mat), Vector3d._transformCoordinate(Coordinates.raDecTo3dAu(l / 15, 0.5, 1), mat), text, 75, 0.00018));
      }
      for (var l = 0; l < 360; l += 90) {
        for (var b = -80; b <= 80; b += 10) {
          if (!b) {
            continue;
          }
          var text = b.toString();
          if (b > 0) {
            text = '  +' + b.toString();
            Grids._eclipticTextBatch.add(new Text3d(Vector3d._transformCoordinate(Coordinates.raDecTo3dAu(l / 15, b - 0.4, 1), mat), Vector3d._transformCoordinate(Coordinates.raDecTo3dAu(l / 15, b - 0.3, 1), mat), text, 75, 0.00018));
          }
          else {
            text = '  - ' + text.substr(1);
            Grids._eclipticTextBatch.add(new Text3d(Vector3d._transformCoordinate(Coordinates.raDecTo3dAu(l / 15, b + 0.4, 1), mat), Vector3d._transformCoordinate(Coordinates.raDecTo3dAu(l / 15, b + 0.5, 1), mat), text, 75, 0.00018));
          }
        }
      }
    }
    return;
  };
  Grids.drawGalacticGrid = function(renderContext, opacity, drawColor) {
    if (Grids._galLineList == null) {
      Grids._galLineList = new SimpleLineList();
      Grids._galLineList.set_depthBuffered(false);
      for (var l = 0; l < 360; l += 10) {
        for (var b = -80; b < 80; b += 2) {
          Grids._galLineList.addLine(Coordinates.galacticTo3dDouble(l, b), Coordinates.galacticTo3dDouble(l, b + 2));
        }
      }
      for (var b = -80; b <= 80; b += 10) {
        for (var l = 0; l < 360; l += 5) {
          Grids._galLineList.addLine(Coordinates.galacticTo3dDouble(l, b), Coordinates.galacticTo3dDouble(l + 5, b));
        }
      }
      var counter = 0;
      for (var l = 0; l < 360; l += 1) {
        var b = 0.25;
        switch (counter % 10) {
          case 0:
            counter++;
            continue;
          case 5:
            b = 0.5;
            break;
        }
        counter++;
        Grids._galLineList.addLine(Coordinates.galacticTo3dDouble(l, b), Coordinates.galacticTo3dDouble(l, -b));
      }
      counter = 0;
      for (var l = 0; l < 360; l += 90) {
        counter = 0;
        for (var b = -80; b <= 80; b += 1) {
          var width = 0.5 / 2;
          switch (counter % 10) {
            case 0:
              counter++;
              continue;
            case 5:
              width = 0.5;
              break;
          }
          counter++;
          Grids._galLineList.addLine(Coordinates.galacticTo3dDouble(l + width, b), Coordinates.galacticTo3dDouble(l - width, b));
        }
      }
    }
    Grids._galLineList.drawLines(renderContext, opacity, drawColor);
    return true;
  };
  Grids.drawGalacticGridText = function(renderContext, opacity, drawColor) {
    Grids._makeGalacticGridText();
    Grids._galTextBatch.draw(renderContext, opacity, drawColor);
    return true;
  };
  Grids._makeGalacticGridText = function() {
    if (Grids._galTextBatch == null) {
      Grids._galTextBatch = new Text3dBatch(30);
      for (var l = 0; l < 360; l += 10) {
        var text = '       ' + l.toString();
        if (l < 10) {
          text = '   ' + l.toString();
        }
        else if (l < 100) {
          text = '     ' + l.toString();
        }
        Grids._galTextBatch.add(new Text3d(Coordinates.galacticTo3dDouble(l, 0.4), Coordinates.galacticTo3dDouble(l, 0.5), text, 75, 0.00018));
      }
      for (var l = 0; l < 360; l += 90) {
        for (var b = -80; b <= 80; b += 10) {
          if (!b) {
            continue;
          }
          var text = b.toString();
          if (b > 0) {
            text = '  +' + b.toString();
            Grids._galTextBatch.add(new Text3d(Coordinates.galacticTo3dDouble(l, b - 0.4), Coordinates.galacticTo3dDouble(l, b - 0.3), text, 75, 0.00018));
          }
          else {
            text = '  - ' + text.substr(1);
            Grids._galTextBatch.add(new Text3d(Coordinates.galacticTo3dDouble(l, b + 0.4), Coordinates.galacticTo3dDouble(l, b + 0.5), text, 75, 0.00018));
          }
        }
      }
    }
  };
  Grids.drawPlanetGrid = function(renderContext, opacity, drawColor) {
    if (Grids._planetLineList == null) {
      Grids._planetLineList = new SimpleLineList();
      Grids._planetLineList.set_depthBuffered(true);
      var col = drawColor;
      for (var lng = 0; lng < 360; lng += 10) {
        for (var lat = -80; lat < 80; lat += 2) {
          Grids._planetLineList.addLine(Coordinates.geoTo3dDouble(lat, lng), Coordinates.geoTo3dDouble(lat + 2, lng));
        }
      }
      for (var lat = -80; lat <= 80; lat += 10) {
        for (var l = 0; l < 360; l += 5) {
          Grids._planetLineList.addLine(Coordinates.geoTo3dDouble(lat, l), Coordinates.geoTo3dDouble(lat, l + 5));
        }
      }
      var counter = 0;
      for (var lng = 0; lng < 360; lng += 1) {
        var lat = 0.25;
        switch (counter % 10) {
          case 0:
            counter++;
            continue;
          case 5:
            lat = 0.5;
            break;
        }
        counter++;
        Grids._planetLineList.addLine(Coordinates.geoTo3dDouble(lat, lng), Coordinates.geoTo3dDouble(-lat, lng));
      }
      counter = 0;
      for (var lng = 0; lng < 360; lng += 90) {
        counter = 0;
        for (var b = -80; b <= 80; b += 1) {
          var width = 0.5 / 2;
          switch (counter % 10) {
            case 0:
              counter++;
              continue;
            case 5:
              width = 0.5;
              break;
          }
          counter++;
          Grids._planetLineList.addLine(Coordinates.geoTo3dDouble(b, lng + width), Coordinates.geoTo3dDouble(b, lng - width));
        }
      }
    }
    Grids._planetLineList.aaFix = false;
    Grids._planetLineList.set_depthBuffered(true);
    Grids._planetLineList.sky = false;
    Grids._planetLineList.drawLines(renderContext, opacity, drawColor);
    return true;
  };
  Grids.drawPlanetGridText = function(renderContext, opacity, drawColor) {
    Grids._makePlanetGridText();
    Grids._planetTextBatch.draw(renderContext, opacity, drawColor);
    return true;
  };
  Grids._makePlanetGridText = function() {
    if (Grids._planetTextBatch == null) {
      Grids._planetTextBatch = new Text3dBatch(80);
      for (var lng = -180; lng < 180; lng += 10) {
        var text = '       ' + lng.toString();
        if (lng < 10) {
          text = '   ' + lng.toString();
        }
        else if (lng < 100) {
          text = '     ' + lng.toString();
        }
        Grids._planetTextBatch.add(new Text3d(Coordinates.geoTo3dDouble(0.4, lng), Coordinates.geoTo3dDouble(0.5, lng), text, -80, 6E-05));
      }
      for (var lng = 0; lng < 360; lng += 90) {
        for (var lat = -80; lat <= 80; lat += 10) {
          if (!lat) {
            continue;
          }
          var text = lat.toString();
          if (lat > 0) {
            text = '  +' + lat.toString();
            Grids._planetTextBatch.add(new Text3d(Coordinates.geoTo3dDouble(lat - 0.4, lng), Coordinates.geoTo3dDouble(lat - 0.3, lng), text, -80, 6E-05));
          }
          else {
            text = '  - ' + text.substring(1);
            Grids._planetTextBatch.add(new Text3d(Coordinates.geoTo3dDouble(lat + 0.4, lng), Coordinates.geoTo3dDouble(lat + 0.5, lng), text, -80, 6E-05));
          }
        }
      }
    }
  };
  var Grids$ = {

  };


  // wwtlib.KeplerVertex

  function KeplerVertex() {
    this.ABC = new Vector3d();
    this.abc1 = new Vector3d();
    this.pointSize = 0;
    this.w = 0;
    this.e = 0;
    this.n = 0;
    this.t = 0;
    this.a = 0;
    this.z = 0;
    this.orbitPos = 0;
    this.orbits = 0;
  }
  var KeplerVertex$ = {
    fill: function(ee) {
      var F = Math.cos(ee.omega * KeplerVertex._degrad);
      var sinOmega = Math.sin(ee.omega * KeplerVertex._degrad);
      var cosi = Math.cos(ee.i * KeplerVertex._degrad);
      var sini = Math.sin(ee.i * KeplerVertex._degrad);
      var G = sinOmega * KeplerVertex._cose;
      var H = sinOmega * KeplerVertex._sine;
      var P = -sinOmega * cosi;
      var Q = (F * cosi * KeplerVertex._cose) - (sini * KeplerVertex._sine);
      var R = (F * cosi * KeplerVertex._sine) + (sini * KeplerVertex._cose);
      var checkA = (F * F) + (G * G) + (H * H);
      var checkB = (P * P) + (Q * Q) + (R * R);
      this.ABC.x = Math.atan2(F, P);
      this.ABC.y = Math.atan2(G, Q);
      this.ABC.z = Math.atan2(H, R);
      this.abc1.x = Math.sqrt((F * F) + (P * P));
      this.abc1.y = Math.sqrt((G * G) + (Q * Q));
      this.abc1.z = Math.sqrt((H * H) + (R * R));
      this.pointSize = 0.1;
      if (ee.a < 2.5) {
        this.color = Colors.get_white();
      }
      else if (ee.a < 2.83) {
        this.color = Colors.get_red();
      }
      else if (ee.a < 2.96) {
        this.color = Colors.get_green();
      }
      else if (ee.a < 3.3) {
        this.color = Colors.get_magenta();
      }
      else if (ee.a < 5) {
        this.color = Colors.get_cyan();
      }
      else if (ee.a < 10) {
        this.color = Colors.get_yellow();
        this.pointSize = 0.9;
      }
      else {
        this.color = Colors.get_white();
        this.pointSize = 8;
      }
      this.w = ee.w;
      this.e = ee.e;
      if (!ee.n) {
        this.n = (0.9856076686 / (ee.a * Math.sqrt(ee.a)));
      }
      else {
        this.n = ee.n;
      }
      this.t = (ee.t - KeplerVertex.baseDate);
      this.a = ee.a;
      this.z = 0;
      this.orbitPos = 0;
      this.orbits = 0;
    }
  };


  // wwtlib.ScaleMap

  function ScaleMap() {
  }
  var ScaleMap$ = {

  };


  // wwtlib.Layer

  function Layer() {
    this.id = Guid.newGuid();
    this.loadedFromTour = false;
    this.tourDocument = null;
    this.opacity = 1;
    this.opened = false;
    this._startTime = ss.date('01/01/1900');
    this._endTime = ss.date('01/01/2100');
    this._fadeSpan = 0;
    this._fadeType = 4;
    this.version = 0;
    this.color = Colors.get_white();
    this.enabled = true;
    this.astronomical = false;
  }
  Layer.fromXml = function(layerNode, someFlag) {
    var layerClassName = layerNode.attributes.getNamedItem('Type').nodeValue;
    var overLayType = ss.replaceString(layerClassName, 'TerraViewer.', '');
    if (overLayType == null) {
      return null;
    }
    var newLayer = null;
    switch (overLayType) {
      case 'SpreadSheetLayer':
        newLayer = new SpreadSheetLayer();
        break;
      case 'GreatCirlceRouteLayer':
        newLayer = new GreatCirlceRouteLayer();
        break;
      case 'GridLayer':
        newLayer = new GridLayer();
        break;
      case 'ImageSetLayer':
        newLayer = new ImageSetLayer();
        break;
      case 'Object3dLayer':
        newLayer = new Object3dLayer();
        break;
      case 'OrbitLayer':
        newLayer = new OrbitLayer();
        break;
      default:
        return null;
    }
    newLayer.initFromXml(layerNode);
    return newLayer;
  };
  var Layer$ = {
    getPrimaryUI: function() {
      return null;
    },
    getFileStreamUrl: function(filename) {
      if (this.tourDocument != null) {
        return this.tourDocument.getFileStream(filename);
      }
      return null;
    },
    get_opacity: function() {
      return this.opacity;
    },
    set_opacity: function(value) {
      if (this.opacity !== value) {
        this.version++;
        this.opacity = value;
      }
      return value;
    },
    get_opened: function() {
      return this.opened;
    },
    set_opened: function(value) {
      if (this.opened !== value) {
        this.version++;
        this.opened = value;
      }
      return value;
    },
    get_startTime: function() {
      return this._startTime;
    },
    set_startTime: function(value) {
      if (!ss.compareDates(this._startTime, value)) {
        this.version++;
        this._startTime = value;
      }
      return value;
    },
    get_endTime: function() {
      return this._endTime;
    },
    set_endTime: function(value) {
      if (!ss.compareDates(this._endTime, value)) {
        this.version++;
        this._endTime = value;
      }
      return value;
    },
    get_fadeSpan: function() {
      return this._fadeSpan;
    },
    set_fadeSpan: function(value) {
      this.version++;
      this._fadeSpan = value;
      return value;
    },
    get_fadeType: function() {
      return this._fadeType;
    },
    set_fadeType: function(value) {
      if (this._fadeType !== value) {
        this.set_version(this.get_version() + 1) - 1;
        this._fadeType = value;
      }
      return value;
    },
    get_version: function() {
      return this.version;
    },
    set_version: function(value) {
      this.version = value;
      return value;
    },
    findClosest: function(target, distance, closestPlace, astronomical) {
      return closestPlace;
    },
    hoverCheckScreenSpace: function(cursor) {
      return false;
    },
    clickCheckScreenSpace: function(cursor) {
      return false;
    },
    draw: function(renderContext, opacity, flat) {
      return true;
    },
    preDraw: function(renderContext, opacity) {
      return true;
    },
    upadteData: function(data, purgeOld, purgeAll, hasHeader) {
      return true;
    },
    canCopyToClipboard: function() {
      return false;
    },
    copyToClipboard: function() {
      return;
    },
    getParams: function() {
      var paramList = new Array(5);
      paramList[0] = this.color.r / 255;
      paramList[1] = this.color.g / 255;
      paramList[2] = this.color.b / 255;
      paramList[3] = this.color.a / 255;
      paramList[4] = this.opacity;
      return paramList;
    },
    setParams: function(paramList) {
      if (paramList.length === 5) {
        this.opacity = paramList[4];
        this.color = Color.fromArgb((paramList[3] * 255), (paramList[0] * 255), (paramList[1] * 255), (paramList[2] * 255));
      }
    },
    getParamNames: function() {
      return [ 'Color.Red', 'Color.Green', 'Color.Blue', 'Color.Alpha', 'Opacity' ];
    },
    getEditUI: function() {
      return ss.safeCast(this, IUiController);
    },
    cleanUp: function() {
    },
    get_name: function() {
      return this._name;
    },
    set_name: function(value) {
      if (this._name !== value) {
        this.version++;
        this._name = value;
      }
      return value;
    },
    toString: function() {
      return this._name;
    },
    get_referenceFrame: function() {
      return this.referenceFrame;
    },
    set_referenceFrame: function(value) {
      this.referenceFrame = value;
      return value;
    },
    getProps: function() {
      return '';
    },
    get_color: function() {
      return this.color;
    },
    set_color: function(value) {
      if (this.color !== value) {
        this.color = value;
        this.version++;
        this.cleanUp();
      }
      return value;
    },
    colorChanged: function() {
      this.cleanUp();
    },
    get_colorValue: function() {
      return this.get_color().toString();
    },
    set_colorValue: function(value) {
      this.set_color(Color.fromName(value));
      return value;
    },
    get_astronomical: function() {
      return this.astronomical;
    },
    set_astronomical: function(value) {
      if (this.astronomical !== value) {
        this.version++;
        this.astronomical = value;
      }
      return value;
    },
    getTypeName: function() {
      return 'TerraViewer.Layer';
    },
    saveToXml: function(xmlWriter) {
      xmlWriter._writeStartElement('Layer');
      xmlWriter._writeAttributeString('Id', this.id.toString());
      xmlWriter._writeAttributeString('Type', this.getTypeName());
      xmlWriter._writeAttributeString('Name', this.get_name());
      xmlWriter._writeAttributeString('ReferenceFrame', this.referenceFrame);
      xmlWriter._writeAttributeString('Color', this.color.save());
      xmlWriter._writeAttributeString('Opacity', this.opacity.toString());
      xmlWriter._writeAttributeString('StartTime', Util.xmlDate(this.get_startTime()));
      xmlWriter._writeAttributeString('EndTime', Util.xmlDate(this.get_endTime()));
      xmlWriter._writeAttributeString('FadeSpan', this.get_fadeSpan().toString());
      xmlWriter._writeAttributeString('FadeType', this.get_fadeType().toString());
      this.writeLayerProperties(xmlWriter);
      xmlWriter._writeEndElement();
    },
    writeLayerProperties: function(xmlWriter) {
      return;
    },
    initializeFromXml: function(node) {
    },
    initFromXml: function(node) {
      this.id = Guid.fromString(node.attributes.getNamedItem('Id').nodeValue);
      this.set_name(node.attributes.getNamedItem('Name').nodeValue);
      this.referenceFrame = node.attributes.getNamedItem('ReferenceFrame').nodeValue;
      this.color = Color.load(node.attributes.getNamedItem('Color').nodeValue);
      this.opacity = parseFloat(node.attributes.getNamedItem('Opacity').nodeValue);
      if (node.attributes.getNamedItem('StartTime') != null) {
        this.set_startTime(new Date(node.attributes.getNamedItem('StartTime').nodeValue));
      }
      if (node.attributes.getNamedItem('EndTime') != null) {
        this.set_endTime(new Date(node.attributes.getNamedItem('EndTime').nodeValue));
      }
      if (node.attributes.getNamedItem('FadeSpan') != null) {
        this.set_fadeSpan(Util.parseTimeSpan(node.attributes.getNamedItem('FadeSpan').nodeValue));
      }
      if (node.attributes.getNamedItem('FadeType') != null) {
        switch (node.attributes.getNamedItem('FadeType').nodeValue) {
          case 'In':
            this.set_fadeType(1);
            break;
          case 'Out':
            this.set_fadeType(2);
            break;
          case 'Both':
            this.set_fadeType(3);
            break;
          case 'None':
            this.set_fadeType(4);
            break;
          default:
            break;
        }
      }
      this.initializeFromXml(node);
    },
    loadData: function(doc, filename) {
      return;
    },
    addFilesToCabinet: function(fc) {
      return;
    },
    getStringFromGzipBlob: function(blob, dataReady) {
      var reader = new FileReader();
      reader.onloadend = function(e) {
        var result = pako.inflate(e.target.result, { to: 'string' });
        dataReady(result);
      };
      reader.readAsArrayBuffer(blob);
    }
  };


  // wwtlib.DomainValue

  function DomainValue(text, markerIndex) {
    this.markerIndex = 4;
    this.customMarker = null;
    this.text = text;
    this.markerIndex = markerIndex;
  }
  var DomainValue$ = {

  };


  // wwtlib.LayerManager

  function LayerManager() {
  }
  LayerManager.get_version = function() {
    return LayerManager._version;
  };
  LayerManager.set_version = function(value) {
    LayerManager._version = value;
    return value;
  };
  LayerManager.get_frameWizardDialog = function() {
    return LayerManager._frameWizardDialog;
  };
  LayerManager.get_dataVizWizardDialog = function() {
    return LayerManager._dataVizWizardDialog;
  };
  LayerManager.get_referenceFramePropsDialog = function() {
    return LayerManager._referenceFramePropsDialog;
  };
  LayerManager.get_greatCircleDlg = function() {
    return LayerManager._greatCircleDialog;
  };
  LayerManager.get_tourLayers = function() {
    return LayerManager._tourLayers;
  };
  LayerManager.set_tourLayers = function(value) {
    if (LayerManager._tourLayers !== value && !value) {
      LayerManager._clearLayers();
      LayerManager._tourLayers = value;
      LayerManager.loadTree();
    }
    else if (LayerManager._tourLayers !== value && !!value) {
      LayerManager._tourLayers = value;
      LayerManager.initLayers();
    }
    return value;
  };
  LayerManager.loadTree = function() {
    if (WWTControl.scriptInterface != null) {
      WWTControl.scriptInterface.refreshLayerManagerNow();
    }
  };
  LayerManager.get_layerMaps = function() {
    if (LayerManager.get_tourLayers()) {
      return LayerManager._layerMapsTours;
    }
    else {
      return LayerManager._layerMaps;
    }
  };
  LayerManager.set_layerMaps = function(value) {
    if (LayerManager.get_tourLayers()) {
      LayerManager._layerMapsTours = value;
    }
    else {
      LayerManager._layerMaps = value;
    }
    return value;
  };
  LayerManager.get_allMaps = function() {
    if (LayerManager.get_tourLayers()) {
      return LayerManager._allMapsTours;
    }
    else {
      return LayerManager._allMaps;
    }
  };
  LayerManager.set_allMaps = function(value) {
    if (LayerManager.get_tourLayers()) {
      LayerManager._allMapsTours = value;
    }
    else {
      LayerManager._allMaps = value;
    }
    return value;
  };
  LayerManager.get_currentMap = function() {
    return LayerManager._currentMap;
  };
  LayerManager.set_currentMap = function(value) {
    LayerManager._currentMap = value;
    return value;
  };
  LayerManager.get_layerList = function() {
    if (LayerManager.get_tourLayers()) {
      return LayerManager._layerListTours;
    }
    else {
      return LayerManager._layerList;
    }
  };
  LayerManager.set_layerList = function(value) {
    if (LayerManager.get_tourLayers()) {
      LayerManager._layerListTours = value;
    }
    else {
      LayerManager._layerList = value;
    }
    return value;
  };
  LayerManager.initLayers = function() {
    LayerManager._clearLayers();
    var iss = null;
    if (!LayerManager.get_tourLayers()) {
      iss = new LayerMap('ISS', 18);
      iss.frame.epoch = SpaceTimeController._twoLineDateToJulian('10184.51609218');
      iss.frame.semiMajorAxis = 6728829.41;
      iss.frame.referenceFrameType = 1;
      iss.frame.inclination = 51.6442;
      iss.frame.longitudeOfAscendingNode = 147.0262;
      iss.frame.eccentricity = 0.0009909;
      iss.frame.meanAnomolyAtEpoch = 325.5563;
      iss.frame.meanDailyMotion = 360 * 15.72172655;
      iss.frame.argumentOfPeriapsis = 286.4623;
      iss.frame.scale = 1;
      iss.frame.semiMajorAxisUnits = 1;
      iss.frame.meanRadius = 130;
      iss.frame.oblateness = 0;
      iss.frame.showOrbitPath = true;
      var isstle = new Array(0);
      var url = 'http://worldwidetelescope.org/wwtweb/isstle.aspx';
      var webFile;
      webFile = new WebFile(url);
      webFile.onStateChange = function() {
        if (webFile.get_state() === 1) {
          var data = webFile.getText();
          isstle = data.split('\n');
          if (isstle.length > 1) {
            iss.frame.fromTLE(isstle[0], isstle[1], 398600441800000);
          }
        }
      };
      webFile.send();
      iss.enabled = true;
    }
    LayerManager.get_layerMaps()['Sun'] = new LayerMap('Sun', 3);
    LayerManager.get_layerMaps()['Sun'].addChild(new LayerMap('Mercury', 4));
    LayerManager.get_layerMaps()['Sun'].addChild(new LayerMap('Venus', 5));
    LayerManager.get_layerMaps()['Sun'].addChild(new LayerMap('Earth', 6));
    LayerManager.get_layerMaps()['Sun'].childMaps['Earth'].addChild(new LayerMap('Moon', 13));
    if (!LayerManager.get_tourLayers()) {
      LayerManager.get_layerMaps()['Sun'].childMaps['Earth'].addChild(iss);
    }
    LayerManager.get_layerMaps()['Sun'].addChild(new LayerMap('Mars', 7));
    LayerManager.get_layerMaps()['Sun'].addChild(new LayerMap('Jupiter', 8));
    LayerManager.get_layerMaps()['Sun'].childMaps['Jupiter'].addChild(new LayerMap('Io', 14));
    LayerManager.get_layerMaps()['Sun'].childMaps['Jupiter'].addChild(new LayerMap('Europa', 15));
    LayerManager.get_layerMaps()['Sun'].childMaps['Jupiter'].addChild(new LayerMap('Ganymede', 16));
    LayerManager.get_layerMaps()['Sun'].childMaps['Jupiter'].addChild(new LayerMap('Callisto', 17));
    LayerManager.get_layerMaps()['Sun'].addChild(new LayerMap('Saturn', 9));
    LayerManager.get_layerMaps()['Sun'].addChild(new LayerMap('Uranus', 10));
    LayerManager.get_layerMaps()['Sun'].addChild(new LayerMap('Neptune', 11));
    LayerManager.get_layerMaps()['Sun'].addChild(new LayerMap('Pluto', 12));
    LayerManager._addMoons(LayerManager._moonfile);
    LayerManager.get_layerMaps()['Sky'] = new LayerMap('Sky', 0);
    LayerManager.get_layerMaps()['Sun'].open = true;
    LayerManager._allMaps = {};
    LayerManager._addAllMaps(LayerManager.get_layerMaps(), null);
    if (!LayerManager.get_tourLayers()) {
      LayerManager._addIss();
    }
    LayerManager._version++;
    LayerManager.loadTree();
  };
  LayerManager._addIss = function() {
    var layer = new ISSLayer();
    layer.set_name(Language.getLocalizedText(1314, 'ISS Model  (Toshiyuki Takahei)'));
    layer.enabled = Settings.get_active().get_showISSModel();
    LayerManager.get_layerList()[layer.id] = layer;
    layer.set_referenceFrame('ISS');
    LayerManager.get_allMaps()['ISS'].layers.push(layer);
    LayerManager.get_allMaps()['ISS'].open = true;
  };
  LayerManager._addAllMaps = function(maps, parent) {
    var $enum1 = ss.enumerate(ss.keys(maps));
    while ($enum1.moveNext()) {
      var key = $enum1.current;
      var map = maps[key];
      map.frame.parent = parent;
      LayerManager.get_allMaps()[map.get_name()] = map;
      LayerManager._addAllMaps(map.childMaps, map.get_name());
    }
  };
  LayerManager._clearLayers = function() {
    var $enum1 = ss.enumerate(ss.keys(LayerManager.get_layerList()));
    while ($enum1.moveNext()) {
      var key = $enum1.current;
      var layer = LayerManager.get_layerList()[key];
      layer.cleanUp();
    }
    ss.clearKeys(LayerManager.get_layerList());
    ss.clearKeys(LayerManager.get_layerMaps());
  };
  LayerManager.getMoonFile = function(url) {
    LayerManager._webFileMoons = new WebFile(url);
    LayerManager._webFileMoons.onStateChange = LayerManager.moonFileStateChange;
    LayerManager._webFileMoons.send();
  };
  LayerManager.moonFileStateChange = function() {
    if (LayerManager._webFileMoons.get_state() === 2) {
      alert(LayerManager._webFileMoons.get_message());
    }
    else if (LayerManager._webFileMoons.get_state() === 1) {
      LayerManager._moonfile = LayerManager._webFileMoons.getText();
      LayerManager.initLayers();
    }
  };
  LayerManager._addMoons = function(file) {
    var data = file.split('\r\n');
    var first = true;
    var $enum1 = ss.enumerate(data);
    while ($enum1.moveNext()) {
      var line = $enum1.current;
      if (first) {
        first = false;
        continue;
      }
      var parts = line.split('\t');
      if (parts.length > 16) {
        var planet = parts[0];
        var frame = new LayerMap(parts[2], 18);
        frame.frame._systemGenerated = true;
        frame.frame.epoch = parseFloat(parts[1]);
        frame.frame.semiMajorAxis = parseFloat(parts[3]) * 1000;
        frame.frame.referenceFrameType = 1;
        frame.frame.inclination = parseFloat(parts[7]);
        frame.frame.longitudeOfAscendingNode = parseFloat(parts[8]);
        frame.frame.eccentricity = parseFloat(parts[4]);
        frame.frame.meanAnomolyAtEpoch = parseFloat(parts[6]);
        frame.frame.meanDailyMotion = parseFloat(parts[9]);
        frame.frame.argumentOfPeriapsis = parseFloat(parts[5]);
        frame.frame.scale = 1;
        frame.frame.semiMajorAxisUnits = 1;
        frame.frame.meanRadius = parseFloat(parts[16]) * 1000;
        frame.frame.rotationalPeriod = parseFloat(parts[17]);
        frame.frame.showAsPoint = false;
        frame.frame.showOrbitPath = true;
        frame.frame.set_representativeColor(Color.fromArgb(255, 175, 216, 230));
        frame.frame.oblateness = 0;
        LayerManager.get_layerMaps()['Sun'].childMaps[planet].addChild(frame);
      }
    }
  };
  LayerManager.addVoTableLayer = function(table, title) {
    var layer = VoTableLayer.create(table);
    layer.set_name(title);
    layer.set_astronomical(true);
    layer.set_referenceFrame('Sky');
    LayerManager.get_layerList()[layer.id] = layer;
    LayerManager.get_allMaps()['Sky'].layers.push(layer);
    LayerManager.get_allMaps()['Sky'].open = true;
    layer.enabled = true;
    LayerManager._version++;
    LayerManager.loadTree();
    return layer;
  };
  LayerManager.addImageSetLayer = function(imageset, title) {
    var layer = ImageSetLayer.create(imageset);
    layer.doneLoading(null);
    layer.set_name(title);
    layer.set_astronomical(true);
    layer.set_referenceFrame('Sky');
    LayerManager.get_layerList()[layer.id] = layer;
    LayerManager.get_allMaps()['Sky'].layers.push(layer);
    LayerManager.get_allMaps()['Sky'].open = true;
    layer.enabled = true;
    LayerManager._version++;
    LayerManager.loadTree();
    return layer;
  };
  LayerManager.addFitsImageSetLayer = function(layer, title) {
    layer.doneLoading(null);
    layer.set_name(title);
    layer.set_astronomical(true);
    layer.set_referenceFrame('Sky');
    LayerManager.get_layerList()[layer.id] = layer;
    LayerManager.get_allMaps()['Sky'].layers.push(layer);
    LayerManager.get_allMaps()['Sky'].open = true;
    layer.enabled = true;
    LayerManager._version++;
    LayerManager.loadTree();
    return layer;
  };
  LayerManager.getNextFitsName = function() {
    var currentNumber = 0;
    var $enum1 = ss.enumerate(LayerManager.get_allMaps()['Sky'].layers);
    while ($enum1.moveNext()) {
      var layer = $enum1.current;
      if (ss.startsWith(layer.get_name(), 'Fits Image ')) {
        var number = ss.replaceString(layer.get_name(), 'Fits Image ', '');
        try {
          var num = parseInt(number);
          if (num > currentNumber) {
            currentNumber = num;
          }
        }
        catch ($e2) {
        }
      }
    }
    return ss.format('Fits Image {0}', currentNumber + 1);
  };
  LayerManager._closeAllTourLoadedLayers = function() {
    var purgeTargets = [];
    var $enum1 = ss.enumerate(ss.keys(LayerManager.get_layerList()));
    while ($enum1.moveNext()) {
      var key = $enum1.current;
      var layer = LayerManager.get_layerList()[key];
      if (layer.loadedFromTour) {
        purgeTargets.push(layer.id);
      }
    }
    var $enum2 = ss.enumerate(purgeTargets);
    while ($enum2.moveNext()) {
      var guid = $enum2.current;
      LayerManager.deleteLayerByID(guid, true, false);
    }
    var purgeMapsNames = [];
    var $enum3 = ss.enumerate(ss.keys(LayerManager.get_allMaps()));
    while ($enum3.moveNext()) {
      var key = $enum3.current;
      var map = LayerManager.get_allMaps()[key];
      if (map.loadedFromTour && !map.layers.length) {
        purgeMapsNames.push(map.get_name());
      }
    }
    var $enum4 = ss.enumerate(purgeMapsNames);
    while ($enum4.moveNext()) {
      var name = $enum4.current;
      LayerManager.purgeLayerMapDeep(LayerManager.get_allMaps()[name], true);
    }
    LayerManager.set_version(LayerManager.get_version() + 1) - 1;
    LayerManager.loadTree();
  };
  LayerManager.purgeLayerMapDeep = function(target, topLevel) {
    var $enum1 = ss.enumerate(target.layers);
    while ($enum1.moveNext()) {
      var layer = $enum1.current;
      LayerManager.deleteLayerByID(layer.id, false, false);
    }
    target.layers.length = 0;
    var $enum2 = ss.enumerate(ss.keys(target.childMaps));
    while ($enum2.moveNext()) {
      var key = $enum2.current;
      var map = target.childMaps[key];
      LayerManager.purgeLayerMapDeep(map, false);
    }
    ss.clearKeys(target.childMaps);
    if (topLevel) {
      if (!ss.emptyString(target.frame.parent)) {
        if (ss.keyExists(LayerManager.get_allMaps(), target.frame.parent)) {
          delete LayerManager.get_allMaps()[target.frame.parent].childMaps[target.get_name()];
        }
      }
      else {
        if (ss.keyExists(LayerManager.get_layerMaps(), target.get_name())) {
          delete LayerManager.get_layerMaps()[target.get_name()];
        }
      }
    }
    delete LayerManager.get_allMaps()[target.get_name()];
    LayerManager._version++;
  };
  LayerManager._cleanAllTourLoadedLayers = function() {
    var $enum1 = ss.enumerate(ss.keys(LayerManager.get_layerList()));
    while ($enum1.moveNext()) {
      var key = $enum1.current;
      var layer = LayerManager.get_layerList()[key];
      if (layer.loadedFromTour) {
        layer.loadedFromTour = false;
      }
    }
  };
  LayerManager.mergeToursLayers = function() {
    LayerManager._tourLayers = false;
    var OverWrite = false;
    var CollisionChecked = false;
    var $enum1 = ss.enumerate(ss.keys(LayerManager._allMapsTours));
    while ($enum1.moveNext()) {
      var key = $enum1.current;
      var map = LayerManager._allMapsTours[key];
      if (!ss.keyExists(LayerManager._allMaps, map.get_name())) {
        var newMap = new LayerMap(map.get_name(), 18);
        newMap.frame = map.frame;
        newMap.loadedFromTour = true;
        LayerManager.get_allMaps()[newMap.get_name()] = newMap;
      }
    }
    LayerManager.connectAllChildren();
    var $enum2 = ss.enumerate(ss.keys(LayerManager._layerListTours));
    while ($enum2.moveNext()) {
      var key = $enum2.current;
      var layer = LayerManager._layerListTours[key];
      if (ss.keyExists(LayerManager.get_layerList(), layer.id)) {
        if (!CollisionChecked) {
          if (true) {
            OverWrite = true;
          }
          else {
            OverWrite = false;
          }
          CollisionChecked = true;
        }
        if (OverWrite) {
          LayerManager.deleteLayerByID(layer.id, true, false);
        }
      }
      if (!ss.keyExists(LayerManager.get_layerList(), layer.id)) {
        if (ss.keyExists(LayerManager.get_allMaps(), layer.get_referenceFrame())) {
          LayerManager.get_layerList()[layer.id] = layer;
          LayerManager.get_allMaps()[layer.get_referenceFrame()].layers.push(layer);
        }
      }
      else {
        layer.cleanUp();
      }
    }
    ss.clearKeys(LayerManager._layerListTours);
    ss.clearKeys(LayerManager._allMapsTours);
    ss.clearKeys(LayerManager._layerMapsTours);
    LayerManager.loadTree();
  };
  LayerManager.connectAllChildren = function() {
    var $enum1 = ss.enumerate(ss.keys(LayerManager.get_allMaps()));
    while ($enum1.moveNext()) {
      var key = $enum1.current;
      var map = LayerManager.get_allMaps()[key];
      if (ss.emptyString(map.frame.parent) && !ss.keyExists(LayerManager.get_layerMaps(), map.frame.name)) {
        LayerManager.get_layerMaps()[map.get_name()] = map;
      }
      else if (!ss.emptyString(map.frame.parent) && ss.keyExists(LayerManager.get_allMaps(), map.frame.parent)) {
        if (!ss.keyExists(LayerManager.get_allMaps()[map.frame.parent].childMaps, map.frame.name)) {
          LayerManager.get_allMaps()[map.frame.parent].childMaps[map.frame.name] = map;
          map.parent = LayerManager.get_allMaps()[map.frame.parent];
        }
      }
    }
  };
  LayerManager.deleteLayerByID = function(ID, removeFromParent, updateTree) {
    if (ss.keyExists(LayerManager.get_layerList(), ID)) {
      var layer = LayerManager.get_layerList()[ID];
      layer.cleanUp();
      if (removeFromParent) {
        ss.remove(LayerManager.get_allMaps()[layer.get_referenceFrame()].layers, layer);
      }
      delete LayerManager.get_layerList()[ID];
      LayerManager._version++;
      if (updateTree) {
        LayerManager.loadTree();
      }
      return true;
    }
    else {
      return false;
    }
  };
  LayerManager._getFrameTarget = function(renderContext, TrackingFrame) {
    var target = new FrameTarget();
    var targetPoint = Vector3d.get_empty();
    target.target = Vector3d.get_empty();
    target.matrix = Matrix3d.get_identity();
    if (!ss.keyExists(LayerManager.get_allMaps(), TrackingFrame)) {
      return target;
    }
    var mapList = [];
    var current = LayerManager.get_allMaps()[TrackingFrame];
    mapList.push(current);
    while (current.frame.reference === 18) {
      current = current.parent;
      mapList.splice(0, 0, current);
    }
    var matOld = renderContext.get_world().clone();
    var matOldNonRotating = renderContext.get_worldBaseNonRotating();
    var matOldBase = renderContext.get_worldBase();
    var oldNominalRadius = renderContext.get_nominalRadius();
    var $enum1 = ss.enumerate(mapList);
    while ($enum1.moveNext()) {
      var map = $enum1.current;
      if (map.frame.reference !== 18 && map.frame.reference !== 20) {
        Planets.setupPlanetMatrix(renderContext, Enums.parse('SolarSystemObjects', map.frame.name), Vector3d.get_empty(), false);
      }
      else {
        map.computeFrame(renderContext);
        if (map.frame.useRotatingParentFrame()) {
          renderContext.set_world(Matrix3d.multiplyMatrix(map.frame.worldMatrix, renderContext.get_world()));
        }
        else {
          renderContext.set_world(Matrix3d.multiplyMatrix(map.frame.worldMatrix, renderContext.get_worldBaseNonRotating()));
        }
        if (map.frame.referenceFrameType === 3) {
          renderContext.set_worldBaseNonRotating(renderContext.get_world().clone());
        }
        renderContext.set_nominalRadius(map.frame.meanRadius);
      }
    }
    targetPoint = renderContext.get_world().transform(targetPoint);
    var lookAt = renderContext.get_world().transform(Vector3d.create(0, 0, 1));
    var lookUp = Vector3d.subtractVectors(renderContext.get_world().transform(Vector3d.create(0, 1, 0)), targetPoint);
    lookUp.normalize();
    target.matrix = Matrix3d.lookAtLH(new Vector3d(), Vector3d.subtractVectors(lookAt, targetPoint), lookUp);
    renderContext.set_nominalRadius(oldNominalRadius);
    renderContext.set_world(matOld);
    renderContext.set_worldBaseNonRotating(matOldNonRotating);
    renderContext.set_worldBase(matOldBase);
    target.target = targetPoint;
    return target;
  };
  LayerManager._prepTourLayers = function() {
    if (TourPlayer.get_playing()) {
      var player = WWTControl.singleton.uiController;
      if (player != null) {
        var tour = player.get_tour();
        if (tour.get_currentTourStop() != null) {
          player.updateTweenPosition(-1);
          if (!tour.get_currentTourStop().get_keyFramed()) {
            tour.get_currentTourStop()._updateLayerOpacity();
            var $enum1 = ss.enumerate(ss.keys(tour.get_currentTourStop().layers));
            while ($enum1.moveNext()) {
              var key = $enum1.current;
              var info = tour.get_currentTourStop().layers[key];
              if (ss.keyExists(LayerManager.get_layerList(), info.id)) {
                LayerManager.get_layerList()[info.id].set_opacity(info.frameOpacity);
                LayerManager.get_layerList()[info.id].setParams(info.frameParams);
              }
            }
          }
        }
      }
    }
  };
  LayerManager._draw = function(renderContext, opacity, astronomical, referenceFrame, nested, cosmos) {
    if (!ss.keyExists(LayerManager.get_allMaps(), referenceFrame)) {
      return;
    }
    var thisMap = LayerManager.get_allMaps()[referenceFrame];
    if (!thisMap.enabled || (!ss.keyCount(thisMap.childMaps) && !thisMap.layers.length && !(thisMap.frame.showAsPoint || thisMap.frame.showOrbitPath))) {
      return;
    }
    if (TourPlayer.get_playing()) {
      var player = WWTControl.singleton.uiController;
      if (player != null) {
        var tour = player.get_tour();
        if (tour.get_currentTourStop() != null) {
          player.updateTweenPosition(-1);
          tour.get_currentTourStop()._updateLayerOpacity();
          var $enum1 = ss.enumerate(ss.keys(tour.get_currentTourStop().layers));
          while ($enum1.moveNext()) {
            var key = $enum1.current;
            var info = tour.get_currentTourStop().layers[key];
            if (ss.keyExists(LayerManager.get_layerList(), info.id)) {
              LayerManager.get_layerList()[info.id].set_opacity(info.frameOpacity);
              LayerManager.get_layerList()[info.id].setParams(info.frameParams);
            }
          }
        }
      }
    }
    var matOld = renderContext.get_world();
    var matOldNonRotating = renderContext.get_worldBaseNonRotating();
    var oldNominalRadius = renderContext.get_nominalRadius();
    if ((thisMap.frame.reference === 18 | thisMap.frame.reference === 18) === 1) {
      thisMap.computeFrame(renderContext);
      if (thisMap.frame.referenceFrameType !== 1 && thisMap.frame.referenceFrameType !== 2) {
        renderContext.set_world(Matrix3d.multiplyMatrix(thisMap.frame.worldMatrix, renderContext.get_world()));
      }
      else {
        renderContext.set_world(Matrix3d.multiplyMatrix(thisMap.frame.worldMatrix, renderContext.get_worldBaseNonRotating()));
      }
      renderContext.set_nominalRadius(thisMap.frame.meanRadius);
    }
    if (thisMap.frame.showAsPoint) {
    }
    for (var pass = 0; pass < 2; pass++) {
      var $enum2 = ss.enumerate(LayerManager.get_allMaps()[referenceFrame].layers);
      while ($enum2.moveNext()) {
        var layer = $enum2.current;
        if ((!pass && ss.canCast(layer, ImageSetLayer)) || (pass === 1 && !(ss.canCast(layer, ImageSetLayer)))) {
          var skipLayer = false;
          if (!pass) {
            skipLayer = !astronomical && (layer).get_overrideDefaultLayer();
          }
          if (layer.enabled && !skipLayer) {
            var layerStart = SpaceTimeController.utcToJulian(layer.get_startTime());
            var layerEnd = SpaceTimeController.utcToJulian(layer.get_endTime());
            var fadeIn = SpaceTimeController.utcToJulian(layer.get_startTime()) - ((layer.get_fadeType() === 1 || layer.get_fadeType() === 3) ? (layer.get_fadeSpan() / 864000000) : 0);
            var fadeOut = SpaceTimeController.utcToJulian(layer.get_endTime()) + ((layer.get_fadeType() === 2 || layer.get_fadeType() === 3) ? (layer.get_fadeSpan() / 864000000) : 0);
            if (SpaceTimeController.get_jNow() > fadeIn && SpaceTimeController.get_jNow() < fadeOut) {
              var fadeOpacity = 1;
              if (SpaceTimeController.get_jNow() < layerStart) {
                fadeOpacity = ((SpaceTimeController.get_jNow() - fadeIn) / (layer.get_fadeSpan() / 864000000));
              }
              if (SpaceTimeController.get_jNow() > layerEnd) {
                fadeOpacity = ((fadeOut - SpaceTimeController.get_jNow()) / (layer.get_fadeSpan() / 864000000));
              }
              layer.set_astronomical(astronomical);
              if (ss.canCast(layer, SpreadSheetLayer)) {
                var tsl = ss.safeCast(layer, SpreadSheetLayer);
                tsl.draw(renderContext, opacity * fadeOpacity, cosmos);
              }
              else {
                layer.draw(renderContext, opacity * fadeOpacity, cosmos);
              }
            }
          }
        }
      }
    }
    if (nested) {
      var $enum3 = ss.enumerate(ss.keys(LayerManager.get_allMaps()[referenceFrame].childMaps));
      while ($enum3.moveNext()) {
        var key = $enum3.current;
        var map = LayerManager.get_allMaps()[referenceFrame].childMaps[key];
        if (!(ss.canCast(map, LayerMap))) {
          continue;
        }
        if (map.enabled && map.frame.showOrbitPath && Settings.get_active().get_solarSystemOrbits() && Settings.get_active().get_solarSystemMinorOrbits()) {
          if (map.frame.referenceFrameType === 1) {
            if (map.frame.get_orbit() == null) {
              map.frame.set_orbit(new Orbit(map.frame.get_elements(), 360, map.frame.get_representativeColor(), 1, map.parent.frame.meanRadius));
            }
            var matSaved = renderContext.get_world();
            renderContext.set_world(Matrix3d.multiplyMatrix(thisMap.frame.worldMatrix, renderContext.get_worldBaseNonRotating()));
            map.frame.get_orbit().draw3D(renderContext, 1 * 0.5, Vector3d.create(0, 0, 0));
            renderContext.set_world(matSaved);
          }
          else if (map.frame.referenceFrameType === 2) {
          }
        }
        if ((map.frame.reference === 18 || map.frame.reference === 19)) {
          LayerManager._draw(renderContext, opacity, astronomical, map.get_name(), nested, cosmos);
        }
      }
    }
    renderContext.set_nominalRadius(oldNominalRadius);
    renderContext.set_world(matOld);
    renderContext.set_worldBaseNonRotating(matOldNonRotating);
  };
  LayerManager._getVisibleLayerList = function(previous) {
    var list = {};
    var $enum1 = ss.enumerate(ss.keys(LayerManager.get_layerList()));
    while ($enum1.moveNext()) {
      var key = $enum1.current;
      var layer = LayerManager.get_layerList()[key];
      if (layer.enabled) {
        var info = new LayerInfo();
        info.startOpacity = info.endOpacity = layer.get_opacity();
        info.id = layer.id;
        info.startParams = layer.getParams();
        if (ss.keyExists(previous, info.id)) {
          info.endOpacity = previous[info.id].endOpacity;
          info.endParams = previous[info.id].endParams;
        }
        else {
          info.endParams = layer.getParams();
        }
        list[layer.id] = info;
      }
    }
    return list;
  };
  LayerManager.setVisibleLayerList = function(list) {
    var $enum1 = ss.enumerate(ss.keys(LayerManager.get_layerList()));
    while ($enum1.moveNext()) {
      var key = $enum1.current;
      var layer = LayerManager.get_layerList()[key];
      layer.enabled = ss.keyExists(list, layer.id);
      try {
        if (layer.enabled) {
          layer.set_opacity(list[layer.id].frameOpacity);
          layer.setParams(list[layer.id].frameParams);
        }
      }
      catch ($e2) {
      }
    }
  };
  LayerManager._preDraw = function(renderContext, opacity, astronomical, referenceFrame, nested) {
    if (!ss.keyExists(LayerManager.get_allMaps(), referenceFrame)) {
      return;
    }
    var thisMap = LayerManager.get_allMaps()[referenceFrame];
    if (!ss.keyCount(thisMap.childMaps) && !thisMap.layers.length) {
      return;
    }
    if (TourPlayer.get_playing()) {
      var player = ss.safeCast(WWTControl.singleton.uiController, TourPlayer);
      if (player != null) {
        var tour = player.get_tour();
        if (tour.get_currentTourStop() != null) {
          player.updateTweenPosition(-1);
          tour.get_currentTourStop()._updateLayerOpacity();
          var $enum1 = ss.enumerate(ss.keys(tour.get_currentTourStop().layers));
          while ($enum1.moveNext()) {
            var key = $enum1.current;
            var info = tour.get_currentTourStop().layers[key];
            if (ss.keyExists(LayerManager.get_layerList(), info.id)) {
              LayerManager.get_layerList()[info.id].set_opacity(info.frameOpacity);
              LayerManager.get_layerList()[info.id].setParams(info.frameParams);
            }
          }
        }
      }
    }
    var matOld = renderContext.get_world();
    var matOldNonRotating = renderContext.get_worldBaseNonRotating();
    var oldNominalRadius = renderContext.get_nominalRadius();
    if (thisMap.frame.reference === 18) {
      thisMap.computeFrame(renderContext);
      if (thisMap.frame.referenceFrameType !== 1) {
        renderContext.set_world(Matrix3d.multiplyMatrix(thisMap.frame.worldMatrix, renderContext.get_world()));
      }
      else {
        renderContext.set_world(Matrix3d.multiplyMatrix(thisMap.frame.worldMatrix, renderContext.get_worldBaseNonRotating()));
      }
      renderContext.set_nominalRadius(thisMap.frame.meanRadius);
    }
    for (var pass = 0; pass < 2; pass++) {
      var $enum2 = ss.enumerate(LayerManager.get_allMaps()[referenceFrame].layers);
      while ($enum2.moveNext()) {
        var layer = $enum2.current;
        if ((!pass && ss.canCast(layer, ImageSetLayer)) || (pass === 1 && !(ss.canCast(layer, ImageSetLayer)))) {
          if (layer.enabled) {
            var layerStart = SpaceTimeController.utcToJulian(layer.get_startTime());
            var layerEnd = SpaceTimeController.utcToJulian(layer.get_endTime());
            var fadeIn = SpaceTimeController.utcToJulian(layer.get_startTime()) - ((layer.get_fadeType() === 1 || layer.get_fadeType() === 3) ? (layer.get_fadeSpan() / 864000000) : 0);
            var fadeOut = SpaceTimeController.utcToJulian(layer.get_endTime()) + ((layer.get_fadeType() === 2 || layer.get_fadeType() === 3) ? (layer.get_fadeSpan() / 864000000) : 0);
            if (SpaceTimeController.get_jNow() > fadeIn && SpaceTimeController.get_jNow() < fadeOut) {
              var fadeOpacity = 1;
              if (SpaceTimeController.get_jNow() < layerStart) {
                fadeOpacity = ((SpaceTimeController.get_jNow() - fadeIn) / (layer.get_fadeSpan() / 864000000));
              }
              if (SpaceTimeController.get_jNow() > layerEnd) {
                fadeOpacity = ((fadeOut - SpaceTimeController.get_jNow()) / (layer.get_fadeSpan() / 864000000));
              }
              if (!thisMap.frame.reference) {
                layer.set_astronomical(true);
              }
              layer.preDraw(renderContext, opacity * fadeOpacity);
            }
          }
        }
      }
    }
    if (nested) {
      var $enum3 = ss.enumerate(ss.keys(LayerManager.get_allMaps()[referenceFrame].childMaps));
      while ($enum3.moveNext()) {
        var key = $enum3.current;
        var map = LayerManager.get_allMaps()[referenceFrame].childMaps[key];
        if ((map.frame.reference === 18 || map.frame.reference === 19)) {
          LayerManager._preDraw(renderContext, opacity, astronomical, map.get_name(), nested);
        }
      }
    }
    renderContext.set_nominalRadius(oldNominalRadius);
    renderContext.set_world(matOld);
    renderContext.set_worldBaseNonRotating(matOldNonRotating);
  };
  LayerManager.add = function(layer, updateTree) {
    if (!ss.keyExists(LayerManager.get_layerList(), layer.id)) {
      if (ss.keyExists(LayerManager.get_allMaps(), layer.get_referenceFrame())) {
        LayerManager.get_layerList()[layer.id] = layer;
        LayerManager.get_allMaps()[layer.get_referenceFrame()].layers.push(layer);
        LayerManager._version++;
        if (updateTree) {
          LayerManager.loadTree();
        }
      }
    }
  };
  LayerManager.layerSelectionChanged = function(selected) {
    LayerManager._selectedLayer = selected;
    if (LayerManager._selectedLayer != null) {
      if (ss.canCast(LayerManager._selectedLayer, LayerMap)) {
        var map = ss.safeCast(LayerManager._selectedLayer, LayerMap);
        if (map != null) {
          LayerManager.set_currentMap(map.get_name());
        }
      }
      else {
        var layer = ss.safeCast(LayerManager._selectedLayer, ImageSetLayer);
        if (layer != null && ss.canCast(layer.get_imageSet().get_wcsImage(), FitsImage)) {
          WWTControl.scriptInterface.setTimeSlider('left', '0');
          WWTControl.scriptInterface.setTimeSlider('right', (layer.getFitsImage().depth - 1).toString());
          WWTControl.scriptInterface.setTimeSlider('title', 'Velocity');
          return;
        }
      }
    }
    WWTControl.scriptInterface.setTimeSlider('left', '');
    WWTControl.scriptInterface.setTimeSlider('right', '');
    WWTControl.scriptInterface.setTimeSlider('title', Language.getLocalizedText(667, 'Time Scrubber'));
  };
  LayerManager.setTimeSliderValue = function(pos) {
    var layer = ss.safeCast(LayerManager._selectedLayer, ImageSetLayer);
    if (layer != null && ss.canCast(layer.get_imageSet().get_wcsImage(), FitsImage)) {
      Histogram.updateImage(layer, pos);
      WWTControl.scriptInterface.setTimeSlider('title', layer.getFitsImage().getZDescription());
    }
  };
  LayerManager.showLayerMenu = function(selected, x, y) {
    LayerManager._lastMenuClick = Vector2d.create(x, y);
    LayerManager._selectedLayer = selected;
    if (ss.canCast(selected, LayerMap)) {
      LayerManager.set_currentMap((selected).get_name());
    }
    else if (ss.canCast(selected, Layer)) {
      LayerManager.set_currentMap((selected).get_referenceFrame());
    }
    if (((ss.canCast(selected, Layer)) && !(ss.canCast(selected, SkyOverlays)))) {
      var selectedLayer = selected;
      LayerManager._contextMenu = new ContextMenuStrip();
      var renameMenu = ToolStripMenuItem.create(Language.getLocalizedText(225, 'Rename'));
      var Expand = ToolStripMenuItem.create(Language.getLocalizedText(981, 'Expand'));
      var Collapse = ToolStripMenuItem.create(Language.getLocalizedText(982, 'Collapse'));
      var copyMenu = ToolStripMenuItem.create(Language.getLocalizedText(428, 'Copy'));
      var deleteMenu = ToolStripMenuItem.create(Language.getLocalizedText(167, 'Delete'));
      var saveMenu = ToolStripMenuItem.create(Language.getLocalizedText(960, 'Save...'));
      var publishMenu = ToolStripMenuItem.create(Language.getLocalizedText(983, 'Publish to Community...'));
      var colorMenu = ToolStripMenuItem.create(Language.getLocalizedText(458, 'Color/Opacity'));
      var opacityMenu = ToolStripMenuItem.create(Language.getLocalizedText(305, 'Opacity'));
      var propertiesMenu = ToolStripMenuItem.create(Language.getLocalizedText(20, 'Properties'));
      var scaleMenu = ToolStripMenuItem.create(Language.getLocalizedText(1291, 'Scale/Histogram'));
      var lifeTimeMenu = ToolStripMenuItem.create(Language.getLocalizedText(683, 'Lifetime'));
      var spacer1 = new ToolStripSeparator();
      var top = ToolStripMenuItem.create(Language.getLocalizedText(684, 'Move to Top'));
      var up = ToolStripMenuItem.create(Language.getLocalizedText(685, 'Move Up'));
      var down = ToolStripMenuItem.create(Language.getLocalizedText(686, 'Move Down'));
      var bottom = ToolStripMenuItem.create(Language.getLocalizedText(687, 'Move to Bottom'));
      var showViewer = ToolStripMenuItem.create(Language.getLocalizedText(957, 'VO Table Viewer'));
      var spacer2 = new ToolStripSeparator();
      var defaultImageset = ToolStripMenuItem.create(Language.getLocalizedText(1294, 'Background Image Set'));
      top.click = LayerManager._top_Click;
      up.click = LayerManager._up_Click;
      down.click = LayerManager._down_Click;
      bottom.click = LayerManager._bottom_Click;
      saveMenu.click = LayerManager._saveMenu_Click;
      publishMenu.click = LayerManager._publishMenu_Click;
      Expand.click = LayerManager._expand_Click;
      Collapse.click = LayerManager._collapse_Click;
      copyMenu.click = LayerManager._copyMenu_Click;
      colorMenu.click = LayerManager._colorMenu_Click;
      deleteMenu.click = LayerManager._deleteMenu_Click;
      renameMenu.click = LayerManager._renameMenu_Click;
      propertiesMenu.click = LayerManager._propertiesMenu_Click;
      scaleMenu.click = LayerManager.scaleMenu_click;
      defaultImageset.click = LayerManager._defaultImageset_Click;
      opacityMenu.click = LayerManager._opacityMenu_Click;
      lifeTimeMenu.click = LayerManager._lifeTimeMenu_Click;
      showViewer.click = LayerManager._showViewer_Click;
      LayerManager._contextMenu.items.push(renameMenu);
      if (!selectedLayer.get_opened() && selectedLayer.getPrimaryUI() != null && selectedLayer.getPrimaryUI().get_hasTreeViewNodes()) {
        LayerManager._contextMenu.items.push(Expand);
      }
      if (selectedLayer.get_opened()) {
        LayerManager._contextMenu.items.push(Collapse);
      }
      if (selectedLayer.canCopyToClipboard()) {
      }
      LayerManager._contextMenu.items.push(deleteMenu);
      LayerManager._contextMenu.items.push(spacer2);
      LayerManager._contextMenu.items.push(colorMenu);
      if (ss.canCast(selected, ImageSetLayer)) {
        LayerManager._contextMenu.items.push(defaultImageset);
        var isl = ss.safeCast(selected, ImageSetLayer);
        defaultImageset.checked = isl.get_overrideDefaultLayer();
      }
      if (ss.canCast(selected, SpreadSheetLayer) || ss.canCast(selected, GreatCirlceRouteLayer)) {
        LayerManager._contextMenu.items.push(propertiesMenu);
      }
      if (ss.canCast(selected, VoTableLayer)) {
        LayerManager._contextMenu.items.push(showViewer);
      }
      if (ss.canCast(selected, ImageSetLayer)) {
        var isl = ss.safeCast(selected, ImageSetLayer);
        LayerManager._contextMenu.items.push(scaleMenu);
      }
      if (LayerManager.get_allMaps()[selectedLayer.get_referenceFrame()].layers.length > 1) {
        LayerManager._contextMenu.items.push(spacer1);
        LayerManager._contextMenu.items.push(top);
        LayerManager._contextMenu.items.push(up);
        LayerManager._contextMenu.items.push(down);
        LayerManager._contextMenu.items.push(bottom);
      }
      LayerManager._contextMenu._show(Vector2d.create(x, y));
    }
    else if (ss.canCast(selected, LayerMap)) {
      var map = ss.safeCast(selected, LayerMap);
      var sandbox = map.frame.reference.toString() === 'Sandbox';
      var Dome = map.frame.name === 'Dome';
      var Sky = map.frame.name === 'Sky';
      if (Dome) {
        return;
      }
      LayerManager._contextMenu = new ContextMenuStrip();
      var trackFrame = ToolStripMenuItem.create(Language.getLocalizedText(1298, 'Track this frame'));
      var goTo = ToolStripMenuItem.create(Language.getLocalizedText(1299, 'Fly Here'));
      var showOrbit = ToolStripMenuItem.create('Show Orbit');
      var newMenu = ToolStripMenuItem.create(Language.getLocalizedText(674, 'New Reference Frame'));
      var newLayerGroupMenu = ToolStripMenuItem.create(Language.getLocalizedText(675, 'New Layer Group'));
      var addMenu = ToolStripMenuItem.create(Language.getLocalizedText(166, 'Add'));
      var newLight = ToolStripMenuItem.create('Add Light');
      var addFeedMenu = ToolStripMenuItem.create(Language.getLocalizedText(956, 'Add OData/table feed as Layer'));
      var addWmsLayer = ToolStripMenuItem.create(Language.getLocalizedText(987, 'New WMS Layer'));
      var addGirdLayer = ToolStripMenuItem.create(Language.getLocalizedText(1300, 'New Lat/Lng Grid'));
      var addGreatCircle = ToolStripMenuItem.create(Language.getLocalizedText(988, 'New Great Circle'));
      var importTLE = ToolStripMenuItem.create(Language.getLocalizedText(989, 'Import Orbital Elements'));
      var addMpc = ToolStripMenuItem.create(Language.getLocalizedText(1301, 'Add Minor Planet'));
      var deleteFrameMenu = ToolStripMenuItem.create(Language.getLocalizedText(167, 'Delete'));
      var pasteMenu = ToolStripMenuItem.create(Language.getLocalizedText(425, 'Paste'));
      var addToTimeline = ToolStripMenuItem.create(Language.getLocalizedText(1290, 'Add to Timeline'));
      var addKeyframe = ToolStripMenuItem.create(Language.getLocalizedText(1280, 'Add Keyframe'));
      var popertiesMenu = ToolStripMenuItem.create(Language.getLocalizedText(20, 'Properties'));
      var saveMenu = ToolStripMenuItem.create(Language.getLocalizedText(990, 'Save Layers'));
      var publishLayers = ToolStripMenuItem.create(Language.getLocalizedText(991, 'Publish Layers to Community'));
      var spacer1 = new ToolStripSeparator();
      var spacer0 = new ToolStripSeparator();
      var spacer2 = new ToolStripSeparator();
      var asReferenceFrame = ToolStripMenuItem.create('As Reference Frame');
      var asOrbitalLines = ToolStripMenuItem.create('As Orbital Line');
      trackFrame.click = LayerManager._trackFrame_Click;
      goTo.click = LayerManager._goTo_Click;
      asReferenceFrame.click = LayerManager._addMpc_Click;
      asOrbitalLines.click = LayerManager._asOrbitalLines_Click;
      addMpc.dropDownItems.push(asReferenceFrame);
      addMpc.dropDownItems.push(asOrbitalLines);
      addMenu.click = LayerManager._addMenu_Click;
      newLayerGroupMenu.click = LayerManager._newLayerGroupMenu_Click;
      pasteMenu.click = LayerManager._pasteLayer_Click;
      newMenu.click = LayerManager._newMenu_Click;
      deleteFrameMenu.click = LayerManager._deleteFrameMenu_Click;
      popertiesMenu.click = LayerManager._framePropertiesMenu_Click;
      addGreatCircle.click = LayerManager._addGreatCircle_Click;
      addGirdLayer.click = LayerManager._addGirdLayer_Click;
      var convertToOrbit = ToolStripMenuItem.create('Extract Orbit Layer');
      if (map.frame.reference !== 19) {
        if ((WWTControl.singleton.get_solarSystemMode() | WWTControl.singleton.sandboxMode) === 1) {
          var spacerNeeded = false;
          if (map.frame.reference !== 18 && !WWTControl.singleton.sandboxMode) {
            if (!Sky) {
            }
            try {
              var name = map.frame.reference.toString();
              if (name !== 'Sandbox') {
                var ssObj = Enums.parse('SolarSystemObjects', name);
                var id = ssObj;
                var bit = Math.pow(2, id);
                showOrbit.checked = !!(Settings.get_active().get_planetOrbitsFilter() & bit);
                showOrbit.click = LayerManager._showOrbitPlanet_Click;
                showOrbit.tag = bit.toString();
              }
            }
            catch ($e1) {
            }
          }
          else {
            if (!sandbox && !Sky) {
              LayerManager._contextMenu.items.push(trackFrame);
              spacerNeeded = true;
            }
            showOrbit.checked = map.frame.showOrbitPath;
            showOrbit.click = LayerManager._showOrbit_Click;
          }
          if (spacerNeeded) {
            LayerManager._contextMenu.items.push(spacer2);
          }
          if (!Sky && !sandbox) {
            LayerManager._contextMenu.items.push(showOrbit);
            LayerManager._contextMenu.items.push(spacer0);
          }
          if (map.frame.reference.toString() === 'Sandbox') {
            LayerManager._contextMenu.items.push(newLight);
          }
        }
        if (!Sky) {
          LayerManager._contextMenu.items.push(newMenu);
        }
      }
      if (!Sky) {
        LayerManager._contextMenu.items.push(addGreatCircle);
        LayerManager._contextMenu.items.push(addGirdLayer);
      }
      if ((map.frame.reference !== 19 && map.frame.name === 'Sun') || (map.frame.reference === 19 && map.parent != null && map.parent.frame.name === 'Sun')) {
        LayerManager._contextMenu.items.push(addMpc);
      }
      if (map.frame.reference === 18 && map.frame.referenceFrameType === 1 && map.parent != null && map.parent.frame.name === 'Sun') {
      }
      if (!Sky) {
      }
      LayerManager._contextMenu.items.push(pasteMenu);
      if (map.frame.reference === 19) {
        LayerManager._contextMenu.items.push(deleteFrameMenu);
      }
      if (map.frame.reference === 18) {
        LayerManager._contextMenu.items.push(deleteFrameMenu);
        LayerManager._contextMenu.items.push(popertiesMenu);
      }
      LayerManager._contextMenu.items.push(spacer1);
      LayerManager._contextMenu._show(Vector2d.create(x, y));
    }
  };
  LayerManager._publishMenu_Click = function(sender, e) {
  };
  LayerManager._addGirdLayer_Click = function(sender, e) {
    var layer = new GridLayer();
    layer.enabled = true;
    layer.set_name('Lat-Lng Grid');
    LayerManager.get_layerList()[layer.id] = layer;
    layer.set_referenceFrame(LayerManager._currentMap);
    LayerManager.get_allMaps()[LayerManager._currentMap].layers.push(layer);
    LayerManager.get_allMaps()[LayerManager._currentMap].open = true;
    LayerManager._version++;
    LayerManager.loadTree();
  };
  LayerManager._trackFrame_Click = function(sender, e) {
    var target = LayerManager._selectedLayer;
    WWTControl.singleton.renderContext.set_solarSystemTrack(20);
    WWTControl.singleton.renderContext.set_trackingFrame(target.get_name());
    WWTControl.singleton.renderContext.viewCamera.zoom = WWTControl.singleton.renderContext.targetCamera.zoom = 1E-09;
  };
  LayerManager._goTo_Click = function(sender, e) {
  };
  LayerManager._saveMenu_Click = function(sender, e) {
  };
  LayerManager._expand_Click = function(sender, e) {
  };
  LayerManager._collapse_Click = function(sender, e) {
  };
  LayerManager._copyMenu_Click = function(sender, e) {
    if (LayerManager._selectedLayer != null && ss.canCast(LayerManager._selectedLayer, Layer)) {
      var node = LayerManager._selectedLayer;
      node.copyToClipboard();
    }
  };
  LayerManager._newLayerGroupMenu_Click = function(sender, e) {
  };
  LayerManager._importTLEFile = function(filename) {
  };
  LayerManager._makeLayerGroupNow = function(name) {
    var target = LayerManager._selectedLayer;
    LayerManager._makeLayerGroup(name, target);
  };
  LayerManager._makeLayerGroup = function(name, target) {
    var frame = new ReferenceFrame();
    frame.name = name;
    frame.reference = 19;
    var newMap = new LayerMap(frame.name, 19);
    newMap.frame = frame;
    newMap.frame._systemGenerated = false;
    target.addChild(newMap);
    newMap.frame.parent = target.get_name();
    LayerManager.get_allMaps()[frame.name] = newMap;
    LayerManager._version++;
  };
  LayerManager._lifeTimeMenu_Click = function(sender, e) {
  };
  LayerManager._deleteFrameMenu_Click = function(sender, e) {
  };
  LayerManager._framePropertiesMenu_Click = function(sender, e) {
    var target = LayerManager._selectedLayer;
    LayerManager.get_referenceFramePropsDialog().show(target.frame, e);
  };
  LayerManager._newMenu_Click = function(sender, e) {
    var frame = new ReferenceFrame();
    LayerManager.get_frameWizardDialog().show(frame, e);
  };
  LayerManager.referenceFrameWizardFinished = function(frame) {
    var target = LayerManager._selectedLayer;
    var newMap = new LayerMap(frame.name, 18);
    if (!ss.keyExists(LayerManager.get_allMaps(), frame.name)) {
      newMap.frame = frame;
      target.addChild(newMap);
      newMap.frame.parent = target.get_name();
      LayerManager.get_allMaps()[frame.name] = newMap;
      LayerManager._version++;
      LayerManager.loadTree();
    }
  };
  LayerManager.pasteFromTle = function(lines, frame) {
    var line1 = '';
    var line2 = '';
    for (var i = 0; i < lines.length; i++) {
      lines[i] = ss.trim(lines[i]);
      if (lines[i].length === 69 && ReferenceFrame.isTLECheckSumGood(lines[i])) {
        if (!line1.length && lines[i].substring(0, 1) === '1') {
          line1 = lines[i];
        }
        if (!line2.length && lines[i].substring(0, 1) === '2') {
          line2 = lines[i];
        }
      }
    }
    if (line1.length === 69 && line2.length === 69) {
      frame.fromTLE(line1, line2, 398600441800000);
      return true;
    }
    return false;
  };
  LayerManager._opacityMenu_Click = function(sender, e) {
  };
  LayerManager._defaultImageset_Click = function(sender, e) {
    var isl = ss.safeCast(LayerManager._selectedLayer, ImageSetLayer);
    isl.set_overrideDefaultLayer(!isl.get_overrideDefaultLayer());
  };
  LayerManager._propertiesMenu_Click = function(sender, e) {
    if (ss.canCast(LayerManager._selectedLayer, SpreadSheetLayer)) {
      var target = LayerManager._selectedLayer;
      LayerManager.get_dataVizWizardDialog().show(target, e);
    }
    if (ss.canCast(LayerManager._selectedLayer, GreatCirlceRouteLayer)) {
      LayerManager.get_greatCircleDlg().show(LayerManager._selectedLayer, new ss.EventArgs());
    }
  };
  LayerManager._renameMenu_Click = function(sender, e) {
    var layer = LayerManager._selectedLayer;
    var input = new SimpleInput(Language.getLocalizedText(225, 'Rename'), Language.getLocalizedText(228, 'New Name'), layer.get_name(), 32);
    input.show(LayerManager._lastMenuClick, function() {
      if (!ss.emptyString(input.text)) {
        layer.set_name(input.text);
        LayerManager._version++;
        LayerManager.loadTree();
      }
    });
  };
  LayerManager._colorMenu_Click = function(sender, e) {
    var layer = LayerManager._selectedLayer;
    var picker = new ColorPicker();
    if (layer.get_color() != null) {
      picker.color = layer.get_color();
    }
    picker.callBack = function() {
      layer.set_color(picker.color);
    };
    picker.show(e);
  };
  LayerManager._addMenu_Click = function(sender, e) {
  };
  LayerManager._deleteMenu_Click = function(sender, e) {
    LayerManager._deleteSelectedLayer();
  };
  LayerManager._deleteSelectedLayer = function() {
    if (LayerManager._selectedLayer != null && ss.canCast(LayerManager._selectedLayer, Layer)) {
      var node = LayerManager._selectedLayer;
      delete LayerManager.get_layerList()[node.id];
      ss.remove(LayerManager.get_allMaps()[LayerManager.get_currentMap()].layers, node);
      LayerManager.loadTree();
      LayerManager._version++;
    }
  };
  LayerManager.scaleMenu_click = function(sender, e) {
    var isl = ss.safeCast(LayerManager._selectedLayer, ImageSetLayer);
    if (isl != null) {
      var hist = new Histogram();
      hist.image = isl.getFitsImage();
      hist.layer = isl;
      hist.show(Vector2d.create(200, 200));
    }
  };
  LayerManager._showViewer_Click = function(sender, e) {
    if (ss.canCast(LayerManager._selectedLayer, VoTableLayer)) {
      var layer = ss.safeCast(LayerManager._selectedLayer, VoTableLayer);
      WWTControl.scriptInterface.displayVoTableLayer(layer);
    }
  };
  LayerManager._bottom_Click = function(sender, e) {
    var layer = ss.safeCast(LayerManager._selectedLayer, Layer);
    if (layer != null) {
      ss.remove(LayerManager.get_allMaps()[layer.get_referenceFrame()].layers, layer);
      LayerManager.get_allMaps()[layer.get_referenceFrame()].layers.push(layer);
    }
    LayerManager._version++;
    LayerManager.loadTree();
  };
  LayerManager._down_Click = function(sender, e) {
    var layer = ss.safeCast(LayerManager._selectedLayer, Layer);
    if (layer != null) {
      var index = LayerManager.get_allMaps()[layer.get_referenceFrame()].layers.lastIndexOf(layer);
      if (index < (LayerManager.get_allMaps()[layer.get_referenceFrame()].layers.length - 1)) {
        ss.remove(LayerManager.get_allMaps()[layer.get_referenceFrame()].layers, layer);
        LayerManager.get_allMaps()[layer.get_referenceFrame()].layers.splice(index + 1, 0, layer);
      }
    }
    LayerManager._version++;
    LayerManager.loadTree();
  };
  LayerManager._up_Click = function(sender, e) {
    var layer = ss.safeCast(LayerManager._selectedLayer, Layer);
    if (layer != null) {
      var index = LayerManager.get_allMaps()[layer.get_referenceFrame()].layers.lastIndexOf(layer);
      if (index > 0) {
        ss.remove(LayerManager.get_allMaps()[layer.get_referenceFrame()].layers, layer);
        LayerManager.get_allMaps()[layer.get_referenceFrame()].layers.splice(index - 1, 0, layer);
      }
    }
    LayerManager._version++;
    LayerManager.loadTree();
  };
  LayerManager._top_Click = function(sender, e) {
    var layer = ss.safeCast(LayerManager._selectedLayer, Layer);
    if (layer != null) {
      ss.remove(LayerManager.get_allMaps()[layer.get_referenceFrame()].layers, layer);
      LayerManager.get_allMaps()[layer.get_referenceFrame()].layers.splice(0, 0, layer);
    }
    LayerManager._version++;
    LayerManager.loadTree();
  };
  LayerManager._pasteLayer_Click = function(sender, e) {
    LayerManager.get_dataVizWizardDialog().show(LayerManager.get_currentMap(), e);
  };
  LayerManager.createSpreadsheetLayer = function(frame, name, data) {
    var layer = new SpreadSheetLayer();
    layer.loadFromString(data, false, false, false, true);
    layer.enabled = true;
    layer.set_name(name);
    LayerManager.get_layerList()[layer.id] = layer;
    layer.set_referenceFrame(LayerManager.get_currentMap());
    LayerManager.get_allMaps()[frame].layers.push(layer);
    LayerManager.get_allMaps()[frame].open = true;
    LayerManager._version++;
    LayerManager.loadTree();
    return layer;
  };
  LayerManager._showOrbitPlanet_Click = function(sender, e) {
    try {
      var bit = parseInt((sender).tag.toString());
      if (!(Settings.get_globalSettings().get_planetOrbitsFilter() & bit)) {
        Settings.get_globalSettings().set_planetOrbitsFilter(Settings.get_globalSettings().get_planetOrbitsFilter() | bit);
      }
      else {
        Settings.get_globalSettings().set_planetOrbitsFilter(Settings.get_globalSettings().get_planetOrbitsFilter() & ~bit);
      }
    }
    catch ($e1) {
    }
  };
  LayerManager._showOrbit_Click = function(sender, e) {
    var map = ss.safeCast(LayerManager._selectedLayer, LayerMap);
    map.frame.showOrbitPath = !map.frame.showOrbitPath;
  };
  LayerManager._addGreatCircle_Click = function(sender, e) {
    LayerManager._addGreatCircleLayer();
  };
  LayerManager._addMpc_Click = function(sender, e) {
    var target = LayerManager._selectedLayer;
    var input = new SimpleInput(Language.getLocalizedText(1302, 'Minor planet name or designation'), Language.getLocalizedText(238, 'Name'), '', 32);
    var retry = false;
    do {
      if (input.showDialog() === 1) {
        if (ss.keyExists(target.childMaps, input.text)) {
          retry = true;
        }
        else {
          try {
            LayerManager._getMpc(input.text, target);
            retry = false;
          }
          catch ($e1) {
            retry = true;
          }
        }
      }
      else {
        retry = false;
      }
    } while (retry);
    return;
  };
  LayerManager._asOrbitalLines_Click = function(sender, e) {
    var target = LayerManager._selectedLayer;
    var input = new SimpleInput(Language.getLocalizedText(1302, 'Minor planet name or designation'), Language.getLocalizedText(238, 'Name'), '', 32);
    input.show(Cursor.get_position(), function() {
      if (ss.keyExists(target.childMaps, input.text)) {
      }
      else {
        LayerManager._getMpcAsTLE(input.text, target);
      }
    });
  };
  LayerManager._getMpcAsTLE = function(id, target) {
    var file = new WebFile('https://www.minorplanetcenter.net/db_search/show_object?object_id=' + id);
    file.onStateChange = function() {
      if (file.get_state() !== 1) {
        return;
      }
      var data = file.getText();
      var startform = data.indexOf('show-orbit-button');
      var lastForm = data.indexOf('/form', startform);
      var formpart = data.substring(startform, lastForm);
      var name = id;
      var frame = new ReferenceFrame();
      frame.oblateness = 0;
      frame.showOrbitPath = true;
      frame.showAsPoint = true;
      frame.epoch = SpaceTimeController.utcToJulian(ss.date(LayerManager._getValueByID(formpart, 'epoch').substring(0, 10)));
      frame.semiMajorAxis = parseFloat(LayerManager._getValueByID(formpart, 'a')) * 149598000 * 1000;
      frame.referenceFrameType = 1;
      frame.inclination = parseFloat(LayerManager._getValueByID(formpart, 'incl'));
      frame.longitudeOfAscendingNode = parseFloat(LayerManager._getValueByID(formpart, 'node'));
      frame.eccentricity = parseFloat(LayerManager._getValueByID(formpart, 'e'));
      frame.meanAnomolyAtEpoch = parseFloat(LayerManager._getValueByID(formpart, 'm'));
      frame.meanDailyMotion = ELL.meanMotionFromSemiMajorAxis(parseFloat(LayerManager._getValueByID(formpart, 'a')));
      frame.argumentOfPeriapsis = parseFloat(LayerManager._getValueByID(formpart, 'peri'));
      frame.scale = 1;
      frame.semiMajorAxisUnits = 1;
      frame.meanRadius = 10;
      frame.oblateness = 0;
      var TLE = name + '\n' + frame.toTLE();
      LayerManager._loadOrbitsFile(id, TLE, target.get_name());
      LayerManager.loadTree();
    };
    file.send();
  };
  LayerManager._getMpc = function(id, target) {
    var file = new WebFile('https://www.minorplanetcenter.net/db_search/show_object?object_id=' + id);
    file.onStateChange = function() {
      var data = file.getText();
      var startform = data.indexOf('show-orbit-button');
      var lastForm = data.indexOf('/form', startform);
      var formpart = data.substring(startform, lastForm);
      var name = id;
      var orbit = new LayerMap(ss.trim(name), 18);
      orbit.frame.oblateness = 0;
      orbit.frame.showOrbitPath = true;
      orbit.frame.showAsPoint = true;
      orbit.frame.epoch = SpaceTimeController.utcToJulian(ss.date(LayerManager._getValueByID(formpart, 'epoch').substring(0, 10)));
      orbit.frame.semiMajorAxis = parseFloat(LayerManager._getValueByID(formpart, 'a')) * 149598000 * 1000;
      orbit.frame.referenceFrameType = 1;
      orbit.frame.inclination = parseFloat(LayerManager._getValueByID(formpart, 'incl'));
      orbit.frame.longitudeOfAscendingNode = parseFloat(LayerManager._getValueByID(formpart, 'node'));
      orbit.frame.eccentricity = parseFloat(LayerManager._getValueByID(formpart, 'e'));
      orbit.frame.meanAnomolyAtEpoch = parseFloat(LayerManager._getValueByID(formpart, 'm'));
      orbit.frame.meanDailyMotion = ELL.meanMotionFromSemiMajorAxis(parseFloat(LayerManager._getValueByID(formpart, 'a')));
      orbit.frame.argumentOfPeriapsis = parseFloat(LayerManager._getValueByID(formpart, 'peri'));
      orbit.frame.scale = 1;
      orbit.frame.semiMajorAxisUnits = 1;
      orbit.frame.meanRadius = 10;
      orbit.frame.oblateness = 0;
      if (!ss.keyExists(LayerManager.get_allMaps()[target.get_name()].childMaps, ss.trim(name))) {
        LayerManager.get_allMaps()[target.get_name()].addChild(orbit);
      }
      LayerManager.get_allMaps()[orbit.get_name()] = orbit;
      orbit.frame.parent = target.get_name();
      LayerManager._makeLayerGroup('Minor Planet', orbit);
      LayerManager.loadTree();
    };
  };
  LayerManager._getValueByID = function(data, id) {
    var valStart = data.indexOf('id="' + id + '"');
    valStart = data.indexOf('value=', valStart) + 7;
    var valEnd = data.indexOf('"', valStart);
    return data.substr(valStart, valEnd - valStart);
  };
  LayerManager._addGreatCircleLayer = function() {
    var layer = new GreatCirlceRouteLayer();
    var camera = WWTControl.singleton.renderContext.viewCamera;
    layer.set_latStart(camera.lat);
    layer.set_latEnd(camera.lat - 5);
    layer.set_lngStart(camera.lng);
    layer.set_lngEnd(camera.lng + 5);
    layer.set_width(4);
    layer.enabled = true;
    layer.set_name(Language.getLocalizedText(1144, 'Great Circle Route'));
    LayerManager.get_layerList()[layer.id] = layer;
    layer.set_referenceFrame(LayerManager._currentMap);
    LayerManager.get_allMaps()[LayerManager._currentMap].layers.push(layer);
    LayerManager.get_allMaps()[LayerManager._currentMap].open = true;
    LayerManager._version++;
    LayerManager.loadTree();
    LayerManager.get_greatCircleDlg().show(layer, new ss.EventArgs());
  };
  LayerManager._loadOrbitsFile = function(name, data, currentMap) {
    var layer = new OrbitLayer();
    layer.loadString(data);
    layer.enabled = true;
    layer.set_name(name);
    LayerManager.get_layerList()[layer.id] = layer;
    layer.set_referenceFrame(currentMap);
    LayerManager.get_allMaps()[currentMap].layers.push(layer);
    LayerManager.get_allMaps()[currentMap].open = true;
    LayerManager._version++;
    LayerManager.loadTree();
    return layer;
  };
  var LayerManager$ = {

  };


  // wwtlib.LayerMap

  function LayerMap(name, reference) {
    this.childMaps = {};
    this.parent = null;
    this.layers = [];
    this.open = false;
    this.enabled = true;
    this.loadedFromTour = false;
    this.frame = new ReferenceFrame();
    this.set_name(name);
    this.frame.reference = reference;
    var radius = 6371000;
    switch (reference) {
      case 0:
        break;
      case 1:
        break;
      case 2:
        break;
      case 3:
        radius = 696000000;
        break;
      case 4:
        radius = 2439700;
        break;
      case 5:
        radius = 6051800;
        break;
      case 6:
        radius = 6371000;
        break;
      case 7:
        radius = 3390000;
        break;
      case 8:
        radius = 69911000;
        break;
      case 9:
        radius = 58232000;
        break;
      case 10:
        radius = 25362000;
        break;
      case 11:
        radius = 24622000;
        break;
      case 12:
        radius = 1161000;
        break;
      case 13:
        radius = 1737100;
        break;
      case 14:
        radius = 1821500;
        break;
      case 15:
        radius = 1561000;
        break;
      case 16:
        radius = 2631200;
        break;
      case 17:
        radius = 2410300;
        break;
      case 18:
        break;
      case 19:
        break;
      default:
        break;
    }
    this.frame.meanRadius = radius;
  }
  var LayerMap$ = {
    addChild: function(child) {
      child.parent = this;
      this.childMaps[child.get_name()] = child;
    },
    get_name: function() {
      return this.frame.name;
    },
    set_name: function(value) {
      this.frame.name = value;
      return value;
    },
    computeFrame: function(renderContext) {
      if (this.frame.reference === 18) {
        this.frame.computeFrame(renderContext);
      }
    },
    toString: function() {
      return this.get_name();
    }
  };


  // wwtlib.SkyOverlays

  function SkyOverlays() {
  }
  var SkyOverlays$ = {

  };


  // wwtlib.GroundOverlayLayer

  function GroundOverlayLayer() {
  }
  var GroundOverlayLayer$ = {

  };


  // wwtlib.FrameTarget

  function FrameTarget() {
  }
  var FrameTarget$ = {

  };


  // wwtlib.LayerUI

  function LayerUI() {
  }
  var LayerUI$ = {
    get_hasTreeViewNodes: function() {
      return false;
    },
    getTreeNodes: function() {
      return null;
    },
    getNodeContextMenu: function(node) {
      return null;
    },
    setUICallbacks: function(callbacks) {
    }
  };


  // wwtlib.LayerUIMenuItem

  function LayerUIMenuItem() {
    this._tag = null;
    this._isChecked = false;
    this._isEnabled = true;
    this._subMenus = null;
  }
  var LayerUIMenuItem$ = {
    get_name: function() {
      return this._name;
    },
    set_name: function(value) {
      this._name = value;
      return value;
    },
    get_tag: function() {
      return this._tag;
    },
    set_tag: function(value) {
      this._tag = value;
      return value;
    },
    get_checked: function() {
      return this._isChecked;
    },
    set_checked: function(value) {
      this._isChecked = value;
      return value;
    },
    get_enabled: function() {
      return this._isEnabled;
    },
    set_enabled: function(value) {
      this._isEnabled = value;
      return value;
    },
    add_menuItemSelected: function(value) {
      this.__menuItemSelected = ss.bindAdd(this.__menuItemSelected, value);
    },
    remove_menuItemSelected: function(value) {
      this.__menuItemSelected = ss.bindSub(this.__menuItemSelected, value);
    },
    fireMenuItemSelected: function() {
      if (this.__menuItemSelected != null) {
        this.__menuItemSelected(this);
      }
    },
    get_subMenus: function() {
      if (this._subMenus == null) {
        this._subMenus = [];
      }
      return this._subMenus;
    }
  };


  // wwtlib.LayerUITreeNode

  function LayerUITreeNode() {
    this._parent = null;
    this._level = 0;
    this._open = false;
    this._isChecked = false;
    this._bold = false;
    this._color = Colors.get_white();
    this._nodes = null;
  }
  var LayerUITreeNode$ = {
    add_nodeChecked: function(value) {
      this.__nodeChecked = ss.bindAdd(this.__nodeChecked, value);
    },
    remove_nodeChecked: function(value) {
      this.__nodeChecked = ss.bindSub(this.__nodeChecked, value);
    },
    fireNodeChecked: function(newState) {
      if (this.__nodeChecked != null) {
        this.__nodeChecked(this, newState);
      }
    },
    add_nodeUpdated: function(value) {
      this.__nodeUpdated = ss.bindAdd(this.__nodeUpdated, value);
    },
    remove_nodeUpdated: function(value) {
      this.__nodeUpdated = ss.bindSub(this.__nodeUpdated, value);
    },
    fireNodeUpdated: function() {
      if (this.__nodeUpdated != null) {
        this.__nodeUpdated(this);
      }
    },
    add_nodeSelected: function(value) {
      this.__nodeSelected = ss.bindAdd(this.__nodeSelected, value);
    },
    remove_nodeSelected: function(value) {
      this.__nodeSelected = ss.bindSub(this.__nodeSelected, value);
    },
    fireNodeSelected: function() {
      if (this.__nodeSelected != null) {
        this.__nodeSelected(this);
      }
    },
    add_nodeActivated: function(value) {
      this.__nodeActivated = ss.bindAdd(this.__nodeActivated, value);
    },
    remove_nodeActivated: function(value) {
      this.__nodeActivated = ss.bindSub(this.__nodeActivated, value);
    },
    fireNodeActivated: function() {
      if (this.__nodeActivated != null) {
        this.__nodeActivated(this);
      }
    },
    get_name: function() {
      return this._name;
    },
    set_name: function(value) {
      if (this._name !== value) {
        this._name = value;
        this.fireNodeUpdated();
      }
      return value;
    },
    get_parent: function() {
      return this._parent;
    },
    set_parent: function(value) {
      this._parent = value;
      return value;
    },
    get_level: function() {
      return this._level;
    },
    set_level: function(value) {
      this._level = value;
      return value;
    },
    get_tag: function() {
      return this._tag;
    },
    set_tag: function(value) {
      this._tag = value;
      return value;
    },
    get_referenceTag: function() {
      return this._referenceTag;
    },
    set_referenceTag: function(value) {
      this._referenceTag = value;
      return value;
    },
    get_opened: function() {
      return this._open;
    },
    set_opened: function(value) {
      if (this._open !== value) {
        this._open = value;
        this.fireNodeUpdated();
      }
      return value;
    },
    get_checked: function() {
      return this._isChecked;
    },
    set_checked: function(value) {
      if (this._isChecked !== value) {
        this._isChecked = value;
        this.fireNodeUpdated();
      }
      return value;
    },
    get_bold: function() {
      return this._bold;
    },
    set_bold: function(value) {
      if (this._bold !== value) {
        this._bold = value;
        this.fireNodeUpdated();
      }
      return value;
    },
    get_color: function() {
      return this._color;
    },
    set_color: function(value) {
      if (this._color !== value) {
        this._color = value;
        this.fireNodeUpdated();
      }
      return value;
    },
    add: function(name) {
      var node = new LayerUITreeNode();
      node.set_name(name);
      node.set_parent(this);
      node.set_level(this.get_level() + 1);
      this.get_nodes().push(node);
      return node;
    },
    get_nodes: function() {
      if (this._nodes == null) {
        this._nodes = [];
      }
      return this._nodes;
    }
  };


  // wwtlib.Group

  function Group() {
    this.startIndex = 0;
    this.indexCount = 0;
    this.materialIndex = 0;
  }
  var Group$ = {

  };


  // wwtlib.Mesh

  function Mesh() {
    this.boundingSphere = new SphereHull();
  }
  Mesh.create = function(vertices, indices) {
    var mesh = new Mesh();
    mesh.vertices = vertices;
    mesh.indices = indices;
    var points = new Array(vertices.length);
    for (var i = 0; i < vertices.length; ++i) {
      points[i] = vertices[i].get_position();
    }
    mesh.boundingSphere = ConvexHull.findEnclosingSphereFast(points);
    return mesh;
  };
  Mesh.createTangent = function(vertices, indices) {
    var mesh = new Mesh();
    mesh.tangentVertices = vertices;
    mesh.indices = indices;
    var points = new Array(mesh.tangentVertices.length);
    for (var i = 0; i < mesh.tangentVertices.length; ++i) {
      points[i] = mesh.tangentVertices[i].get_position();
    }
    mesh.boundingSphere = ConvexHull.findEnclosingSphereFast(points);
    return mesh;
  };
  var Mesh$ = {
    dispose: function() {
      if (this.vertexBuffer != null) {
        this.vertexBuffer.dispose();
        this.vertexBuffer = null;
      }
      if (this.tangentVertexBuffer != null) {
        this.tangentVertexBuffer.dispose();
        this.tangentVertexBuffer = null;
      }
      if (this.indexBuffer != null) {
        this.indexBuffer.dispose();
        this.indexBuffer = null;
      }
    },
    setObjects: function(objects) {
      this._objects = objects;
    },
    commitToDevice: function() {
      if (this.vertices != null) {
        this.vertexBuffer = PositionNormalTexturedVertexBuffer.create(this.vertices);
      }
      else if (this.tangentVertices != null) {
        this.tangentVertexBuffer = PositionNormalTexturedTangentVertexBuffer.create(this.tangentVertices);
      }
      this.indexBuffer = new IndexBuffer(new Uint32Array(this.indices));
    },
    beginDrawing: function(renderContext) {
      if (this.vertexBuffer != null) {
        renderContext._setVertexBuffer(this.vertexBuffer);
      }
      else if (this.tangentVertexBuffer != null) {
        renderContext._setVertexBuffer(this.tangentVertexBuffer);
      }
      if (this.indexBuffer != null) {
        renderContext._setIndexBuffer(this.indexBuffer);
      }
    },
    drawSubset: function(renderContext, materialIndex) {
      if (this.indexBuffer == null || this._objects == null) {
        return;
      }
      this.drawHierarchy(this._objects, materialIndex, renderContext, 0);
    },
    drawHierarchy: function(nodes, materialIndex, renderContext, depth) {
      if (depth > 1212) {
        return;
      }
      var $enum1 = ss.enumerate(nodes);
      while ($enum1.moveNext()) {
        var node = $enum1.current;
        if (node.drawGroup != null && node.enabled) {
          var $enum2 = ss.enumerate(node.drawGroup);
          while ($enum2.moveNext()) {
            var group = $enum2.current;
            if (group.materialIndex === materialIndex) {
              renderContext.gl.drawElements(4, group.indexCount, 5125, group.startIndex * 4);
            }
          }
        }
        this.drawHierarchy(node.children, materialIndex, renderContext, depth + 1);
      }
    },
    get_objects: function() {
      return this._objects;
    },
    set_objects: function(value) {
      this._objects = value;
      return value;
    }
  };


  // wwtlib.VertexPosition

  function VertexPosition() {
    this.index = 0;
  }
  var VertexPosition$ = {

  };


  // wwtlib.Object3d

  function Object3d(tourDoc, filename, flipV, flipHandedness, smooth, color) {
    this.flipHandedness = false;
    this.flipV = true;
    this.smooth = true;
    this._mesh = null;
    this._meshMaterials = [];
    this._meshTextures = [];
    this._meshSpecularTextures = [];
    this._meshNormalMaps = [];
    this.meshFilenames = [];
    this.color = Colors.get_white();
    this._textureCache = {};
    this._matFiles = new Array(0);
    this._matFileIndex = 0;
    this.objects = [];
    this._matLib = {};
    this._textureLib = {};
    this._tourDocument = null;
    this.issLayer = false;
    this._readyToRender = false;
    this.useCurrentAmbient = false;
    this._dirty = true;
    this.color = color;
    this.smooth = smooth;
    this.flipV = flipV;
    this.flipHandedness = flipHandedness;
    this.filename = filename;
    if (ss.endsWith(this.filename.toLowerCase(), '.obj')) {
      this._loadMeshFromObj(tourDoc, this.filename);
    }
    else {
      this._loadMeshFrom3ds(tourDoc, this.filename, 1);
    }
  }
  Object3d._compareVector3 = function(v0, v1) {
    if (v0.x < v1.x) {
      return -1;
    }
    else if (v0.x > v1.x) {
      return 1;
    }
    else if (v0.y < v1.y) {
      return -1;
    }
    else if (v0.y > v1.y) {
      return 1;
    }
    else if (v0.z < v1.z) {
      return -1;
    }
    else if (v0.z > v1.z) {
      return 1;
    }
    else {
      return 0;
    }
  };
  Object3d._compareVector = function(v0, v1) {
    if (v0.x < v1.x) {
      return -1;
    }
    else if (v0.x > v1.x) {
      return 1;
    }
    else if (v0.y < v1.y) {
      return -1;
    }
    else if (v0.y > v1.y) {
      return 1;
    }
    else {
      return 0;
    }
  };
  Object3d._getMaterialID = function(material, materialNames) {
    var index = 0;
    var $enum1 = ss.enumerate(materialNames);
    while ($enum1.moveNext()) {
      var mat = $enum1.current;
      if (mat === material) {
        return index;
      }
      index++;
    }
    return -1;
  };
  Object3d._disposeTextureList = function(textures) {
    if (textures != null) {
      for (var i = 0; i < textures.length; ++i) {
        if (textures[i] != null) {
          textures[i].dispose();
          textures[i] = null;
        }
      }
      textures.length = 0;
    }
  };
  var Object3d$ = {
    _reload: function() {
      if (!this.issLayer) {
        this.dispose();
        if (ss.endsWith(this.filename.toLowerCase(), '.obj')) {
          this._loadMeshFromObj(this._tourDocument, this.filename);
        }
        else {
          this._loadMeshFrom3ds(this._tourDocument, this.filename, 1);
        }
      }
    },
    _calculateVertexNormalsMerged: function(vertexList, indexList, creaseAngleRad) {
      if (!vertexList.length) {
        return null;
      }
      var vertexCount = vertexList.length;
      var triangleCount = Math.floor(indexList.length / 3);
      var vertexPositions = [];
      for (var vertexIndex = 0; vertexIndex < vertexList.length; ++vertexIndex) {
        var vp = new VertexPosition();
        vp.position = vertexList[vertexIndex].get_position();
        vp.index = vertexIndex;
        vertexPositions.push(vp);
      }
      vertexPositions.sort(function(v0, v1) {
        return Object3d._compareVector3(v0.position, v1.position);
      });
      var vertexMap = new Array(vertexPositions.length);
      var uniqueVertexCount = 0;
      for (var vertexIndex = 0; vertexIndex < vertexPositions.length; vertexIndex++) {
        if (!vertexIndex || !!Object3d._compareVector3(vertexPositions[vertexIndex].position, vertexPositions[vertexIndex - 1].position)) {
          ++uniqueVertexCount;
        }
        vertexMap[vertexPositions[vertexIndex].index] = uniqueVertexCount - 1;
      }
      var vertexInstanceCounts = new Array(uniqueVertexCount);
      for (var i = 0; i < uniqueVertexCount; i++) {
        vertexInstanceCounts[i] = 0;
      }
      var $enum1 = ss.enumerate(indexList);
      while ($enum1.moveNext()) {
        var vertexIndex = $enum1.current;
        var uniqueIndex = vertexMap[vertexIndex];
        vertexInstanceCounts[uniqueIndex]++;
      }
      var vertexInstances = new Array(uniqueVertexCount);
      for (var i = 0; i < uniqueVertexCount; ++i) {
        var count = vertexInstanceCounts[i];
        if (count > 0) {
          vertexInstances[i] = new Array(count);
          for (var j = 0; j < count; j++) {
            vertexInstances[i][j] = 0;
          }
        }
      }
      for (var i = 0; i < indexList.length; ++i) {
        var faceIndex = Math.floor(i / 3);
        var uniqueIndex = vertexMap[indexList[i]];
        vertexInstances[uniqueIndex][--vertexInstanceCounts[uniqueIndex]] = faceIndex;
      }
      var faceNormals = new Array(triangleCount);
      for (var i = 0; i < triangleCount; ++i) {
        var i0 = indexList[i * 3 + 0];
        var i1 = indexList[i * 3 + 1];
        var i2 = indexList[i * 3 + 2];
        var edge0 = Vector3d.subtractVectors(vertexList[i1].get_position(), vertexList[i0].get_position());
        var edge1 = Vector3d.subtractVectors(vertexList[i2].get_position(), vertexList[i1].get_position());
        faceNormals[i] = Vector3d.cross(edge0, edge1);
        faceNormals[i].normalize();
      }
      var newVertexCount = triangleCount * 3;
      var vertexNormals = new Array(newVertexCount);
      var cosCreaseAngle = Math.min(0.9999, Math.cos(creaseAngleRad));
      for (var i = 0; i < newVertexCount; ++i) {
        var vertexIndex = indexList[i];
        var uniqueIndex = vertexMap[vertexIndex];
        var faceNormal = faceNormals[Math.floor(i / 3)];
        var sum = new Vector3d();
        var $enum2 = ss.enumerate(vertexInstances[uniqueIndex]);
        while ($enum2.moveNext()) {
          var faceIndex = $enum2.current;
          var n = faceNormals[faceIndex];
          if (Vector3d.dot(faceNormal, n) > cosCreaseAngle) {
            sum.add(n);
          }
        }
        vertexNormals[i] = sum;
        vertexNormals[i].normalize();
      }
      return vertexNormals;
    },
    _calculateVertexTangents: function(vertexList, indexList, creaseAngleRad) {
      if (!vertexList.length) {
        return null;
      }
      var vertexCount = vertexList.length;
      var triangleCount = Math.floor(indexList.length / 3);
      var vertexPositions = [];
      for (var vertexIndex = 0; vertexIndex < vertexList.length; ++vertexIndex) {
        var vp = new VertexPosition();
        vp.position = vertexList[vertexIndex].get_position();
        vp.index = vertexIndex;
        vertexPositions.push(vp);
      }
      vertexPositions.sort(function(v0, v1) {
        return Object3d._compareVector3(v0.position, v1.position);
      });
      var vertexMap = new Array(vertexPositions.length);
      var uniqueVertexCount = 0;
      for (var vertexIndex = 0; vertexIndex < vertexPositions.length; vertexIndex++) {
        if (!vertexIndex || !!Object3d._compareVector3(vertexPositions[vertexIndex].position, vertexPositions[vertexIndex - 1].position)) {
          ++uniqueVertexCount;
        }
        vertexMap[vertexPositions[vertexIndex].index] = (uniqueVertexCount - 1);
      }
      var vertexInstanceCounts = new Array(uniqueVertexCount);
      for (var i = 0; i < uniqueVertexCount; i++) {
        vertexInstanceCounts[i] = 0;
      }
      var $enum1 = ss.enumerate(indexList);
      while ($enum1.moveNext()) {
        var vertexIndex = $enum1.current;
        var uniqueIndex = vertexMap[vertexIndex];
        vertexInstanceCounts[uniqueIndex]++;
      }
      var vertexInstances = new Array(uniqueVertexCount);
      for (var i = 0; i < uniqueVertexCount; ++i) {
        var count = vertexInstanceCounts[i];
        if (count > 0) {
          vertexInstances[i] = new Array(count);
          for (var j = 0; j < count; j++) {
            vertexInstances[i][j] = 0;
          }
        }
      }
      for (var i = 0; i < indexList.length; ++i) {
        var faceIndex = Math.floor(i / 3);
        var uniqueIndex = vertexMap[indexList[i]];
        vertexInstances[uniqueIndex][--vertexInstanceCounts[uniqueIndex]] = faceIndex;
      }
      var partials = new Array(triangleCount);
      for (var i = 0; i < triangleCount; ++i) {
        var v0 = vertexList[indexList[i * 3 + 0]];
        var v1 = vertexList[indexList[i * 3 + 1]];
        var v2 = vertexList[indexList[i * 3 + 2]];
        var edge0 = Vector3d.subtractVectors(v1.get_position(), v0.get_position());
        var edge1 = Vector3d.subtractVectors(v2.get_position(), v0.get_position());
        var m00 = v1.tu - v0.tu;
        var m01 = v1.tv - v0.tv;
        var m10 = v2.tu - v0.tu;
        var m11 = v2.tv - v0.tv;
        var determinant = m00 * m11 - m01 * m10;
        if (Math.abs(determinant) < 1E-06) {
          if (edge0.lengthSq() > 0) {
            partials[i] = edge0;
            partials[i].normalize();
          }
          else {
            partials[i] = Vector3d.create(1, 0, 0);
          }
        }
        else {
          var invDeterminant = 1 / determinant;
          var n00 = m11 * invDeterminant;
          var n01 = -m01 * invDeterminant;
          var n10 = -m10 * invDeterminant;
          var n11 = m00 * invDeterminant;
          partials[i] = Vector3d.addVectors(Vector3d.multiplyScalar(edge0, n00), Vector3d.multiplyScalar(edge1, n01));
          partials[i].normalize();
        }
      }
      var newVertexCount = triangleCount * 3;
      var tangents = new Array(newVertexCount);
      var cosCreaseAngle = Math.min(0.9999, Math.cos(creaseAngleRad));
      for (var i = 0; i < newVertexCount; ++i) {
        var vertexIndex = indexList[i];
        var uniqueIndex = vertexMap[vertexIndex];
        var du = partials[Math.floor(i / 3)];
        var sum = new Vector3d();
        var $enum2 = ss.enumerate(vertexInstances[uniqueIndex]);
        while ($enum2.moveNext()) {
          var faceIndex = $enum2.current;
          var T = partials[faceIndex];
          if (Vector3d.dot(du, T) > cosCreaseAngle) {
            sum.add(T);
          }
        }
        var N = vertexList[vertexIndex].get_normal();
        tangents[i] = Vector3d.subtractVectors(sum, Vector3d.multiplyScalar(N, Vector3d.dot(N, sum)));
        tangents[i].normalize();
      }
      return tangents;
    },
    _calculateVertexNormals: function(vertexList, indexList, creaseAngleRad) {
      var vertexCount = vertexList.length;
      var triangleCount = Math.floor(indexList.length / 3);
      var vertexInstanceCounts = new Array(vertexCount);
      var $enum1 = ss.enumerate(indexList);
      while ($enum1.moveNext()) {
        var vertexIndex = $enum1.current;
        vertexInstanceCounts[vertexIndex]++;
      }
      var vertexInstances = new Array(vertexCount);
      for (var i = 0; i < vertexCount; ++i) {
        var count = vertexInstanceCounts[i];
        if (count > 0) {
          vertexInstances[i] = new Array(count);
        }
      }
      for (var i = 0; i < indexList.length; ++i) {
        var faceIndex = Math.floor(i / 3);
        var vertexIndex = indexList[i];
        vertexInstances[vertexIndex][--vertexInstanceCounts[vertexIndex]] = faceIndex;
      }
      var faceNormals = new Array(triangleCount);
      for (var i = 0; i < triangleCount; ++i) {
        var i0 = indexList[i * 3 + 0];
        var i1 = indexList[i * 3 + 1];
        var i2 = indexList[i * 3 + 2];
        var edge0 = Vector3d.subtractVectors(vertexList[i1].get_position(), vertexList[i0].get_position());
        var edge1 = Vector3d.subtractVectors(vertexList[i2].get_position(), vertexList[i1].get_position());
        faceNormals[i] = Vector3d.cross(edge0, edge1);
        faceNormals[i].normalize();
      }
      var newVertexCount = triangleCount * 3;
      var vertexNormals = new Array(newVertexCount);
      var cosCreaseAngle = Math.min(0.9999, Math.cos(creaseAngleRad));
      for (var i = 0; i < newVertexCount; ++i) {
        var vertexIndex = indexList[i];
        var faceNormal = faceNormals[Math.floor(i / 3)];
        var sum = new Vector3d();
        var $enum2 = ss.enumerate(vertexInstances[vertexIndex]);
        while ($enum2.moveNext()) {
          var faceIndex = $enum2.current;
          var n = faceNormals[faceIndex];
          if (Vector3d.dot(faceNormal, n) > cosCreaseAngle) {
            sum.add(n);
          }
        }
        vertexNormals[i] = sum;
        vertexNormals[i].normalize();
      }
      return vertexNormals;
    },
    _addMaterial: function(material) {
      this._meshMaterials.push(material);
      while (this._meshTextures.length < this._meshMaterials.length) {
        this._meshTextures.push(null);
      }
      while (this._meshSpecularTextures.length < this._meshMaterials.length) {
        this._meshSpecularTextures.push(null);
      }
      while (this._meshNormalMaps.length < this._meshMaterials.length) {
        this._meshNormalMaps.push(null);
      }
    },
    _loadColorChunk: function(br) {
      var chunkID = br.readUInt16();
      var chunkLength = br.readUInt32();
      var color = Colors.get_black();
      if ((chunkID === 16 || chunkID === 19) && chunkLength === 18) {
        var r = Math.max(0, Math.min(1, br.readSingle()));
        var g = Math.max(0, Math.min(1, br.readSingle()));
        var b = Math.max(0, Math.min(1, br.readSingle()));
        color = Color.fromArgb(255, ss.truncate((255 * r)), ss.truncate((255 * g)), ss.truncate((255 * b)));
      }
      else if ((chunkID === 17 || chunkID === 18) && chunkLength === 9) {
        color = Color.fromArgb(255, br.readByte(), br.readByte(), br.readByte());
      }
      else {
        br.readBytes(chunkLength - 6);
      }
      return color;
    },
    _loadPercentageChunk: function(br) {
      var chunkID = br.readUInt16();
      var chunkLength = br.readUInt32();
      var percentage = 0;
      if (chunkID === 48 && chunkLength === 8) {
        percentage = br.readUInt16();
      }
      else if (chunkID === 49 && chunkLength === 10) {
        percentage = br.readSingle();
      }
      else {
        br.readBytes(chunkLength - 6);
      }
      return percentage;
    },
    _loadMeshFromObj: function(doc, filename) {
      var $this = this;

      this.filename = filename;
      this._tourDocument = doc;
      var blob = doc.getFileBlob(filename);
      var chunck = new FileReader();
      chunck.onloadend = function(e) {
        $this._matFiles = $this._readObjMaterialsFromBin(ss.safeCast(chunck.result, String));
        $this._matFileIndex = 0;
        $this._loadMatLib(ss.safeCast(chunck.result, String));
      };
      chunck.readAsText(blob);
    },
    _readObjMaterialsFromBin: function(data) {
      var matFiles = [];
      var lines = data.split('\n');
      var $enum1 = ss.enumerate(lines);
      while ($enum1.moveNext()) {
        var lineraw = $enum1.current;
        var line = ss.replaceString(lineraw, '  ', ' ');
        var parts = ss.trim(line).split(' ');
        if (parts.length > 0) {
          switch (parts[0]) {
            case 'mtllib':
              var path = this.filename.substring(0, this.filename.lastIndexOf('\\') + 1);
              var matFile = path + parts[1];
              matFiles.push(matFile);
              break;
          }
        }
      }
      return matFiles;
    },
    _readObjFromBin: function(data) {
      var objectFound = false;
      var objects = [];
      var currentObject = new ObjectNode();
      currentObject.name = 'Default';
      var triangleCount = 0;
      var vertexCount = 0;
      var vertexList = [];
      var vertList = [];
      var normList = [];
      var uvList = [];
      vertList.push(new Vector3d());
      normList.push(new Vector3d());
      uvList.push(new Vector2d());
      var indexList = [];
      var attribList = [];
      var applyLists = [];
      var applyListsIndex = [];
      var materialNames = [];
      var currentMaterialIndex = -1;
      var currentMaterial = new Material();
      var currentGroup = new Group();
      var currentIndex = 0;
      currentMaterial = new Material();
      currentMaterial.diffuse = this.color;
      currentMaterial.ambient = this.color;
      currentMaterial.specular = Colors.get_white();
      currentMaterial.specularSharpness = 30;
      currentMaterial.opacity = 1;
      currentMaterial.isDefault = true;
      currentGroup.startIndex = 0;
      currentGroup.indexCount = 0;
      currentGroup.materialIndex = 0;
      var lines = data.split('\n');
      var $enum1 = ss.enumerate(lines);
      while ($enum1.moveNext()) {
        var lineraw = $enum1.current;
        var line = ss.replaceString(lineraw, '  ', ' ');
        var parts = ss.trim(line).split(' ');
        if (parts.length > 0) {
          switch (parts[0]) {
            case 'mtllib':
              break;
            case 'usemtl':
              var materialName = parts[1];
              if (ss.keyExists(this._matLib, materialName)) {
                if (currentMaterialIndex === -1 && currentIndex > 0) {
                  this._addMaterial(currentMaterial);
                  currentMaterialIndex++;
                }
                if (currentMaterialIndex > -1) {
                  currentGroup.indexCount = currentIndex - currentGroup.startIndex;
                  currentObject.drawGroup.push(currentGroup);
                }
                currentMaterialIndex++;
                if (ss.keyExists(this._matLib, materialName)) {
                  currentMaterial = this._matLib[materialName];
                  if (ss.keyExists(this._textureLib, materialName)) {
                    try {
                      if (!ss.keyExists(this._textureCache, this._textureLib[materialName])) {
                        var path = this.filename.substring(0, this.filename.lastIndexOf('\\') + 1);
                        var tex = this._tourDocument.getCachedTexture2d(path + this._textureLib[materialName]);
                        if (tex != null) {
                          this.meshFilenames.push(this._textureLib[materialName]);
                          this._textureCache[this._textureLib[materialName]] = tex;
                        }
                      }
                      this._meshTextures.push(this._textureCache[this._textureLib[materialName]]);
                    }
                    catch ($e2) {
                    }
                  }
                  this._addMaterial(currentMaterial);
                  currentGroup = new Group();
                  currentGroup.startIndex = currentIndex;
                  currentGroup.indexCount = 0;
                  currentGroup.materialIndex = currentMaterialIndex;
                }
              }
              break;
            case 'v':
              vertexCount++;
              if (this.flipHandedness) {
                vertList.push(Vector3d.create(-parseFloat(parts[1]), parseFloat(parts[2]), parseFloat(parts[3])));
              }
              else {
                vertList.push(Vector3d.create(parseFloat(parts[1]), parseFloat(parts[2]), parseFloat(parts[3])));
              }
              break;
            case 'vn':
              if (this.flipHandedness) {
                normList.push(Vector3d.create(-parseFloat(parts[1]), parseFloat(parts[2]), parseFloat(parts[3])));
              }
              else {
                normList.push(Vector3d.create(parseFloat(parts[1]), parseFloat(parts[2]), parseFloat(parts[3])));
              }
              break;
            case 'vt':
              uvList.push(Vector2d.create(parseFloat(parts[1]), (this.flipV) ? (1 - parseFloat(parts[2])) : parseFloat(parts[2])));
              break;
            case 'g':
            case 'o':
              if (objectFound) {
                if (currentMaterialIndex > -1) {
                  currentGroup.indexCount = currentIndex - currentGroup.startIndex;
                  currentObject.drawGroup.push(currentGroup);
                  currentGroup = new Group();
                  currentGroup.startIndex = currentIndex;
                  currentGroup.indexCount = 0;
                  currentGroup.materialIndex = currentMaterialIndex;
                }
                currentObject = new ObjectNode();
              }
              objectFound = true;
              if (parts.length > 1) {
                currentObject.name = parts[1];
              }
              else {
                currentObject.name = 'Unnamed';
              }
              objects.push(currentObject);
              break;
            case 'f':
              var indexiesA = this._getIndexies(parts[1]);
              var indexiesB = this._getIndexies(parts[2]);
              var indexiesC = this._getIndexies(parts[3]);
              vertexList.push(PositionNormalTextured.createUV(vertList[indexiesA[0]], normList[indexiesA[2]], uvList[indexiesA[1]]));
              vertexList.push(PositionNormalTextured.createUV(vertList[indexiesB[0]], normList[indexiesB[2]], uvList[indexiesB[1]]));
              vertexList.push(PositionNormalTextured.createUV(vertList[indexiesC[0]], normList[indexiesC[2]], uvList[indexiesC[1]]));
              if (this.flipHandedness) {
                indexList.push(currentIndex);
                indexList.push(currentIndex + 2);
                indexList.push(currentIndex + 1);
              }
              else {
                indexList.push(currentIndex);
                indexList.push(currentIndex + 1);
                indexList.push(currentIndex + 2);
              }
              triangleCount++;
              currentIndex += 3;
              if (parts.length > 4) {
                var partIndex = 4;
                while (partIndex < parts.length) {
                  if (this.flipHandedness) {
                    indexiesA = this._getIndexies(parts[1]);
                    indexiesC = this._getIndexies(parts[partIndex]);
                    indexiesB = this._getIndexies(parts[partIndex - 1]);
                  }
                  else {
                    indexiesA = this._getIndexies(parts[1]);
                    indexiesB = this._getIndexies(parts[partIndex - 1]);
                    indexiesC = this._getIndexies(parts[partIndex]);
                  }
                  vertexList.push(PositionNormalTextured.createUV(vertList[indexiesA[0]], normList[indexiesA[2]], uvList[indexiesA[1]]));
                  vertexList.push(PositionNormalTextured.createUV(vertList[indexiesB[0]], normList[indexiesB[2]], uvList[indexiesB[1]]));
                  vertexList.push(PositionNormalTextured.createUV(vertList[indexiesC[0]], normList[indexiesC[2]], uvList[indexiesC[1]]));
                  indexList.push(currentIndex);
                  indexList.push(currentIndex + 1);
                  indexList.push(currentIndex + 2);
                  triangleCount++;
                  currentIndex += 3;
                  partIndex++;
                }
              }
              break;
          }
        }
      }
      if (!objectFound) {
        objects.push(currentObject);
      }
      if (currentMaterialIndex === -1 && currentIndex > 0) {
        this._addMaterial(currentMaterial);
        currentMaterialIndex++;
      }
      if (currentMaterialIndex > -1) {
        currentGroup.indexCount = (currentIndex - currentGroup.startIndex);
        currentObject.drawGroup.push(currentGroup);
      }
      if (normList.length < 2) {
        var degtorag = Math.PI / 180;
        var creaseAngleRad = ((this.smooth) ? 170 * degtorag : 45 * degtorag);
        var vertexNormals = this._calculateVertexNormalsMerged(vertexList, indexList, creaseAngleRad);
        var newVertexList = [];
        var newVertexCount = indexList.length;
        for (var vertexIndex = 0; vertexIndex < newVertexCount; ++vertexIndex) {
          var v = vertexList[indexList[vertexIndex]];
          v.set_normal(vertexNormals[vertexIndex]);
          newVertexList.push(v);
        }
        vertexList = newVertexList;
      }
      this._mesh = Mesh.create(vertexList, indexList);
      var rootDummy = new ObjectNode();
      rootDummy.name = 'Root';
      rootDummy.parent = null;
      rootDummy.level = -1;
      rootDummy.drawGroup = null;
      rootDummy.children = objects;
      this.objects = [];
      this.objects.push(rootDummy);
      this._mesh.setObjects(this.objects);
      this._mesh.commitToDevice();
      this._dirty = false;
      this._readyToRender = true;
    },
    _loadMatLib: function(data) {
      var $this = this;

      if (this._matFileIndex < this._matFiles.length) {
        var filename = this._matFiles[this._matFileIndex++];
        var blob = this._tourDocument.getFileBlob(filename);
        var chunck = new FileReader();
        chunck.onloadend = function(e) {
          $this._readMatLibFromBin(ss.safeCast(chunck.result, String));
          $this._loadMatLib(data);
        };
        chunck.readAsText(blob);
      }
      else {
        this._readObjFromBin(data);
      }
    },
    _readMatLibFromBin: function(data) {
      try {
        var currentMaterial = new Material();
        var materialName = '';
        this._matLib = {};
        this._textureLib = {};
        var lines = data.split('\n');
        var $enum1 = ss.enumerate(lines);
        while ($enum1.moveNext()) {
          var lineraw = $enum1.current;
          var line = lineraw;
          var parts = ss.trim(line).split(' ');
          if (parts.length > 0) {
            switch (parts[0]) {
              case 'newmtl':
                if (!ss.emptyString(materialName)) {
                  this._matLib[materialName] = currentMaterial;
                }
                currentMaterial = new Material();
                currentMaterial.diffuse = Colors.get_white();
                currentMaterial.ambient = Colors.get_white();
                currentMaterial.specular = Colors.get_black();
                currentMaterial.specularSharpness = 30;
                currentMaterial.opacity = 1;
                materialName = parts[1];
                break;
              case 'Ka':
                currentMaterial.ambient = Color.fromArgb(255, Math.min(parseFloat(parts[1]) * 255, 255), Math.min(parseFloat(parts[2]) * 255, 255), Math.min(parseFloat(parts[3]) * 255, 255));
                break;
              case 'map_Kd':
                currentMaterial.diffuse = Colors.get_white();
                var textureFilename = parts[1];
                for (var i = 2; i < parts.length; i++) {
                  textureFilename += ' ' + parts[i];
                }
                var path = this.filename.substring(0, this.filename.lastIndexOf('\\') + 1);
                textureFilename = ss.replaceString(textureFilename, '/', '\\');
                if (textureFilename.indexOf('\\') !== -1) {
                  textureFilename = textureFilename.substring(textureFilename.lastIndexOf('\\') + 1);
                }
                this._textureLib[materialName] = textureFilename;
                break;
              case 'Kd':
                currentMaterial.diffuse = Color.fromArgb(255, Math.min(parseFloat(parts[1]) * 255, 255), Math.min(parseFloat(parts[2]) * 255, 255), Math.min(parseFloat(parts[3]) * 255, 255));
                break;
              case 'Ks':
                currentMaterial.specular = Color.fromArgb(255, Math.min(parseFloat(parts[1]) * 255, 255), Math.min(parseFloat(parts[2]) * 255, 255), Math.min(parseFloat(parts[3]) * 255, 255));
                break;
              case 'd':
                currentMaterial.opacity = parseFloat(parts[1]);
                break;
              case 'Tr':
                currentMaterial.opacity = 1 - parseFloat(parts[1]);
                break;
              case 'illum':
                var illuminationMode = parseInt(parts[1]);
                break;
              case 'sharpness':
                currentMaterial.specularSharpness = parseFloat(parts[1]);
                break;
              case 'Ns':
                currentMaterial.specularSharpness = 1 + 2 * parseFloat(parts[1]);
                currentMaterial.specularSharpness = Math.max(10, currentMaterial.specularSharpness);
                break;
            }
          }
        }
        if (!ss.emptyString(materialName)) {
          this._matLib[materialName] = currentMaterial;
        }
      }
      catch ($e2) {
      }
    },
    _getIndexies: function(data) {
      var parts = ss.trim(data).split('/');
      var indecies = new Array(3);
      if (ss.emptyString(data)) {
        return indecies;
      }
      if (parts.length > 0) {
        indecies[0] = parseInt(parts[0]);
      }
      if (parts.length > 1) {
        if (ss.emptyString(parts[1])) {
          indecies[1] = 0;
        }
        else {
          indecies[1] = parseInt(parts[1]);
        }
      }
      if (parts.length > 2) {
        indecies[2] = parseInt(parts[2]);
      }
      return indecies;
    },
    _loadMeshFrom3ds: function(doc, filename, scale) {
      var $this = this;

      this._tourDocument = doc;
      var blob = doc.getFileBlob(filename);
      var chunck = new FileReader();
      chunck.onloadend = function(e) {
        $this._read3dsFromBin(new BinaryReader(new Uint8Array(chunck.result)), scale);
      };
      chunck.readAsArrayBuffer(blob);
    },
    _read3dsFromBin: function(br, scale) {
      var i;
      var sectionID;
      var sectionLength;
      var name = '';
      var material = '';
      var triangleCount = 0;
      var vertexCount = 0;
      var vertexList = [];
      var indexList = [];
      var attribList = [];
      var materialNames = [];
      var currentMaterialIndex = -1;
      var currentMaterial = new Material();
      var attributeID = 0;
      var count = 0;
      var lastID = 0;
      var exit = false;
      var normalMapFound = false;
      var offsetX = 0;
      var offsetY = 0;
      var offsetZ = 0;
      var objects = [];
      var currentObject = null;
      var objHierarchy = [];
      var objNames = [];
      var objectTable = {};
      var dummyCount = 0;
      var length = br.get_length() - 1;
      var startMapIndex = 0;
      var startTriangleIndex = 0;
      while (br.get_position() < length && !exit) {
        sectionID = br.readUInt16();
        sectionLength = br.readUInt32();
        switch (sectionID) {
          case 19789:
            break;
          case 15677:
            break;
          case 16384:
            name = '';
            var b;
            do {
              b = br.readByte();
              if (b > 0) {
                name += String.fromCharCode(b);
              }
            } while (!!b);
            currentObject = new ObjectNode();
            currentObject.name = name;
            objects.push(currentObject);
            if (!ss.keyExists(objectTable, currentObject.name)) {
              objectTable[currentObject.name] = currentObject;
            }
            break;
          case 16640:
            startMapIndex = vertexList.length;
            startTriangleIndex = Math.floor(indexList.length / 3);
            break;
          case 16656:
            vertexCount = br.readUInt16();
            for (i = 0; i < vertexCount; i++) {
              var x = br.readSingle() - offsetX;
              var y = br.readSingle() - offsetY;
              var z = br.readSingle() - offsetZ;
              var vert = PositionNormalTextured._create(x * scale, z * scale, y * scale, 0, 0, 0, 0, 0);
              vertexList.push(vert);
            }
            break;
          case 16672:
            var triCount = br.readUInt16();
            triangleCount += triCount;
            for (i = 0; i < triCount; i++) {
              var aa = br.readUInt16() + startMapIndex;
              var bb = br.readUInt16() + startMapIndex;
              var cc = br.readUInt16() + startMapIndex;
              indexList.push(cc);
              indexList.push(bb);
              indexList.push(aa);
              var flags = br.readUInt16();
            }
            break;
          case 16688:
            material = '';
            i = 0;
            var b1;
            do {
              b1 = br.readByte();
              if (b1 > 0) {
                material += String.fromCharCode(b1);
              }
              i++;
            } while (!!b1);
            var triCount = br.readUInt16();
            var applyList = new Array(triCount);
            attributeID = Object3d._getMaterialID(material, materialNames);
            for (i = 0; i < triCount; i++) {
              applyList[i] = br.readUInt16() + startTriangleIndex;
            }
            currentObject.applyLists.push(applyList);
            currentObject.applyListsIndex.push(attributeID);
            break;
          case 16704:
            count = br.readUInt16();
            for (i = 0; i < count; i++) {
              var vert = vertexList[startMapIndex + i];
              var texCoord = Vector2d.create(br.readSingle(), (this.flipV) ? (1 - br.readSingle()) : br.readSingle());
              vertexList[startMapIndex + i] = PositionNormalTextured.createUV(vert.get_position(), new Vector3d(), texCoord);
            }
            break;
          case 16736:
            var mat = new Array(12);
            for (i = 0; i < 12; i++) {
              mat[i] = br.readSingle();
            }
            if (ss.keyExists(objectTable, name)) {
              objectTable[name].localMat = Matrix3d.create(mat[0], mat[1], mat[2], 0, mat[3], mat[4], mat[5], 0, mat[6], mat[7], mat[8], 0, mat[9], mat[10], mat[11], 1);
              objectTable[name].localMat.invert();
            }
            break;
          case 45055:
            break;
          case 40960:
            var matName = '';
            i = 0;
            var b2;
            do {
              b2 = br.readByte();
              if (b2 > 0) {
                matName += String.fromCharCode(b2);
              }
              i++;
            } while (!!b2);
            materialNames.push(matName);
            if (currentMaterialIndex > -1) {
              this._addMaterial(currentMaterial);
            }
            currentMaterialIndex++;
            currentMaterial = new Material();
            currentMaterial.diffuse = Colors.get_white();
            currentMaterial.ambient = Colors.get_white();
            currentMaterial.specular = Colors.get_black();
            currentMaterial.specularSharpness = 30;
            currentMaterial.opacity = 1;
            break;
          case 40976:
            currentMaterial.ambient = this._loadColorChunk(br);
            break;
          case 40992:
            currentMaterial.diffuse = this._loadColorChunk(br);
            break;
          case 41008:
            currentMaterial.specular = this._loadColorChunk(br);
            break;
          case 41024:
            currentMaterial.specularSharpness = 1 + 2 * this._loadPercentageChunk(br);
            currentMaterial.specularSharpness = Math.max(10, currentMaterial.specularSharpness);
            break;
          case 41472:
            break;
          case 41728:
            var textureFilename = '';
            i = 0;
            var b2;
            do {
              b2 = br.readByte();
              if (b2 > 0) {
                textureFilename += String.fromCharCode(b2);
              }
              i++;
            } while (!!b2);
            var path = this.filename.substring(0, this.filename.lastIndexOf('\\') + 1);
            try {
              var tex = this._tourDocument.getCachedTexture2d(path + textureFilename);
              if (tex != null) {
                this._meshTextures.push(tex);
                this.meshFilenames.push(textureFilename);
                currentMaterial.diffuse = Colors.get_white();
              }
              else {
                this._meshTextures.push(null);
              }
            }
            catch ($e1) {
              this._meshTextures.push(null);
            }
            break;
          case 41520:
            var percentage = this._loadPercentageChunk(br);
            var nameId = br.readUInt16();
            var nameBlockLength = br.readUInt32();
            var textureFilename = '';
            i = 0;
            var b2;
            do {
              b2 = br.readByte();
              if (b2 > 0) {
                textureFilename += String.fromCharCode(b2);
              }
              i++;
            } while (!!b2);
            var path = this.filename.substring(0, this.filename.lastIndexOf('\\') + 1);
            try {
              var tex = this._tourDocument.getCachedTexture2d(path + textureFilename);
              if (tex != null) {
                this._meshNormalMaps.push(tex);
                this.meshFilenames.push(textureFilename);
                normalMapFound = true;
              }
              else {
                this._meshNormalMaps.push(null);
              }
            }
            catch ($e2) {
              this._meshNormalMaps.push(null);
            }
            break;
          case 41476:
            var strength = this._loadPercentageChunk(br);
            var nameId = br.readUInt16();
            var nameBlockLength = br.readUInt32();
            var textureFilename = '';
            i = 0;
            var b2;
            do {
              b2 = br.readByte();
              if (b2 > 0) {
                textureFilename += String.fromCharCode(b2);
              }
              i++;
            } while (!!b2);
            var path = this.filename.substring(0, this.filename.lastIndexOf('\\') + 1);
            try {
              var tex = this._tourDocument.getCachedTexture2d(path + textureFilename);
              if (tex != null) {
                this._meshSpecularTextures.push(tex);
                this.meshFilenames.push(textureFilename);
                var gray = ss.truncate((255.99 * strength / 100));
                currentMaterial.specular = Color.fromArgb(255, gray, gray, gray);
              }
              else {
                this._meshSpecularTextures.push(null);
              }
            }
            catch ($e3) {
              this._meshSpecularTextures.push(null);
            }
            break;
          case 45056:
            break;
          case 45058:
            break;
          case 45072:
            name = '';
            i = 0;
            var b1;
            do {
              b1 = br.readByte();
              if (b1 > 0) {
                name += String.fromCharCode(b1);
              }
              i++;
            } while (!!b1);
            var dum1 = br.readUInt16();
            var dum2 = br.readUInt16();
            var level = br.readUInt16();
            if (level === 65535) {
              level = -1;
            }
            if (ss.startsWith(name, '$')) {
              dummyCount++;
            }
            else {
              objNames.push(name);
            }
            objHierarchy.push(level);
            if (ss.keyExists(objectTable, name)) {
              objectTable[name].level = level;
            }
            break;
          case 45073:
            name = '';
            i = 0;
            var b1;
            do {
              b1 = br.readByte();
              if (b1 > 0) {
                name += String.fromCharCode(b1);
              }
              i++;
            } while (!!b1);
            objNames.push('$$$' + name);
            break;
          case 45075:
            var points = new Array(3);
            for (i = 0; i < 3; i++) {
              points[i] = br.readSingle();
            }
            if (ss.keyExists(objectTable, name)) {
              objectTable[name].pivotPoint = Vector3d.create(-points[0], -points[1], -points[2]);
            }
            break;
          case 45088:
            var pos = new Array(8);
            for (i = 0; i < 8; i++) {
              pos[i] = br.readSingle();
            }
            break;
          default:
            br.seekRelative((sectionLength - 6));
            break;
        }
        lastID = sectionID;
      }
      br.close();
      if (currentMaterialIndex > -1) {
        this._addMaterial(currentMaterial);
      }
      var degtorag = Math.PI / 180;
      var creaseAngleRad = ((this.smooth) ? 70 * degtorag : 45 * degtorag);
      var vertexNormals = this._calculateVertexNormalsMerged(vertexList, indexList, creaseAngleRad);
      var newVertexList = [];
      var newVertexCount = triangleCount * 3;
      for (var vertexIndex = 0; vertexIndex < newVertexCount; ++vertexIndex) {
        var v = vertexList[indexList[vertexIndex]];
        v.set_normal(vertexNormals[vertexIndex]);
        newVertexList.push(v);
      }
      var newIndexList = [];
      var $enum4 = ss.enumerate(objects);
      while ($enum4.moveNext()) {
        var node = $enum4.current;
        var materialGroups = [];
        for (i = 0; i < node.applyLists.length; i++) {
          var matId = node.applyListsIndex[i];
          var startIndex = newIndexList.length;
          var $enum5 = ss.enumerate(node.applyLists[i]);
          while ($enum5.moveNext()) {
            var triangleIndex = $enum5.current;
            newIndexList.push((triangleIndex * 3));
            newIndexList.push((triangleIndex * 3 + 1));
            newIndexList.push((triangleIndex * 3 + 2));
          }
          var group = new Group();
          group.startIndex = startIndex;
          group.indexCount = node.applyLists[i].length * 3;
          group.materialIndex = matId;
          materialGroups.push(group);
        }
        node.drawGroup = materialGroups;
      }
      var nodeStack = new ss.Stack();
      var nodeTreeRoot = [];
      var rootDummy = new ObjectNode();
      rootDummy.name = 'Root';
      rootDummy.parent = null;
      rootDummy.level = -1;
      rootDummy.drawGroup = null;
      var currentLevel = -1;
      nodeStack.push(rootDummy);
      nodeTreeRoot.push(rootDummy);
      for (i = 0; i < objHierarchy.length; i++) {
        var level = objHierarchy[i];
        if (level <= currentLevel) {
          while (level <= nodeStack.peek().level && nodeStack.count > 1) {
            nodeStack.pop();
          }
          currentLevel = level;
        }
        if (ss.startsWith(objNames[i], '$$$')) {
          var dummy = new ObjectNode();
          dummy.name = ss.replaceString(objNames[i], '$$$', '');
          dummy.parent = nodeStack.peek();
          dummy.parent.children.push(dummy);
          dummy.level = currentLevel = level;
          dummy.drawGroup = null;
          nodeStack.push(dummy);
        }
        else {
          objectTable[objNames[i]].level = currentLevel = level;
          objectTable[objNames[i]].parent = nodeStack.peek();
          objectTable[objNames[i]].parent.children.push(objectTable[objNames[i]]);
          nodeStack.push(objectTable[objNames[i]]);
        }
      }
      if (!objHierarchy.length) {
        var $enum6 = ss.enumerate(objects);
        while ($enum6.moveNext()) {
          var node = $enum6.current;
          rootDummy.children.push(node);
          node.parent = rootDummy;
        }
      }
      if (normalMapFound) {
        var tangentIndexList = [];
        for (var tangentIndex = 0; tangentIndex < newVertexCount; ++tangentIndex) {
          tangentIndexList.push(tangentIndex);
        }
        var tangents = this._calculateVertexTangents(newVertexList, tangentIndexList, creaseAngleRad);
        var vertices = new Array(newVertexList.length);
        var vertexIndex = 0;
        var $enum7 = ss.enumerate(newVertexList);
        while ($enum7.moveNext()) {
          var v = $enum7.current;
          var tvertex = new PositionNormalTexturedTangent(v.get_position(), v.get_normal(), Vector2d.create(v.tu, v.tv), tangents[vertexIndex]);
          vertices[vertexIndex] = tvertex;
          ++vertexIndex;
        }
        this._mesh = Mesh.createTangent(vertices, newIndexList);
      }
      else {
        this._mesh = Mesh.create(newVertexList, newIndexList);
      }
      this.objects = nodeTreeRoot;
      this._mesh.setObjects(nodeTreeRoot);
      this._mesh.commitToDevice();
      this._dirty = false;
      this._readyToRender = true;
    },
    _offsetObjects: function(vertList, objects, offsetMat, offsetPoint) {
      var $enum1 = ss.enumerate(objects);
      while ($enum1.moveNext()) {
        var node = $enum1.current;
        var matLoc = node.localMat;
        this._offsetObjects(vertList, node.children, matLoc, Vector3d.addVectors(node.pivotPoint, offsetPoint));
        var $enum2 = ss.enumerate(node.drawGroup);
        while ($enum2.moveNext()) {
          var group = $enum2.current;
          var end = group.startIndex + group.indexCount;
          for (var i = group.startIndex; i < end; i++) {
            var vert = vertList[i];
            vert.set_position(Vector3d.addVectors(vert.get_position(), Vector3d.addVectors(node.pivotPoint, offsetPoint)));
            vertList[i] = vert;
          }
        }
      }
    },
    setupLighting: function(renderContext) {
      var objPosition = Vector3d.create(renderContext.get_world().get_offsetX(), renderContext.get_world().get_offsetY(), renderContext.get_world().get_offsetZ());
      var objToLight = Vector3d.subtractVectors(objPosition, renderContext.get_reflectedLightPosition());
      var sunPosition = Vector3d.subtractVectors(renderContext.get_sunPosition(), renderContext.get_reflectedLightPosition());
      var cosPhaseAngle = (sunPosition.length() <= 0) ? 1 : Vector3d.dot(objToLight, sunPosition) / (objToLight.length() * sunPosition.length());
      var reflectedLightFactor = Math.max(0, cosPhaseAngle);
      reflectedLightFactor = Math.sqrt(reflectedLightFactor);
      var hemiLightFactor = 0;
      var sunlightFactor = 1;
      if (renderContext.get_occludingPlanetRadius() > 0) {
        var objAltitude = Vector3d.subtractVectors(objPosition, renderContext.get_occludingPlanetPosition()).length() - renderContext.get_occludingPlanetRadius();
        hemiLightFactor = Math.max(0, Math.min(1, 1 - (objAltitude / renderContext.get_occludingPlanetRadius()) * 300));
        reflectedLightFactor *= (1 - hemiLightFactor);
        var sunToPlanet = Vector3d.subtractVectors(renderContext.get_occludingPlanetPosition(), renderContext.get_sunPosition());
        var objToPlanet = Vector3d.subtractVectors(renderContext.get_occludingPlanetPosition(), objPosition);
        var hemiLightDirection = Vector3d.create(-objToPlanet.x, -objToPlanet.y, -objToPlanet.z);
        hemiLightDirection.normalize();
        renderContext.set_hemisphereLightUp(hemiLightDirection);
        var objToSun = Vector3d.subtractVectors(renderContext.get_sunPosition(), objPosition);
        var sunPlanetDistance = sunToPlanet.length();
        var t = -Vector3d.dot(objToSun, sunToPlanet) / (sunPlanetDistance * sunPlanetDistance);
        if (t > 1) {
          var shadowAxisPoint = Vector3d.addVectors(renderContext.get_sunPosition(), Vector3d.multiplyScalar(sunToPlanet, t));
          var d = Vector3d.subtractVectors(shadowAxisPoint, objPosition).length();
          var s = Vector3d.subtractVectors(shadowAxisPoint, renderContext.get_sunPosition()).length();
          var solarRadius = 0.004645784;
          var penumbraRadius = renderContext.get_occludingPlanetRadius() + (t - 1) * (renderContext.get_occludingPlanetRadius() + solarRadius);
          var umbraRadius = renderContext.get_occludingPlanetRadius() + (t - 1) * (renderContext.get_occludingPlanetRadius() - solarRadius);
          if (d < penumbraRadius) {
            var minimumShadow = 0;
            if (umbraRadius < 0) {
              var occlusion = Math.pow(1 / (1 - umbraRadius), 2);
              umbraRadius = 0;
              minimumShadow = 1 - occlusion;
            }
            var u = Math.max(0, umbraRadius);
            sunlightFactor = Math.max(minimumShadow, (d - u) / (penumbraRadius - u));
            var gray = ss.truncate((255.99 * sunlightFactor));
            renderContext.set_sunlightColor(Color.fromArgb(255, gray, gray, gray));
            hemiLightFactor *= sunlightFactor;
          }
        }
      }
      renderContext.set_reflectedLightColor(Color.fromArgb(255, ss.truncate((renderContext.get_reflectedLightColor().r * reflectedLightFactor)), ss.truncate((renderContext.get_reflectedLightColor().g * reflectedLightFactor)), ss.truncate((renderContext.get_reflectedLightColor().b * reflectedLightFactor))));
      renderContext.set_hemisphereLightColor(Color.fromArgb(255, ss.truncate((renderContext.get_hemisphereLightColor().r * hemiLightFactor)), ss.truncate((renderContext.get_hemisphereLightColor().g * hemiLightFactor)), ss.truncate((renderContext.get_hemisphereLightColor().b * hemiLightFactor))));
    },
    render: function(renderContext, opacity) {
      if (!this._readyToRender) {
        return;
      }
      if (this._dirty && !this.issLayer) {
        this._reload();
      }
      var oldWorld = renderContext.get_world();
      var offset = this._mesh.boundingSphere.center;
      var unitScale = 1;
      if (this._mesh.boundingSphere.radius > 0) {
        unitScale = 1 / this._mesh.boundingSphere.radius;
      }
      renderContext.set_world(Matrix3d.multiplyMatrix(Matrix3d.multiplyMatrix(Matrix3d.translation(Vector3d.create(-offset.x, -offset.y, -offset.z)), Matrix3d._scaling(unitScale, unitScale, unitScale)), oldWorld));
      var worldView = Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
      var v = worldView.transform(Vector3d.get_empty());
      var scaleFactor = Math.sqrt(worldView.get_m11() * worldView.get_m11() + worldView.get_m22() * worldView.get_m22() + worldView.get_m33() * worldView.get_m33()) / unitScale;
      var dist = v.length();
      var radius = scaleFactor;
      var viewportHeight = ss.truncate(renderContext.height);
      var p11 = renderContext.get_projection().get_m11();
      var p34 = renderContext.get_projection().get_m34();
      var p44 = renderContext.get_projection().get_m44();
      var w = Math.abs(p34) * dist + p44;
      var pixelsPerUnit = (p11 / w) * viewportHeight;
      var radiusInPixels = (radius * pixelsPerUnit);
      if (radiusInPixels < 0.5) {
        return;
      }
      var savedSunlightColor = renderContext.get_sunlightColor();
      var savedReflectedColor = renderContext.get_reflectedLightColor();
      var savedHemiColor = renderContext.get_hemisphereLightColor();
      if (Settings.get_current().get_solarSystemLighting()) {
        this.setupLighting(renderContext);
        if (!this.useCurrentAmbient) {
          renderContext.set_ambientLightColor(Color.fromArgb(255, 11, 11, 11));
        }
      }
      else {
        renderContext.set_sunlightColor(Colors.get_black());
        renderContext.set_reflectedLightColor(Colors.get_black());
        renderContext.set_hemisphereLightColor(Colors.get_black());
        renderContext.set_ambientLightColor(Colors.get_white());
      }
      if (this._mesh == null) {
        return;
      }
      ModelShader.minLightingBrightness = 0.1;
      var count = this._meshMaterials.length;
      this._mesh.beginDrawing(renderContext);
      if (count > 0) {
        for (var i = 0; i < this._meshMaterials.length; i++) {
          if (this._meshMaterials[i].isDefault) {
            var mat = this._meshMaterials[i];
            mat.diffuse = this.color;
            mat.ambient = this.color;
            this._meshMaterials[i] = mat;
          }
          renderContext.setMaterial(this._meshMaterials[i], this._meshTextures[i], this._meshSpecularTextures[i], this._meshNormalMaps[i], opacity);
          if (this._mesh.vertexBuffer != null) {
            ModelShader.use(renderContext, this._mesh.vertexBuffer.vertexBuffer, this._mesh.indexBuffer.buffer, (this._meshTextures[i] != null) ? this._meshTextures[i].texture2d : null, opacity, false, 32);
          }
          else {
            ModelShader.use(renderContext, this._mesh.tangentVertexBuffer.vertexBuffer, this._mesh.indexBuffer.buffer, (this._meshTextures[i] != null) ? this._meshTextures[i].texture2d : null, opacity, false, 44);
          }
          renderContext.preDraw();
          this._mesh.drawSubset(renderContext, i);
        }
      }
      else {
        renderContext.preDraw();
        for (var i = 0; i < this._meshTextures.length; i++) {
          if (this._meshTextures[i] != null) {
            renderContext.set_mainTexture(this._meshTextures[i]);
            if (this._mesh.vertexBuffer != null) {
              ModelShader.use(renderContext, this._mesh.vertexBuffer.vertexBuffer, this._mesh.indexBuffer.buffer, (this._meshTextures[i] != null) ? this._meshTextures[i].texture2d : null, opacity, false, 32);
            }
            else {
              ModelShader.use(renderContext, this._mesh.tangentVertexBuffer.vertexBuffer, this._mesh.indexBuffer.buffer, (this._meshTextures[i] != null) ? this._meshTextures[i].texture2d : null, opacity, false, 44);
            }
          }
          renderContext.preDraw();
          this._mesh.drawSubset(renderContext, i);
        }
      }
      renderContext.set_world(oldWorld);
      renderContext.set_sunlightColor(savedSunlightColor);
      renderContext.set_reflectedLightColor(savedReflectedColor);
      renderContext.set_hemisphereLightColor(savedHemiColor);
      renderContext.set_ambientLightColor(Colors.get_black());
    },
    dispose: function() {
      if (this._mesh != null) {
        this._mesh.dispose();
        this._mesh = null;
      }
      var $enum1 = ss.enumerate(ss.keys(this._textureCache));
      while ($enum1.moveNext()) {
        var key = $enum1.current;
        var tex = this._textureCache[key];
        if (tex != null) {
          tex.dispose();
        }
      }
      ss.clearKeys(this._textureCache);
      Object3d._disposeTextureList(this._meshTextures);
      Object3d._disposeTextureList(this._meshSpecularTextures);
      Object3d._disposeTextureList(this._meshNormalMaps);
      this._meshMaterials.length = 0;
      this._dirty = true;
    }
  };


  // wwtlib.ObjectNode

  function ObjectNode() {
    this.level = -1;
    this.children = [];
    this.enabled = true;
    this.drawGroup = [];
    this.applyLists = [];
    this.applyListsIndex = [];
  }
  var ObjectNode$ = {

  };


  // wwtlib.Orbit

  function Orbit(elements, segments, color, thickness, scale) {
    this._elements = null;
    this._orbitColor = Colors.get_white();
    this._scale = 0;
    this._segmentCount = 0;
    this._elements = elements;
    this._segmentCount = segments;
    this._orbitColor = color;
    this._scale = scale;
  }
  var Orbit$ = {
    cleanUp: function() {
    },
    get_boundingRadius: function() {
      if (this._elements != null) {
        return (this._elements.a * (1 + this._elements.e)) / this._scale;
      }
      else {
        return 0;
      }
    },
    draw3D: function(renderContext, opacity, centerPoint) {
      var orbitalPlaneOrientation = Matrix3d.multiplyMatrix(Matrix3d._rotationZ(Coordinates.degreesToRadians(this._elements.w)), Matrix3d.multiplyMatrix(Matrix3d._rotationX(Coordinates.degreesToRadians(this._elements.i)), Matrix3d._rotationZ(Coordinates.degreesToRadians(this._elements.omega))));
      orbitalPlaneOrientation = Matrix3d.multiplyMatrix(orbitalPlaneOrientation, Orbit._orbitalToWwt);
      var worldMatrix = Matrix3d.multiplyMatrix(Matrix3d.multiplyMatrix(orbitalPlaneOrientation, Matrix3d.translation(centerPoint)), renderContext.get_world());
      var M = this._elements.n * (SpaceTimeController.get_jNow() - this._elements.t);
      var F = 1;
      if (M < 0) {
        F = -1;
      }
      M = Math.abs(M) / 360;
      M = (M - ss.truncate(M)) * 360 * F;
      var color = Color._fromArgbColor(ss.truncate((opacity * 255)), this._orbitColor);
      M = Coordinates.degreesToRadians(M);
      var E = M;
      for (var i = 0; i < 5; i++) {
        E += (M - E + this._elements.e * Math.sin(E)) / (1 - this._elements.e * Math.cos(E));
      }
      EllipseRenderer.drawEllipse(renderContext, this._elements.a / this._scale, this._elements.e, E, color, worldMatrix);
    }
  };


  // wwtlib.EllipseRenderer

  function EllipseRenderer() {
  }
  EllipseRenderer.drawEllipseWithPosition = function(renderContext, semiMajorAxis, eccentricity, eccentricAnomaly, color, worldMatrix, positionNow) {
    if (EllipseRenderer._ellipseShader == null) {
      EllipseRenderer._ellipseShader = new EllipseShader();
    }
    if (EllipseRenderer._ellipseVertexBuffer == null) {
      EllipseRenderer._ellipseVertexBuffer = EllipseRenderer.createEllipseVertexBuffer(500);
    }
    var savedWorld = renderContext.get_world();
    renderContext.set_world(worldMatrix);
    renderContext.gl.bindBuffer(34962, EllipseRenderer._ellipseVertexBuffer.vertexBuffer);
    renderContext.gl.bindBuffer(34963, null);
    EllipseShader.use(renderContext, semiMajorAxis, eccentricity, eccentricAnomaly, color, 1, savedWorld, positionNow);
    renderContext.gl.drawArrays(3, 0, EllipseRenderer._ellipseVertexBuffer.count);
    renderContext.set_world(savedWorld);
  };
  EllipseRenderer.drawEllipse = function(renderContext, semiMajorAxis, eccentricity, eccentricAnomaly, color, worldMatrix) {
    if (EllipseRenderer._ellipseShader == null) {
      EllipseRenderer._ellipseShader = new EllipseShader();
    }
    if (EllipseRenderer._ellipseWithoutStartPointVertexBuffer == null) {
      EllipseRenderer._ellipseWithoutStartPointVertexBuffer = EllipseRenderer.createEllipseVertexBufferWithoutStartPoint(360);
    }
    var savedWorld = renderContext.get_world();
    renderContext.set_world(worldMatrix);
    renderContext.gl.bindBuffer(34962, EllipseRenderer._ellipseWithoutStartPointVertexBuffer.vertexBuffer);
    renderContext.gl.bindBuffer(34963, null);
    EllipseShader.use(renderContext, semiMajorAxis, eccentricity, eccentricAnomaly, color, 1, savedWorld, Vector3d.create(0, 0, 0));
    renderContext.gl.drawArrays(3, 0, EllipseRenderer._ellipseWithoutStartPointVertexBuffer.count - 1);
    renderContext.set_world(savedWorld);
  };
  EllipseRenderer.createEllipseVertexBuffer = function(vertexCount) {
    var vb = new PositionVertexBuffer(vertexCount);
    var verts = vb.lock();
    var index = 0;
    for (var i = 0; i < vertexCount / 2; ++i) {
      verts[index++] = Vector3d.create(2 * i / vertexCount * 0.05, 0, 0);
    }
    for (var i = 0; i < vertexCount / 2; ++i) {
      verts[index++] = Vector3d.create(2 * i / vertexCount * 0.95 + 0.05, 0, 0);
    }
    vb.unlock();
    return vb;
  };
  EllipseRenderer.createEllipseVertexBufferWithoutStartPoint = function(vertexCount) {
    var vb = new PositionVertexBuffer(vertexCount);
    var verts = vb.lock();
    verts[0] = Vector3d.create(1E-06, 0, 0);
    for (var i = 1; i < vertexCount; ++i) {
      verts[i] = Vector3d.create(2 * i / vertexCount, 0, 0);
    }
    vb.unlock();
    return vb;
  };
  var EllipseRenderer$ = {

  };


  // wwtlib.ReferenceFrame

  function ReferenceFrame() {
    this._systemGenerated = false;
    this.meanAnomoly = 0;
    this.orbitalYears = 0;
    this.observingLocation = false;
    this.reference = 18;
    this.parentsRoationalBase = false;
    this.referenceFrameType = 0;
    this.meanRadius = 6371000;
    this.oblateness = 0.0033528;
    this.heading = 0;
    this.pitch = 0;
    this.roll = 0;
    this.scale = 1;
    this.tilt = 0;
    this.translation = new Vector3d();
    this.lat = 0;
    this.lng = 0;
    this.altitude = 0;
    this.rotationalPeriod = 0;
    this.zeroRotationDate = 0;
    this.representativeColor = Colors.get_white();
    this.showAsPoint = false;
    this.showOrbitPath = false;
    this.stationKeeping = true;
    this.semiMajorAxis = 0;
    this.semiMajorAxisUnits = 1;
    this.eccentricity = 0;
    this.inclination = 0;
    this.argumentOfPeriapsis = 0;
    this.longitudeOfAscendingNode = 0;
    this.meanAnomolyAtEpoch = 0;
    this.meanDailyMotion = 0;
    this.epoch = 0;
    this._orbit = null;
    this._elements = new EOE();
    this.worldMatrix = new Matrix3d();
    this.worldMatrix = Matrix3d.get_identity();
  }
  ReferenceFrame.isTLECheckSumGood = function(line) {
    if (line.length !== 69) {
      return false;
    }
    var checksum = 0;
    for (var i = 0; i < 68; i++) {
      switch (line.substr(i, 1)) {
        case '1':
          checksum += 1;
          break;
        case '2':
          checksum += 2;
          break;
        case '3':
          checksum += 3;
          break;
        case '4':
          checksum += 4;
          break;
        case '5':
          checksum += 5;
          break;
        case '6':
          checksum += 6;
          break;
        case '7':
          checksum += 7;
          break;
        case '8':
          checksum += 8;
          break;
        case '9':
          checksum += 9;
          break;
        case '-':
          checksum += 1;
          break;
      }
    }
    return (checksum % 10).toString() === line.charAt(68).toString();
  };
  ReferenceFrame.toTLEExponential = function(num, size) {
    var exp = num.toExponential(size);
    if (exp.length < size + 6) {
      exp = exp.substring(0, size + 4) + '0' + exp.substr(size + 4, 1);
    }
    return exp;
  };
  ReferenceFrame.tleNumberString = function(num, left, right) {
    var formated = num.toFixed(right);
    var point = formated.indexOf('.');
    if (point === -1) {
      point = formated.length;
      formated += '.0';
    }
    var len = formated.length - point - 1;
    var fill = '00000000';
    formated = fill.substr(0, left - point) + formated + fill.substr(0, right - len);
    return formated;
  };
  ReferenceFrame.computeTLECheckSum = function(line) {
    if (line.length !== 68) {
      return '0';
    }
    var checksum = 0;
    for (var i = 0; i < 68; i++) {
      switch (line[i]) {
        case '1':
          checksum += 1;
          break;
        case '2':
          checksum += 2;
          break;
        case '3':
          checksum += 3;
          break;
        case '4':
          checksum += 4;
          break;
        case '5':
          checksum += 5;
          break;
        case '6':
          checksum += 6;
          break;
        case '7':
          checksum += 7;
          break;
        case '8':
          checksum += 8;
          break;
        case '9':
          checksum += 9;
          break;
        case '-':
          checksum += 1;
          break;
      }
    }
    return ((checksum % 10));
  };
  var ReferenceFrame$ = {
    get_representativeColor: function() {
      return this.representativeColor;
    },
    set_representativeColor: function(value) {
      if (value !== this.representativeColor) {
        this.representativeColor = value;
        this._orbit = null;
      }
      return value;
    },
    get_orbit: function() {
      return this._orbit;
    },
    set_orbit: function(value) {
      this._orbit = value;
      return value;
    },
    getIndentifier: function() {
      return this.name;
    },
    importTrajectory: function(filename) {
    },
    saveToXml: function(xmlWriter) {
      xmlWriter._writeStartElement('ReferenceFrame');
      xmlWriter._writeAttributeString('Name', this.name);
      xmlWriter._writeAttributeString('Parent', this.parent);
      xmlWriter._writeAttributeString('ReferenceFrameType', Enums.toXml('ReferenceFrameTypes', this.referenceFrameType));
      xmlWriter._writeAttributeString('Reference', Enums.toXml('ReferenceFrames', this.reference));
      xmlWriter._writeAttributeString('ParentsRoationalBase', this.parentsRoationalBase.toString());
      xmlWriter._writeAttributeString('MeanRadius', this.meanRadius.toString());
      xmlWriter._writeAttributeString('Oblateness', this.oblateness.toString());
      xmlWriter._writeAttributeString('Heading', this.heading.toString());
      xmlWriter._writeAttributeString('Pitch', this.pitch.toString());
      xmlWriter._writeAttributeString('Roll', this.roll.toString());
      xmlWriter._writeAttributeString('Scale', this.scale.toString());
      xmlWriter._writeAttributeString('Tilt', this.tilt.toString());
      xmlWriter._writeAttributeString('Translation', this.translation.toString());
      if (!this.referenceFrameType) {
        xmlWriter._writeAttributeString('Lat', this.lat.toString());
        xmlWriter._writeAttributeString('Lng', this.lng.toString());
        xmlWriter._writeAttributeString('Altitude', this.altitude.toString());
      }
      xmlWriter._writeAttributeString('RotationalPeriod', this.rotationalPeriod.toString());
      xmlWriter._writeAttributeString('ZeroRotationDate', this.zeroRotationDate.toString());
      xmlWriter._writeAttributeString('RepresentativeColor', this.get_representativeColor().save());
      xmlWriter._writeAttributeString('ShowAsPoint', this.showAsPoint.toString());
      xmlWriter._writeAttributeString('ShowOrbitPath', this.showOrbitPath.toString());
      xmlWriter._writeAttributeString('StationKeeping', this.stationKeeping.toString());
      if (this.referenceFrameType === 1) {
        xmlWriter._writeAttributeString('SemiMajorAxis', this.semiMajorAxis.toString());
        xmlWriter._writeAttributeString('SemiMajorAxisScale', Enums.toXml('AltUnits', this.semiMajorAxisUnits));
        xmlWriter._writeAttributeString('Eccentricity', this.eccentricity.toString());
        xmlWriter._writeAttributeString('Inclination', this.inclination.toString());
        xmlWriter._writeAttributeString('ArgumentOfPeriapsis', this.argumentOfPeriapsis.toString());
        xmlWriter._writeAttributeString('LongitudeOfAscendingNode', this.longitudeOfAscendingNode.toString());
        xmlWriter._writeAttributeString('MeanAnomolyAtEpoch', this.meanAnomolyAtEpoch.toString());
        xmlWriter._writeAttributeString('MeanDailyMotion', this.meanDailyMotion.toString());
        xmlWriter._writeAttributeString('Epoch', this.epoch.toString());
      }
      xmlWriter._writeEndElement();
    },
    initializeFromXml: function(node) {
      this.name = node.attributes.getNamedItem('Name').nodeValue;
      this.parent = node.attributes.getNamedItem('Parent').nodeValue;
      this.referenceFrameType = Enums.parse('ReferenceFrameTypes', node.attributes.getNamedItem('ReferenceFrameType').nodeValue);
      this.reference = Enums.parse('ReferenceFrames', node.attributes.getNamedItem('Reference').nodeValue);
      this.parentsRoationalBase = ss.boolean(node.attributes.getNamedItem('ParentsRoationalBase').nodeValue);
      this.meanRadius = parseFloat(node.attributes.getNamedItem('MeanRadius').nodeValue);
      this.oblateness = parseFloat(node.attributes.getNamedItem('Oblateness').nodeValue);
      this.heading = parseFloat(node.attributes.getNamedItem('Heading').nodeValue);
      this.pitch = parseFloat(node.attributes.getNamedItem('Pitch').nodeValue);
      this.roll = parseFloat(node.attributes.getNamedItem('Roll').nodeValue);
      this.scale = parseFloat(node.attributes.getNamedItem('Scale').nodeValue);
      this.tilt = parseFloat(node.attributes.getNamedItem('Tilt').nodeValue);
      this.translation = Vector3d.parse(node.attributes.getNamedItem('Translation').nodeValue);
      if (!this.referenceFrameType) {
        this.lat = parseFloat(node.attributes.getNamedItem('Lat').nodeValue);
        this.lng = parseFloat(node.attributes.getNamedItem('Lng').nodeValue);
        this.altitude = parseFloat(node.attributes.getNamedItem('Altitude').nodeValue);
      }
      this.rotationalPeriod = parseFloat(node.attributes.getNamedItem('RotationalPeriod').nodeValue);
      this.zeroRotationDate = parseFloat(node.attributes.getNamedItem('ZeroRotationDate').nodeValue);
      this.set_representativeColor(Color.load(node.attributes.getNamedItem('RepresentativeColor').nodeValue));
      this.showAsPoint = ss.boolean(node.attributes.getNamedItem('ShowAsPoint').nodeValue);
      if (node.attributes.getNamedItem('StationKeeping') != null) {
        this.stationKeeping = ss.boolean(node.attributes.getNamedItem('StationKeeping').nodeValue);
      }
      if (this.referenceFrameType === 1) {
        this.showOrbitPath = ss.boolean(node.attributes.getNamedItem('ShowOrbitPath').nodeValue);
        this.semiMajorAxis = parseFloat(node.attributes.getNamedItem('SemiMajorAxis').nodeValue);
        this.semiMajorAxisUnits = Enums.parse('AltUnits', node.attributes.getNamedItem('SemiMajorAxisScale').nodeValue);
        this.eccentricity = parseFloat(node.attributes.getNamedItem('Eccentricity').nodeValue);
        this.inclination = parseFloat(node.attributes.getNamedItem('Inclination').nodeValue);
        this.argumentOfPeriapsis = parseFloat(node.attributes.getNamedItem('ArgumentOfPeriapsis').nodeValue);
        this.longitudeOfAscendingNode = parseFloat(node.attributes.getNamedItem('LongitudeOfAscendingNode').nodeValue);
        this.meanAnomolyAtEpoch = parseFloat(node.attributes.getNamedItem('MeanAnomolyAtEpoch').nodeValue);
        this.meanDailyMotion = parseFloat(node.attributes.getNamedItem('MeanDailyMotion').nodeValue);
        this.epoch = parseFloat(node.attributes.getNamedItem('Epoch').nodeValue);
      }
    },
    fromTLE: function(line1, line2, gravity) {
      this.epoch = SpaceTimeController._twoLineDateToJulian(line1.substr(18, 14));
      this.eccentricity = parseFloat('0.' + line2.substr(26, 7));
      this.inclination = parseFloat(line2.substr(8, 8));
      this.longitudeOfAscendingNode = parseFloat(line2.substr(17, 8));
      this.argumentOfPeriapsis = parseFloat(line2.substr(34, 8));
      var revs = parseFloat(line2.substr(52, 11));
      this.meanAnomolyAtEpoch = parseFloat(line2.substr(43, 8));
      this.meanDailyMotion = revs * 360;
      var part = (86400 / revs) / (Math.PI * 2);
      this.semiMajorAxis = Math.pow((part * part) * gravity, 1 / 3);
      this.semiMajorAxisUnits = 1;
    },
    toTLE: function() {
      var line1 = new ss.StringBuilder();
      line1.append('1 99999U 00111AAA ');
      line1.append(SpaceTimeController.julianToTwoLineDate(this.epoch));
      line1.append(' ');
      line1.append(this.semiMajorAxis.toExponential(4));
      line1.append(' 00000-0 ');
      line1.append(ReferenceFrame.toTLEExponential(this.meanDailyMotion, 5));
      line1.append('  001');
      line1.append(ReferenceFrame.computeTLECheckSum(line1.toString()));
      line1.appendLine('');
      var line2 = new ss.StringBuilder();
      line2.append('2 99999 ');
      line2.append(ReferenceFrame.tleNumberString(this.inclination, 3, 4) + ' ');
      line2.append(ReferenceFrame.tleNumberString(this.longitudeOfAscendingNode, 3, 4) + ' ');
      line2.append((ReferenceFrame.tleNumberString(this.eccentricity, 1, 7) + ' ').substring(2));
      line2.append(ReferenceFrame.tleNumberString(this.argumentOfPeriapsis, 3, 4) + ' ');
      line2.append(ReferenceFrame.tleNumberString(this.meanAnomolyAtEpoch, 3, 4) + ' ');
      line2.append(ReferenceFrame.toTLEExponential(this.meanDailyMotion / 207732, 5));
      line2.append('00001');
      line2.append(ReferenceFrame.computeTLECheckSum(line2.toString()));
      line2.appendLine('');
      return line1.toString() + line2.toString();
    },
    get_elements: function() {
      this._elements.a = this.semiMajorAxis;
      this._elements.e = this.eccentricity;
      this._elements.i = this.inclination;
      this._elements.w = this.argumentOfPeriapsis;
      this._elements.omega = this.longitudeOfAscendingNode;
      this._elements.jdEquinox = this.epoch;
      if (!this.meanDailyMotion) {
        this._elements.n = ELL.meanMotionFromSemiMajorAxis(this._elements.a);
      }
      else {
        this._elements.n = this.meanDailyMotion;
      }
      this._elements.t = this.epoch - (this.meanAnomolyAtEpoch / this._elements.n);
      return this._elements;
    },
    set_elements: function(value) {
      this._elements = value;
      return value;
    },
    computeFrame: function(renderContext) {
      switch (this.referenceFrameType) {
        case 1:
          this._computeOrbital(renderContext);
          break;
        case 0:
          this._computeFixedSherical(renderContext);
          break;
        case 2:
          this._computeFrameTrajectory(renderContext);
          break;
        default:
          break;
      }
    },
    useRotatingParentFrame: function() {
      switch (this.referenceFrameType) {
        case 1:
        case 2:
        case 3:
          return false;
        default:
          return true;
      }
    },
    _computeFixedRectangular: function(renderContext) {
    },
    _computeFixedSherical: function(renderContext) {
      if (this.observingLocation) {
        this.lat = SpaceTimeController.get_location().get_lat();
        this.lng = SpaceTimeController.get_location().get_lng();
        this.altitude = SpaceTimeController.get_altitude();
      }
      this.worldMatrix = Matrix3d.get_identity();
      this.worldMatrix.translate(this.translation);
      var localScale = (1 / renderContext.get_nominalRadius()) * this.scale * this.meanRadius;
      this.worldMatrix.scale(Vector3d.create(localScale, localScale, localScale));
      this.worldMatrix._multiply(Matrix3d.rotationYawPitchRoll((this.heading / 180 * Math.PI), (this.pitch / 180 * Math.PI), (this.roll / 180 * Math.PI)));
      this.worldMatrix._multiply(Matrix3d._rotationZ(-90 / 180 * Math.PI));
      if (!!this.rotationalPeriod) {
        var rotationCurrent = (((SpaceTimeController.get_jNow() - this.zeroRotationDate) / this.rotationalPeriod) * Math.PI * 2) % (Math.PI * 2);
        this.worldMatrix._multiply(Matrix3d._rotationX(-rotationCurrent));
      }
      this.worldMatrix.translate(Vector3d.create(1 + (this.altitude / renderContext.get_nominalRadius()), 0, 0));
      this.worldMatrix._multiply(Matrix3d._rotationZ(this.lat / 180 * Math.PI));
      this.worldMatrix._multiply(Matrix3d._rotationY(-(this.lng + 180) / 180 * Math.PI));
    },
    _computeFrameTrajectory: function(renderContext) {
    },
    _computeOrbital: function(renderContext) {
      var ee = this.get_elements();
      var point = ELL.calculateRectangularJD(SpaceTimeController.get_jNow(), ee);
      this.meanAnomoly = ee.meanAnnomolyOut;
      var pointInstantLater = ELL.calculateRectangular(ee, this.meanAnomoly + 0.001);
      var direction = Vector3d.subtractVectors(point, pointInstantLater);
      var up = point.copy();
      up.normalize();
      direction.normalize();
      var dist = point.length();
      var scaleFactor = 1;
      switch (this.semiMajorAxisUnits) {
        case 1:
          scaleFactor = 1;
          break;
        case 2:
          scaleFactor = 1 / 3.2808399;
          break;
        case 3:
          scaleFactor = (1 / 3.2808399) / 12;
          break;
        case 4:
          scaleFactor = 1609.344;
          break;
        case 5:
          scaleFactor = 1000;
          break;
        case 6:
          scaleFactor = 149598000 * 1000;
          break;
        case 7:
          scaleFactor = 63239.6717 * 149598000 * 1000;
          break;
        case 8:
          scaleFactor = 206264.806 * 149598000 * 1000;
          break;
        case 9:
          scaleFactor = 206264.806 * 149598000 * 1000 * 1000000;
          break;
        case 10:
          scaleFactor = 1;
          break;
        default:
          break;
      }
      scaleFactor *= 1 / renderContext.get_nominalRadius();
      var look = Matrix3d.lookAtLH(Vector3d.create(0, 0, 0), direction, up);
      look.invert();
      this.worldMatrix = Matrix3d.get_identity();
      this.worldMatrix.translate(this.translation);
      var localScale = (1 / renderContext.get_nominalRadius()) * this.scale * this.meanRadius;
      this.worldMatrix.scale(Vector3d.create(localScale, localScale, localScale));
      this.worldMatrix._multiply(Matrix3d.rotationYawPitchRoll((this.heading / 180 * Math.PI), (this.pitch / 180 * Math.PI), (this.roll / 180 * Math.PI)));
      if (!!this.rotationalPeriod) {
        var rotationCurrent = (((SpaceTimeController.get_jNow() - this.zeroRotationDate) / this.rotationalPeriod) * Math.PI * 2) % (Math.PI * 2);
        this.worldMatrix._multiply(Matrix3d._rotationX(-rotationCurrent));
      }
      point = Vector3d.scale(point, scaleFactor);
      this.worldMatrix.translate(point);
      if (this.stationKeeping) {
        this.worldMatrix = Matrix3d.multiplyMatrix(look, this.worldMatrix);
      }
    }
  };


  // wwtlib.KmlCoordinate

  function KmlCoordinate() {
    this.lat = 0;
    this.lng = 0;
    this.alt = 0;
  }
  var KmlCoordinate$ = {

  };


  // wwtlib.KmlLineList

  function KmlLineList() {
    this.extrude = false;
    this.astronomical = false;
    this.meanRadius = 6371000;
    this.pointList = [];
  }
  var KmlLineList$ = {
    parseWkt: function(geoText, option, alt, date) {
      var parts = UiTools.split(geoText, '(,)');
      var $enum1 = ss.enumerate(parts);
      while ($enum1.moveNext()) {
        var part = $enum1.current;
        var coordinates = ss.trim(part).split(' ');
        if (coordinates.length > 1) {
          var pnt = new KmlCoordinate();
          pnt.lng = parseFloat(coordinates[0]);
          if (this.astronomical) {
            pnt.lng -= 180;
          }
          pnt.lat = parseFloat(coordinates[1]);
          if (coordinates.length > 2 && !alt) {
            pnt.alt = parseFloat(coordinates[2]);
          }
          else {
            pnt.alt = alt;
          }
          pnt.date = date;
          this.pointList.push(pnt);
        }
      }
    },
    getCenterPoint: function() {
      var point = new KmlCoordinate();
      point.lat = 0;
      point.lng = 0;
      point.alt = 0;
      var $enum1 = ss.enumerate(this.pointList);
      while ($enum1.moveNext()) {
        var pnt = $enum1.current;
        point.lat += pnt.lat;
        point.lng += pnt.lng;
        point.alt += pnt.alt;
      }
      point.lat /= this.pointList.length;
      point.lng /= this.pointList.length;
      point.alt /= this.pointList.length;
      return point;
    }
  };


  // wwtlib.PushPin

  function PushPin() {
  }
  PushPin.getPushPinTexture = function(pinId) {
    var texture = null;
    if (ss.keyExists(PushPin._pinTextureCache, pinId)) {
      return PushPin._pinTextureCache[pinId];
    }
    try {
      texture = Tile.prepDevice.createTexture();
      Tile.prepDevice.bindTexture(3553, texture);
      var row = Math.floor(pinId / 16);
      var col = pinId % 16;
      var temp = document.createElement('canvas');
      temp.height = 32;
      temp.width = 32;
      var ctx = temp.getContext('2d');
      ctx.drawImage(PushPin._pins.imageElement, (col * 32), (row * 32), 32, 32, 0, 0, 32, 32);
      var image = temp;
      Tile.prepDevice.texParameteri(3553, 10242, 33071);
      Tile.prepDevice.texParameteri(3553, 10243, 33071);
      Tile.prepDevice.texImage2D(3553, 0, 6408, 6408, 5121, image);
      Tile.prepDevice.texParameteri(3553, 10241, 9985);
      Tile.prepDevice.generateMipmap(3553);
      Tile.prepDevice.bindTexture(3553, null);
      PushPin._pinTextureCache[pinId] = texture;
    }
    catch ($e1) {
    }
    return texture;
  };
  var PushPin$ = {

  };


  // wwtlib.Table

  function Table() {
    this.guid = new Guid();
    this.header = [];
    this.rows = [];
    this.delimiter = '\t';
    this.locked = false;
  }
  var Table$ = {
    lock: function() {
      this.locked = true;
    },
    unlock: function() {
      this.locked = false;
    },
    save: function() {
      var data = '';
      var first = true;
      var $enum1 = ss.enumerate(this.header);
      while ($enum1.moveNext()) {
        var col = $enum1.current;
        if (!first) {
          data += '\t';
        }
        else {
          first = false;
        }
        data += col;
      }
      data += '\r\n';
      var $enum2 = ss.enumerate(this.rows);
      while ($enum2.moveNext()) {
        var row = $enum2.current;
        first = true;
        var $enum3 = ss.enumerate(row);
        while ($enum3.moveNext()) {
          var col = $enum3.current;
          if (!first) {
            data += '\t';
          }
          else {
            first = false;
          }
          data += col;
        }
        data += '\r\n';
      }
      return data;
    },
    loadFromString: function(data, isUpdate, purge, hasHeader) {
      var count = 0;
      var lines = data.split('\r\n');
      if (!isUpdate || hasHeader) {
        if (lines.length > 0) {
          var headerLine = lines[0];
          count++;
          if (headerLine.indexOf('\t') === -1 && headerLine.indexOf(',') > -1) {
            this.delimiter = ',';
          }
          if (!isUpdate) {
            this.rows.length = 0;
          }
          this.header = UiTools.splitString(headerLine, this.delimiter);
        }
        else {
          this.header = [];
        }
      }
      var temp = [];
      if (!purge) {
        temp = this.rows;
      }
      while (count < lines.length) {
        var line = lines[count];
        var rowData = UiTools.splitString(line, this.delimiter);
        if (rowData.length < 1) {
          break;
        }
        temp.push(rowData);
        count++;
      }
      if (purge) {
        this.rows = temp;
      }
    }
  };


  // wwtlib.VoTable

  function VoTable() {
    this.columns = {};
    this.column = [];
    this.rows = [];
    this.loadFilename = '';
    this.sampId = '';
    this.selectedRow = null;
    this.error = false;
    this.errorText = '';
  }
  VoTable.loadFromUrl = function(url, complete) {
    var temp = new VoTable();
    temp._onComplete = complete;
    temp._webFile = new WebFile(Util.getProxiedUrl(url));
    temp._webFile.onStateChange = ss.bind('_loadData', temp);
    temp._webFile.send();
    return temp;
  };
  VoTable.loadFromString = function(data) {
    var xParser = new DOMParser();
    var doc = xParser.parseFromString(data, 'text/xml');
    var table = new VoTable();
    table.loadFromXML(doc);
    return table;
  };
  var VoTable$ = {
    _loadData: function() {
      if (this._webFile.get_state() === 2) {
        alert(this._webFile.get_message());
      }
      else if (this._webFile.get_state() === 1) {
        this.loadFromXML(this._webFile.getXml());
        if (this._onComplete != null) {
          this._onComplete();
        }
      }
    },
    loadFromXML: function(xml) {
      var voTable = Util.selectSingleNode(xml, 'VOTABLE');
      if (voTable == null) {
        return;
      }
      var index = 0;
      try {
        var table = Util.selectSingleNode(Util.selectSingleNode(voTable, 'RESOURCE'), 'TABLE');
        if (table != null) {
          var $enum1 = ss.enumerate(table.childNodes);
          while ($enum1.moveNext()) {
            var node = $enum1.current;
            if (node.nodeName === 'FIELD') {
              var col = new VoColumn(node, index++);
              this.columns[col.name] = col;
              this.column.push(col);
            }
          }
        }
      }
      catch ($e2) {
        this.error = true;
        this.errorText = Util.selectSingleNode(voTable, 'DESCRIPTION').text;
      }
      try {
        var tableData = Util.selectSingleNode(Util.selectSingleNode(Util.selectSingleNode(Util.selectSingleNode(voTable, 'RESOURCE'), 'TABLE'), 'DATA'), 'TABLEDATA');
        if (tableData != null) {
          var $enum3 = ss.enumerate(tableData.childNodes);
          while ($enum3.moveNext()) {
            var node = $enum3.current;
            if (node.nodeName === 'TR') {
              var row = new VoRow(this);
              row.columnData = new Array(ss.keyCount(this.columns));
              index = 0;
              var $enum4 = ss.enumerate(node.childNodes);
              while ($enum4.moveNext()) {
                var child = $enum4.current;
                if (child.nodeName === 'TD') {
                  row.columnData[index++] = ss.trim(Util.getInnerText(child));
                }
              }
              this.rows.push(row);
            }
          }
        }
      }
      catch ($e5) {
      }
    },
    save: function(filename) {
      return true;
    },
    getColumnByUcd: function(ucd) {
      var $enum1 = ss.enumerate(ss.keys(this.columns));
      while ($enum1.moveNext()) {
        var key = $enum1.current;
        var col = this.columns[key];
        if (ss.replaceString(col.ucd, '_', '.').toLocaleLowerCase().indexOf(ucd.toLocaleLowerCase()) > -1) {
          return col;
        }
      }
      return null;
    },
    getRAColumn: function() {
      var $enum1 = ss.enumerate(ss.keys(this.columns));
      while ($enum1.moveNext()) {
        var key = $enum1.current;
        var col = this.columns[key];
        if (col.ucd.toLocaleLowerCase().indexOf('pos.eq.ra') > -1 || col.ucd.toLocaleLowerCase().indexOf('pos_eq_ra') > -1) {
          return col;
        }
      }
      var $enum2 = ss.enumerate(ss.keys(this.columns));
      while ($enum2.moveNext()) {
        var key = $enum2.current;
        var col = this.columns[key];
        if (col.name.toLocaleLowerCase().indexOf('ra') > -1) {
          return col;
        }
      }
      return null;
    },
    getDecColumn: function() {
      var $enum1 = ss.enumerate(ss.keys(this.columns));
      while ($enum1.moveNext()) {
        var key = $enum1.current;
        var col = this.columns[key];
        if (col.ucd.toLowerCase().indexOf('pos.eq.dec') > -1 || col.ucd.toLowerCase().indexOf('pos_eq_dec') > -1) {
          return col;
        }
      }
      var $enum2 = ss.enumerate(ss.keys(this.columns));
      while ($enum2.moveNext()) {
        var key = $enum2.current;
        var col = this.columns[key];
        if (col.name.toLowerCase().indexOf('dec') > -1) {
          return col;
        }
      }
      return null;
    },
    getDistanceColumn: function() {
      var $enum1 = ss.enumerate(ss.keys(this.columns));
      while ($enum1.moveNext()) {
        var key = $enum1.current;
        var col = this.columns[key];
        if (col.ucd.toLowerCase().indexOf('pos.distance') > -1 || col.ucd.toLowerCase().indexOf('pos_distance') > -1) {
          return col;
        }
      }
      return null;
    },
    toString: function() {
      var sb = new ss.StringBuilder();
      var first = true;
      var $enum1 = ss.enumerate(ss.keys(this.columns));
      while ($enum1.moveNext()) {
        var key = $enum1.current;
        var col = this.columns[key];
        if (first) {
          first = false;
        }
        else {
          sb.append('\t');
        }
        sb.append(col.name);
      }
      sb.appendLine('');
      var $enum2 = ss.enumerate(this.rows);
      while ($enum2.moveNext()) {
        var row = $enum2.current;
        first = true;
        var $enum3 = ss.enumerate(row.columnData);
        while ($enum3.moveNext()) {
          var col = $enum3.current;
          if (first) {
            first = false;
          }
          else {
            sb.append('\t');
          }
          sb.append(col.toString());
        }
        sb.appendLine('');
      }
      return sb.toString();
    }
  };


  // wwtlib.VoRow

  function VoRow(owner) {
    this.selected = false;
    this.owner = owner;
  }
  var VoRow$ = {
    getColumnData: function(key) {
      if (this.owner.columns[key] != null) {
        return this.columnData[this.owner.columns[key].index];
      }
      return null;
    },
    get_item: function(index) {
      if (index < 0 || index >= this.columnData.length) {
        return null;
      }
      return this.columnData[index];
    }
  };


  // wwtlib.VoColumn

  function VoColumn(node, index) {
    this.id = '';
    this.type = 0;
    this.precision = 0;
    this.dimentions = 0;
    this.sizes = null;
    this.ucd = '';
    this.unit = '';
    this.name = '';
    this.index = 0;
    this.index = index;
    if (node.attributes.getNamedItem('datatype') != null) {
      this.type = VoColumn.getType(node.attributes.getNamedItem('datatype').nodeValue);
    }
    if (node.attributes.getNamedItem('ucd') != null) {
      this.ucd = node.attributes.getNamedItem('ucd').nodeValue;
    }
    if (node.attributes.getNamedItem('precision') != null) {
      try {
        this.precision = parseInt(node.attributes.getNamedItem('precision').nodeValue);
      }
      catch ($e1) {
      }
    }
    if (node.attributes.getNamedItem('ID') != null) {
      this.id = node.attributes.getNamedItem('ID').nodeValue;
    }
    if (node.attributes.getNamedItem('name') != null) {
      this.name = node.attributes.getNamedItem('name').nodeValue;
    }
    else {
      this.name = this.id;
    }
    if (node.attributes.getNamedItem('unit') != null) {
      this.unit = node.attributes.getNamedItem('unit').nodeValue;
    }
    if (node.attributes.getNamedItem('arraysize') != null) {
      var split = node.attributes.getNamedItem('arraysize').nodeValue.split('x');
      this.dimentions = split.length;
      this.sizes = new Array(split.length);
      var indexer = 0;
      var $enum2 = ss.enumerate(split);
      while ($enum2.moveNext()) {
        var dim = $enum2.current;
        if (!(dim.indexOf('*') > -1)) {
          this.sizes[indexer++] = parseInt(dim);
        }
        else {
          var len = 9999;
          var lenString = ss.replaceString(dim, '*', '');
          if (lenString.length > 0) {
            len = parseInt(lenString);
          }
          this.sizes[indexer++] = len;
        }
      }
    }
  }
  VoColumn.getType = function(type) {
    var Type = 13;
    switch (type) {
      case 'boolean':
        Type = 1;
        break;
      case 'bit':
        Type = 2;
        break;
      case 'unsignedByte':
        Type = 3;
        break;
      case 'short':
        Type = 4;
        break;
      case 'int':
        Type = 5;
        break;
      case 'long':
        Type = 6;
        break;
      case 'char':
        Type = 7;
        break;
      case 'unicodeChar':
        Type = 8;
        break;
      case 'float':
        Type = 9;
        break;
      case 'double':
        Type = 10;
        break;
      case 'floatComplex':
        Type = 11;
        break;
      case 'doubleComplex':
        Type = 12;
        break;
      default:
        Type = 13;
        break;
    }
    return Type;
  };
  var VoColumn$ = {
    toString: function() {
      return this.name;
    }
  };


  // wwtlib.WcsImage

  function WcsImage() {
    this.copyright = '';
    this.creditsUrl = '';
    this._validWcs = false;
    this.keywords = [];
    this.description = '';
    this.scaleX = 0;
    this.scaleY = 0;
    this.centerX = 0;
    this.centerY = 0;
    this.rotation = 0;
    this.referenceX = 0;
    this.referenceY = 0;
    this.sizeX = 0;
    this.sizeY = 0;
    this.cd1_1 = 0;
    this.cd1_2 = 0;
    this.cd2_1 = 0;
    this.cd2_2 = 0;
    this.hasRotation = false;
    this.hasSize = false;
    this.hasScale = false;
    this.hasLocation = false;
    this.hasPixel = false;
    this.filename = '';
    this._colorCombine = false;
  }
  var WcsImage$ = {
    get_copyright: function() {
      return this.copyright;
    },
    set_copyright: function(value) {
      this.copyright = value;
      return value;
    },
    get_creditsUrl: function() {
      return this.creditsUrl;
    },
    set_creditsUrl: function(value) {
      this.creditsUrl = value;
      return value;
    },
    get_validWcs: function() {
      return this._validWcs;
    },
    set_validWcs: function(value) {
      this._validWcs = value;
      return value;
    },
    get_keywords: function() {
      if (!this.keywords.length) {
        this.keywords.push('Image File');
      }
      return this.keywords;
    },
    set_keywords: function(value) {
      this.keywords = value;
      return value;
    },
    get_description: function() {
      return this.description;
    },
    set_description: function(value) {
      this.description = value;
      return value;
    },
    get_scaleX: function() {
      return this.scaleX;
    },
    set_scaleX: function(value) {
      this.scaleX = value;
      return value;
    },
    get_scaleY: function() {
      return this.scaleY;
    },
    set_scaleY: function(value) {
      this.scaleY = value;
      return value;
    },
    get_centerX: function() {
      return this.centerX;
    },
    set_centerX: function(value) {
      this.centerX = value;
      return value;
    },
    get_centerY: function() {
      return this.centerY;
    },
    set_centerY: function(value) {
      this.centerY = value;
      return value;
    },
    get_rotation: function() {
      return this.rotation;
    },
    set_rotation: function(value) {
      this.rotation = value;
      return value;
    },
    get_referenceX: function() {
      return this.referenceX;
    },
    set_referenceX: function(value) {
      this.referenceX = value;
      return value;
    },
    get_referenceY: function() {
      return this.referenceY;
    },
    set_referenceY: function(value) {
      this.referenceY = value;
      return value;
    },
    get_sizeX: function() {
      return this.sizeX;
    },
    set_sizeX: function(value) {
      this.sizeX = value;
      return value;
    },
    get_sizeY: function() {
      return this.sizeY;
    },
    set_sizeY: function(value) {
      this.sizeY = value;
      return value;
    },
    get_cd1_1: function() {
      return this.cd1_1;
    },
    set_cd1_1: function(value) {
      this.cd1_1 = value;
      return value;
    },
    get_cd1_2: function() {
      return this.cd1_2;
    },
    set_cd1_2: function(value) {
      this.cd1_2 = value;
      return value;
    },
    get_cd2_1: function() {
      return this.cd2_1;
    },
    set_cd2_1: function(value) {
      this.cd2_1 = value;
      return value;
    },
    get_cd2_2: function() {
      return this.cd2_2;
    },
    set_cd2_2: function(value) {
      this.cd2_2 = value;
      return value;
    },
    adjustScale: function(width, height) {
      if (width !== this.sizeX) {
        this.scaleX *= (this.sizeX / width);
        this.referenceX /= (this.sizeX / width);
        this.sizeX = width;
      }
      if (height !== this.sizeY) {
        this.scaleY *= (this.sizeY / height);
        this.referenceY /= (this.sizeY / height);
        this.sizeY = height;
      }
    },
    calculateScaleFromCD: function() {
      this.scaleX = (Math.sqrt(this.cd1_1 * this.cd1_1 + this.cd2_1 * this.cd2_1) * (this.cd1_1 * this.cd2_2 - this.cd1_2 * this.cd2_1) < 0) ? -1 : 1;
      this.scaleY = Math.sqrt(this.cd1_2 * this.cd1_2 + this.cd2_2 * this.cd2_2);
    },
    calculateRotationFromCD: function() {
      var sign = ((this.cd1_1 * this.cd2_2 - this.cd1_2 * this.cd2_1) < 0) ? -1 : 1;
      var rot2 = Math.atan2((-sign * this.cd1_2), this.cd2_2);
      this.rotation = rot2 / Math.PI * 180;
    },
    get_filename: function() {
      return this.filename;
    },
    set_filename: function(value) {
      this.filename = value;
      return value;
    },
    get_colorCombine: function() {
      return this._colorCombine;
    },
    set_colorCombine: function(value) {
      this._colorCombine = value;
      return value;
    }
  };


  // wwtlib.MinorPlanets

  function MinorPlanets() {
  }
  MinorPlanets.getMpcFile = function(url) {
    MinorPlanets._webMpcFile = new WebFile(url);
    MinorPlanets._webMpcFile.responseType = 'blob';
    MinorPlanets._webMpcFile.onStateChange = MinorPlanets.starFileStateChange;
    MinorPlanets._webMpcFile.send();
  };
  MinorPlanets.starFileStateChange = function() {
    if (MinorPlanets._webMpcFile.get_state() === 2) {
      alert(MinorPlanets._webMpcFile.get_message());
    }
    else if (MinorPlanets._webMpcFile.get_state() === 1) {
      var mainBlob = MinorPlanets._webMpcFile.getBlob();
      var chunck = new FileReader();
      chunck.onloadend = function(e) {
        MinorPlanets._readFromBin(new BinaryReader(new Uint8Array(chunck.result)));
        MinorPlanets.initMPCVertexBuffer();
      };
      chunck.readAsArrayBuffer(mainBlob);
    }
  };
  MinorPlanets._readFromBin = function(br) {
    MinorPlanets.mpcList = [];
    var len = br.get_length();
    var ee;
    try {
      while (br.get_position() < len) {
        ee = EOE._create(br);
        MinorPlanets.mpcList.push(ee);
      }
    }
    catch ($e1) {
    }
    br.close();
  };
  MinorPlanets.drawMPC3D = function(renderContext, opacity, centerPoint) {
    var zoom = renderContext.viewCamera.zoom;
    var distAlpha = ((Math.log(Math.max(1, zoom)) / Math.log(4)) - 15.5) * 90;
    var alpha = Math.min(255, Math.max(0, ss.truncate(distAlpha)));
    if (alpha > 254) {
      return;
    }
    if (MinorPlanets._mpcVertexBuffer == null) {
      if (MinorPlanets.starTexture == null) {
        MinorPlanets.starTexture = Planets.loadPlanetTexture('//cdn.worldwidetelescope.org/webclient/images/starProfileAlpha.png');
      }
      for (var i = 0; i < 7; i++) {
        MinorPlanets._mpcBlendStates[i] = BlendState.create(false, 1000);
      }
      if (!MinorPlanets._initBegun) {
        MinorPlanets._startInit();
        MinorPlanets._initBegun = true;
      }
      return;
    }
    var offset = Matrix3d.translation(Vector3d.negate(centerPoint));
    var world = Matrix3d.multiplyMatrix(renderContext.get_world(), offset);
    var matrixWV = Matrix3d.multiplyMatrix(world, renderContext.get_view());
    var cam = Vector3d._transformCoordinate(renderContext.cameraPosition, Matrix3d.invertMatrix(renderContext.get_world()));
    if (MinorPlanets._mpcVertexBuffer != null) {
      for (var i = 0; i < 7; i++) {
        MinorPlanets._mpcBlendStates[i].set_targetState(true);
        if (MinorPlanets._mpcBlendStates[i].get_state()) {
          KeplerPointSpriteShader.use(renderContext, matrixWV, MinorPlanets._mpcVertexBuffer[i].vertexBuffer, MinorPlanets.starTexture.texture2d, Colors.get_white(), opacity * MinorPlanets._mpcBlendStates[i].get_opacity(), false, (SpaceTimeController.get_jNow() - KeplerVertex.baseDate), 0, renderContext.cameraPosition, 200, 0.1);
          renderContext.gl.drawArrays(0, 0, MinorPlanets._mpcVertexBuffer[i].count);
        }
      }
    }
  };
  MinorPlanets._startInit = function() {
    MinorPlanets.getMpcFile('//cdn.worldwidetelescope.org/wwtweb/catalog.aspx?Q=mpcbin');
  };
  MinorPlanets.initMPCVertexBuffer = function() {
    try {
      if (MinorPlanets._mpcVertexBuffer == null) {
        var mpcVertexBufferTemp = new Array(7);
        MinorPlanets._mpcCount = MinorPlanets.mpcList.length;
        var lists = new Array(7);
        for (var i = 0; i < 7; i++) {
          lists[i] = [];
        }
        var $enum1 = ss.enumerate(MinorPlanets.mpcList);
        while ($enum1.moveNext()) {
          var ee = $enum1.current;
          var listID = 0;
          if (ee.a < 2.5) {
            listID = 0;
          }
          else if (ee.a < 2.83) {
            listID = 1;
          }
          else if (ee.a < 2.96) {
            listID = 2;
          }
          else if (ee.a < 3.3) {
            listID = 3;
          }
          else if (ee.a < 5) {
            listID = 4;
          }
          else if (ee.a < 10) {
            listID = 5;
          }
          else {
            listID = 6;
          }
          var vert = new KeplerVertex();
          vert.fill(ee);
          lists[listID].push(vert);
        }
        for (var i = 0; i < 7; i++) {
          mpcVertexBufferTemp[i] = KeplerVertexBuffer.create(lists[i]);
          mpcVertexBufferTemp[i].unlock();
        }
        MinorPlanets._mpcVertexBuffer = mpcVertexBufferTemp;
      }
    }
    finally {
    }
  };
  var MinorPlanets$ = {

  };


  // wwtlib.KeplerianElements

  function KeplerianElements() {
    this.a = 0;
    this.e = 0;
    this.ea = 0;
  }
  var KeplerianElements$ = {

  };


  // wwtlib.BodyAngles

  function BodyAngles(poleRa, poleDec, primeMeridian, rotationRate) {
    this.poleDec = 0;
    this.poleRa = 0;
    this.primeMeridian = 0;
    this.rotationRate = 0;
    this.poleDec = poleDec;
    this.poleRa = poleRa;
    this.primeMeridian = primeMeridian;
    this.rotationRate = rotationRate;
  }
  var BodyAngles$ = {

  };


  // wwtlib.Planets

  function Planets() {
  }
  Planets.loadPlanetTexture = function(url) {
    var texture = new Texture();
    texture.load(url);
    return texture;
  };
  Planets.getPlanet3dLocation = function(target) {
    try {
      if (target < 21) {
        return Planets._planet3dLocations[target].copy();
      }
    }
    catch ($e1) {
    }
    return Vector3d.create(0, 0, 0);
  };
  Planets.getPlanet3dSufaceAltitude = function(target) {
    try {
      if (target < 21) {
        return Planets.getAdjustedPlanetRadius(target);
      }
    }
    catch ($e1) {
    }
    return 0;
  };
  Planets.getPlanetTargetPoint = function(target, lat, lng, jNow) {
    var temp;
    if (!jNow) {
      temp = Planets.getPlanet3dLocation(target);
    }
    else {
      temp = Planets.getPlanet3dLocationJD(target, jNow);
    }
    temp.add(Coordinates.raDecTo3dAu((lng / 15) + 6, lat, Planets.getPlanet3dSufaceAltitude(target)));
    return temp;
  };
  Planets.getPlanet3dLocationJD = function(target, jNow) {
    try {
      var result = new Vector3d();
      var centerRaDec = AstroCalc.getPlanet(jNow, 0, 0, 0, -6378149);
      var center = Coordinates.raDecTo3dAu(centerRaDec.RA, centerRaDec.dec, centerRaDec.distance);
      if (target === 19) {
        result = Vector3d.create(-center.x, -center.y, -center.z);
      }
      else {
        var planet = AstroCalc.getPlanet(jNow, target, 0, 0, -6378149);
        result = Coordinates.raDecTo3dAu(planet.RA, planet.dec, planet.distance);
        result.subtract(center);
      }
      result.rotateX(Coordinates.meanObliquityOfEcliptic(jNow) * Planets.RC);
      if (Settings.get_active().get_solarSystemScale() !== 1) {
        switch (target) {
          case 9:
            var parent = Planets.getPlanet3dLocationJD(19, jNow);
            result.subtract(parent);
            result.multiply(Settings.get_active().get_solarSystemScale() / 2);
            result.add(parent);
            break;
          case 10:
          case 11:
          case 12:
          case 13:
            var parent = Planets.getPlanet3dLocationJD(4, jNow);
            result.subtract(parent);
            result.multiply(Settings.get_active().get_solarSystemScale());
            result.add(parent);
            break;
          default:
            break;
        }
      }
      return result;
    }
    catch ($e1) {
      return Vector3d.create(0, 0, 0);
    }
  };
  Planets.getPlanetLocation = function(name) {
    var id = Planets.getPlanetIDFromName(name);
    if (Planets._planetLocations != null) {
      return Planets._planetLocations[id];
    }
    else {
      return AstroCalc.getPlanet(SpaceTimeController.get_jNow(), id, SpaceTimeController.get_location().get_lat(), SpaceTimeController.get_location().get_lng(), SpaceTimeController.get_altitude());
    }
  };
  Planets.getPlanetLocationJD = function(name, jNow) {
    var id = Planets.getPlanetIDFromName(name);
    return AstroCalc.getPlanet(jNow, id, SpaceTimeController.get_location().get_lat(), SpaceTimeController.get_location().get_lng(), SpaceTimeController.get_altitude());
  };
  Planets.getPlanetIDFromName = function(planetName) {
    switch (planetName) {
      case 'Sun':
        return 0;
      case 'Mercury':
        return 1;
      case 'Venus':
        return 2;
      case 'Mars':
        return 3;
      case 'Jupiter':
        return 4;
      case 'Saturn':
        return 5;
      case 'Uranus':
        return 6;
      case 'Neptune':
        return 7;
      case 'Pluto':
        return 8;
      case 'Moon':
        return 9;
      case 'Io':
        return 10;
      case 'Europa':
        return 11;
      case 'Ganymede':
        return 12;
      case 'Callisto':
        return 13;
      case 'Earth':
        return 19;
      case 'IoShadow':
        return 14;
      case 'EuropaShadow':
        return 15;
      case 'GanymedeShadow':
        return 16;
      case 'CallistoShadow':
        return 17;
      case 'SunEclipsed':
        return 18;
      case 'Custom':
        return 20;
      case 'Undefined':
        return 65536;
      default:
        return -1;
    }
  };
  Planets.getImageSetNameNameFrom3dId = function(id) {
    switch (id) {
      case 0:
        return 'Sun';
      case 1:
        return 'Mercury';
      case 2:
        return 'Venus';
      case 3:
        return 'Visible Imagery';
      case 4:
        return 'Jupiter';
      case 5:
        return 'Saturn';
      case 6:
        return 'Uranus';
      case 7:
        return 'Neptune';
      case 8:
        return 'Pluto';
      case 9:
        return 'Moon';
      case 10:
        return 'Io (Jupiter)';
      case 11:
        return 'Europa (Jupiter)';
      case 12:
        return 'Ganymede (Jupiter)';
      case 13:
        return 'Callisto (Jupiter)';
      case 19:
        return 'Bing Maps Aerial';
      default:
        return '';
    }
  };
  Planets.getNameFrom3dId = function(id) {
    switch (id) {
      case 0:
        return 'Sun';
      case 1:
        return 'Mercury';
      case 2:
        return 'Venus';
      case 3:
        return 'Mars';
      case 4:
        return 'Jupiter';
      case 5:
        return 'Saturn';
      case 6:
        return 'Uranus';
      case 7:
        return 'Neptune';
      case 8:
        return 'Pluto';
      case 9:
        return 'Moon';
      case 10:
        return 'Io';
      case 11:
        return 'Europa';
      case 12:
        return 'Ganymede';
      case 13:
        return 'Callisto';
      case 19:
        return 'Earth';
      default:
        return '';
    }
  };
  Planets.updatePlanetLocations = function(threeDee) {
    Planets._jNow = SpaceTimeController.get_jNow();
    if (threeDee) {
      Planets.updateOrbits(0);
    }
    if (Planets._planetDiameters == null) {
      Planets._planetDiameters = new Array(20);
      Planets._planetDiameters[0] = 0.009291568;
      Planets._planetDiameters[1] = 3.25794793734425E-05;
      Planets._planetDiameters[2] = 8.08669220531394E-05;
      Planets._planetDiameters[3] = 4.53785605596396E-05;
      Planets._planetDiameters[4] = 0.000954501;
      Planets._planetDiameters[5] = 0.000802173;
      Planets._planetDiameters[6] = 0.000339564;
      Planets._planetDiameters[7] = 0.000324825;
      Planets._planetDiameters[8] = 1.52007379777805E-05;
      Planets._planetDiameters[9] = 2.32084653538149E-05;
      Planets._planetDiameters[10] = 2.43519298386342E-05;
      Planets._planetDiameters[11] = 2.08692629580609E-05;
      Planets._planetDiameters[12] = 3.51742670356556E-05;
      Planets._planetDiameters[13] = 3.22263666626559E-05;
      Planets._planetDiameters[14] = 2.43519298386342E-05;
      Planets._planetDiameters[15] = 2.08692629580609E-05;
      Planets._planetDiameters[16] = 3.51742670356556E-05;
      Planets._planetDiameters[17] = 3.22263666626559E-05;
      Planets._planetDiameters[18] = 0.009291568 * 2;
      Planets._planetDiameters[19] = 8.55626412117809E-05;
    }
    if (Planets.planetColors == null) {
      var lightYellow = Color.fromArgb(255, 255, 255, 221);
      var orangeRed = Color.fromArgb(255, 255, 68, 0);
      Planets.planetColors = new Array(20);
      Planets.planetColors[0] = Colors.get_yellow();
      Planets.planetColors[1] = Colors.get_white();
      Planets.planetColors[2] = lightYellow;
      Planets.planetColors[3] = orangeRed;
      Planets.planetColors[4] = Color.fromArgb(255, 255, 165, 0);
      Planets.planetColors[5] = Color.fromArgb(255, 184, 134, 11);
      Planets.planetColors[6] = Color.fromArgb(255, 173, 216, 230);
      Planets.planetColors[7] = Colors.get_blue();
      Planets.planetColors[8] = Colors.get_white();
      Planets.planetColors[9] = Colors.get_white();
      Planets.planetColors[10] = Colors.get_white();
      Planets.planetColors[11] = Colors.get_white();
      Planets.planetColors[12] = Colors.get_white();
      Planets.planetColors[13] = Colors.get_white();
      Planets.planetColors[14] = Colors.get_black();
      Planets.planetColors[15] = Colors.get_black();
      Planets.planetColors[16] = Colors.get_black();
      Planets.planetColors[17] = Colors.get_black();
      Planets.planetColors[18] = Colors.get_white();
      Planets.planetColors[19] = Color.fromArgb(255, 173, 216, 230);
    }
    if (Planets._planetTilts == null) {
      Planets._planetTilts = new Array(20);
      Planets._planetTilts[0] = 0;
      Planets._planetTilts[1] = 0.01;
      Planets._planetTilts[2] = 177.4;
      Planets._planetTilts[3] = 25.19;
      Planets._planetTilts[4] = 3.13;
      Planets._planetTilts[5] = 26.73;
      Planets._planetTilts[6] = 97.77;
      Planets._planetTilts[7] = 28.32;
      Planets._planetTilts[8] = 119.61;
      Planets._planetTilts[9] = 23.439;
      Planets._planetTilts[10] = 2.21;
      Planets._planetTilts[11] = 0;
      Planets._planetTilts[12] = -0.33;
      Planets._planetTilts[13] = 0;
      Planets._planetTilts[14] = 0;
      Planets._planetTilts[15] = 0;
      Planets._planetTilts[16] = 0;
      Planets._planetTilts[17] = 0;
      Planets._planetTilts[18] = 0;
      Planets._planetTilts[19] = 23.5;
    }
    Planets._planetTilts[19] = Planets._obliquity / Planets.RC;
    if (Planets.planetRotationPeriod == null) {
      Planets.planetRotationPeriod = new Array(20);
      Planets.planetRotationPeriod[0] = 25.37995;
      Planets.planetRotationPeriod[1] = 58.6462;
      Planets.planetRotationPeriod[2] = -243.0187;
      Planets.planetRotationPeriod[3] = 1.02595675;
      Planets.planetRotationPeriod[4] = 0.41007;
      Planets.planetRotationPeriod[5] = 0.426;
      Planets.planetRotationPeriod[6] = -0.71833;
      Planets.planetRotationPeriod[7] = 0.67125;
      Planets.planetRotationPeriod[8] = -6.38718;
      Planets.planetRotationPeriod[9] = 27.3;
      Planets.planetRotationPeriod[10] = 1.769137786;
      Planets.planetRotationPeriod[11] = 3.551;
      Planets.planetRotationPeriod[12] = 7.155;
      Planets.planetRotationPeriod[13] = 16.69;
      Planets.planetRotationPeriod[14] = 0;
      Planets.planetRotationPeriod[15] = 0;
      Planets.planetRotationPeriod[16] = 0;
      Planets.planetRotationPeriod[17] = 0;
      Planets.planetRotationPeriod[18] = 0;
      Planets.planetRotationPeriod[19] = 0.99726968;
    }
    if (Planets._planetScales == null) {
      Planets._planetScales = new Array(20);
    }
    if (Planets._planet3dLocations == null) {
      Planets._planet3dLocations = new Array(20);
    }
    if (Settings.get_active().get_actualPlanetScale()) {
      Planets._planetScales[0] = 0.5;
      Planets._planetScales[1] = 0.25;
      Planets._planetScales[2] = 0.25;
      Planets._planetScales[3] = 0.25;
      Planets._planetScales[4] = 0.25;
      Planets._planetScales[5] = 0.5;
      Planets._planetScales[6] = 0.25;
      Planets._planetScales[7] = 0.25;
      Planets._planetScales[8] = 0.25;
      Planets._planetScales[9] = 0.25;
      Planets._planetScales[10] = 0.25;
      Planets._planetScales[11] = 0.25;
      Planets._planetScales[12] = 0.25;
      Planets._planetScales[13] = 0.25;
      Planets._planetScales[14] = 0.25;
      Planets._planetScales[15] = 0.25;
      Planets._planetScales[16] = 0.25;
      Planets._planetScales[17] = 0.25;
      Planets._planetScales[18] = 0.5;
      Planets._planetScales[19] = 0.25;
    }
    else {
      for (var i = 0; i < 20; i++) {
        if (i < 10) {
          Planets._planetScales[i] = 0.25;
        }
        else {
          Planets._planetScales[i] = 0.1;
        }
      }
      Planets._planetScales[0] = 0.5;
      Planets._planetScales[5] = 0.5;
      Planets._planetScales[18] = 0.5;
    }
    Planets._planetDrawOrder = {};
    Planets._planetLocations = new Array(20);
    var center = new Vector3d();
    var planetCenter = 0;
    if (planetCenter > -1) {
      var centerRaDec = AstroCalc.getPlanet(Planets._jNow, planetCenter, (threeDee) ? 0 : SpaceTimeController.get_location().get_lat(), (threeDee) ? 0 : SpaceTimeController.get_location().get_lng(), (threeDee) ? -6378149 : SpaceTimeController.get_altitude());
      center = Coordinates.raDecTo3dAu(centerRaDec.RA, centerRaDec.dec, centerRaDec.distance);
    }
    Planets._planet3dLocations[19] = Vector3d.create(-center.x, -center.y, -center.z);
    Planets._planet3dLocations[19].rotateX(Planets._obliquity);
    for (var i = 0; i < 18; i++) {
      Planets._planetLocations[i] = AstroCalc.getPlanet(Planets._jNow, i, (threeDee) ? 0 : SpaceTimeController.get_location().get_lat(), (threeDee) ? 0 : SpaceTimeController.get_location().get_lng(), (threeDee) ? -6378149 : SpaceTimeController.get_altitude());
      Planets._planet3dLocations[i] = Coordinates.raDecTo3dAu(Planets._planetLocations[i].RA, Planets._planetLocations[i].dec, Planets._planetLocations[i].distance);
      Planets._planet3dLocations[i].subtract(center);
      Planets._planet3dLocations[i].rotateX(Planets._obliquity);
      if (Settings.get_active().get_actualPlanetScale()) {
        Planets._planetScales[i] = (2 * Math.atan(0.5 * (Planets._planetDiameters[i] / Planets._planetLocations[i].distance))) / Math.PI * 180;
      }
      if (Settings.get_active().get_solarSystemScale() !== 1) {
        var id = i;
        switch (id) {
          case 9:
            var parent = Planets._planet3dLocations[19];
            Planets._planet3dLocations[i].subtract(parent);
            Planets._planet3dLocations[i].multiply(Settings.get_active().get_solarSystemScale() / 2);
            Planets._planet3dLocations[i].add(parent);
            break;
          case 10:
          case 11:
          case 12:
          case 13:
            var parent = Planets._planet3dLocations[4];
            Planets._planet3dLocations[i].subtract(parent);
            Planets._planet3dLocations[i].multiply(Settings.get_active().get_solarSystemScale());
            Planets._planet3dLocations[i].add(parent);
            break;
          default:
            break;
        }
      }
      var finalDistance = -Planets._planetLocations[i].distance;
      while (ss.keyExists(Planets._planetDrawOrder, finalDistance)) {
        finalDistance += 1E-10;
      }
      Planets._planetDrawOrder[finalDistance] = i;
    }
    Planets._planetLocations[18] = Planets._planetLocations[0];
    Planets._planetScales[0] *= 2;
    Planets._planetScales[18] = Planets._planetScales[0];
    Planets._planetScales[5] = Planets._planetScales[5] * 2;
    Planets._lastUpdate = SpaceTimeController.get_now();
  };
  Planets.planetsReady = function() {
  };
  Planets.updateOrbits = function(planetCenter) {
    try {
      Planets._obliquity = Coordinates.meanObliquityOfEcliptic(SpaceTimeController.get_jNow()) * Planets.RC;
      if (planetCenter !== Planets._lastPlanetCenterID) {
        Planets._orbits = null;
      }
      Planets._lastPlanetCenterID = planetCenter;
      if (Planets._orbits == null) {
        if (planetCenter < 0) {
          Planets._eclipticTilt = Matrix3d.get_identity();
        }
        else {
          Planets._eclipticTilt = Matrix3d.get_identity();
          Planets._eclipticTilt = Matrix3d._rotationX(Planets._obliquity);
        }
        if (Planets.planetOrbitalYears == null) {
          Planets.planetOrbitalYears = new Array(20);
          Planets.planetOrbitalYears[0] = 1;
          Planets.planetOrbitalYears[1] = 0.241;
          Planets.planetOrbitalYears[2] = 0.615;
          Planets.planetOrbitalYears[3] = 1.881;
          Planets.planetOrbitalYears[4] = 11.87;
          Planets.planetOrbitalYears[5] = 29.45;
          Planets.planetOrbitalYears[6] = 84.07;
          Planets.planetOrbitalYears[7] = 164.9;
          Planets.planetOrbitalYears[8] = 248.1;
          Planets.planetOrbitalYears[9] = 27.3 / 365.25;
          Planets.planetOrbitalYears[10] = 16.6890184 / 365.25;
          Planets.planetOrbitalYears[11] = 3.551181 / 365.25;
          Planets.planetOrbitalYears[12] = 7.15455296 / 365.25;
          Planets.planetOrbitalYears[13] = 16.6890184 / 365.25;
          Planets.planetOrbitalYears[19] = 1;
        }
        if (!Planets.readOrbits()) {
          Planets._orbits = new Array(20);
          for (var i = 1; i < 20; i++) {
            Planets._orbits[i] = new Array(Planets._orbitalSampleRate);
            if (i < 9 || i === 19) {
              for (var j = 0; j < Planets._orbitalSampleRate; j++) {
                var centerId = planetCenter;
                var now = Planets._jNow + ((Planets.planetOrbitalYears[i] * 365.25 / Planets._orbitalSampleRate) * (j - (Planets._orbitalSampleRate / 2)));
                var center = new Vector3d();
                if (i === 9) {
                  centerId = -1;
                }
                else if (i > 9 && i < 14) {
                  centerId = 4;
                }
                if (centerId > -1) {
                  var centerRaDec = AstroCalc.getPlanet(now, centerId, 0, 0, -6378149);
                  center = Coordinates.raDecTo3dAu(centerRaDec.RA, centerRaDec.dec, centerRaDec.distance);
                }
                if (i !== 19) {
                  var planetRaDec = AstroCalc.getPlanet(now, i, 0, 0, -6378149);
                  Planets._orbits[i][j] = Coordinates.raDecTo3dAu(planetRaDec.RA, planetRaDec.dec, planetRaDec.distance);
                  Planets._orbits[i][j].subtract(center);
                }
                else {
                  Planets._orbits[i][j] = Vector3d.create(-center.x, -center.y, -center.z);
                }
                Planets._orbits[i][j].rotateX(Planets._obliquity);
              }
              Planets._orbits[i][Planets._orbitalSampleRate - 1] = Planets._orbits[i][0];
            }
          }
          Planets.dumpOrbitsFile();
        }
      }
    }
    finally {
    }
  };
  Planets.readOrbits = function() {
    return false;
    return true;
  };
  Planets.dumpOrbitsFile = function() {
  };
  Planets.drawPlanets = function(renderContext, opacity) {
    if (Planets._planetTextures == null) {
      Planets._loadPlanetTextures();
    }
    var elong = Planets._geocentricElongation(Planets._planetLocations[9].RA, Planets._planetLocations[9].dec, Planets._planetLocations[0].RA, Planets._planetLocations[0].dec);
    var raDif = Planets._planetLocations[9].RA - Planets._planetLocations[0].RA;
    if (Planets._planetLocations[9].RA < Planets._planetLocations[0].RA) {
      raDif += 24;
    }
    var phaseAngle = Planets._phaseAngle(elong, Planets._planetLocations[9].distance, Planets._planetLocations[0].distance);
    var limbAngle = Planets._positionAngle(Planets._planetLocations[9].RA, Planets._planetLocations[9].dec, Planets._planetLocations[0].RA, Planets._planetLocations[0].dec);
    if (raDif < 12) {
      phaseAngle += 180;
    }
    var dista = (Math.abs(Planets._planetLocations[9].RA - Planets._planetLocations[0].RA) * 15) * Math.cos(Coordinates.degreesToRadians(Planets._planetLocations[0].dec));
    var distb = Math.abs(Planets._planetLocations[9].dec - Planets._planetLocations[0].dec);
    var sunMoonDist = Math.sqrt(dista * dista + distb * distb);
    var eclipse = false;
    var coronaOpacity = 0;
    var moonEffect = (Planets._planetScales[9] / 2 - sunMoonDist);
    var darkLimb = Math.min(32, ss.truncate((sunMoonDist * 32)));
    if (moonEffect > (Planets._planetScales[0] / 4)) {
      eclipse = true;
      coronaOpacity = Math.min(1, (moonEffect - (Planets._planetScales[0] / 2)) / 0.001);
      Planets._drawPlanet(renderContext, 18, coronaOpacity);
    }
    var $enum1 = ss.enumerate(ss.keys(Planets._planetDrawOrder));
    while ($enum1.moveNext()) {
      var key = $enum1.current;
      var planetId = Planets._planetDrawOrder[key];
      Planets._drawPlanet(renderContext, planetId, 1);
    }
    return true;
  };
  Planets._loadPlanetTextures = function() {
    var baseUrl = '//worldwidetelescope.org/webclient/Images/';
    Planets._planetTextures = new Array(20);
    Planets._planetTextures[0] = Planets.loadPlanetTexture(baseUrl + 'sun.png');
    Planets._planetTextures[1] = Planets.loadPlanetTexture(baseUrl + 'mercury.png');
    Planets._planetTextures[2] = Planets.loadPlanetTexture(baseUrl + 'venus.png');
    Planets._planetTextures[3] = Planets.loadPlanetTexture(baseUrl + 'mars.png');
    Planets._planetTextures[4] = Planets.loadPlanetTexture(baseUrl + 'jupiter.png');
    Planets._planetTextures[5] = Planets.loadPlanetTexture(baseUrl + 'saturn.png');
    Planets._planetTextures[6] = Planets.loadPlanetTexture(baseUrl + 'uranus.png');
    Planets._planetTextures[7] = Planets.loadPlanetTexture(baseUrl + 'neptune.png');
    Planets._planetTextures[8] = Planets.loadPlanetTexture(baseUrl + 'pluto.png');
    Planets._planetTextures[9] = Planets.loadPlanetTexture(baseUrl + 'moon.png');
    Planets._planetTextures[10] = Planets.loadPlanetTexture(baseUrl + 'io.png');
    Planets._planetTextures[11] = Planets.loadPlanetTexture(baseUrl + 'europa.png');
    Planets._planetTextures[12] = Planets.loadPlanetTexture(baseUrl + 'ganymede.png');
    Planets._planetTextures[13] = Planets.loadPlanetTexture(baseUrl + 'callisto.png');
    Planets._planetTextures[14] = Planets.loadPlanetTexture(baseUrl + 'moonshadow.png');
    Planets._planetTextures[15] = Planets.loadPlanetTexture(baseUrl + 'moonshadow.png');
    Planets._planetTextures[16] = Planets.loadPlanetTexture(baseUrl + 'moonshadow.png');
    Planets._planetTextures[17] = Planets.loadPlanetTexture(baseUrl + 'moonshadow.png');
    Planets._planetTextures[18] = Planets.loadPlanetTexture(baseUrl + 'sunCorona.png');
    Planets._planetTextures[19] = Planets.loadPlanetTexture(baseUrl + 'earth.png');
  };
  Planets.drawPlanets3D = function(renderContext, opacity, centerPoint) {
    Planets.initPlanetResources(renderContext);
    var distss = UiTools.solarSystemToMeters(renderContext.get_solarSystemCameraDistance());
    var moonFade = Math.min(1, Math.max(Util.log10(distss) - 7.3, 0));
    var fade = Math.min(1, Math.max(Util.log10(distss) - 8.6, 0));
    if (Settings.get_active().get_solarSystemOrbits() && fade > 0) {
      for (var ii = 1; ii < 10; ii++) {
        var id = ii;
        if (ii === 9) {
          id = 19;
        }
        var angle = Math.atan2(Planets._planet3dLocations[id].z, Planets._planet3dLocations[id].x);
        Planets._drawSingleOrbit(renderContext, Planets.planetColors[id], id, centerPoint, angle, Planets._planet3dLocations[id], fade);
      }
      var mid = 9;
      Planets._drawSingleOrbit(renderContext, Planets.planetColors[mid], mid, centerPoint, 0, Planets._planet3dLocations[mid], fade);
    }
    ss.clearKeys(Planets._drawOrder);
    var camera = renderContext.cameraPosition.copy();
    for (var planetId = 0; planetId < 14; planetId++) {
      if (!Planets._planetLocations[planetId].eclipsed) {
        var distVector = Vector3d.subtractVectors(camera, Vector3d.subtractVectors(Planets._planet3dLocations[planetId], centerPoint));
        if (!ss.keyExists(Planets._drawOrder, distVector.length())) {
          Planets._drawOrder[distVector.length()] = planetId;
        }
      }
    }
    var distVectorEarth = Vector3d.subtractVectors(camera, Vector3d.subtractVectors(Planets._planet3dLocations[19], centerPoint));
    if (!ss.keyExists(Planets._drawOrder, distVectorEarth.length())) {
      Planets._drawOrder[distVectorEarth.length()] = 19;
    }
    var $enum1 = ss.enumerate(ss.keys(Planets._drawOrder));
    while ($enum1.moveNext()) {
      var key = $enum1.current;
      var planetId = Planets._drawOrder[key];
      Planets._drawPlanet3d(renderContext, planetId, centerPoint);
    }
    return true;
  };
  Planets.getPlanetOrientationAtEpoch = function(planetID) {
    var m = Matrix3d.get_identity();
    var obliquityOfEcliptic = 23.4392794;
    if (planetID === 19) {
      m._multiply(Matrix3d._rotationX(obliquityOfEcliptic * Planets.RC));
    }
    else {
      m._multiply(Matrix3d._rotationX(-90 * Planets.RC));
      m._multiply(Matrix3d._rotationZ((180 + Planets._planetAngles[planetID].primeMeridian) * Planets.RC));
      m._multiply(Matrix3d._rotationX((90 - Planets._planetAngles[planetID].poleDec) * Planets.RC));
      m._multiply(Matrix3d._rotationZ((Planets._planetAngles[planetID].poleRa - 90) * Planets.RC));
      m._multiply(Matrix3d._rotationX(obliquityOfEcliptic * Planets.RC));
      m._multiply(Matrix3d._rotationX(90 * Planets.RC));
    }
    return m;
  };
  Planets.setupPlanetMatrix = function(renderContext, planetID, centerPoint, makeFrustum) {
    var matNonRotating = renderContext.get_world().clone();
    Planets._setupMatrixForPlanetGeometry(renderContext, planetID, centerPoint, makeFrustum);
    if (planetID === 0) {
      var radius = Planets.getAdjustedPlanetRadius(planetID);
      matNonRotating.scale(Vector3d.create(radius, radius, radius));
      var translation = Vector3d.subtractVectors(Planets._planet3dLocations[planetID], centerPoint);
      matNonRotating._multiply(Matrix3d.translation(translation));
      renderContext.set_worldBaseNonRotating(matNonRotating);
    }
  };
  Planets._setupMatrixForPlanetGeometry = function(renderContext, planetID, centerPoint, makeFrustum) {
    var radius = Planets.getAdjustedPlanetRadius(planetID);
    var rotationCurrent = 0;
    if (planetID === 19) {
      rotationCurrent = Math.PI + Coordinates.mstFromUTC2(SpaceTimeController.get_now(), 0) / 180 * Math.PI;
    }
    else {
      rotationCurrent = Math.PI + (((Planets._jNow - 2451545) / Planets.planetRotationPeriod[planetID]) * Math.PI * 2) % (Math.PI * 2);
    }
    if (planetID === 9) {
      rotationCurrent -= Math.PI / 2;
    }
    var matLocal = renderContext.get_world().clone();
    var matNonRotating = renderContext.get_world().clone();
    var translation = Vector3d.subtractVectors(Planets._planet3dLocations[planetID], centerPoint);
    var orientationAtEpoch = Planets.getPlanetOrientationAtEpoch(planetID);
    matLocal.scale(Vector3d.create(radius, radius, radius));
    matLocal._multiply(Matrix3d._rotationY(-rotationCurrent));
    matLocal._multiply(orientationAtEpoch);
    if (planetID === renderContext.viewCamera.target) {
      Planets.earthMatrix = Matrix3d.get_identity();
      Planets.earthMatrix._multiply(Matrix3d._rotationY(-rotationCurrent));
      Planets.earthMatrix._multiply(orientationAtEpoch);
      Planets.earthMatrixInv = Planets.earthMatrix.clone();
      Planets.earthMatrixInv.invert();
    }
    matLocal._multiply(Matrix3d.translation(translation));
    renderContext.set_world(matLocal);
    renderContext.set_worldBase(renderContext.get_world().clone());
    renderContext.set_nominalRadius(Planets.getPlanetRadiusInMeters(planetID));
    if (makeFrustum) {
      renderContext.makeFrustum();
    }
    matNonRotating.scale(Vector3d.create(radius, radius, radius));
    matNonRotating._multiply(orientationAtEpoch);
    matNonRotating._multiply(Matrix3d.translation(translation));
    renderContext.set_worldBaseNonRotating(matNonRotating);
    return rotationCurrent;
  };
  Planets.initPlanetResources = function(renderContext) {
  };
  Planets._drawSingleOrbit = function(renderContext, eclipticColor, id, centerPoint, startAngle, planetNow, opacity) {
    if (opacity < 0.01) {
      return;
    }
    if (renderContext.gl == null) {
      var count = Planets._orbitalSampleRate;
      var planetDropped = false;
      var viewPoint = renderContext.get_viewPoint();
      var ctx = renderContext.device;
      ctx.save();
      ctx.strokeStyle = eclipticColor.toString();
      ctx.lineWidth = 2;
      ctx.globalAlpha = 1;
      var point = new Vector3d();
      var pointTest = new Vector3d();
      var lastPoint = new Vector3d();
      var firstPoint = true;
      var translate = Matrix3d.translation(Vector3d.negate(centerPoint));
      var mat = Matrix3d.multiplyMatrix(translate, renderContext.WVP);
      var matWV = Matrix3d.multiplyMatrix(translate, renderContext.WV);
      for (var i = 0; i < count; i++) {
        var pnt = Planets._orbits[id][i];
        var angle = (Math.atan2(Planets._orbits[id][i].z, Planets._orbits[id][i].x) + Math.PI * 2 - startAngle) % (Math.PI * 2);
        var alpha = ss.truncate((angle / (Math.PI * 2) * 255));
        var alphaD = alpha / 255;
        if (alpha < 2 && !planetDropped) {
          pnt = planetNow;
          alphaD = 1;
        }
        pointTest = matWV.transform(pnt);
        point = mat.transform(pnt);
        if (pointTest.z > 0) {
          if (firstPoint) {
            firstPoint = false;
          }
          else {
            ctx.beginPath();
            ctx.globalAlpha = alphaD * opacity;
            ctx.moveTo(lastPoint.x, lastPoint.y);
            ctx.lineTo(point.x, point.y);
            ctx.stroke();
          }
        }
        lastPoint = point;
      }
      ctx.restore();
    }
    else {
      if (id !== 9) {
        var count = Planets._orbitalSampleRate;
        var planetDropped = false;
        var viewPoint = renderContext.get_viewPoint();
        var point = new Vector3d();
        var pointTest = new Vector3d();
        var lastPoint = new Vector3d();
        var lastColor = new Color();
        var firstPoint = true;
        var list = new OrbitLineList();
        for (var i = 0; i < count; i++) {
          var pnt = Planets._orbits[id][i].copy();
          var angle = (Math.atan2(pnt.z, pnt.x) + Math.PI * 2 - startAngle) % (Math.PI * 2);
          var alpha = ss.truncate((angle / (Math.PI * 2) * 255));
          var alphaD = alpha / 255;
          var color = Color.fromArgb(alpha, eclipticColor.r, eclipticColor.g, eclipticColor.b);
          if (alpha < 2 && !planetDropped && !firstPoint) {
            pnt = Vector3d.subtractVectors(planetNow, centerPoint);
            alphaD = 1;
            alpha = 255;
            color.a = 255;
            lastColor.a = 255;
            list.addLine(lastPoint, pnt.copy(), lastColor._clone(), color._clone());
            lastColor.a = 0;
            color.a = 0;
            pnt = Planets._orbits[id][i].copy();
            planetDropped = true;
          }
          pnt = Vector3d.subtractVectors(pnt, centerPoint);
          if (firstPoint) {
            firstPoint = false;
          }
          else {
            list.addLine(lastPoint, pnt, lastColor, color);
          }
          lastPoint = pnt;
          lastColor = color._clone();
        }
        list.drawLines(renderContext, 1, Colors.get_white());
        list.clear();
      }
      else {
        var mu = 0;
        switch (id) {
          case 9:
            mu = 398600.44189 + 4902.7779;
            break;
          case 10:
          case 11:
          case 12:
          case 13:
            mu = 126686534;
            break;
          default:
            mu = 132712440018.8;
            break;
        }
        var deltaT = 1 / 1440 * 0.1;
        var r0 = Planets.getPlanetPositionDirect(id, Planets._jNow);
        var r1 = Planets.getPlanetPositionDirect(id, Planets._jNow - deltaT);
        var v = Vector3d.scale(Vector3d.subtractVectors(r0, r1), 1 / deltaT);
        var elements = Planets._stateVectorToKeplerian(r0, v, mu);
        Planets._drawSingleOrbitElements(renderContext, eclipticColor, id, centerPoint, startAngle, planetNow, elements);
      }
    }
  };
  Planets.getPlanetPositionDirect = function(id, jd) {
    var L = 0;
    var B = 0;
    var R = 0;
    switch (id) {
      case 1:
        L = CAAMercury.eclipticLongitude(jd);
        B = CAAMercury.eclipticLatitude(jd);
        R = CAAMercury.radiusVector(jd);
        break;
      case 2:
        L = CAAVenus.eclipticLongitude(jd);
        B = CAAVenus.eclipticLatitude(jd);
        R = CAAVenus.radiusVector(jd);
        break;
      case 19:
        L = CAAEarth.eclipticLongitude(jd);
        B = CAAEarth.eclipticLatitude(jd);
        R = CAAEarth.radiusVector(jd);
        break;
      case 3:
        L = CAAMars.eclipticLongitude(jd);
        B = CAAMars.eclipticLatitude(jd);
        R = CAAMars.radiusVector(jd);
        break;
      case 4:
        L = CAAJupiter.eclipticLongitude(jd);
        B = CAAJupiter.eclipticLatitude(jd);
        R = CAAJupiter.radiusVector(jd);
        break;
      case 5:
        L = CAASaturn.eclipticLongitude(jd);
        B = CAASaturn.eclipticLatitude(jd);
        R = CAASaturn.radiusVector(jd);
        break;
      case 6:
        L = CAAUranus.eclipticLongitude(jd);
        B = CAAUranus.eclipticLatitude(jd);
        R = CAAUranus.radiusVector(jd);
        break;
      case 7:
        L = CAANeptune.eclipticLongitude(jd);
        B = CAANeptune.eclipticLatitude(jd);
        R = CAANeptune.radiusVector(jd);
        break;
      case 8:
        L = CAAPluto.eclipticLongitude(jd);
        B = CAAPluto.eclipticLatitude(jd);
        R = CAAPluto.radiusVector(jd);
        break;
      case 9:
        L = CAAMoon.eclipticLongitude(jd);
        B = CAAMoon.eclipticLatitude(jd);
        R = CAAMoon.radiusVector(jd) / 149598000;
        break;
      case 10:
        var galileanInfo = GM.calculate(jd);
        var position = galileanInfo.satellite1.eclipticRectangularCoordinates;
        return Vector3d.create(position.x, position.z, position.y);
      case 11:
        var galileanInfo = GM.calculate(jd);
        var position = galileanInfo.satellite2.eclipticRectangularCoordinates;
        return Vector3d.create(position.x, position.z, position.y);
      case 12:
        var galileanInfo = GM.calculate(jd);
        var position = galileanInfo.satellite3.eclipticRectangularCoordinates;
        return Vector3d.create(position.x, position.z, position.y);
      case 13:
        var galileanInfo = GM.calculate(jd);
        var position = galileanInfo.satellite4.eclipticRectangularCoordinates;
        return Vector3d.create(position.x, position.z, position.y);
    }
    L = Coordinates.degreesToRadians(L);
    B = Coordinates.degreesToRadians(B);
    var eclPos = Vector3d.create(Math.cos(L) * Math.cos(B) * R, Math.sin(L) * Math.cos(B) * R, Math.sin(B) * R);
    var eclipticOfDateRotation = (Coordinates.meanObliquityOfEcliptic(jd) - Coordinates.meanObliquityOfEcliptic(2451545)) * Planets.RC;
    eclPos.rotateX(eclipticOfDateRotation);
    return Vector3d.create(eclPos.x, eclPos.z, eclPos.y);
  };
  Planets._stateVectorToKeplerian = function(position, velocity, mu) {
    var r = Vector3d.scale(position, 149598000);
    var v = Vector3d.scale(Vector3d.scale(velocity, 1 / 86400), 149598000);
    var rmag = r.length();
    var vmag = v.length();
    var sma = 1 / (2 / rmag - vmag * vmag / mu);
    var h = Vector3d.cross(r, v);
    var ecc = Vector3d.subtractVectors(Vector3d.scale(Vector3d.cross(v, h), 1 / mu), Vector3d.scale(r, 1 / rmag));
    var e = ecc.length();
    h.normalize();
    ecc.normalize();
    var s = Vector3d.cross(h, ecc);
    r.normalize();
    var cosNu = Vector3d.dot(ecc, r);
    var sinNu = Vector3d.dot(s, r);
    var E = Math.atan2(Math.sqrt(1 - e * e) * sinNu, e + cosNu);
    var elements = new KeplerianElements();
    elements.orientation = Matrix3d.create(ecc.x, ecc.y, ecc.z, 0, s.x, s.y, s.z, 0, h.x, h.y, h.z, 0, 0, 0, 0, 1);
    elements.a = sma;
    elements.e = e;
    elements.ea = E;
    return elements;
  };
  Planets._drawSingleOrbitElements = function(renderContext, eclipticColor, id, centerPoint, xstartAngle, planetNow, el) {
    var scaleFactor;
    switch (id) {
      case 9:
        if (Settings.get_active().get_solarSystemScale() > 1) {
          scaleFactor = Settings.get_active().get_solarSystemScale() / 2;
        }
        else {
          scaleFactor = 1;
        }
        break;
      case 10:
      case 11:
      case 12:
      case 13:
        scaleFactor = Settings.get_active().get_solarSystemScale();
        break;
      default:
        scaleFactor = 1;
        break;
    }
    var translation = Vector3d.negate(centerPoint);
    if (id === 9) {
      translation.add(Planets._planet3dLocations[19]);
    }
    else if (id === 10 || id === 11 || id === 12 || id === 13) {
      translation.add(Planets._planet3dLocations[4]);
    }
    var currentPosition = Vector3d.subtractVectors(planetNow, centerPoint);
    var worldMatrix = Matrix3d.multiplyMatrix(Matrix3d.multiplyMatrix(el.orientation, Matrix3d.translation(translation)), renderContext.get_world());
    EllipseRenderer.drawEllipseWithPosition(renderContext, el.a / 149598000 * scaleFactor, el.e, el.ea, eclipticColor, worldMatrix, currentPosition);
  };
  Planets.isPlanetInFrustum = function(renderContext, rad) {
    var frustum = renderContext.get_frustum();
    var center = Vector3d.create(0, 0, 0);
    var centerV4 = new Vector4d(0, 0, 0, 1);
    for (var i = 0; i < 6; i++) {
      if (frustum[i].dot(centerV4) + rad < 0) {
        return false;
      }
    }
    return true;
  };
  Planets._drawPlanet3d = function(renderContext, planetID, centerPoint) {
    if (planetID === 0) {
      TileShader.minLightingBrightness = 1;
    }
    else {
      TileShader.minLightingBrightness = 0.025;
      if (planetID === 19) {
        TileShader.atmosphereColor = Color.fromArgb(255, 65, 157, 217);
      }
      else {
        TileShader.atmosphereColor = Color.fromArgb(0, 0, 0, 0);
      }
    }
    var matOld = renderContext.get_world();
    var matOldBase = renderContext.get_worldBase();
    var matOldNonRotating = renderContext.get_worldBaseNonRotating();
    var radius = Planets.getAdjustedPlanetRadius(planetID);
    Planets.setupPlanetMatrix(renderContext, planetID, centerPoint, true);
    var planetWidth = 1;
    if (planetID === 5) {
      planetWidth = 3;
    }
    if (Planets.isPlanetInFrustum(renderContext, planetWidth)) {
      var matOld2 = renderContext.get_world();
      var matOldBase2 = renderContext.get_worldBase();
      var matOldNonRotating2 = renderContext.get_worldBaseNonRotating();
      var sun = Planets._planet3dLocations[0].copy();
      var planet = Planets._planet3dLocations[planetID].copy();
      sun = matOld.transform(sun);
      planet = matOld.transform(planet);
      renderContext.set_world(matOld);
      renderContext.set_worldBase(matOldBase);
      renderContext.set_worldBaseNonRotating(matOldNonRotating);
      Planets._setupMatrixForPlanetGeometry(renderContext, planetID, centerPoint, true);
      var sunPosition = Vector3d.subtractVectors(sun, planet);
      sunPosition.normalize();
      renderContext.set_sunPosition(sunPosition);
      TileShader.sunPosition = Vector3d.subtractVectors(Planets._planet3dLocations[0], planet);
      var loc = Vector3d.subtractVectors(Planets._planet3dLocations[planetID], centerPoint);
      loc.subtract(renderContext.cameraPosition);
      var dist = loc.length();
      var sizeIndexParam = (2 * Math.atan(0.5 * (radius / dist))) / Math.PI * 180;
      var sizeIndex = 0;
      if (sizeIndexParam > 10.5) {
        sizeIndex = 0;
      }
      else if (sizeIndexParam > 3.9) {
        sizeIndex = 1;
      }
      else if (sizeIndexParam > 0.72) {
        sizeIndex = 2;
      }
      else if (sizeIndexParam > 0.05) {
        sizeIndex = 3;
      }
      else {
        sizeIndex = 4;
      }
      if (planetID === 19 && sizeIndex < 2) {
        var width = Settings.get_active().get_solarSystemScale() * 1E-05;
      }
      if (sizeIndex < 4) {
        var oldLighting = renderContext.lighting;
        if (planetID === 5) {
          if (renderContext.gl == null) {
            renderContext.lighting = false;
            Planets.drawSaturnsRings(renderContext, false, dist);
            renderContext.lighting = oldLighting;
          }
        }
        if (!planetID) {
          renderContext.lighting = false;
        }
        Planets._drawSphere(renderContext, planetID);
        if (planetID === 5) {
          if (renderContext.gl == null) {
            renderContext.lighting = false;
            Planets.drawSaturnsRings(renderContext, true, dist);
          }
          else {
            renderContext.lighting = false;
            Planets._drawRings(renderContext);
            renderContext.lighting = oldLighting;
          }
        }
        renderContext.lighting = oldLighting;
      }
      else {
        if (!planetID) {
          Planets.drawPointPlanet(renderContext, new Vector3d(), (10 * Planets._planetDiameters[planetID]), Planets.planetColors[planetID], true);
        }
        else if (planetID < 9 || planetID === 19) {
          var size = (800 * Planets._planetDiameters[planetID]);
          Planets.drawPointPlanet(renderContext, new Vector3d(), Math.max(0.05, Math.min(0.1, size)), Planets.planetColors[planetID], true);
        }
        else if (sizeIndexParam > 0.002) {
          var size = (800 * Planets._planetDiameters[planetID]);
          Planets.drawPointPlanet(renderContext, new Vector3d(), Math.max(0.05, Math.min(0.1, size)), Planets.planetColors[planetID], true);
        }
      }
    }
    LayerManager._draw(renderContext, 1, false, Planets.getNameFrom3dId(planetID), true, false);
    renderContext.set_world(matOld);
    renderContext.set_worldBase(matOldBase);
    renderContext.set_worldBaseNonRotating(matOldNonRotating);
  };
  Planets.drawSaturnsRings = function(renderContext, front, distance) {
    if (Planets._ringsTriangleLists[0] == null) {
      Planets._ringImage = document.createElement('img');
      var xdomimg = Planets._ringImage;
      xdomimg.crossOrigin = 'anonymous';
      Planets._ringImage.src = '/webclient/images/saturnringsshadow.png';
      Planets._ringsTriangleLists[0] = [];
      Planets._ringsTriangleLists[1] = [];
      var ringSize = 2.25;
      var TopLeft = Vector3d.create(-ringSize, 0, -ringSize);
      var TopRight = Vector3d.create(ringSize, 0, -ringSize);
      var BottomLeft = Vector3d.create(-ringSize, 0, ringSize);
      var BottomRight = Vector3d.create(ringSize, 0, ringSize);
      var center = Vector3d.create(0, 0, 0);
      var leftCenter = Vector3d.create(-ringSize, 0, 0);
      var topCenter = Vector3d.create(0, 0, -ringSize);
      var bottomCenter = Vector3d.create(0, 0, ringSize);
      var rightCenter = Vector3d.create(ringSize, 0, 0);
      var level = 6;
      var vertexList;
      vertexList = [];
      var Width = 1024;
      var Height = 1024;
      vertexList.push(PositionTexture.createPosSize(TopLeft, 0, 0, Width, Height));
      vertexList.push(PositionTexture.createPosSize(TopRight, 1, 0, Width, Height));
      vertexList.push(PositionTexture.createPosSize(BottomLeft, 0, 1, Width, Height));
      vertexList.push(PositionTexture.createPosSize(BottomRight, 1, 1, Width, Height));
      var childTriangleList = [];
      childTriangleList.push(Triangle.create(0, 2, 1));
      childTriangleList.push(Triangle.create(2, 3, 1));
      var count = 5;
      while (count-- > 1) {
        var newList = [];
        var $enum1 = ss.enumerate(childTriangleList);
        while ($enum1.moveNext()) {
          var tri = $enum1.current;
          tri.subDivideNoNormalize(newList, vertexList);
        }
        childTriangleList = newList;
      }
      var miter = 0.6 / (Width / 256);
      var $enum2 = ss.enumerate(childTriangleList);
      while ($enum2.moveNext()) {
        var tri = $enum2.current;
        var p1 = vertexList[tri.a];
        var p2 = vertexList[tri.b];
        var p3 = vertexList[tri.c];
        Planets._ringsTriangleLists[0].push(RenderTriangle.createWithMiter(p1, p2, p3, Planets._ringImage, level, miter));
      }
    }
    if (renderContext.gl == null) {
      var cam = renderContext.cameraPosition;
      var test = new Vector3d();
      var worldLocal = Matrix3d.multiplyMatrix(Matrix3d._rotationY(Math.atan2(renderContext.get_sunPosition().x, renderContext.get_sunPosition().z)), renderContext.get_worldBaseNonRotating());
      var wv = Matrix3d.multiplyMatrix(worldLocal, renderContext.get_view());
      var wvp = Matrix3d.multiplyMatrix(wv, renderContext.get_projection());
      var Width = renderContext.width;
      var Height = renderContext.height;
      wvp.scale(Vector3d.create(Width / 2, -Height / 2, 1));
      wvp.translate(Vector3d.create(Width / 2, Height / 2, 0));
      var td = 0;
      for (var i = 0; i < 2; i++) {
        var $enum3 = ss.enumerate(Planets._ringsTriangleLists[0]);
        while ($enum3.moveNext()) {
          var tri = $enum3.current;
          test = wv.transform(tri.a.position);
          td = test.length();
          var draw = td > distance;
          if (front) {
            draw = !draw;
          }
          if (draw) {
            tri.opacity = 1;
            tri.draw(renderContext.device, wvp);
          }
        }
        RenderTriangle.cullInside = !RenderTriangle.cullInside;
      }
    }
    else {
    }
  };
  Planets._drawRings = function(renderContext) {
    Planets._initRings();
    TileShader.use(renderContext, Planets._ringsVertexBuffer.vertexBuffer, null, Planets._ringsTexture.texture2d, 1, false);
    renderContext.gl.drawArrays(5, 0, Planets._triangleCountRings);
  };
  Planets._initRings = function() {
    if (Planets._ringsVertexBuffer != null) {
      return;
    }
    Planets._ringsTexture = Planets.loadPlanetTexture('//cdn.worldwidetelescope.org/webclient/images/SaturnRingsStrip.png');
    var inner = 1.113;
    var outer = 2.25;
    Planets._ringsVertexBuffer = new PositionTextureVertexBuffer(((192 + 1) * 2));
    Planets._triangleCountRings = (192 + 1) * 2;
    var verts = Planets._ringsVertexBuffer.lock();
    var radStep = Math.PI * 2 / 192;
    var index = 0;
    for (var x = 0; x <= 192; x += 2) {
      var rads1 = x * radStep;
      var rads2 = (x + 1) * radStep;
      verts[index] = new PositionTexture();
      verts[index].position = Vector3d.create((Math.cos(rads1) * inner), 0, (Math.sin(rads1) * inner));
      verts[index].tu = 1;
      verts[index].tv = 0;
      index++;
      verts[index] = new PositionTexture();
      verts[index].position = Vector3d.create((Math.cos(rads1) * outer), 0, (Math.sin(rads1) * outer));
      verts[index].tu = 0;
      verts[index].tv = 0;
      index++;
      verts[index] = new PositionTexture();
      verts[index].position = Vector3d.create((Math.cos(rads2) * inner), 0, (Math.sin(rads2) * inner));
      verts[index].tu = 1;
      verts[index].tv = 1;
      index++;
      verts[index] = new PositionTexture();
      verts[index].position = Vector3d.create((Math.cos(rads2) * outer), 0, (Math.sin(rads2) * outer));
      verts[index].tu = 0;
      verts[index].tv = 1;
      index++;
    }
    Planets._ringsVertexBuffer.unlock();
  };
  Planets.drawPointPlanet = function(renderContext, location, size, color, zOrder) {
    var center = location;
    var rad = size / 2;
    if (renderContext.gl != null) {
      var ppList = new PointList(renderContext);
      ppList.minSize = 20;
      ppList.addPoint(location.copy(), color._clone(), new Dates(0, 1), size / 100);
      ppList.depthBuffered = true;
      ppList.draw(renderContext, 1, false);
    }
    else {
      var screenSpacePnt = renderContext.WVP.transform(center);
      if (screenSpacePnt.z < 0) {
        return;
      }
      if (!zOrder) {
        if (Vector3d.dot(renderContext.get_viewPoint(), center) < 0.55) {
          return;
        }
      }
      var ctx = renderContext.device;
      ctx.save();
      ctx.beginPath();
      ctx.arc(screenSpacePnt.x, screenSpacePnt.y, rad, 0, Math.PI * 2, true);
      ctx.lineWidth = 1;
      ctx.fillStyle = color.toString();
      if (true) {
        ctx.fill();
      }
      ctx.globalAlpha = 1;
      ctx.strokeStyle = color.toString();
      ctx.stroke();
      ctx.restore();
    }
  };
  Planets.getAdjustedPlanetRadius = function(planetID) {
    if (planetID > Planets._planetDiameters.length - 1) {
      planetID = 19;
    }
    var diameter = Planets._planetDiameters[planetID];
    var radius = (diameter / 2);
    if (!!planetID) {
      radius = radius * (1 + (3 * (Settings.get_active().get_solarSystemScale() - 1)));
    }
    else {
      radius = radius * (1 + (0.3 * (Settings.get_active().get_solarSystemScale() - 1)));
    }
    return radius;
  };
  Planets.getPlanetRadiusInMeters = function(planetID) {
    if (planetID > Planets._planetDiameters.length - 1) {
      planetID = 19;
    }
    var diameter = Planets._planetDiameters[planetID];
    return (diameter / 2) * 149598000 * 1000;
  };
  Planets._drawPlanet = function(renderContext, planetID, opacity) {
    var planetPosition = Planets._planetLocations[planetID];
    if (((planetID < 14) && Planets._planetScales[planetID] < (renderContext.viewCamera.zoom / 6) / 400)) {
      if (planetID < 10 || ((planetID < 14) && Planets._planetScales[planetID] > (renderContext.viewCamera.zoom / 6) / 6400)) {
        var point = Coordinates.raDecTo3d(planetPosition.RA, planetPosition.dec);
        Planets.drawPointPlanet(renderContext, point, 3, Planets.planetColors[planetID], false);
      }
      return;
    }
    var brush = null;
    if (planetID < 10 || planetID === 18) {
      brush = Planets._planetTextures[planetID];
    }
    else if (planetID < 14) {
      if (Planets._planetLocations[planetID].eclipsed) {
        brush = Planets._planetTextures[15];
      }
      else {
        if (Settings.get_active().get_showMoonsAsPointSource()) {
          brush = Planets._planetTextures[14];
        }
        else {
          brush = Planets._planetTextures[planetID];
        }
      }
    }
    else {
      if (!Planets._planetLocations[planetID].shadow) {
        return;
      }
      brush = Planets._planetTextures[15];
    }
    if (renderContext.gl != null) {
      if (Planets._planetPoints == null) {
        Planets._planetPoints = new Array(4);
        for (var i = 0; i < 4; i++) {
          Planets._planetPoints[i] = new PositionColoredTextured();
        }
      }
      var radius = (Planets._planetScales[planetID] / 2);
      var raRadius = (radius / Math.cos(planetPosition.dec / 180 * Math.PI));
      Planets._planetPoints[0].position = Coordinates.raDecTo3dAu((planetPosition.RA - (raRadius / 15)), planetPosition.dec + radius, 1);
      Planets._planetPoints[0].tu = 0;
      Planets._planetPoints[0].tv = 1;
      Planets._planetPoints[0].color = Colors.get_white();
      Planets._planetPoints[1].position = Coordinates.raDecTo3dAu((planetPosition.RA - (raRadius / 15)), planetPosition.dec - radius, 1);
      Planets._planetPoints[1].tu = 0;
      Planets._planetPoints[1].tv = 0;
      Planets._planetPoints[1].color = Colors.get_white();
      Planets._planetPoints[2].position = Coordinates.raDecTo3dAu((planetPosition.RA + (raRadius / 15)), planetPosition.dec + radius, 1);
      Planets._planetPoints[2].tu = 1;
      Planets._planetPoints[2].tv = 1;
      Planets._planetPoints[2].color = Colors.get_white();
      Planets._planetPoints[3].position = Coordinates.raDecTo3dAu((planetPosition.RA + (raRadius / 15)), planetPosition.dec - radius, 1);
      Planets._planetPoints[3].tu = 1;
      Planets._planetPoints[3].tv = 0;
      Planets._planetPoints[3].color = Colors.get_white();
      Planets._planetSprite.draw(renderContext, Planets._planetPoints, 4, brush, true, 1);
    }
    else {
      var center = Coordinates.raDecTo3d(planetPosition.RA, planetPosition.dec);
      var rad = Planets._planetScales[planetID] / (renderContext.get_fovScale() / 3600) / 2;
      var screenSpacePnt = renderContext.WVP.transform(center);
      if (screenSpacePnt.z < 0) {
        return;
      }
      if (Vector3d.dot(renderContext.get_viewPoint(), center) < 0.55) {
        return;
      }
      var ctx = renderContext.device;
      ctx.save();
      ctx.globalAlpha = opacity;
      ctx.beginPath();
      ctx.arc(screenSpacePnt.x, screenSpacePnt.y, rad, 0, Math.PI * 2, true);
      ctx.lineWidth = 0;
      ctx.closePath();
      ctx.clip();
      ctx.drawImage(brush.imageElement, screenSpacePnt.x - rad, screenSpacePnt.y - rad, rad * 2, rad * 2);
      ctx.globalAlpha = 1;
      ctx.restore();
    }
  };
  Planets._drawPlanetPhase = function(renderContext, planetID, phase, angle, dark) {
  };
  Planets._geocentricElongation = function(ObjectAlpha, ObjectDelta, SunAlpha, SunDelta) {
    ObjectAlpha = Coordinates.degreesToRadians(ObjectAlpha * 15);
    SunAlpha = Coordinates.degreesToRadians(SunAlpha * 15);
    ObjectDelta = Coordinates.degreesToRadians(ObjectDelta);
    SunDelta = Coordinates.degreesToRadians(SunDelta);
    return Coordinates.radiansToDegrees(Math.acos(Math.sin(SunDelta) * Math.sin(ObjectDelta) + Math.cos(SunDelta) * Math.cos(ObjectDelta) * Math.cos(SunAlpha - ObjectAlpha)));
  };
  Planets._phaseAngle = function(GeocentricElongation, EarthObjectDistance, EarthSunDistance) {
    GeocentricElongation = Coordinates.degreesToRadians(GeocentricElongation);
    return Coordinates.mapTo0To360Range(Coordinates.radiansToDegrees(Math.atan2(EarthSunDistance * Math.sin(GeocentricElongation), EarthObjectDistance - EarthSunDistance * Math.cos(GeocentricElongation))));
  };
  Planets._positionAngle = function(Alpha0, Delta0, Alpha, Delta) {
    Alpha0 = Coordinates.hoursToRadians(Alpha0);
    Alpha = Coordinates.hoursToRadians(Alpha);
    Delta0 = Coordinates.degreesToRadians(Delta0);
    Delta = Coordinates.degreesToRadians(Delta);
    return Coordinates.mapTo0To360Range(Coordinates.radiansToDegrees(Math.atan2(Math.cos(Delta0) * Math.sin(Alpha0 - Alpha), Math.sin(Delta0) * Math.cos(Delta) - Math.cos(Delta0) * Math.sin(Delta) * Math.cos(Alpha0 - Alpha))));
  };
  Planets._drawSphere = function(renderContext, planetID) {
    var planetName = Planets.getImageSetNameNameFrom3dId(planetID);
    var planet = WWTControl.singleton.getImagesetByName(planetName);
    if (planet == null) {
      planet = WWTControl.singleton.getImagesetByName('Bing Maps Aerial');
    }
    if (planet != null) {
      renderContext.drawImageSet(planet, 100);
      if (planetID === 19) {
      }
      return;
    }
  };
  var Planets$ = {

  };


  // wwtlib.Material

  function Material() {
    this.specularSharpness = 0;
    this.opacity = 0;
    this.isDefault = false;
  }
  var Material$ = {

  };


  // wwtlib.RenderContext

  function RenderContext() {
    this.height = 0;
    this.width = 0;
    this.lighting = false;
    this._viewPoint = new Vector3d();
    this.space = false;
    this._fovAngle = 0;
    this._fovScale = 0;
    this._nominalRadius = 6378137;
    this._mainTexture = null;
    this.viewMover = null;
    this.viewCamera = new CameraParameters();
    this.targetCamera = new CameraParameters();
    this.alt = 0;
    this.az = 0;
    this.targetAlt = 0;
    this.targetAz = 0;
    this._targetHeight = 1;
    this.targetAltitude = 0;
    this._galactic = true;
    this._galacticMatrix = Matrix3d.create(-0.4838350155, -0.0548755604, -0.8734370902, 0, 0.7469822445, 0.4941094279, -0.44482963, 0, 0.4559837762, -0.867666149, -0.1980763734, 0, 0, 0, 0, 1);
    this._firstTimeInit = false;
    this._useSolarSystemTilt = true;
    this.customTrackingParams = new CameraParameters();
    this._cameraOffset = new Vector3d();
    this._fovLocal = (Math.PI / 4);
    this.perspectiveFov = Math.PI / 4;
    this.nearPlane = 0;
    this._frustumDirty = true;
    this._frustum = new Array(6);
    this._ambientLightColor = Colors.get_black();
    this._hemiLightColor = Colors.get_black();
    this._hemiLightUp = new Vector3d();
    this._sunlightColor = Colors.get_white();
    this._sunPosition = new Vector3d();
    this._reflectedLightColor = Colors.get_black();
    this._reflectedLightPosition = new Vector3d();
    this._occludingPlanetRadius = 0;
    this._occludingPlanetPosition = new Vector3d();
    this._lightingStateDirty = true;
    this._twoSidedLighting = false;
    this.cameraPosition = new Vector3d();
    this._skyColor = 'Blue';
    for (var i = 0; i < 6; i++) {
      this._frustum[i] = new PlaneD(0, 0, 0, 0);
    }
  }
  RenderContext.create = function(device) {
    var temp = new RenderContext();
    temp.device = device;
    temp.viewCamera.zoom = 700;
    temp.viewCamera.target = 65536;
    return temp;
  };
  RenderContext._getTilesYForLevel = function(layer, level) {
    var maxY = 1;
    switch (layer.get_projection()) {
      case 0:
        maxY = Math.pow(2, level);
        break;
      case 1:
        maxY = (Math.pow(2, level) * (180 / layer.get_baseTileDegrees()));
        break;
      case 2:
        maxY = Math.pow(2, level);
        break;
      case 4:
        maxY = 1;
        break;
      default:
        maxY = Math.pow(2, level);
        break;
    }
    if (maxY === Number.POSITIVE_INFINITY) {
      maxY = 1;
    }
    return maxY;
  };
  RenderContext._getTilesXForLevel = function(layer, level) {
    var maxX = 1;
    switch (layer.get_projection()) {
      case 6:
      case 3:
        maxX = Math.pow(2, level);
        break;
      case 0:
        maxX = Math.pow(2, level) * ss.truncate((layer.get_baseTileDegrees() / 360));
        break;
      case 1:
        maxX = Math.pow(2, level) * ss.truncate((360 / layer.get_baseTileDegrees()));
        break;
      case 2:
        if (layer.get_widthFactor() === 1) {
          maxX = Math.pow(2, level) * 2;
        }
        else {
          maxX = Math.pow(2, level);
        }
        break;
      case 5:
        maxX = 1;
        break;
      case 4:
        maxX = 1;
        break;
      default:
        maxX = Math.pow(2, level) * 2;
        break;
    }
    return maxX;
  };
  var RenderContext$ = {
    save: function() {
      if (this.gl != null) {
      }
      else {
        this.device.save();
      }
    },
    restore: function() {
      if (this.gl != null) {
      }
      else {
        this.device.restore();
      }
    },
    clear: function() {
      if (this.gl != null) {
        this.gl.viewport(0, 0, ss.truncate(this.width), ss.truncate(this.height));
        this.gl.clear(16384 | 256);
      }
      else {
        this.device.save();
        this.device.fillStyle = 'black';
        this.device.fillRect(0, 0, this.width, this.height);
        this.device.restore();
      }
    },
    get_viewPoint: function() {
      return this._viewPoint;
    },
    get_RA: function() {
      return ((((180 - (this.viewCamera.lng - 180)) / 15) % 24) + 48) % 24;
    },
    rAtoViewLng: function(ra) {
      return 180 - (ra / 24 * 360) - 180;
    },
    get_dec: function() {
      return this.viewCamera.lat;
    },
    get_fovAngle: function() {
      return this._fovAngle;
    },
    get_fovScale: function() {
      return this._fovScale;
    },
    set_fovScale: function(value) {
      this._fovScale = value;
      return value;
    },
    get_view: function() {
      return this._view;
    },
    set_view: function(value) {
      this._view = value;
      this._frustumDirty = true;
      return value;
    },
    get_viewBase: function() {
      return this._viewBase;
    },
    set_viewBase: function(value) {
      this._viewBase = value;
      return value;
    },
    get_projection: function() {
      return this._projection;
    },
    set_projection: function(value) {
      this._projection = value;
      this._frustumDirty = true;
      return value;
    },
    get_world: function() {
      return this._world;
    },
    set_world: function(value) {
      this._world = value;
      this._frustumDirty = true;
      return value;
    },
    _getScreenTexture: function() {
      var tex = null;
      return tex;
    },
    get_worldBase: function() {
      return this._worldBase;
    },
    set_worldBase: function(value) {
      this._worldBase = value;
      return value;
    },
    get_worldBaseNonRotating: function() {
      return this._worldBaseNonRotating;
    },
    set_worldBaseNonRotating: function(value) {
      this._worldBaseNonRotating = value;
      return value;
    },
    get_nominalRadius: function() {
      return this._nominalRadius;
    },
    set_nominalRadius: function(value) {
      this._nominalRadius = value;
      return value;
    },
    get_mainTexture: function() {
      return this._mainTexture;
    },
    set_mainTexture: function(value) {
      if (value != null) {
        this._mainTexture = value;
        this.gl.bindTexture(3553, this._mainTexture.texture2d);
      }
      return value;
    },
    onTarget: function(place) {
      return ((Math.abs(this.viewCamera.lat - this.targetCamera.lat) < 1E-12 && Math.abs(this.viewCamera.lng - this.targetCamera.lng) < 1E-12 && Math.abs(this.viewCamera.zoom - this.targetCamera.zoom) < 1E-12) && this.viewMover == null);
    },
    setTexture: function(texture) {
    },
    get_backgroundImageset: function() {
      return this._backgroundImageset;
    },
    set_backgroundImageset: function(value) {
      this._backgroundImageset = value;
      return value;
    },
    get_foregroundImageset: function() {
      return this._foregroundImageset;
    },
    set_foregroundImageset: function(value) {
      this._foregroundImageset = value;
      return value;
    },
    drawImageSet: function(imageset, opacity) {
      var maxX = RenderContext._getTilesXForLevel(imageset, imageset.get_baseLevel());
      var maxY = RenderContext._getTilesYForLevel(imageset, imageset.get_baseLevel());
      for (var x = 0; x < maxX; x++) {
        for (var y = 0; y < maxY; y++) {
          var tile = TileCache.getTile(imageset.get_baseLevel(), x, y, imageset, null);
          if (tile != null) {
            tile.draw3D(this, opacity);
          }
        }
      }
    },
    getScaledAltitudeForLatLong: function(viewLat, viewLong) {
      var layer = this.get_backgroundImageset();
      if (layer == null) {
        return 0;
      }
      var maxX = RenderContext._getTilesXForLevel(layer, layer.get_baseLevel());
      var maxY = RenderContext._getTilesYForLevel(layer, layer.get_baseLevel());
      for (var x = 0; x < maxX; x++) {
        for (var y = 0; y < maxY; y++) {
          var tile = TileCache.getTile(layer.get_baseLevel(), x, y, layer, null);
          if (tile != null) {
            if (tile.isPointInTile(viewLat, viewLong)) {
              return tile.getSurfacePointAltitude(viewLat, viewLong, false);
            }
          }
        }
      }
      return 0;
    },
    _setupMatricesLand3d: function() {
      this.lighting = false;
      this.space = false;
      RenderTriangle.cullInside = false;
      var WorldMatrix = Matrix3d._rotationY(((this.viewCamera.lng - 90) / 180 * Math.PI));
      WorldMatrix._multiply(Matrix3d._rotationX(((-this.viewCamera.lat) / 180 * Math.PI)));
      this.set_world(WorldMatrix);
      this.set_worldBase(WorldMatrix.clone());
      this._viewPoint = Coordinates.geoTo3d(this.viewCamera.lat, this.viewCamera.lng);
      var distance = 0;
      if (this._backgroundImageset.get_isMandelbrot()) {
        distance = (4 * (this.viewCamera.zoom / 180)) + 1E-41;
      }
      else {
        distance = (4 * (this.viewCamera.zoom / 180)) + 1E-06;
      }
      this._fovAngle = (this.viewCamera.zoom / 343.774) / Math.PI * 180;
      this._fovScale = (this._fovAngle / this.height) * 3600;
      if (this.gl != null) {
        this.targetAltitude = this.getScaledAltitudeForLatLong(this.viewCamera.lat, this.viewCamera.lng);
        var heightNow = 1 + this.targetAltitude;
        this.targetAltitude *= this.get_nominalRadius();
        if (this._targetHeight < heightNow) {
          this._targetHeight = (((this._targetHeight * 2) + heightNow) / 3);
        }
        else {
          this._targetHeight = (((this._targetHeight * 9) + heightNow) / 10);
        }
      }
      else {
        this.targetAltitude = 0;
        this._targetHeight = 1;
      }
      var rotLocal = this.viewCamera.rotation;
      this.cameraPosition = Vector3d.create((Math.sin(rotLocal) * Math.sin(this.viewCamera.angle) * distance), (Math.cos(rotLocal) * Math.sin(this.viewCamera.angle) * distance), (-this._targetHeight - (Math.cos(this.viewCamera.angle) * distance)));
      var cameraTarget = Vector3d.create(0, 0, -this._targetHeight);
      var camHeight = this.cameraPosition.length();
      var lookUp = Vector3d.create(Math.sin(rotLocal) * Math.cos(this.viewCamera.angle), Math.cos(rotLocal) * Math.cos(this.viewCamera.angle), Math.sin(this.viewCamera.angle));
      this.set_view(Matrix3d.lookAtLH(this.cameraPosition, cameraTarget, lookUp));
      this.set_viewBase(this.get_view());
      var back = Math.sqrt((distance + 1) * (distance + 1) - 1);
      back = Math.max(0.5, back);
      var m_nearPlane = distance * 0.05;
      m_nearPlane = distance * 0.05;
      this.set_projection(Matrix3d.perspectiveFovLH((Math.PI / 4), this.width / this.height, m_nearPlane, back));
      this._setMatrixes();
      this.makeFrustum();
    },
    setupMatricesSpace3d: function(canvasWidth, canvasHeight) {
      this.lighting = false;
      if (!this._firstTimeInit) {
        this._galacticMatrix = Matrix3d.get_identity();
        this._galacticMatrix._multiply(Matrix3d._rotationY(-(270 - (17.7603329867975 * 15)) / 180 * Math.PI));
        this._galacticMatrix._multiply(Matrix3d._rotationX(-(-28.9361739586894) / 180 * Math.PI));
        this._galacticMatrix._multiply(Matrix3d._rotationZ(((31.422052860102) - 90) / 180 * Math.PI));
        this._firstTimeInit = true;
      }
      this.space = true;
      RenderTriangle.cullInside = true;
      var WorldMatrix = Matrix3d.get_identity();
      if (Settings.get_active().get_galacticMode()) {
        WorldMatrix._multiply(this._galacticMatrix);
        WorldMatrix._multiply(Matrix3d._rotationY(this.az / 180 * Math.PI));
        WorldMatrix._multiply(Matrix3d._rotationX(-this.alt / 180 * Math.PI));
        var gPoint = Coordinates.galactictoJ2000(this.az, this.alt);
        this._viewPoint = Coordinates.raDecTo3dAu(gPoint[0] / 15, gPoint[1], 1);
        this.targetCamera.lng = this.rAtoViewLng(gPoint[0] / 15);
        this.targetCamera.lat = gPoint[1];
        this.viewCamera.lat = this.targetCamera.lat;
        this.viewCamera.lng = this.targetCamera.lng;
      }
      else {
        WorldMatrix._multiply(Matrix3d._rotationY(-(this.viewCamera.lng - 90) / 180 * Math.PI));
        WorldMatrix._multiply(Matrix3d._rotationX(-this.viewCamera.lat / 180 * Math.PI));
        this._viewPoint = Coordinates.raDecTo3dAu(this.get_RA(), this.get_dec(), 1);
      }
      var camLocal = this.viewCamera.rotation;
      this._fovAngle = (this.viewCamera.zoom / 343.774) / Math.PI * 180;
      this._fovScale = (this._fovAngle / canvasHeight) * 3600;
      if (Settings.get_active().get_localHorizonMode() && this._backgroundImageset.get_dataSetType() === 2) {
        var zenithAltAz = new Coordinates(0, 0);
        zenithAltAz.set_az(0);
        zenithAltAz.set_alt(0);
        var zenith = Coordinates.horizonToEquitorial(zenithAltAz, SpaceTimeController.get_location(), SpaceTimeController.get_now());
        var raPart = -((zenith.get_RA() - 6) / 24 * (Math.PI * 2));
        var decPart = -(zenith.get_dec() / 360 * (Math.PI * 2));
        var raText = Coordinates.formatDMS(zenith.get_RA());
        WorldMatrix = Matrix3d._rotationY(-raPart - Math.PI);
        WorldMatrix._multiply(Matrix3d._rotationX(decPart));
        if (SpaceTimeController.get_location().get_lat() < 0) {
          WorldMatrix._multiply(Matrix3d._rotationY((this.az / 180 * Math.PI)));
          WorldMatrix._multiply(Matrix3d._rotationX((this.alt / 180 * Math.PI)));
          camLocal += Math.PI;
        }
        else {
          WorldMatrix._multiply(Matrix3d._rotationY(((-this.az) / 180 * Math.PI)));
          WorldMatrix._multiply(Matrix3d._rotationX(((-this.alt) / 180 * Math.PI)));
        }
        var currentRaDec = Coordinates.horizonToEquitorial(Coordinates.fromLatLng(this.alt, this.az), SpaceTimeController.get_location(), SpaceTimeController.get_now());
        this.viewCamera.lat = this.targetCamera.lat = currentRaDec.get_dec();
        this.viewCamera.lng = this.targetCamera.lng = this.rAtoViewLng(currentRaDec.get_RA());
      }
      this.set_world(WorldMatrix);
      this.set_worldBase(WorldMatrix.clone());
      var localZoomFactor = this.viewCamera.zoom;
      var FovAngle = (localZoomFactor / 343.774) / Math.PI * 180;
      this.cameraPosition = Vector3d.create(0, 0, 0);
      this.set_view(Matrix3d.lookAtLH(this.cameraPosition, Vector3d.create(0, 0, -1), Vector3d.create(Math.sin(camLocal), Math.cos(camLocal), 0)));
      this.set_viewBase(this.get_view().clone());
      var m_nearPlane = 0.1;
      this.nearPlane = 0.1;
      this.set_projection(Matrix3d.perspectiveFovLH(localZoomFactor / 343.774, canvasWidth / canvasHeight, 0.1, -2));
      this._setMatrixes();
      this.makeFrustum();
    },
    get_solarSystemTrack: function() {
      return this.viewCamera.target;
    },
    set_solarSystemTrack: function(value) {
      this.viewCamera.target = value;
      return value;
    },
    get_solarSystemCameraDistance: function() {
      return (4 * (this.viewCamera.zoom / 9)) + 1E-06;
    },
    get_sandboxMode: function() {
      if (this._backgroundImageset == null) {
        return false;
      }
      return this._backgroundImageset.get_dataSetType() === 5;
    },
    get_trackingFrame: function() {
      return this.viewCamera.targetReferenceFrame;
    },
    set_trackingFrame: function(value) {
      this.viewCamera.targetReferenceFrame = value;
      return value;
    },
    get_fovLocal: function() {
      return this._fovLocal;
    },
    set_fovLocal: function(value) {
      this._fovLocal = value;
      return value;
    },
    setupMatricesOverlays: function() {
      this.set_world(Matrix3d.get_identity());
      var lookAtAdjust = Matrix3d.get_identity();
      var lookFrom = Vector3d.create(0, 0, 0);
      var lookAt = Vector3d.create(0, 0, 1);
      var lookUp = Vector3d.create(0, 1, 0);
      var view;
      view = Matrix3d.lookAtLH(lookFrom, lookAt, lookUp);
      view._multiply(Matrix3d._scaling(1, -1, 1));
      this.set_view(view);
      var back = 10000;
      this.nearPlane = 0.1;
      this.set_projection(Matrix3d.perspectiveFovLH(this._fovLocal, this.width / this.height, this.nearPlane, back));
    },
    setupMatricesSolarSystem: function(forStars) {
      this.lighting = Settings.get_active().get_solarSystemLighting();
      this.space = false;
      if (this.get_solarSystemTrack() !== 20 && this.get_solarSystemTrack() !== 65536) {
        this.viewCamera.viewTarget = Planets.getPlanetTargetPoint(this.get_solarSystemTrack(), this.viewCamera.lat, this.viewCamera.lng, 0);
      }
      RenderTriangle.cullInside = false;
      var cameraDistance = this.get_solarSystemCameraDistance();
      var trackingMatrix = Matrix3d.get_identity();
      cameraDistance -= 1E-06;
      var activeTrackingFrame = false;
      if (this.get_solarSystemTrack() === 20 && !ss.emptyString(this.get_trackingFrame())) {
        activeTrackingFrame = true;
        var target = LayerManager._getFrameTarget(this, this.get_trackingFrame());
        this.viewCamera.viewTarget = target.target;
        trackingMatrix = target.matrix;
      }
      else if (!ss.emptyString(this.get_trackingFrame())) {
        this.set_trackingFrame('');
      }
      var center = this.viewCamera.viewTarget;
      var localZoom = this.viewCamera.zoom * 20;
      var lookAt = new Vector3d();
      var viewAdjust = Matrix3d.get_identity();
      viewAdjust._multiply(Matrix3d._rotationX(((-this.viewCamera.lat) / 180 * Math.PI)));
      viewAdjust._multiply(Matrix3d._rotationY(((-this.viewCamera.lng) / 180 * Math.PI)));
      var lookAtAdjust = Matrix3d.get_identity();
      var dome = false;
      var lookUp;
      if (this._useSolarSystemTilt && !this.get_sandboxMode()) {
        var angle = this.viewCamera.angle;
        if (cameraDistance > 0.0008) {
          angle = 0;
        }
        else if (cameraDistance > 1E-05) {
          var val = Math.min(1.903089987, Util.log10(cameraDistance) + 5) / 1.903089987;
          angle = angle * Math.max(0, 1 - val);
        }
        this.cameraPosition = Vector3d.create((Math.sin(-this.viewCamera.rotation) * Math.sin(angle) * cameraDistance), (Math.cos(-this.viewCamera.rotation) * Math.sin(angle) * cameraDistance), (Math.cos(angle) * cameraDistance));
        lookUp = Vector3d.create(Math.sin(-this.viewCamera.rotation), Math.cos(-this.viewCamera.rotation), 1E-05);
      }
      else {
        this.cameraPosition = Vector3d.create(0, 0, cameraDistance);
        lookUp = Vector3d.create(Math.sin(-this.viewCamera.rotation), Math.cos(-this.viewCamera.rotation), 0.0001);
      }
      this.cameraPosition = viewAdjust.transform(this.cameraPosition);
      this._cameraOffset = this.cameraPosition.copy();
      var tmp = trackingMatrix.clone();
      tmp.invert();
      this._cameraOffset = Vector3d._transformCoordinate(this._cameraOffset, tmp);
      lookUp = viewAdjust.transform(lookUp);
      this.set_world(Matrix3d.get_identity());
      this.set_worldBase(Matrix3d.get_identity());
      this.set_worldBaseNonRotating(Matrix3d.get_identity());
      this.set_view(Matrix3d.multiplyMatrix(Matrix3d.multiplyMatrix(trackingMatrix, Matrix3d.lookAtLH(this.cameraPosition, lookAt, lookUp)), lookAtAdjust));
      this.set_viewBase(this.get_view().clone());
      var temp = Vector3d.subtractVectors(lookAt, this.cameraPosition);
      temp.normalize();
      temp = Vector3d._transformCoordinate(temp, trackingMatrix);
      temp.normalize();
      this._viewPoint = temp;
      var radius = Planets.getAdjustedPlanetRadius(this.get_solarSystemTrack());
      if (cameraDistance < radius * 2 && !forStars) {
        this.nearPlane = cameraDistance * 0.03;
        this.nearPlane = Math.max(this.nearPlane, 1E-11);
        RenderContext.back = 1900;
      }
      else {
        if (forStars) {
          RenderContext.back = 900056;
          RenderContext.back = (cameraDistance > 900056) ? cameraDistance * 3 : 900056;
          this.nearPlane = 3E-05;
        }
        else {
          RenderContext.back = (cameraDistance > 1900) ? cameraDistance + 200 : 1900;
          if (Settings.get_active().get_solarSystemScale() < 13) {
            this.nearPlane = Math.min(cameraDistance * 0.03, 0.01);
          }
          else {
            this.nearPlane = 0.001;
          }
        }
      }
      this.set_projection(Matrix3d.perspectiveFovLH(this._fovLocal, this.width / this.height, this.nearPlane, RenderContext.back));
      this.perspectiveFov = this._fovLocal;
      this._fovAngle = (this.viewCamera.zoom / 343.774) / Math.PI * 180;
      this._fovScale = (this._fovAngle / this.height) * 3600;
      this._setMatrixes();
      this.makeFrustum();
    },
    _setMatrixes: function() {
    },
    get_frustum: function() {
      return this._frustum;
    },
    get_ambientLightColor: function() {
      return this._ambientLightColor;
    },
    set_ambientLightColor: function(value) {
      this._ambientLightColor = value;
      this._lightingStateDirty = true;
      return value;
    },
    get_hemisphereLightColor: function() {
      return this._hemiLightColor;
    },
    set_hemisphereLightColor: function(value) {
      this._hemiLightColor = value;
      this._lightingStateDirty = true;
      return value;
    },
    get_hemisphereLightUp: function() {
      return this._hemiLightUp;
    },
    set_hemisphereLightUp: function(value) {
      this._hemiLightUp = value;
      this._lightingStateDirty = true;
      return value;
    },
    get_sunlightColor: function() {
      return this._sunlightColor;
    },
    set_sunlightColor: function(value) {
      this._sunlightColor = value;
      this._lightingStateDirty = true;
      return value;
    },
    get_sunPosition: function() {
      return this._sunPosition;
    },
    set_sunPosition: function(value) {
      this._sunPosition = value;
      this._lightingStateDirty = true;
      return value;
    },
    get_reflectedLightColor: function() {
      return this._reflectedLightColor;
    },
    set_reflectedLightColor: function(value) {
      if (this._reflectedLightColor !== value) {
        this._reflectedLightColor = value;
        this._lightingStateDirty = true;
      }
      return value;
    },
    get_reflectedLightPosition: function() {
      return this._reflectedLightPosition;
    },
    set_reflectedLightPosition: function(value) {
      this._reflectedLightPosition = value;
      this._lightingStateDirty = true;
      return value;
    },
    get_occludingPlanetRadius: function() {
      return this._occludingPlanetRadius;
    },
    set_occludingPlanetRadius: function(value) {
      this._occludingPlanetRadius = value;
      return value;
    },
    get_occludingPlanetPosition: function() {
      return this._occludingPlanetPosition;
    },
    set_occludingPlanetPosition: function(value) {
      this._occludingPlanetPosition = value;
      return value;
    },
    get_twoSidedLighting: function() {
      return this._twoSidedLighting;
    },
    set_twoSidedLighting: function(value) {
      if (value !== this._twoSidedLighting) {
        this._twoSidedLighting = value;
        this._lightingStateDirty = true;
      }
      return value;
    },
    makeFrustum: function() {
      this.WV = Matrix3d.multiplyMatrix(this.get_world(), this.get_view());
      var viewProjection = Matrix3d.multiplyMatrix(this.WV, this.get_projection());
      this.WVP = viewProjection.clone();
      var inverseWorld = this.get_world().clone();
      inverseWorld.invert();
      this._frustum[0].a = viewProjection.get_m14() + viewProjection.get_m11();
      this._frustum[0].b = viewProjection.get_m24() + viewProjection.get_m21();
      this._frustum[0].c = viewProjection.get_m34() + viewProjection.get_m31();
      this._frustum[0].d = viewProjection.get_m44() + viewProjection.get_m41();
      this._frustum[1].a = viewProjection.get_m14() - viewProjection.get_m11();
      this._frustum[1].b = viewProjection.get_m24() - viewProjection.get_m21();
      this._frustum[1].c = viewProjection.get_m34() - viewProjection.get_m31();
      this._frustum[1].d = viewProjection.get_m44() - viewProjection.get_m41();
      this._frustum[2].a = viewProjection.get_m14() - viewProjection.get_m12();
      this._frustum[2].b = viewProjection.get_m24() - viewProjection.get_m22();
      this._frustum[2].c = viewProjection.get_m34() - viewProjection.get_m32();
      this._frustum[2].d = viewProjection.get_m44() - viewProjection.get_m42();
      this._frustum[3].a = viewProjection.get_m14() + viewProjection.get_m12();
      this._frustum[3].b = viewProjection.get_m24() + viewProjection.get_m22();
      this._frustum[3].c = viewProjection.get_m34() + viewProjection.get_m32();
      this._frustum[3].d = viewProjection.get_m44() + viewProjection.get_m42();
      this._frustum[4].a = viewProjection.get_m13();
      this._frustum[4].b = viewProjection.get_m23();
      this._frustum[4].c = viewProjection.get_m33();
      this._frustum[4].d = viewProjection.get_m43();
      this._frustum[5].a = viewProjection.get_m14() - viewProjection.get_m13();
      this._frustum[5].b = viewProjection.get_m24() - viewProjection.get_m23();
      this._frustum[5].c = viewProjection.get_m34() - viewProjection.get_m33();
      this._frustum[5].d = viewProjection.get_m44() - viewProjection.get_m43();
      for (var i = 0; i < 6; i++) {
        this._frustum[i].normalize();
      }
      this._frustumDirty = false;
      this.WVP.scale(Vector3d.create(this.width / 2, -this.height / 2, 1));
      this.WVP.translate(Vector3d.create(this.width / 2, this.height / 2, 0));
      this._setMatrixes();
    },
    _initGL: function() {
      if (this.gl == null) {
        return;
      }
      var uints_for_indices = this.gl.getExtension('OES_element_index_uint');
      Tile.uvMultiple = 1;
      Tile.demEnabled = true;
      TileShader.init(this);
    },
    freezeView: function() {
      this.targetAlt = this.alt;
      this.targetAz = this.az;
      this.targetCamera = this.viewCamera.copy();
    },
    _setVertexBuffer: function(vertexBuffer) {
    },
    _setIndexBuffer: function(indexBuffer) {
    },
    setMaterial: function(material, diffuseTex, specularTex, normalMap, opacity) {
      this.set_mainTexture(diffuseTex);
    },
    preDraw: function() {
    }
  };


  // wwtlib.RenderTriangle

  function RenderTriangle() {
    this.a = new PositionTexture();
    this.b = new PositionTexture();
    this.c = new PositionTexture();
    this.normal = new Vector3d();
    this.opacity = 1;
    this.expansionInPixels = 0.6;
    this.tileLevel = 0;
    this._ta = new Vector3d();
    this._tb = new Vector3d();
    this._tc = new Vector3d();
    this._expandedS0 = new Vector2d();
    this._expandedS1 = new Vector2d();
    this._expandedS2 = new Vector2d();
    this.lighting = 1;
  }
  RenderTriangle.create = function(a, b, c, img, level) {
    var temp = new RenderTriangle();
    temp.a = a.copy();
    temp.b = b.copy();
    temp.c = c.copy();
    temp._texture = img;
    temp.tileLevel = level;
    temp.makeNormal();
    return temp;
  };
  RenderTriangle.createWithMiter = function(a, b, c, img, level, expansion) {
    var temp = new RenderTriangle();
    temp.expansionInPixels = expansion;
    temp.a = a.copy();
    temp.b = b.copy();
    temp.c = c.copy();
    temp._texture = img;
    temp.tileLevel = level;
    temp.makeNormal();
    return temp;
  };
  RenderTriangle._getMiterPoint = function(p1, p2, p3, edgeOffset) {
    var edge1 = Vector2d.subtract(p2, p1);
    var edge2 = Vector2d.subtract(p3, p1);
    edge1.normalize();
    edge2.normalize();
    var dir = Vector2d.create(edge1.x + edge2.x, edge1.y + edge2.y);
    dir.normalize();
    var delta = Vector2d.create(edge1.x - edge2.x, edge1.y - edge2.y);
    var sineHalfAngle = delta.get_length() / 2;
    var net = Math.min(2, edgeOffset / sineHalfAngle);
    dir.extend(net);
    return Vector2d.create(p1.x - dir.x, p1.y - dir.y);
  };
  RenderTriangle._miterPoint = function(p1x, p1y, p2x, p2y, p3x, p3y, ExpansionInPixels) {
    var e1x = p2x - p1x;
    var e1y = p2y - p1y;
    var e2x = p3x - p1x;
    var e2y = p3y - p1y;
    var length = Math.sqrt(e1x * e1x + e1y * e1y);
    if (!!length) {
      e1x /= length;
      e1y /= length;
    }
    length = Math.sqrt(e2x * e2x + e2y * e2y);
    if (!!length) {
      e2x /= length;
      e2y /= length;
    }
    var dx = e1x + e2x;
    var dy = e1y + e2y;
    length = Math.sqrt(dx * dx + dy * dy);
    if (!!length) {
      dx /= length;
      dy /= length;
    }
    var deltax = e1x - e2x;
    var deltay = e1y - e2y;
    length = Math.sqrt(deltax * deltax + deltay * deltay);
    var sineHalfAngle = length / 2;
    var net = Math.min(2, ExpansionInPixels / sineHalfAngle);
    dx *= net;
    dy *= net;
    return Vector2d.create(p1x - dx, p1y - dy);
  };
  RenderTriangle._miterPointOut = function(pntOut, p1x, p1y, p2x, p2y, p3x, p3y, ExpansionInPixels) {
    var e1x = p2x - p1x;
    var e1y = p2y - p1y;
    var e2x = p3x - p1x;
    var e2y = p3y - p1y;
    var length = Math.sqrt(e1x * e1x + e1y * e1y);
    if (!!length) {
      e1x /= length;
      e1y /= length;
    }
    length = Math.sqrt(e2x * e2x + e2y * e2y);
    if (!!length) {
      e2x /= length;
      e2y /= length;
    }
    var dx = e1x + e2x;
    var dy = e1y + e2y;
    length = Math.sqrt(dx * dx + dy * dy);
    if (!!length) {
      dx /= length;
      dy /= length;
    }
    var deltax = e1x - e2x;
    var deltay = e1y - e2y;
    length = Math.sqrt(deltax * deltax + deltay * deltay);
    var sineHalfAngle = length / 2;
    var net = Math.min(2, ExpansionInPixels / sineHalfAngle);
    dx *= net;
    dy *= net;
    pntOut.x = p1x - dx;
    pntOut.y = p1y - dy;
  };
  var RenderTriangle$ = {
    makeNormal: function() {
      var a = this.a.position.copy();
      var b = this.b.position.copy();
      var c = this.c.position.copy();
      a.normalize();
      b.normalize();
      c.normalize();
      var x = a.x + b.x + c.x;
      var y = a.y + b.y + c.y;
      var z = a.z + b.z + c.z;
      this.normal = Vector3d.create(x / 3, y / 3, z / 3);
      this.normal.normalize();
    },
    _checkBackface: function() {
      var ab = Vector3d.subtractVectors(this._ta, this._tb);
      var ac = Vector3d.subtractVectors(this._ta, this._tc);
      var cp = Vector3d.cross(ab, ac);
      cp.normalize();
      return cp.z >= 0;
    },
    draw: function(ctx, wvp) {
      if (ctx == null) {
        return;
      }
      wvp._transformTo(this.a.position, this._ta);
      wvp._transformTo(this.b.position, this._tb);
      wvp._transformTo(this.c.position, this._tc);
      if (this._checkBackface() === RenderTriangle.cullInside) {
        RenderTriangle.trianglesCulled++;
        return;
      }
      this._drawTriangle(ctx, this._texture, this._ta.x, this._ta.y, this._tb.x, this._tb.y, this._tc.x, this._tc.y, this.a.tu, this.a.tv, this.b.tu, this.b.tv, this.c.tu, this.c.tv);
    },
    _drawTriangle: function(ctx, im, x0, y0, x1, y1, x2, y2, sx0, sy0, sx1, sy1, sx2, sy2) {
      if (!this.intersects(0, RenderTriangle.width, 0, RenderTriangle.height, x0, y0, x1, y1, x2, y2)) {
        return false;
      }
      RenderTriangle._miterPointOut(this._expandedS0, x0, y0, x1, y1, x2, y2, this.expansionInPixels);
      RenderTriangle._miterPointOut(this._expandedS1, x1, y1, x0, y0, x2, y2, this.expansionInPixels);
      RenderTriangle._miterPointOut(this._expandedS2, x2, y2, x1, y1, x0, y0, this.expansionInPixels);
      x0 = this._expandedS0.x;
      y0 = this._expandedS0.y;
      x1 = this._expandedS1.x;
      y1 = this._expandedS1.y;
      x2 = this._expandedS2.x;
      y2 = this._expandedS2.y;
      ctx.save();
      if (RenderTriangle.renderingOn) {
        ctx.beginPath();
        ctx.moveTo(x0, y0);
        ctx.lineTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.closePath();
        ctx.clip();
      }
      var denom = sx0 * (sy2 - sy1) - sx1 * sy2 + sx2 * sy1 + (sx1 - sx2) * sy0;
      var m11 = -(sy0 * (x2 - x1) - sy1 * x2 + sy2 * x1 + (sy1 - sy2) * x0) / denom;
      var m12 = (sy1 * y2 + sy0 * (y1 - y2) - sy2 * y1 + (sy2 - sy1) * y0) / denom;
      var m21 = (sx0 * (x2 - x1) - sx1 * x2 + sx2 * x1 + (sx1 - sx2) * x0) / denom;
      var m22 = -(sx1 * y2 + sx0 * (y1 - y2) - sx2 * y1 + (sx2 - sx1) * y0) / denom;
      var dx = (sx0 * (sy2 * x1 - sy1 * x2) + sy0 * (sx1 * x2 - sx2 * x1) + (sx2 * sy1 - sx1 * sy2) * x0) / denom;
      var dy = (sx0 * (sy2 * y1 - sy1 * y2) + sy0 * (sx1 * y2 - sx2 * y1) + (sx2 * sy1 - sx1 * sy2) * y0) / denom;
      ctx.transform(m11, m12, m21, m22, dx, dy);
      if (RenderTriangle.renderingOn) {
        ctx.globalAlpha = this.opacity;
        if (this.lighting < 1) {
          ctx.globalAlpha = 1;
          ctx.fillStyle = 'Black';
          ctx.fillRect(0, 0, RenderTriangle.width, RenderTriangle.height);
          ctx.globalAlpha = this.lighting * this.opacity;
        }
        ctx.drawImage(im, 0, 0);
      }
      ctx.restore();
      return true;
    },
    intersects: function(l, r, t, b, x0, y0, x1, y1, x2, y2) {
      if (x0 > l && x0 < r && y0 > t && y0 < b) {
        return true;
      }
      if (x1 > l && x1 < r && y1 > t && y1 < b) {
        return true;
      }
      if (x2 > l && x2 < r && y2 > t && y2 < b) {
        return true;
      }
      var h4 = RenderTriangle.height * 4;
      if (this.tileLevel < 4 && ((Math.abs(x0 - x1) > h4) || (Math.abs(y0 - y1) > h4) || (Math.abs(x2 - x1) > h4) || (Math.abs(y2 - y1) > h4) || (Math.abs(x0 - x2) > h4) || (Math.abs(y0 - y2) > h4))) {
        return false;
      }
      return this.lineRectangleIntersect(l, r, t, b, x0, y0, x1, y1) || this.lineRectangleIntersect(l, r, t, b, x1, y1, x2, y2) || this.lineRectangleIntersect(l, r, t, b, x2, y2, x0, y0);
    },
    lineRectangleIntersect: function(l, r, t, b, x0, y0, x1, y1) {
      var top_intersection;
      var bottom_intersection;
      var toptrianglepoint;
      var bottomtrianglepoint;
      var m;
      var c;
      m = (y1 - y0) / (x1 - x0);
      c = y0 - (m * x0);
      if (m > 0) {
        top_intersection = (m * l + c);
        bottom_intersection = (m * r + c);
      }
      else {
        top_intersection = (m * r + c);
        bottom_intersection = (m * l + c);
      }
      if (y0 < y1) {
        toptrianglepoint = y0;
        bottomtrianglepoint = y1;
      }
      else {
        toptrianglepoint = y1;
        bottomtrianglepoint = y0;
      }
      var topoverlap;
      var botoverlap;
      topoverlap = (top_intersection > toptrianglepoint) ? top_intersection : toptrianglepoint;
      botoverlap = (bottom_intersection < bottomtrianglepoint) ? bottom_intersection : bottomtrianglepoint;
      return (topoverlap < botoverlap) && (!((botoverlap < t) || (topoverlap > b)));
    }
  };


  // wwtlib.ScriptInterface

  function ScriptInterface() {
    this._missedReady = false;
    this.hideTourFeedback = false;
    this._smoothAnimation = false;
    this._showCaptions = true;
  }
  var ScriptInterface$ = {
    add_ready: function(value) {
      this.__ready = ss.bindAdd(this.__ready, value);
    },
    remove_ready: function(value) {
      this.__ready = ss.bindSub(this.__ready, value);
    },
    _fireReady: function() {
      if (this.__ready != null) {
        this.__ready(this, new ss.EventArgs());
      }
      else {
        this._missedReady = true;
      }
    },
    add_collectionLoaded: function(value) {
      this.__collectionLoaded = ss.bindAdd(this.__collectionLoaded, value);
    },
    remove_collectionLoaded: function(value) {
      this.__collectionLoaded = ss.bindSub(this.__collectionLoaded, value);
    },
    _fireCollectionLoaded: function(url) {
      if (this.__collectionLoaded != null) {
        this.__collectionLoaded(this, new CollectionLoadedEventArgs(url));
      }
    },
    add_colorPickerDisplay: function(value) {
      this.__colorPickerDisplay = ss.bindAdd(this.__colorPickerDisplay, value);
    },
    remove_colorPickerDisplay: function(value) {
      this.__colorPickerDisplay = ss.bindSub(this.__colorPickerDisplay, value);
    },
    add_voTableDisplay: function(value) {
      this.__voTableDisplay = ss.bindAdd(this.__voTableDisplay, value);
    },
    remove_voTableDisplay: function(value) {
      this.__voTableDisplay = ss.bindSub(this.__voTableDisplay, value);
    },
    add_refreshLayerManager: function(value) {
      this.__refreshLayerManager = ss.bindAdd(this.__refreshLayerManager, value);
    },
    remove_refreshLayerManager: function(value) {
      this.__refreshLayerManager = ss.bindSub(this.__refreshLayerManager, value);
    },
    add_arrived: function(value) {
      this.__arrived = ss.bindAdd(this.__arrived, value);
    },
    remove_arrived: function(value) {
      this.__arrived = ss.bindSub(this.__arrived, value);
    },
    add_clicked: function(value) {
      this.__clicked = ss.bindAdd(this.__clicked, value);
    },
    remove_clicked: function(value) {
      this.__clicked = ss.bindSub(this.__clicked, value);
    },
    add_annotationClicked: function(value) {
      this.__annotationClicked = ss.bindAdd(this.__annotationClicked, value);
    },
    remove_annotationClicked: function(value) {
      this.__annotationClicked = ss.bindSub(this.__annotationClicked, value);
    },
    add_imageryLoaded: function(value) {
      this.__imageryLoaded = ss.bindAdd(this.__imageryLoaded, value);
    },
    remove_imageryLoaded: function(value) {
      this.__imageryLoaded = ss.bindSub(this.__imageryLoaded, value);
    },
    add_tourReady: function(value) {
      this.__tourReady = ss.bindAdd(this.__tourReady, value);
    },
    remove_tourReady: function(value) {
      this.__tourReady = ss.bindSub(this.__tourReady, value);
    },
    add_tourPaused: function(value) {
      this.__tourPaused = ss.bindAdd(this.__tourPaused, value);
    },
    remove_tourPaused: function(value) {
      this.__tourPaused = ss.bindSub(this.__tourPaused, value);
    },
    add_tourResumed: function(value) {
      this.__tourResumed = ss.bindAdd(this.__tourResumed, value);
    },
    remove_tourResumed: function(value) {
      this.__tourResumed = ss.bindSub(this.__tourResumed, value);
    },
    add_tourEnded: function(value) {
      this.__tourEnded = ss.bindAdd(this.__tourEnded, value);
    },
    remove_tourEnded: function(value) {
      this.__tourEnded = ss.bindSub(this.__tourEnded, value);
    },
    add_slideChanged: function(value) {
      this.__slideChanged = ss.bindAdd(this.__slideChanged, value);
    },
    remove_slideChanged: function(value) {
      this.__slideChanged = ss.bindSub(this.__slideChanged, value);
    },
    add_timeScrubberHook: function(value) {
      this.__timeScrubberHook = ss.bindAdd(this.__timeScrubberHook, value);
    },
    remove_timeScrubberHook: function(value) {
      this.__timeScrubberHook = ss.bindSub(this.__timeScrubberHook, value);
    },
    setTimeScrubberPosition: function(posLeft) {
      LayerManager.setTimeSliderValue(posLeft);
    },
    setTimeSlider: function(name, value) {
      this.__timeScrubberHook(name, value);
    },
    showColorPicker: function(pickerInstance, e) {
      if (this.__colorPickerDisplay != null) {
        this.__colorPickerDisplay(pickerInstance, e);
      }
    },
    displayVoTableLayer: function(layer) {
      if (this.__voTableDisplay != null) {
        this.__voTableDisplay(layer, new ss.EventArgs());
      }
    },
    refreshLayerManagerNow: function() {
      if (this.__refreshLayerManager != null) {
        this.__refreshLayerManager(null, new ss.EventArgs());
      }
    },
    _fireTourReady: function() {
      if (this.__tourReady != null) {
        this.__tourReady(this, new ss.EventArgs());
      }
    },
    _fireTourPaused: function() {
      if (this.__tourPaused != null) {
        this.__tourPaused(this, new ss.EventArgs());
      }
    },
    _fireTourResume: function() {
      if (this.__tourResumed != null) {
        this.__tourResumed(this, new ss.EventArgs());
      }
    },
    _fireTourEnded: function() {
      if (this.__tourEnded != null) {
        this.__tourEnded(this, new ss.EventArgs());
      }
    },
    _fireImageryLoaded: function() {
      if (this.__imageryLoaded != null) {
        this.__imageryLoaded(this, new ss.EventArgs());
      }
    },
    _fireClick: function(ra, dec) {
      if (this.__clicked != null) {
        this.__clicked(this, new ArrivedEventArgs(ra, dec, WWTControl.singleton.renderContext.viewCamera.zoom));
      }
    },
    _fireArrived: function(ra, dec, zoom) {
      if (this.__arrived != null) {
        this.__arrived(this, new ArrivedEventArgs(ra, dec, zoom));
      }
    },
    _fireAnnotationclicked: function(RA, Dec, id) {
      try {
        if (this.__annotationClicked != null) {
          this.__annotationClicked(this, new AnnotationClickEventArgs(RA, Dec, id));
        }
      }
      catch ($e1) {
      }
    },
    _fireSlideChanged: function(caption) {
      try {
        if (this.__slideChanged != null) {
          this.__slideChanged(this, new SlideChangedEventArgs(caption));
        }
      }
      catch ($e1) {
      }
    },
    endInit: function() {
      if (this._missedReady) {
        this._fireReady();
      }
    },
    gotoRaDecZoom: function(ra, dec, zoom, instant) {
      if (WWTControl.singleton != null) {
        WWTControl.singleton.gotoRADecZoom(ra / 15, dec, zoom * 6, instant);
      }
    },
    setBackgroundImageByName: function(name) {
      if (WWTControl.singleton != null) {
        WWTControl.singleton.setBackgroundImageByName(name);
      }
    },
    addVoTableLayer: function(table) {
      return LayerManager.addVoTableLayer(table, 'Vo Table');
    },
    setForegroundImageByName: function(name) {
      if (WWTControl.singleton != null) {
        WWTControl.singleton.setForegroundImageByName(name);
        WWTControl.singleton.renderContext.viewCamera.opacity = 100;
      }
    },
    setForegroundOpacity: function(opacity) {
      if (WWTControl.singleton != null) {
        WWTControl.singleton.renderContext.viewCamera.opacity = opacity;
      }
    },
    hideUI: function(hide) {
    },
    loadTour: function(url) {
      if (WWTControl.singleton != null) {
        WWTControl.singleton.playTour(url);
      }
    },
    loadFits: function(url) {
      return this.loadFitsLayer(url, '', true, null);
    },
    loadFitsLayer: function(url, name, gotoTarget, loaded) {
      if (ss.whitespace(name)) {
        name = LayerManager.getNextFitsName();
      }
      var imagesetLayer = new ImageSetLayer();
      var img = new FitsImage(url, null, function(wcsImage) {
        var width = ss.truncate(wcsImage.get_sizeX());
        var height = ss.truncate(wcsImage.get_sizeY());
        var imageset = Imageset.create(wcsImage.get_description(), Util.getHashCode(wcsImage.get_filename()).toString(), 2, 3, 5, Util.getHashCode(wcsImage.get_filename()), 0, 0, 256, wcsImage.get_scaleY(), '.tif', wcsImage.get_scaleX() > 0, '', wcsImage.get_centerX(), wcsImage.get_centerY(), wcsImage.get_rotation(), false, '', false, false, 1, wcsImage.get_referenceX(), wcsImage.get_referenceY(), wcsImage.get_copyright(), wcsImage.get_creditsUrl(), '', '', 0, '');
        imageset.set_wcsImage(wcsImage);
        imagesetLayer.set_imageSet(imageset);
        LayerManager.addFitsImageSetLayer(imagesetLayer, name);
        LayerManager.loadTree();
        if (gotoTarget) {
          WWTControl.singleton.gotoRADecZoom(wcsImage.get_centerX() / 15, wcsImage.get_centerY(), 10 * wcsImage.get_scaleY() * height, false);
        }
        if (loaded != null) {
          loaded(imagesetLayer);
        }
      });
      return imagesetLayer;
    },
    get_hideTourFeedback: function() {
      return this.hideTourFeedback;
    },
    set_hideTourFeedback: function(value) {
      this.hideTourFeedback = value;
      return value;
    },
    playTour: function() {
      if (WWTControl.singleton != null) {
        WWTControl.singleton.playCurrentTour();
      }
    },
    stopTour: function() {
      if (WWTControl.singleton != null) {
        WWTControl.singleton.stopCurrentTour();
      }
    },
    loadImageCollection: function(url) {
      var $this = this;

      this._imageUrl = url;
      this._imageFolder = new Folder();
      this._imageFolder.loadFromUrl(url, function() {
        Wtml.loadImagesets($this._imageFolder);
        $this._fireCollectionLoaded(url);
      });
    },
    _imageFileLoaded: function() {
      this._fireCollectionLoaded(this._imageUrl);
    },
    zoom: function(factor) {
      if (WWTControl.singleton != null) {
        WWTControl.singleton.zoom(factor);
      }
      return;
    },
    getRA: function() {
      if (WWTControl.singleton != null) {
        return WWTControl.singleton.renderContext.get_RA();
      }
      return 0;
    },
    getDec: function() {
      if (WWTControl.singleton != null) {
        return WWTControl.singleton.renderContext.get_dec();
      }
      return 0;
    },
    createFolder: function() {
      var folder = new Folder();
      return folder;
    },
    createPolygon: function(fill) {
      var p = new Poly();
      p.set_fill(fill);
      return p;
    },
    createPolyLine: function(fill) {
      return new PolyLine();
    },
    createCircle: function(fill) {
      var c = new Circle();
      c.set_fill(fill);
      return c;
    },
    addAnnotation: function(annotation) {
      if (annotation != null && ss.canCast(annotation, Annotation)) {
        if (WWTControl.singleton != null) {
          WWTControl.singleton._addAnnotation(annotation);
        }
      }
    },
    removeAnnotation: function(annotation) {
      if (annotation != null) {
        if (WWTControl.singleton != null) {
          WWTControl.singleton._removeAnnotation(annotation);
        }
      }
    },
    clearAnnotations: function() {
      if (WWTControl.singleton != null) {
        WWTControl.singleton._clearAnnotations();
      }
    },
    get_smoothAnimation: function() {
      return this._smoothAnimation;
    },
    set_smoothAnimation: function(value) {
      this._smoothAnimation = value;
      return value;
    },
    get_showCaptions: function() {
      return this._showCaptions;
    },
    set_showCaptions: function(value) {
      this._showCaptions = value;
      return value;
    },
    loadVOTable: function(url, useCurrentView) {
    },
    get_fov: function() {
      if (WWTControl.singleton != null) {
        return WWTControl.singleton.renderContext.viewCamera.zoom / 6;
      }
      return 60;
    }
  };


  // wwtlib.Settings

  function Settings() {
    this.autoRepeatTour = false;
    this._localHorizonMode = false;
    this._galacticMode = false;
    this._constellationBoundryColor = 'blue';
    this._constellationSelectionColor = 'yellow';
    this._constellationFigureColor = 'red';
    this._showConstellationFigures = true;
    this._showConstellationBoundries = true;
    this._showConstellationSelection = true;
    this._showCrosshairs = true;
    this._crosshairsColor = 'white';
    this._showEcliptic = false;
    this._locationLat = 47.717;
    this._locationLng = -122.0858;
    this._locationAltitude = 100;
    this._showFiledOfView = false;
    this._actualPlanetScale = true;
    this._fovCamera = 0;
    this._fovEyepiece = 0;
    this._fovTelescope = 0;
    this._showClouds = false;
    this._showGrid = false;
    this._showHorizon = true;
    this._showHorizonPanorama = false;
    this._showMoonsAsPointSource = true;
    this._showSolarSystem = true;
    this._solarSystemStars = true;
    this._solarSystemMilkyWay = true;
    this._solarSystemCosmos = true;
    this._solarSystemOrbits = true;
    this._solarSystemOverlays = true;
    this._solarSystemLighting = true;
    this._solarSystemMultiRes = true;
    this._solarSystemScale = 1;
    this._smoothPan = true;
    this._showElevationModel = true;
    this._showEquatorialGridText = false;
    this._showGalacticGrid = false;
    this._showGalacticGridText = false;
    this._showEclipticGrid = false;
    this._showEclipticGridText = false;
    this._showEclipticOverviewText = false;
    this._showAltAzGrid = false;
    this._showAltAzGridText = false;
    this._showPrecessionChart = false;
    this._showConstellationPictures = false;
    this._showConstellationLabels = false;
    this._solarSystemCMB = true;
    this._solarSystemMinorPlanets = false;
    this._solarSystemPlanets = true;
    this._showEarthSky = true;
    this._solarSystemMinorOrbits = false;
    this._constellationsEnabled = '';
    this._constellationFiguresFilter = new ConstellationFilter();
    this._constellationBoundariesFilter = new ConstellationFilter();
    this._constellationNamesFilter = new ConstellationFilter();
    this._constellationArtFilter = new ConstellationFilter();
    this._showSkyOverlays = true;
    this._showConstellations = true;
    this._showSkyNode = true;
    this._showSkyGrids = true;
    this._showSkyOverlaysIn3d = true;
    this._earthCutawayView = false;
    this._showISSModel = false;
    this._milkyWayModel = false;
    this._minorPlanetsFilter = 255;
    this._planetOrbitsFilter = 2147483647;
    this._constellations = true;
  }
  Settings.get_current = function() {
    if (Settings._active == null) {
      Settings._active = new Settings();
    }
    return Settings._active;
  };
  Settings.get_globalSettings = function() {
    if (Settings._active == null) {
      Settings._active = new Settings();
    }
    return Settings._active;
  };
  Settings.get_active = function() {
    if (Settings._active == null) {
      Settings._active = new Settings();
    }
    if (Settings.tourSettings != null) {
      return Settings.tourSettings;
    }
    return Settings._active;
  };
  var Settings$ = {
    get_constellationFigureColor: function() {
      return this._constellationFigureColor;
    },
    set_constellationFigureColor: function(value) {
      this._constellationFigureColor = value;
      return value;
    },
    get_constellationBoundryColor: function() {
      return this._constellationBoundryColor;
    },
    set_constellationBoundryColor: function(value) {
      this._constellationBoundryColor = value;
      return value;
    },
    get_constellationSelectionColor: function() {
      return this._constellationSelectionColor;
    },
    set_constellationSelectionColor: function(value) {
      this._constellationSelectionColor = value;
      return value;
    },
    get_showCrosshairs: function() {
      return this._showCrosshairs;
    },
    set_showCrosshairs: function(value) {
      this._showCrosshairs = value;
      return value;
    },
    get_smoothPan: function() {
      return this._smoothPan;
    },
    set_smoothPan: function(value) {
      this._smoothPan = value;
      return value;
    },
    get_crosshairsColor: function() {
      return this._crosshairsColor;
    },
    set_crosshairsColor: function(value) {
      this._crosshairsColor = value;
      return value;
    },
    get_actualPlanetScale: function() {
      return this._actualPlanetScale;
    },
    set_actualPlanetScale: function(value) {
      this._actualPlanetScale = value;
      return value;
    },
    get_fovCamera: function() {
      return this._fovCamera;
    },
    get_fovEyepiece: function() {
      return this._fovEyepiece;
    },
    get_fovTelescope: function() {
      return this._fovTelescope;
    },
    get_locationAltitude: function() {
      return this._locationAltitude;
    },
    set_locationAltitude: function(value) {
      this._locationAltitude = value;
      return value;
    },
    get_locationLat: function() {
      return this._locationLat;
    },
    set_locationLat: function(value) {
      this._locationLat = value;
      return value;
    },
    get_locationLng: function() {
      return this._locationLng;
    },
    set_locationLng: function(value) {
      this._locationLng = value;
      return value;
    },
    get_showClouds: function() {
      return this._showClouds;
    },
    get_showConstellationBoundries: function() {
      return this._showConstellationBoundries;
    },
    set_showConstellationBoundries: function(value) {
      this._showConstellationBoundries = value;
      return value;
    },
    get_showConstellationFigures: function() {
      return this._showConstellationFigures;
    },
    set_showConstellationFigures: function(value) {
      this._showConstellationFigures = value;
      return value;
    },
    get_showConstellationSelection: function() {
      return this._showConstellationSelection;
    },
    set_showConstellationSelection: function(value) {
      this._showConstellationSelection = value;
      return value;
    },
    get_showEcliptic: function() {
      return this._showEcliptic;
    },
    set_showEcliptic: function(value) {
      this._showEcliptic = value;
      return value;
    },
    get_showElevationModel: function() {
      return this._showElevationModel;
    },
    set_showElevationModel: function(value) {
      this._showElevationModel = value;
      return value;
    },
    get_showFieldOfView: function() {
      return this._showFiledOfView;
    },
    get_showGrid: function() {
      return this._showGrid;
    },
    set_showGrid: function(value) {
      this._showGrid = value;
      return value;
    },
    get_showHorizon: function() {
      return this._showHorizon;
    },
    set_showHorizon: function(value) {
      this._showHorizon = value;
      return value;
    },
    get_showHorizonPanorama: function() {
      return this._showHorizonPanorama;
    },
    get_showMoonsAsPointSource: function() {
      return this._showMoonsAsPointSource;
    },
    get_showSolarSystem: function() {
      return this._showSolarSystem;
    },
    set_showSolarSystem: function(value) {
      this._showSolarSystem = value;
      return value;
    },
    get_localHorizonMode: function() {
      return this._localHorizonMode;
    },
    set_localHorizonMode: function(value) {
      this._localHorizonMode = value;
      return value;
    },
    get_galacticMode: function() {
      return this._galacticMode;
    },
    set_galacticMode: function(value) {
      this._galacticMode = value;
      return value;
    },
    get_solarSystemStars: function() {
      return this._solarSystemStars;
    },
    set_solarSystemStars: function(value) {
      this._solarSystemStars = value;
      return value;
    },
    get_solarSystemMilkyWay: function() {
      return this._solarSystemMilkyWay;
    },
    set_solarSystemMilkyWay: function(value) {
      this._solarSystemMilkyWay = value;
      return value;
    },
    get_solarSystemCosmos: function() {
      return this._solarSystemCosmos;
    },
    set_solarSystemCosmos: function(value) {
      this._solarSystemCosmos = value;
      return value;
    },
    get_solarSystemOrbits: function() {
      return this._solarSystemOrbits;
    },
    set_solarSystemOrbits: function(value) {
      this._solarSystemOrbits = value;
      return value;
    },
    get_solarSystemOverlays: function() {
      return this._solarSystemOverlays;
    },
    set_solarSystemOverlays: function(value) {
      this._solarSystemOverlays = value;
      return value;
    },
    get_solarSystemLighting: function() {
      return this._solarSystemLighting;
    },
    set_solarSystemLighting: function(value) {
      this._solarSystemLighting = value;
      return value;
    },
    get_solarSystemMultiRes: function() {
      return true;
    },
    set_solarSystemMultiRes: function(value) {
      this._solarSystemMultiRes = value;
      return value;
    },
    get_solarSystemScale: function() {
      return this._solarSystemScale;
    },
    set_solarSystemScale: function(value) {
      this._solarSystemScale = value;
      return value;
    },
    get_showEquatorialGridText: function() {
      return this._showEquatorialGridText;
    },
    set_showEquatorialGridText: function(value) {
      this._showEquatorialGridText = value;
      return value;
    },
    get_showGalacticGrid: function() {
      return this._showGalacticGrid;
    },
    set_showGalacticGrid: function(value) {
      this._showGalacticGrid = value;
      return value;
    },
    get_showGalacticGridText: function() {
      return this._showGalacticGridText;
    },
    set_showGalacticGridText: function(value) {
      this._showGalacticGridText = value;
      return value;
    },
    get_showEclipticGrid: function() {
      return this._showEclipticGrid;
    },
    set_showEclipticGrid: function(value) {
      this._showEclipticGrid = value;
      return value;
    },
    get_showEclipticGridText: function() {
      return this._showEclipticGridText;
    },
    set_showEclipticGridText: function(value) {
      this._showEclipticGridText = value;
      return value;
    },
    get_showEclipticOverviewText: function() {
      return this._showEclipticOverviewText;
    },
    set_showEclipticOverviewText: function(value) {
      this._showEclipticOverviewText = value;
      return value;
    },
    get_showAltAzGrid: function() {
      return this._showAltAzGrid;
    },
    set_showAltAzGrid: function(value) {
      this._showAltAzGrid = value;
      return value;
    },
    get_showAltAzGridText: function() {
      return this._showAltAzGridText;
    },
    set_showAltAzGridText: function(value) {
      this._showAltAzGridText = value;
      return value;
    },
    get_showPrecessionChart: function() {
      return this._showPrecessionChart;
    },
    set_showPrecessionChart: function(value) {
      this._showPrecessionChart = value;
      return value;
    },
    get_showConstellationPictures: function() {
      return this._showConstellationPictures;
    },
    set_showConstellationPictures: function(value) {
      this._showConstellationPictures = value;
      return value;
    },
    get_showConstellationLabels: function() {
      return this._showConstellationLabels;
    },
    set_showConstellationLabels: function(value) {
      this._showConstellationLabels = value;
      return value;
    },
    get_solarSystemCMB: function() {
      return this._solarSystemCMB;
    },
    set_solarSystemCMB: function(value) {
      this._solarSystemCMB = value;
      return value;
    },
    get_solarSystemMinorPlanets: function() {
      return this._solarSystemMinorPlanets;
    },
    set_solarSystemMinorPlanets: function(value) {
      this._solarSystemMinorPlanets = value;
      return value;
    },
    get_solarSystemPlanets: function() {
      return this._solarSystemPlanets;
    },
    set_solarSystemPlanets: function(value) {
      this._solarSystemPlanets = value;
      return value;
    },
    get_showEarthSky: function() {
      return this._showEarthSky;
    },
    set_showEarthSky: function(value) {
      this._showEarthSky = value;
      return value;
    },
    get_solarSystemMinorOrbits: function() {
      return this._solarSystemMinorOrbits;
    },
    set_solarSystemMinorOrbits: function(value) {
      this._solarSystemMinorOrbits = value;
      return value;
    },
    get_constellationsEnabled: function() {
      return this._constellationsEnabled;
    },
    set_constellationsEnabled: function(value) {
      this._constellationsEnabled = value;
      return value;
    },
    get_constellationFiguresFilter: function() {
      return this._constellationFiguresFilter;
    },
    set_constellationFiguresFilter: function(value) {
      this._constellationFiguresFilter = value;
      return value;
    },
    get_constellationBoundariesFilter: function() {
      return this._constellationBoundariesFilter;
    },
    set_constellationBoundariesFilter: function(value) {
      this._constellationBoundariesFilter = value;
      return value;
    },
    get_constellationNamesFilter: function() {
      return this._constellationNamesFilter;
    },
    set_constellationNamesFilter: function(value) {
      this._constellationNamesFilter = value;
      return value;
    },
    get_constellationArtFilter: function() {
      return this._constellationArtFilter;
    },
    set_constellationArtFilter: function(value) {
      this._constellationArtFilter = value;
      return value;
    },
    get_showSkyOverlays: function() {
      return this._showSkyOverlays;
    },
    set_showSkyOverlays: function(value) {
      this._showSkyOverlays = value;
      return value;
    },
    get_showConstellations: function() {
      return this._showConstellations;
    },
    set_showConstellations: function(value) {
      this._showConstellations = value;
      return value;
    },
    get_showSkyNode: function() {
      return this._showSkyNode;
    },
    set_showSkyNode: function(value) {
      this._showSkyNode = value;
      return value;
    },
    get_showSkyGrids: function() {
      return this._showSkyGrids;
    },
    set_showSkyGrids: function(value) {
      this._showSkyGrids = value;
      return value;
    },
    get_showSkyOverlaysIn3d: function() {
      return this._showSkyOverlaysIn3d;
    },
    set_showSkyOverlaysIn3d: function(value) {
      this._showSkyOverlaysIn3d = value;
      return value;
    },
    get_earthCutawayView: function() {
      return this._earthCutawayView;
    },
    set_earthCutawayView: function(value) {
      this._earthCutawayView = value;
      return value;
    },
    get_showISSModel: function() {
      return this._showISSModel;
    },
    set_showISSModel: function(value) {
      this._showISSModel = value;
      return value;
    },
    get_milkyWayModel: function() {
      return this._milkyWayModel;
    },
    set_milkyWayModel: function(value) {
      this._milkyWayModel = value;
      return value;
    },
    get_minorPlanetsFilter: function() {
      return this._minorPlanetsFilter;
    },
    set_minorPlanetsFilter: function(value) {
      this._minorPlanetsFilter = value;
      return value;
    },
    get_planetOrbitsFilter: function() {
      return this._planetOrbitsFilter;
    },
    set_planetOrbitsFilter: function(value) {
      this._planetOrbitsFilter = value;
      return value;
    },
    get_constellations: function() {
      return this._constellations;
    },
    set_constellations: function(value) {
      this._constellations = value;
      return value;
    },
    getSetting: function(type) {
      if (type === 17) {
        return new SettingParameter(true, 0, !!0, null);
      }
      return new SettingParameter(false, 1, false, null);
    }
  };


  // wwtlib.Text3dBatch

  function Text3dBatch(height) {
    this.height = 128;
    this.items = [];
    this._glyphVersion = -1;
    this.viewTransform = Matrix3d.get_identity();
    this._textObject = new TextObject();
    this._vertCount = 0;
    this.height = (height * 3);
  }
  var Text3dBatch$ = {
    add: function(newItem) {
      this.items.push(newItem);
    },
    draw: function(renderContext, opacity, color) {
      if (renderContext.gl == null) {
        var viewPoint = Vector3d._transformCoordinate(renderContext.get_viewPoint(), this.viewTransform);
        var drawHeight = (this.height / renderContext.get_fovAngle()) * renderContext.height / 180;
        var $enum1 = ss.enumerate(this.items);
        while ($enum1.moveNext()) {
          var t3d = $enum1.current;
          var screenSpacePnt = renderContext.WVP.transform(t3d.center);
          if (screenSpacePnt.z < 0) {
            continue;
          }
          if (Vector3d.dot(viewPoint, t3d.center) < 0.55) {
            continue;
          }
          var screenSpaceTop = renderContext.WVP.transform(t3d.top);
          var rotation = Math.atan2(screenSpacePnt.x - screenSpaceTop.x, screenSpacePnt.y - screenSpaceTop.y);
          var ctx = renderContext.device;
          ctx.save();
          ctx.translate(screenSpacePnt.x, screenSpacePnt.y);
          ctx.rotate(-rotation);
          ctx.globalAlpha = opacity;
          ctx.fillStyle = color.toString();
          ctx.font = 'normal' + ' ' + ((false) ? 'bold' : 'normal') + ' ' + Math.round(drawHeight * 1.2).toString() + 'px ' + 'Arial';
          ctx.textBaseline = 'top';
          var tm = ctx.measureText(t3d.text);
          ctx.fillText(t3d.text, -tm.width / 2, -drawHeight / 2);
          ctx.restore();
        }
      }
      else {
        if (this._glyphCache == null || this._glyphCache.get_version() > this._glyphVersion) {
          this.prepareBatch();
        }
        if (!this._glyphCache.ready) {
          return;
        }
        TextShader.use(renderContext, this._vertexBuffer.vertexBuffer, this._glyphCache.get_texture().texture2d);
        renderContext.gl.drawArrays(4, 0, this._vertexBuffer.count);
      }
    },
    prepareBatch: function() {
      if (this._glyphCache == null) {
        this._glyphCache = GlyphCache.getCache(this.height);
      }
      if (!this._glyphCache.ready) {
        return;
      }
      this._textObject.text = '';
      this._textObject.fontSize = this.height * 0.5;
      var verts = [];
      var $enum1 = ss.enumerate(this.items);
      while ($enum1.moveNext()) {
        var t3d = $enum1.current;
        var text = t3d.text;
        var left = 0;
        var top = 0;
        var fntAdjust = this._textObject.fontSize / 128;
        var factor = 0.6666;
        var width = 0;
        var height = 0;
        for (var i = 0; i < text.length; i++) {
          var item = this._glyphCache.getGlyphItem(text.substr(i, 1));
          if (item != null) {
            width += item.extents.x;
            height = Math.max(item.extents.y, height);
          }
        }
        var size = Vector2d.create(width, height);
        t3d.width = size.x * t3d.scale * factor * fntAdjust;
        t3d.height = size.y * t3d.scale * factor * fntAdjust;
        var charsLeft = text.length;
        for (var i = 0; i < charsLeft; i++) {
          var item = this._glyphCache.getGlyphItem(text.substr(i, 1));
          if (item != null) {
            var position = Rectangle.create(left * t3d.scale * factor, 0 * t3d.scale * factor, item.extents.x * fntAdjust * t3d.scale * factor, item.extents.y * fntAdjust * t3d.scale * factor);
            left += (item.extents.x * fntAdjust);
            t3d.addGlyphPoints(verts, item.size, position, item.uvRect);
          }
        }
      }
      this._vertCount = verts.length;
      this._vertexBuffer = new PositionTextureVertexBuffer(this._vertCount);
      var vertBuf = this._vertexBuffer.lock();
      for (var i = 0; i < this._vertCount; i++) {
        vertBuf[i] = verts[i];
      }
      this._vertexBuffer.unlock();
      this._glyphVersion = this._glyphCache.get_version();
    },
    cleanUp: function() {
      if (this._vertexBuffer != null) {
        this._vertexBuffer = null;
      }
      this.items.length = 0;
    }
  };


  // wwtlib.GlyphItem

  function GlyphItem(glyph) {
    this.referenceCount = 0;
    this.glyph = glyph;
    this.uvRect = new Rectangle();
    this.size = new Vector2d();
    this.referenceCount = 1;
  }
  GlyphItem.create = function(glyph, uv, size, extents) {
    var temp = new GlyphItem(glyph);
    temp.glyph = glyph;
    temp.uvRect = uv;
    temp.size = size;
    temp.extents = extents;
    temp.referenceCount = 1;
    return temp;
  };
  GlyphItem._fromXML = function(node) {
    var glyph = node.attributes.getNamedItem('Glyph').nodeValue;
    var item = new GlyphItem(glyph);
    item.uvRect = Rectangle.create(parseFloat(node.attributes.getNamedItem('UVLeft').nodeValue), parseFloat(node.attributes.getNamedItem('UVTop').nodeValue), parseFloat(node.attributes.getNamedItem('UVWidth').nodeValue), parseFloat(node.attributes.getNamedItem('UVHeight').nodeValue));
    item.size = Vector2d.create(parseFloat(node.attributes.getNamedItem('SizeWidth').nodeValue), parseFloat(node.attributes.getNamedItem('SizeHeight').nodeValue));
    item.extents = Vector2d.create(parseFloat(node.attributes.getNamedItem('ExtentsWidth').nodeValue), parseFloat(node.attributes.getNamedItem('ExtentsHeight').nodeValue));
    return item;
  };
  var GlyphItem$ = {
    addRef: function() {
      this.referenceCount++;
    },
    release: function() {
      this.referenceCount--;
    }
  };


  // wwtlib.GlyphCache

  function GlyphCache(height) {
    this._cellHeight = 128;
    this._gridSize = 8;
    this.ready = false;
    this._glyphItems = {};
    this.textObject = new TextObject();
    this._dirty = true;
    this._textureDirty = true;
    this._version = 0;
    this._cellHeight = height;
    this._texture = Planets.loadPlanetTexture('//cdn.worldwidetelescope.org/webclient/images/glyphs1.png');
    this._webFile = new WebFile('//cdn.worldwidetelescope.org/webclient/images/glyphs1.xml');
    this._webFile.onStateChange = ss.bind('_glyphXmlReady', this);
    this._webFile.send();
  }
  GlyphCache.getCache = function(height) {
    if (!ss.keyExists(GlyphCache._caches, height)) {
      GlyphCache._caches[height] = new GlyphCache(height);
    }
    return GlyphCache._caches[height];
  };
  GlyphCache.cleanUpAll = function() {
    ss.clearKeys(GlyphCache._caches);
  };
  var GlyphCache$ = {
    get_height: function() {
      return this._cellHeight;
    },
    _glyphXmlReady: function() {
      if (this._webFile.get_state() === 2) {
        alert(this._webFile.get_message());
      }
      else if (this._webFile.get_state() === 1) {
        this._loadXmlGlyph(this._webFile.getXml());
      }
    },
    _loadXmlGlyph: function(xml) {
      var nodes = Util.selectSingleNode(xml, 'GlyphItems');
      var $enum1 = ss.enumerate(nodes.childNodes);
      while ($enum1.moveNext()) {
        var glyphItem = $enum1.current;
        if (glyphItem.nodeName === 'GlyphItem') {
          var item = GlyphItem._fromXML(glyphItem);
          this._glyphItems[item.glyph] = item;
          GlyphCache._allGlyphs = GlyphCache._allGlyphs + item.glyph;
        }
      }
      this.ready = true;
    },
    get_texture: function() {
      return this._texture;
    },
    _makeTexture: function() {
      this._calcOrMake(true);
    },
    getGlyphItem: function(glyph) {
      if (this._dirty) {
        this._calculateGlyphDetails();
      }
      return this._glyphItems[glyph];
    },
    _calculateGlyphDetails: function() {
      this._calcOrMake(false);
    },
    _calcOrMake: function(makeTexture) {
    },
    get_version: function() {
      return this._version;
    },
    set_version: function(value) {
      this._version = value;
      return value;
    },
    addGlyph: function(glyph) {
      if (!ss.keyExists(this._glyphItems, glyph)) {
        var item = new GlyphItem(glyph);
        this._glyphItems[glyph] = item;
        this._dirty = true;
        this._textureDirty = true;
        this._version++;
        GlyphCache._allGlyphs = GlyphCache._allGlyphs + glyph;
      }
      else {
        this._glyphItems[glyph].addRef();
      }
    },
    cleanUp: function() {
      this._dirty = true;
      this._texture = null;
    },
    dispose: function() {
      this.cleanUp();
    },
    get_dirty: function() {
      return this._dirty;
    },
    set_dirty: function(value) {
      this._dirty = value;
      return value;
    }
  };


  // wwtlib.Text3d

  function Text3d(center, up, text, fontsize, scale) {
    this.rotation = 0;
    this.tilt = 0;
    this.bank = 0;
    this._matInit = false;
    this.color = Colors.get_white();
    this.sky = true;
    this.scale = 0;
    this.opacity = 1;
    this.text = '';
    this.width = 1;
    this.height = 1;
    this.alignment = 0;
    this.text = text;
    this.up = up;
    this.center = center;
    this.scale = scale;
    this.top = Vector3d.addVectors(center, Vector3d.scale(up, scale));
    if (fontsize < 0) {
      this.sky = false;
    }
  }
  var Text3d$ = {
    addGlyphPoints: function(pointList, size, position, uv) {
      var points = new Array(6);
      for (var i = 0; i < 6; i++) {
        points[i] = new PositionTexture();
      }
      var left = Vector3d.cross(this.center, this.up);
      var right = Vector3d.cross(this.up, this.center);
      left.normalize();
      right.normalize();
      this.up.normalize();
      var upTan = Vector3d.cross(this.center, right);
      upTan.normalize();
      if (!this.alignment) {
        left.multiply(this.width - position.get_left() * 2);
        right.multiply(this.width - ((this.width * 2) - position.get_right() * 2));
      }
      else if (this.alignment === 1) {
        left.multiply(-position.get_left() * 2);
        right.multiply(position.get_right() * 2);
      }
      var top = upTan.copy();
      var bottom = Vector3d.subtractVectors(Vector3d.get_empty(), upTan);
      top.multiply(this.height - position.get_top() * 2);
      bottom.multiply(this.height - ((this.height * 2) - position.get_bottom() * 2));
      var ul = this.center.copy();
      ul.add(top);
      if (this.sky) {
        ul.add(left);
      }
      else {
        ul.subtract(left);
      }
      var ur = this.center.copy();
      ur.add(top);
      if (this.sky) {
        ur.add(right);
      }
      else {
        ur.subtract(right);
      }
      var ll = this.center.copy();
      if (this.sky) {
        ll.add(left);
      }
      else {
        ll.subtract(left);
      }
      ll.add(bottom);
      var lr = this.center.copy();
      if (this.sky) {
        lr.add(right);
      }
      else {
        lr.subtract(right);
      }
      lr.add(bottom);
      points[0].position = ul.copy();
      points[0].tu = uv.get_left();
      points[0].tv = uv.get_top();
      points[2].tu = uv.get_left();
      points[2].tv = uv.get_bottom();
      points[2].position = ll.copy();
      points[1].tu = uv.get_right();
      points[1].tv = uv.get_top();
      points[1].position = ur.copy();
      points[3].tu = uv.get_right();
      points[3].tv = uv.get_bottom();
      points[3].position = lr.copy();
      points[5].tu = uv.get_right();
      points[5].tv = uv.get_top();
      points[5].position = ur.copy();
      points[4].tu = uv.get_left();
      points[4].tv = uv.get_bottom();
      points[4].position = ll.copy();
      if (!!this.rotation || !!this.tilt || !!this.bank) {
        if (!this._matInit) {
          var lookAt = Matrix3d.lookAtLH(this.center, new Vector3d(), this.up);
          var lookAtInv = lookAt.clone();
          lookAtInv.invert();
          this._rtbMat = Matrix3d.multiplyMatrix(Matrix3d.multiplyMatrix(Matrix3d.multiplyMatrix(Matrix3d.multiplyMatrix(lookAt, Matrix3d._rotationZ(-this.rotation / 180 * Math.PI)), Matrix3d._rotationX(-this.tilt / 180 * Math.PI)), Matrix3d._rotationY(-this.bank / 180 * Math.PI)), lookAtInv);
          this._matInit = true;
        }
        for (var i = 0; i < 6; i++) {
          points[i].position = Vector3d._transformCoordinate(points[i].position, this._rtbMat);
        }
      }
      var $enum1 = ss.enumerate(points);
      while ($enum1.moveNext()) {
        var pnt = $enum1.current;
        pointList.push(pnt);
      }
    }
  };


  // wwtlib.SpaceTimeController

  function SpaceTimeController() {
  }
  SpaceTimeController.updateClock = function() {
    if (SpaceTimeController._syncToClock) {
      var justNow = ss.now();
      if (SpaceTimeController._timeRate !== 1) {
        var ts = justNow.getTime() - SpaceTimeController.last.getTime();
        var ticks = (ts * SpaceTimeController._timeRate);
        SpaceTimeController._offset += ticks;
      }
      SpaceTimeController.last = justNow;
      try {
        SpaceTimeController._now = new Date(justNow.getTime() + SpaceTimeController._offset);
      }
      catch ($e1) {
        SpaceTimeController._now = new Date(1, 12, 25, 23, 59, 59);
        SpaceTimeController._offset = SpaceTimeController._now - ss.now();
      }
      if (SpaceTimeController._now.getFullYear() > 4000) {
        SpaceTimeController._now = new Date(4000, 12, 31, 23, 59, 59);
        SpaceTimeController._offset = SpaceTimeController._now - ss.now();
      }
      if (SpaceTimeController._now.getFullYear() < 1) {
        SpaceTimeController._now = new Date(0, 12, 25, 23, 59, 59);
        SpaceTimeController._offset = SpaceTimeController._now - ss.now();
      }
    }
  };
  SpaceTimeController.getTimeForFutureTime = function(delta) {
    try {
      if (SpaceTimeController._syncToClock) {
        var future = new Date((SpaceTimeController.get_now().getTime() + (delta * 1000) * SpaceTimeController._timeRate));
        return future;
      }
      else {
        return SpaceTimeController.get_now();
      }
    }
    catch ($e1) {
      return SpaceTimeController.get_now();
    }
  };
  SpaceTimeController.getJNowForFutureTime = function(delta) {
    try {
      if (SpaceTimeController._syncToClock) {
        var future = new Date(SpaceTimeController.get_now().getTime() + ss.truncate((delta * 1000 * SpaceTimeController._timeRate)));
        return SpaceTimeController.utcToJulian(future);
      }
      else {
        return SpaceTimeController.utcToJulian(SpaceTimeController.get_now());
      }
    }
    catch ($e1) {
      return SpaceTimeController.utcToJulian(SpaceTimeController.get_now());
    }
  };
  SpaceTimeController.get_now = function() {
    return SpaceTimeController._now;
  };
  SpaceTimeController.set_now = function(value) {
    SpaceTimeController._now = value;
    SpaceTimeController._offset = SpaceTimeController._now - ss.now();
    SpaceTimeController.last = ss.now();
    return value;
  };
  SpaceTimeController.syncTime = function() {
    SpaceTimeController._offset = 0;
    SpaceTimeController._now = ss.now();
    SpaceTimeController._syncToClock = true;
  };
  SpaceTimeController.get_jNow = function() {
    return SpaceTimeController.utcToJulian(SpaceTimeController.get_now());
  };
  SpaceTimeController.get_syncToClock = function() {
    return SpaceTimeController._syncToClock;
  };
  SpaceTimeController.set_syncToClock = function(value) {
    if (SpaceTimeController._syncToClock !== value) {
      SpaceTimeController._syncToClock = value;
      if (value) {
        SpaceTimeController.last = ss.now();
        SpaceTimeController._offset = SpaceTimeController._now - ss.now();
      }
      else {
        SpaceTimeController._now = new Date(ss.now().getTime() + SpaceTimeController._offset);
      }
    }
    return value;
  };
  SpaceTimeController.get_timeRate = function() {
    return SpaceTimeController._timeRate;
  };
  SpaceTimeController.set_timeRate = function(value) {
    SpaceTimeController._timeRate = value;
    return value;
  };
  SpaceTimeController.get_altitude = function() {
    return SpaceTimeController._altitude;
  };
  SpaceTimeController.set_altitude = function(value) {
    SpaceTimeController._altitude = value;
    return value;
  };
  SpaceTimeController.get_location = function() {
    SpaceTimeController._location = Coordinates.fromLatLng(Settings.get_active().get_locationLat(), Settings.get_active().get_locationLng());
    SpaceTimeController._altitude = Settings.get_active().get_locationAltitude();
    return SpaceTimeController._location;
  };
  SpaceTimeController.set_location = function(value) {
    if (Settings.get_globalSettings().get_locationLat() !== value.get_lat()) {
      Settings.get_globalSettings().set_locationLat(value.get_lat());
    }
    if (Settings.get_globalSettings().get_locationLng() !== value.get_lng()) {
      Settings.get_globalSettings().set_locationLng(value.get_lng());
    }
    SpaceTimeController._location = value;
    return value;
  };
  SpaceTimeController.julianToUtc = function(jDate) {
    var date = new DT();
    date.setJD(jDate, true);
    var ms = (date.second() - ss.truncate(date.second())) * 1000;
    return new Date(date.year(), date.month() - 1, date.day(), date.hour(), date.minute(), ss.truncate(date.second()), ss.truncate(ms));
  };
  SpaceTimeController._twoLineDateToJulian = function(p) {
    var pre1950 = parseInt(p.substring(0, 1)) < 6;
    var year = parseInt(((pre1950) ? ' 20' : '19') + p.substring(0, 2));
    var days = parseFloat(p.substring(2, 3));
    var fraction = parseFloat(p.substr(5));
    var date = new Date(year, 0, 1, 0, 0);
    return SpaceTimeController.utcToJulian(date) + (days - 1 + fraction);
  };
  SpaceTimeController.julianToTwoLineDate = function(jDate) {
    return SpaceTimeController.dateToTwoLineDate(SpaceTimeController.julianToUtc(jDate));
  };
  SpaceTimeController.dateToTwoLineDate = function(date) {
    var sb = new ss.StringBuilder();
    sb.append(date.getFullYear() % 100);
    var fullYear = new Date(date.getFullYear(), 0, 1, 0, 0);
    var dayofyear = Math.floor((date - fullYear) / (60 * 60 * 24 * 1000)) + 2;
    var day = dayofyear + date.getHours() / 24 + date.getMinutes() / 60 / 24 + date.getSeconds() / 60 / 60 / 24 + date.getMilliseconds() / 1000 / 60 / 60 / 24;
    var sDay = SpaceTimeController.tleDayString(day);
    sb.append(sDay);
    return sb.toString();
  };
  SpaceTimeController.tleDayString = function(day) {
    var formated = day.toString();
    var point = formated.indexOf('.');
    if (point === -1) {
      point = formated.length;
      formated += '.0';
    }
    var len = formated.length - point - 1;
    var fill = '00000000';
    formated = fill.substr(0, 3 - point) + formated + fill.substr(0, 8 - len);
    return formated;
  };
  SpaceTimeController.utcToJulian = function(utc) {
    var year = utc.getUTCFullYear();
    var month = utc.getUTCMonth() + 1;
    var day = utc.getUTCDate();
    var hour = utc.getUTCHours();
    var minute = utc.getUTCMinutes();
    var second = utc.getUTCSeconds() + utc.getUTCMilliseconds() / 1000;
    var dblDay = day + (hour / 24) + (minute / 1440) + (second / 86400);
    return AstroCalc.getJulianDay(year, month, dblDay);
  };
  SpaceTimeController.dateToJD = function(Year, Month, Day, bGregorianCalendar) {
    var Y = Year;
    var M = Month;
    if (M < 3) {
      Y = Y - 1;
      M = M + 12;
    }
    var A = 0;
    var B = 0;
    if (bGregorianCalendar) {
      A = ss.truncate((Y / 100));
      B = 2 - A + ss.truncate((A / 4));
    }
    return ss.truncate((365.25 * (Y + 4716))) + ss.truncate((30.6001 * (M + 1))) + Day + B - 1524.5;
  };
  var SpaceTimeController$ = {

  };


  // wwtlib.Star

  function Star(input) {
    this.magnitude = 0;
    this.RA = 0;
    this.dec = 0;
    this.BMV = 0;
    this.id = 0;
    this.absoluteMagnitude = 0;
    this.par = 0;
    this.distance = 0;
    var sa = input.split('\t');
    this.id = parseInt(ss.replaceString(sa[0], 'HIP', ''));
    this.dec = parseFloat(sa[3]);
    this.RA = parseFloat(sa[2]) / 15;
    if (sa.length > 4) {
      try {
        if (sa[4].toUpperCase() !== 'NULL' && !!sa[4]) {
          this.magnitude = parseFloat(sa[4]);
        }
      }
      catch ($e1) {
      }
    }
    if (sa.length > 5) {
      try {
        this.BMV = parseFloat(sa[5]);
        this._makeColor(this.BMV);
      }
      catch ($e2) {
      }
    }
    if (sa.length > 6) {
      this.par = parseFloat(sa[6]);
      this._makeDistanceAndMagnitude();
    }
  }
  var Star$ = {
    get_name: function() {
      return 'HIP' + this.id.toString();
    },
    get_coordinates: function() {
      return Coordinates.fromRaDec(this.RA, this.dec);
    },
    get_asPlace: function() {
      var place = Place.create(this.get_name(), this.dec, this.RA, 1, Constellations.containment.findConstellationForPoint(this.RA, this.dec), 4, -1);
      place.set_magnitude(this.magnitude);
      place.set_distance(this.distance);
      return place;
    },
    stars: function(input, newish) {
      var sa = input.split('\t');
      this.id = parseInt(sa[0]);
      this.RA = parseFloat(sa[1]) / 15;
      this.dec = parseFloat(sa[2]);
      if (sa.length > 3) {
        try {
          this.magnitude = parseFloat(sa[3]);
        }
        catch ($e1) {
        }
      }
      if (sa.length > 4) {
        try {
          this.col = Color.load(sa[4]);
        }
        catch ($e2) {
        }
      }
    },
    _makeDistanceAndMagnitude: function() {
      this.distance = 1 / (this.par / 1000);
      this.absoluteMagnitude = this.magnitude - 5 * (Util.logN(this.distance, 10) - 1);
      this.distance *= 206264.806;
    },
    _makeColor: function(bmv) {
      var c = 4294967295;
      if (bmv <= -0.32) {
        c = 4288854271;
      }
      else if (bmv <= -0.31) {
        c = 4288919807;
      }
      else if (bmv <= -0.3) {
        c = 4288985855;
      }
      else if (bmv <= -0.3) {
        c = 4289051391;
      }
      else if (bmv <= -0.28) {
        c = 4289182975;
      }
      else if (bmv <= -0.26) {
        c = 4289314303;
      }
      else if (bmv <= -0.24) {
        c = 4289445887;
      }
      else if (bmv <= -0.2) {
        c = 4289708799;
      }
      else if (bmv <= -0.16) {
        c = 4290037503;
      }
      else if (bmv <= -0.14) {
        c = 4290169087;
      }
      else if (bmv <= -0.12) {
        c = 4290366207;
      }
      else if (bmv <= -0.09) {
        c = 4290563583;
      }
      else if (bmv <= -0.06) {
        c = 4290892031;
      }
      else if (bmv <= 0) {
        c = 4291483391;
      }
      else if (bmv <= 0.06) {
        c = 4292009215;
      }
      else if (bmv <= 0.14) {
        c = 4292732159;
      }
      else if (bmv <= 0.19) {
        c = 4293126399;
      }
      else if (bmv <= 0.31) {
        c = 4294111999;
      }
      else if (bmv <= 0.36) {
        c = 4294571775;
      }
      else if (bmv <= 0.43) {
        c = 4294965756;
      }
      else if (bmv <= 0.54) {
        c = 4294964979;
      }
      else if (bmv <= 0.59) {
        c = 4294964203;
      }
      else if (bmv <= 0.63) {
        c = 4294963687;
      }
      else if (bmv <= 0.66) {
        c = 4294963169;
      }
      else if (bmv <= 0.74) {
        c = 4294962909;
      }
      else if (bmv <= 0.82) {
        c = 4294961877;
      }
      else if (bmv <= 0.92) {
        c = 4294960324;
      }
      else if (bmv <= 1.15) {
        c = 4294959032;
      }
      else if (bmv <= 1.3) {
        c = 4294958516;
      }
      else if (bmv <= 1.41) {
        c = 4294955933;
      }
      else if (bmv <= 1.48) {
        c = 4294954385;
      }
      else if (bmv <= 1.52) {
        c = 4294953351;
      }
      else if (bmv <= 1.55) {
        c = 4294952319;
      }
      else if (bmv <= 1.56) {
        c = 4294951287;
      }
      else if (bmv <= 1.61) {
        c = 4294950257;
      }
      else if (bmv <= 1.72) {
        c = 4294948966;
      }
      else if (bmv <= 1.84) {
        c = 4294947419;
      }
      else if (bmv <= 2) {
        c = 4294946129;
      }
      this.col = Color.fromInt(c);
    }
  };


  // wwtlib.Galaxy

  function Galaxy(br) {
    this.RA = 0;
    this.dec = 0;
    this.distance = 0;
    this.type = 0;
    this.eTypeBucket = 0;
    this.size = 5;
    this.sdssID = 0;
    this.sdssID = br.readInt64();
    this.RA = br.readSingle();
    this.dec = br.readSingle();
    this.distance = br.readSingle();
    this.eTypeBucket = br.readByte();
    this.size = br.readSingle();
  }
  Galaxy.getEType = function(value) {
    var a = 0;
    var b = Galaxy._eTypeBuckets.length - 1;
    while (b - a > 1) {
      var m = (a + b) / 2;
      if (value > Galaxy._eTypeBuckets[m]) {
        a = m;
      }
      else {
        b = m;
      }
    }
    return a;
  };
  var Galaxy$ = {

  };


  // wwtlib.Tile

  function Tile() {
    this._renderTriangleLists = new Array(4);
    this._indexBuffers = new Array(4);
    this.level = 0;
    this.tileX = 0;
    this.tileY = 0;
    this.texture = null;
    this.texture2d = null;
    this.readyToRender = false;
    this.inViewFrustum = true;
    this.children = [ null, null, null, null ];
    this.parent = null;
    this.localCenter = new Vector3d();
    this.renderedAtOrBelowGeneration = 0;
    this._demScaleFactor = 6371000;
    this.demIndex = 0;
    this.demAverage = 0;
    this.demReady = false;
    this.texReady = false;
    this.demTile = false;
    this.demDownloading = false;
    this.renderedGeneration = 0;
    this.accomidation = 0;
    this.accessCount = 0;
    this.downloading = false;
    this.geometryCreated = false;
    this._isHdTile = false;
    this.demSize = 33 * 33;
    this._topLeftScreen = new Vector3d();
    this._bottomRightScreen = new Vector3d();
    this._topRightScreen = new Vector3d();
    this._bottomLeftScreen = new Vector3d();
    this.sphereRadius = 0;
    this.sphereCenter = new Vector3d();
    this.radius = 1;
    this.triangleCount = 0;
    this.requestHits = 0;
    this.requestPending = false;
    this.errored = false;
    this._tileId = null;
    this._vertexCount = 0;
    this._renderChildPart = null;
    this._renderChildPart = new Array(4);
    for (var i = 0; i < 4; i++) {
      this._renderChildPart[i] = BlendState.create(false, 500);
    }
  }
  Tile.getFrustumList = function() {
    try {
      return Tile.frustumList;
    }
    catch ($e1) {
      return null;
    }
  };
  Tile.get_subDivisions = function() {
    return 32;
  };
  var Tile$ = {
    getIndexBuffer: function(index, accomidation) {
      return this._indexBuffers[index];
    },
    isPointInTile: function(lat, lng) {
      return false;
    },
    getSurfacePointAltitude: function(lat, lng, meters) {
      return 0;
    },
    makeTexture: function() {
      if (Tile.prepDevice != null) {
        try {
          this.texture2d = Tile.prepDevice.createTexture();
          var image = this.texture;
          if ((!Texture.isPowerOfTwo(this.texture.height) | !Texture.isPowerOfTwo(this.texture.width)) === 1) {
            var temp = document.createElement('canvas');
            temp.height = Texture.fitPowerOfTwo(image.height);
            temp.width = Texture.fitPowerOfTwo(image.width);
            var ctx = temp.getContext('2d');
            ctx.drawImage(image, 0, 0, temp.width, temp.height);
            image = temp;
          }
          Tile.prepDevice.bindTexture(3553, this.texture2d);
          Tile.prepDevice.texParameteri(3553, 10242, 33071);
          Tile.prepDevice.texParameteri(3553, 10243, 33071);
          Tile.prepDevice.texImage2D(3553, 0, 6408, 6408, 5121, image);
          Tile.prepDevice.texParameteri(3553, 10241, 9985);
          Tile.prepDevice.generateMipmap(3553);
          Tile.prepDevice.bindTexture(3553, null);
        }
        catch ($e1) {
          this.errored = true;
        }
      }
    },
    addVertex: function(buffer, index, p) {
      buffer[index++] = p.position.x;
      buffer[index++] = p.position.y;
      buffer[index++] = p.position.z;
      buffer[index++] = p.tu;
      buffer[index++] = p.tv;
      return index;
    },
    geoTo3dWithAlt: function(lat, lng, useLocalCenter, rev) {
      lat = Math.max(Math.min(90, lat), -90);
      lng = Math.max(Math.min(180, lng), -180);
      if (!Tile.demEnabled || this.demData == null) {
        return this.geoTo3d(lat, lng, useLocalCenter);
      }
      if (rev) {
        lng -= 180;
      }
      var altitude = this.demData[this.demIndex];
      var retVal = this.geoTo3dWithAltitude(lat, lng, altitude, useLocalCenter);
      return retVal;
    },
    geoTo3dWithAltitude: function(lat, lng, altitude, useLocalCenter) {
      var radius = 1 + (altitude / this.get__demScaleFactor());
      var retVal = Vector3d.create((Math.cos(lng * Tile.RC) * Math.cos(lat * Tile.RC) * radius), (Math.sin(lat * Tile.RC) * radius), (Math.sin(lng * Tile.RC) * Math.cos(lat * Tile.RC) * radius));
      if (useLocalCenter) {
        retVal.subtract(this.localCenter);
      }
      return retVal;
    },
    get__demScaleFactor: function() {
      return this._demScaleFactor;
    },
    set__demScaleFactor: function(value) {
      this._demScaleFactor = value;
      return value;
    },
    requestImage: function() {
      var $this = this;

      if (this.get_dataset().get_wcsImage() != null) {
        this.texReady = true;
        this.downloading = false;
        this.errored = false;
        this.readyToRender = true;
        this.requestPending = false;
        TileCache.removeFromQueue(this.get_key(), true);
        return;
      }
      if (!this.downloading && !this.readyToRender) {
        this.downloading = true;
        this.texture = document.createElement('img');
        var xdomimg = this.texture;
        this.texture.addEventListener('load', function(e) {
          $this.texReady = true;
          $this.downloading = false;
          $this.errored = false;
          $this.readyToRender = $this.texReady && ($this.demReady || !$this.demTile);
          $this.requestPending = false;
          TileCache.removeFromQueue($this.get_key(), true);
          $this.makeTexture();
        }, false);
        this.texture.addEventListener('error', function(e) {
          if (!$this.texture.hasAttribute('proxyattempt')) {
            $this.texture.src = Util.getProxiedUrl($this.get_URL());
            $this.texture.setAttribute('proxyattempt', true);
          }
          else {
            $this.downloading = false;
            $this.readyToRender = false;
            $this.errored = true;
            $this.requestPending = false;
            TileCache.removeFromQueue($this.get_key(), true);
          }
        }, false);
        xdomimg.crossOrigin = 'anonymous';
        this.texture.src = ss.replaceString(this.get_URL(), 'cdn.', 'www.');
      }
    },
    createDemFromParent: function() {
      return false;
    },
    _loadDemData: function() {
      if (this.demFile == null) {
        return this.createDemFromParent();
      }
      this.demData = this.demFile;
      if (this.demFile.length !== 1089 && this.demFile.length !== 513) {
        return this.createDemFromParent();
      }
      var total = 0;
      var $enum1 = ss.enumerate(this.demData);
      while ($enum1.moveNext()) {
        var fv = $enum1.current;
        total += fv;
      }
      this.demAverage /= this.demData.length;
      return true;
    },
    requestDem: function() {
      var $this = this;

      if (!this.readyToRender && !this.demDownloading) {
        this.demTile = true;
        this.demDownloading = true;
        Tile.callCount++;
        var xhr = new XMLHttpRequest();
        xhr.addEventListener('load', function(e) {
          $this.demReady = true;
          $this.demDownloading = false;
          $this.readyToRender = $this.texReady && ($this.demReady || !$this.demTile);
          $this.requestPending = false;
          try {
            $this.demFile = new Float32Array(xhr.response);
          }
          catch ($e1) {
          }
          TileCache.removeFromQueue($this.get_key(), true);
        }, false);
        xhr.addEventListener('error', function(e) {
          $this.demDownloading = false;
          $this.demReady = false;
          $this.readyToRender = false;
          $this.errored = true;
          $this.requestPending = false;
          TileCache.removeFromQueue($this.get_key(), true);
        }, false);
        xhr.open('GET', this.get_demURL(), true);
        xhr.responseType = 'arraybuffer';
        xhr.send();
      }
    },
    draw3D: function(renderContext, opacity) {
      this.renderedGeneration = Tile.currentRenderGeneration;
      Tile.tilesTouched++;
      this.accessCount = TileCache.accessID++;
      if (this.errored) {
        return false;
      }
      var xMax = 2;
      this.inViewFrustum = true;
      if (!this.readyToRender) {
        TileCache.addTileToQueue(this);
        return false;
      }
      var transitioning = false;
      var childIndex = 0;
      var yOffset = 0;
      if (this.dataset.get_mercator() || this.dataset.get_bottomsUp()) {
        yOffset = 1;
      }
      var xOffset = 0;
      var anythingToRender = false;
      var childRendered = false;
      for (var y1 = 0; y1 < 2; y1++) {
        for (var x1 = 0; x1 < xMax; x1++) {
          if (this.level < this.dataset.get_levels()) {
            if (this.children[childIndex] == null) {
              this.children[childIndex] = TileCache.getTile(this.level + 1, this.tileX * 2 + ((x1 + xOffset) % 2), this.tileY * 2 + ((y1 + yOffset) % 2), this.dataset, this);
            }
            if (this.children[childIndex].isTileInFrustum(renderContext.get_frustum())) {
              this.inViewFrustum = true;
              if (this.children[childIndex].isTileBigEnough(renderContext)) {
                this._renderChildPart[childIndex].set_targetState(!this.children[childIndex].draw3D(renderContext, opacity));
                if (this._renderChildPart[childIndex].get_targetState()) {
                  childRendered = true;
                }
              }
              else {
                this._renderChildPart[childIndex].set_targetState(true);
              }
            }
            else {
              this._renderChildPart[childIndex].set_targetState(this._renderChildPart[childIndex].set_state(false));
            }
            if (this._renderChildPart[childIndex].get_targetState() !== this._renderChildPart[childIndex].get_state()) {
              transitioning = true;
            }
          }
          else {
            this._renderChildPart[childIndex].set_state(true);
          }
          if (!!this._renderChildPart[childIndex].get_state()) {
            anythingToRender = true;
          }
          childIndex++;
        }
      }
      if (childRendered || anythingToRender) {
        this.renderedAtOrBelowGeneration = Tile.currentRenderGeneration;
        if (this.parent != null) {
          this.parent.renderedAtOrBelowGeneration = this.renderedAtOrBelowGeneration;
        }
      }
      if (!anythingToRender) {
        return true;
      }
      if (!this.createGeometry(renderContext)) {
        return false;
      }
      Tile.tilesInView++;
      this.accomidation = this._computeAccomidation();
      for (var i = 0; i < 4; i++) {
        if (this._renderChildPart[i].get_targetState()) {
          this.renderPart(renderContext, i, (opacity / 100), false);
        }
      }
      return true;
    },
    _computeAccomidation: function() {
      var accVal = 0;
      if (!Tile.useAccomidation) {
        return 0;
      }
      var top = TileCache.getCachedTile(this.level, this.tileX, this.tileY + 1, this.dataset, this);
      if (top == null || top.renderedAtOrBelowGeneration < Tile.currentRenderGeneration - 2) {
        accVal += 1;
      }
      var right = TileCache.getCachedTile(this.level, this.tileX + 1, this.tileY, this.dataset, this);
      if (right == null || right.renderedAtOrBelowGeneration < Tile.currentRenderGeneration - 2) {
        accVal += 2;
      }
      var bottom = TileCache.getCachedTile(this.level, this.tileX, this.tileY - 1, this.dataset, this);
      if (bottom == null || bottom.renderedAtOrBelowGeneration < Tile.currentRenderGeneration - 2) {
        accVal += 4;
      }
      var left = TileCache.getCachedTile(this.level, this.tileX - 1, this.tileY, this.dataset, this);
      if (left == null || left.renderedAtOrBelowGeneration < Tile.currentRenderGeneration - 2) {
        accVal += 8;
      }
      return accVal;
    },
    renderPart: function(renderContext, part, opacity, combine) {
      if (Tile.prepDevice == null) {
        var lighting = renderContext.lighting && renderContext.get_sunPosition() != null;
        var $enum1 = ss.enumerate(this._renderTriangleLists[part]);
        while ($enum1.moveNext()) {
          var tri = $enum1.current;
          tri.opacity = opacity;
          if (lighting) {
            var norm = tri.normal.copy();
            renderContext.get_world().multiplyVector(norm);
            norm.normalize();
            var light = Vector3d.dot(norm, renderContext.get_sunPosition());
            if (light < 0) {
              light = 0;
            }
            else {
              light = Math.min(1, (light * 1));
            }
            tri.lighting = light;
          }
          else {
            tri.lighting = 1;
          }
          tri.draw(renderContext.device, renderContext.WVP);
        }
      }
      else {
        TileShader.use(renderContext, this._vertexBuffer, this.getIndexBuffer(part, this.accomidation), this.texture2d, opacity, false);
        renderContext.gl.drawElements(4, this.triangleCount * 3, 5123, 0);
      }
    },
    cleanUp: function(removeFromParent) {
      this.readyToRender = false;
      this.demData = null;
      this.demFile = null;
      this.demDownloading = false;
      this.texReady = false;
      this.demReady = false;
      this.errored = false;
      if (this.texture != null) {
        this.texture = null;
      }
      this._renderTriangleLists = new Array(4);
      this.geometryCreated = false;
      if (removeFromParent && this.parent != null) {
        this.parent.removeChild(this);
        this.parent = null;
      }
      if (Tile.prepDevice != null) {
        var $enum1 = ss.enumerate(this._indexBuffers);
        while ($enum1.moveNext()) {
          var buf = $enum1.current;
          Tile.prepDevice.deleteBuffer(buf);
        }
        this._indexBuffers = new Array(4);
        if (this._vertexBuffer != null) {
          Tile.prepDevice.deleteBuffer(this._vertexBuffer);
          this._vertexBuffer = null;
        }
        if (this.texture2d != null) {
          Tile.prepDevice.deleteTexture(this.texture2d);
          this.texture2d = null;
        }
      }
    },
    removeChild: function(child) {
      for (var i = 0; i < 4; i++) {
        if (this.children[i] === child) {
          this.children[i] = null;
          return;
        }
      }
    },
    createGeometry: function(renderContext) {
      if (Tile.demEnabled && this.demReady && this.demData == null) {
        if (!this._loadDemData()) {
          return false;
        }
      }
      if (Tile.demEnabled && this.demData == null) {
        return false;
      }
      this.readyToRender = true;
      return true;
    },
    calcSphere: function() {
      var corners = new Array(4);
      corners[0] = this.topLeft;
      corners[1] = this.bottomRight;
      corners[2] = this.topRight;
      corners[3] = this.bottomLeft;
      var result = ConvexHull.findEnclosingSphere(corners);
      this.sphereCenter = result.center;
      this.sphereRadius = result.radius;
    },
    isTileBigEnough: function(renderContext) {
      if (this.level > 1) {
        var wvp = renderContext.WVP;
        wvp._transformTo(this.topLeft, this._topLeftScreen);
        wvp._transformTo(this.bottomRight, this._bottomRightScreen);
        wvp._transformTo(this.topRight, this._topRightScreen);
        wvp._transformTo(this.bottomLeft, this._bottomLeftScreen);
        var top = this._topLeftScreen;
        top.subtract(this._topRightScreen);
        var topLength = top.length();
        var bottom = this._bottomLeftScreen;
        bottom.subtract(this._bottomRightScreen);
        var bottomLength = bottom.length();
        var left = this._bottomLeftScreen;
        left.subtract(this._topLeftScreen);
        var leftLength = left.length();
        var right = this._bottomRightScreen;
        right.subtract(this._topRightScreen);
        var rightLength = right.length();
        var lengthMax = Math.max(Math.max(rightLength, leftLength), Math.max(bottomLength, topLength));
        if (lengthMax < 300) {
          return false;
        }
        else {
          Tile.deepestLevel = (this.level > Tile.deepestLevel) ? this.level : Tile.deepestLevel;
        }
      }
      return true;
    },
    isTileInFrustum: function(frustum) {
      if (this.level < 2 && (!this.dataset.get_projection() || this.dataset.get_projection() === 3)) {
      }
      this.inViewFrustum = false;
      var centerV4 = new Vector4d(this.sphereCenter.x, this.sphereCenter.y, this.sphereCenter.z, 1);
      for (var i = 0; i < 6; i++) {
        if (frustum[i].dot(centerV4) < -this.sphereRadius) {
          return false;
        }
      }
      this.inViewFrustum = true;
      return true;
    },
    get_sphereRadius: function() {
      return this.sphereRadius;
    },
    get_sphereCenter: function() {
      return this.sphereCenter;
    },
    geoTo3d: function(lat, lng, useLocalCenter) {
      if (this.dataset.get_dataSetType() === 3) {
        var retVal = Vector3d.create(-(Math.cos(lng * Tile.RC) * Math.cos(lat * Tile.RC) * this.radius), (Math.sin(lat * Tile.RC) * this.radius), (Math.sin(lng * Tile.RC) * Math.cos(lat * Tile.RC) * this.radius));
        return retVal;
      }
      else {
        lng -= 180;
        var retVal = Vector3d.create((Math.cos(lng * Tile.RC) * Math.cos(lat * Tile.RC) * this.radius), (Math.sin(lat * Tile.RC) * this.radius), (Math.sin(lng * Tile.RC) * Math.cos(lat * Tile.RC) * this.radius));
        return retVal;
      }
    },
    onCreateVertexBuffer: function(sender, e) {
    },
    get_dataset: function() {
      return this.dataset;
    },
    set_dataset: function(value) {
      this.dataset = value;
      return value;
    },
    get_key: function() {
      return this.dataset.get_imageSetID().toString() + '\\' + this.level.toString() + '\\' + this.tileY.toString() + '_' + this.tileX.toString();
    },
    get_URL: function() {
      var returnUrl = this.dataset.get_url();
      if (this.dataset.get_url().indexOf('{1}') > -1) {
        if (!this.dataset.get_projection() && !ss.emptyString(this.dataset.get_quadTreeTileMap())) {
          returnUrl = ss.format(this.dataset.get_url(), this.getServerID(), this.getTileID());
          if (returnUrl.indexOf('virtualearth.net') > -1) {
            returnUrl += '&n=z';
          }
          return returnUrl;
        }
        else {
          return ss.format(this.dataset.get_url(), this.dataset.get_imageSetID(), this.level, this.tileX, this.tileY);
        }
      }
      returnUrl = ss.replaceString(returnUrl, '{X}', this.tileX.toString());
      returnUrl = ss.replaceString(returnUrl, '{Y}', this.tileY.toString());
      returnUrl = ss.replaceString(returnUrl, '{L}', this.level.toString());
      var hash = 0;
      if (returnUrl.indexOf('{S:0}') > -1) {
        hash = 0;
        returnUrl = ss.replaceString(returnUrl, '{S:0}', '{S}');
      }
      if (returnUrl.indexOf('{S:1}') > -1) {
        hash = 1;
        returnUrl = ss.replaceString(returnUrl, '{S:1}', '{S}');
      }
      if (returnUrl.indexOf('{S:2}') > -1) {
        hash = 2;
        returnUrl = ss.replaceString(returnUrl, '{S:2}', '{S}');
      }
      if (returnUrl.indexOf('{S:3}') > -1) {
        hash = 3;
        returnUrl = ss.replaceString(returnUrl, '{S:3}', '{S}');
      }
      if (returnUrl.indexOf('a{S}') > -1) {
        returnUrl = ss.replaceString(returnUrl, 'a{S}', 'r{S}');
      }
      if (returnUrl.indexOf('h{S}') > -1) {
        returnUrl = ss.replaceString(returnUrl, 'h{S}', 'r{S}');
      }
      if (returnUrl.indexOf('//r{S}.ortho.tiles.virtualearth.net') > -1) {
        returnUrl = ss.replaceString(returnUrl, '//r{S}.ortho.tiles.virtualearth.net', '//ecn.t{S}.tiles.virtualearth.net');
      }
      var id = this.getTileID();
      var server = '';
      if (!id.length) {
        server = hash.toString();
      }
      else {
        server = id.substr(id.length - 1, 1);
      }
      returnUrl = ss.replaceString(returnUrl, '{Q}', id);
      returnUrl = ss.replaceString(returnUrl, '{S}', server);
      if (returnUrl.indexOf('virtualearth.net') > -1) {
        returnUrl += '&n=z';
      }
      return returnUrl;
    },
    get_demURL: function() {
      if (!this.dataset.get_projection()) {
        var baseUrl = '//cdn.worldwidetelescope.org/wwtweb/demtile.aspx?q={0},{1},{2},M';
        if (!ss.emptyString(this.dataset.get_demUrl())) {
          baseUrl = this.dataset.get_demUrl();
        }
      }
      if (this.dataset.get_demUrl().indexOf('{1}') > -1) {
        return ss.format(this.dataset.get_demUrl() + '&new', this.level, this.tileX, this.tileY);
      }
      var returnUrl = this.dataset.get_demUrl();
      returnUrl = ss.replaceString(returnUrl, '{X}', this.tileX.toString());
      returnUrl = ss.replaceString(returnUrl, '{Y}', this.tileY.toString());
      returnUrl = ss.replaceString(returnUrl, '{L}', this.level.toString());
      var hash = 0;
      if (returnUrl.indexOf('{S:0}') > -1) {
        hash = 0;
        returnUrl = ss.replaceString(returnUrl, '{S:0}', '{S}');
      }
      if (returnUrl.indexOf('{S:1}') > -1) {
        hash = 1;
        returnUrl = ss.replaceString(returnUrl, '{S:1}', '{S}');
      }
      if (returnUrl.indexOf('{S:2}') > -1) {
        hash = 2;
        returnUrl = ss.replaceString(returnUrl, '{S:2}', '{S}');
      }
      if (returnUrl.indexOf('{S:3}') > -1) {
        hash = 3;
        returnUrl = ss.replaceString(returnUrl, '{S:3}', '{S}');
      }
      var id = this.getTileID();
      var server = '';
      if (!id.length) {
        server = hash.toString();
      }
      else {
        server = id.substr(id.length - 1, 1);
      }
      returnUrl = ss.replaceString(returnUrl, '{Q}', id);
      returnUrl = ss.replaceString(returnUrl, '{S}', server);
      return returnUrl;
    },
    getServerID: function() {
      var server = (this.tileX & 1) + ((this.tileY & 1) << 1);
      return server;
    },
    getTileID: function() {
      if (this._tileId != null) {
        return this._tileId;
      }
      var netLevel = this.level;
      var netX = this.tileX;
      var netY = this.tileY;
      if (this.dataset.get_projection() === 1) {
        netLevel++;
      }
      var tileMap = this.dataset.get_quadTreeTileMap();
      if (!ss.emptyString(tileMap)) {
        var sb = new ss.StringBuilder();
        for (var i = netLevel; i > 0; --i) {
          var mask = 1 << (i - 1);
          var val = 0;
          if (!!(netX & mask)) {
            val = 1;
          }
          if (!!(netY & mask)) {
            val += 2;
          }
          sb.append(tileMap.substr(val, 1));
        }
        this._tileId = sb.toString();
        return this._tileId;
      }
      else {
        this._tileId = '0';
        return this._tileId;
      }
    },
    get_vertexCount: function() {
      return this._vertexCount;
    },
    set_vertexCount: function(value) {
      this._vertexCount = value;
      return value;
    }
  };


  // wwtlib.TileCache

  function TileCache() {
  }
  TileCache.getTile = function(level, x, y, dataset, parent) {
    var retTile = null;
    var tileKey = Imageset.getTileKey(dataset, level, x, y);
    if (!ss.keyExists(TileCache._tiles, tileKey)) {
      retTile = Imageset.getNewTile(dataset, level, x, y, parent);
      TileCache._tiles[tileKey] = retTile;
    }
    else {
      retTile = TileCache._tiles[tileKey];
    }
    var p = 0;
    return retTile;
  };
  TileCache.getCachedTile = function(level, x, y, dataset, parent) {
    if (level < dataset.get_baseLevel()) {
      return null;
    }
    var retTile = null;
    var tileKey = Imageset.getTileKey(dataset, level, x, y);
    try {
      if (!ss.keyExists(TileCache._tiles, tileKey)) {
        return null;
      }
      else {
        retTile = TileCache._tiles[tileKey];
      }
    }
    catch ($e1) {
    }
    return retTile;
  };
  TileCache.getReadyToRenderTileCount = function() {
    var notReadyCullList = [];
    var readyCullList = [];
    try {
      try {
        var $enum1 = ss.enumerate(ss.keys(TileCache._tiles));
        while ($enum1.moveNext()) {
          var key = $enum1.current;
          var tile = TileCache._tiles[key];
          if (tile.renderedGeneration < (Tile.currentRenderGeneration - 10) && !(tile.requestPending || tile.downloading)) {
            if (tile.readyToRender) {
              readyCullList.push(tile);
            }
            else {
              notReadyCullList.push(tile);
            }
          }
        }
      }
      catch ($e2) {
      }
      return readyCullList.length;
    }
    catch ($e3) {
      return -1;
    }
  };
  TileCache.processQueue = function(renderContext) {
    while (ss.keyCount(TileCache._queue) > 0 && TileCache.openThreads > 0) {
      var minDistance = 100000;
      var overlayTile = false;
      var maxKey = null;
      var level = 1000;
      var $enum1 = ss.enumerate(ss.keys(TileCache._queue));
      while ($enum1.moveNext()) {
        var key = $enum1.current;
        var t = TileCache._queue[key];
        if (!t.requestPending && t.inViewFrustum) {
          var vectTemp = Vector3d.makeCopy(t.get_sphereCenter());
          vectTemp._transformByMatrics(renderContext.get_world());
          if (renderContext.space) {
            vectTemp.subtract(Vector3d.create(0, 0, -1));
          }
          else {
            vectTemp.subtract(renderContext.cameraPosition);
          }
          var distTemp = Math.max(0, vectTemp.length() - t.get_sphereRadius());
          var thisIsOverlay = (t.get_dataset().get_projection() === 2) || (t.get_dataset().get_projection() === 5);
          if (distTemp < minDistance && (!overlayTile || thisIsOverlay)) {
            minDistance = distTemp;
            maxKey = t.get_key();
            level = t.level;
            overlayTile = thisIsOverlay;
          }
        }
      }
      if (maxKey != null) {
        var workTile = TileCache._queue[maxKey];
        workTile.requestPending = true;
        TileCache.openThreads--;
        if (TileCache.openThreads < 0) {
          TileCache.openThreads = 0;
        }
        workTile.requestImage();
        if (workTile.get_dataset().get_elevationModel()) {
          workTile.requestDem();
        }
      }
      else {
        return;
      }
    }
  };
  TileCache.addTileToQueue = function(tile) {
    var hitValue;
    hitValue = 256;
    if (!tile.downloading && !tile.readyToRender) {
      if (ss.keyExists(TileCache._queue, tile.get_key())) {
        TileCache._queue[tile.get_key()].requestHits += hitValue;
      }
      else {
        tile.requestHits = hitValue;
        TileCache._queue[tile.get_key()] = tile;
      }
    }
    return true;
  };
  TileCache.removeFromQueue = function(key, complete) {
    if (complete) {
      var workTile = TileCache._queue[key];
      if (workTile != null) {
        workTile.requestPending = false;
        delete TileCache._queue[workTile.get_key()];
      }
      TileCache.openThreads++;
    }
    delete TileCache._queue[key];
  };
  TileCache.clearCache = function() {
    ss.clearKeys(TileCache._tiles);
  };
  TileCache.purgeQueue = function() {
    ss.clearKeys(TileCache._queue);
  };
  TileCache.purgeLRU = function() {
    if (ss.keyCount(TileCache._tiles) < TileCache.maxReadyToRenderSize) {
      return;
    }
    var notReadyCullList = [];
    var readyCullList = [];
    try {
      try {
        var $enum1 = ss.enumerate(ss.keys(TileCache._tiles));
        while ($enum1.moveNext()) {
          var key = $enum1.current;
          var tile = TileCache._tiles[key];
          if (tile.renderedGeneration < (Tile.currentRenderGeneration - 10) && !(tile.requestPending || tile.downloading)) {
            if (tile.readyToRender) {
              readyCullList.push(tile);
            }
            else {
              notReadyCullList.push(tile);
            }
          }
        }
      }
      catch ($e2) {
      }
      TileCache.readyToRenderCount = readyCullList.length;
      if (readyCullList.length > TileCache.maxReadyToRenderSize) {
        readyCullList.sort(function(t1, t2) {
          return (t2.accessCount < t1.accessCount) ? 1 : ((t2.accessCount === t1.accessCount) ? 0 : -1);
        });
        var totalToPurge = readyCullList.length - TileCache.maxReadyToRenderSize;
        var $enum3 = ss.enumerate(readyCullList);
        while ($enum3.moveNext()) {
          var tile = $enum3.current;
          if (totalToPurge < 1) {
            break;
          }
          tile.cleanUp(false);
          totalToPurge--;
        }
      }
      if (ss.keyCount(TileCache._tiles) < TileCache.maxTileCacheSize) {
        return;
      }
      if (notReadyCullList.length > TileCache.maxTileCacheSize) {
        notReadyCullList.sort(function(t1, t2) {
          return (t2.accessCount < t1.accessCount) ? 1 : ((t2.accessCount === t1.accessCount) ? 0 : -1);
        });
        var totalToPurge = notReadyCullList.length - TileCache.maxTileCacheSize;
        if (totalToPurge > 20) {
          totalToPurge = 20;
        }
        var $enum4 = ss.enumerate(notReadyCullList);
        while ($enum4.moveNext()) {
          var tile = $enum4.current;
          if (totalToPurge < 1) {
            break;
          }
          tile.cleanUp(true);
          delete TileCache._tiles[tile.get_key()];
          totalToPurge--;
        }
      }
    }
    catch ($e5) {
    }
    finally {
    }
    return;
  };
  TileCache.decimateQueue = function() {
    var list = [];
    var $enum1 = ss.enumerate(ss.keys(TileCache._queue));
    while ($enum1.moveNext()) {
      var key = $enum1.current;
      var t = TileCache._queue[key];
      if (!t.requestPending) {
        t.requestHits = t.requestHits / 2;
        try {
          if (t.requestHits < 2) {
            list.push(t);
          }
          else if (!t.inViewFrustum) {
            list.push(t);
          }
        }
        catch ($e2) {
        }
      }
    }
    var $enum3 = ss.enumerate(list);
    while ($enum3.moveNext()) {
      var t = $enum3.current;
      delete TileCache._queue[t.get_key()];
    }
  };
  var TileCache$ = {

  };


  // wwtlib.DistanceCalc

  function DistanceCalc() {
  }
  DistanceCalc.lineToPoint = function(l0, l1, p) {
    var v = Vector3d.subtractVectors(l1, l0);
    var w = Vector3d.subtractVectors(p, l0);
    var dist = Vector3d.cross(w, v).length() / v.length();
    return dist;
  };
  DistanceCalc.getUVFromInnerPoint = function(ul, ur, ll, lr, pnt) {
    ul.normalize();
    ur.normalize();
    ll.normalize();
    lr.normalize();
    pnt.normalize();
    var dUpper = DistanceCalc.lineToPoint(ul, ur, pnt);
    var dLower = DistanceCalc.lineToPoint(ll, lr, pnt);
    var dVert = dUpper + dLower;
    var dRight = DistanceCalc.lineToPoint(ur, lr, pnt);
    var dLeft = DistanceCalc.lineToPoint(ul, ll, pnt);
    var dHoriz = dRight + dLeft;
    return Vector2d.create(dLeft / dHoriz, dUpper / dVert);
  };
  var DistanceCalc$ = {

  };


  // wwtlib.Tour

  function Tour() {
    this.userLevel = 0;
    this.classification = 0;
    this.averageRating = 0;
    this.lengthInSecs = 0;
    this._thumbnailUrlField = '';
  }
  Tour._fromXml = function(child) {
    var temp = new Tour();
    if (child.attributes.getNamedItem('ID') != null) {
      temp.id = child.attributes.getNamedItem('ID').nodeValue;
    }
    if (child.attributes.getNamedItem('TourUrl') != null) {
      temp._tourUrl = child.attributes.getNamedItem('TourUrl').nodeValue;
    }
    if (child.attributes.getNamedItem('Title') != null) {
      temp.title = child.attributes.getNamedItem('Title').nodeValue;
    }
    if (child.attributes.getNamedItem('Description') != null) {
      temp.description = child.attributes.getNamedItem('Description').nodeValue;
    }
    if (child.attributes.getNamedItem('Classification') != null) {
      temp.classification = Enums.parse('Classification', child.attributes.getNamedItem('Classification').nodeValue);
    }
    if (child.attributes.getNamedItem('AuthorEmail') != null) {
      temp.authorEmail = child.attributes.getNamedItem('AuthorEmail').nodeValue;
    }
    if (child.attributes.getNamedItem('Author') != null) {
      temp.author = child.attributes.getNamedItem('Author').nodeValue;
    }
    if (child.attributes.getNamedItem('AuthorURL') != null) {
      temp.authorURL = child.attributes.getNamedItem('AuthorURL').nodeValue;
    }
    if (child.attributes.getNamedItem('AuthorImageUrl') != null) {
      temp.authorImageUrl = child.attributes.getNamedItem('AuthorImageUrl').nodeValue;
    }
    if (child.attributes.getNamedItem('AverageRating') != null) {
      temp.averageRating = parseFloat(child.attributes.getNamedItem('AverageRating').nodeValue);
    }
    if (child.attributes.getNamedItem('LengthInSecs') != null) {
      temp.lengthInSecs = parseFloat(child.attributes.getNamedItem('LengthInSecs').nodeValue);
    }
    if (child.attributes.getNamedItem('OrganizationUrl') != null) {
      temp.organizationUrl = child.attributes.getNamedItem('OrganizationUrl').nodeValue;
    }
    if (child.attributes.getNamedItem('OrganizationName') != null) {
      temp.organizationName = child.attributes.getNamedItem('OrganizationName').nodeValue;
    }
    if (child.attributes.getNamedItem('RelatedTours') != null) {
      temp.relatedTours = child.attributes.getNamedItem('RelatedTours').nodeValue;
    }
    if (child.attributes.getNamedItem('Keywords') != null) {
      temp.keywords = child.attributes.getNamedItem('Keywords').nodeValue;
    }
    if (child.attributes.getNamedItem('ThumbnailUrl') != null) {
      temp.set_thumbnailUrl(child.attributes.getNamedItem('ThumbnailUrl').nodeValue);
    }
    return temp;
  };
  var Tour$ = {
    get_name: function() {
      return this.title;
    },
    get_thumbnail: function() {
      return this._thumbnail;
    },
    set_thumbnail: function(value) {
      this._thumbnail = value;
      return value;
    },
    get_thumbnailUrl: function() {
      if (!ss.emptyString(this._thumbnailUrlField)) {
        return this._thumbnailUrlField;
      }
      else {
        return ss.format('//worldwidetelescope.org/wwtweb/GetTourThumbnail.aspx?GUID={0}', this.id);
      }
    },
    set_thumbnailUrl: function(value) {
      this._thumbnailUrlField = value;
      return value;
    },
    get_tourUrl: function() {
      if (ss.emptyString(this._tourUrl)) {
        return ss.format('//cdn.worldwidetelescope.org/wwtweb/GetTour.aspx?GUID={0}', this.id);
      }
      else {
        return this._tourUrl;
      }
    },
    set_tourUrl: function(value) {
      this._tourUrl = value;
      return value;
    },
    get_bounds: function() {
      return this._bounds;
    },
    set_bounds: function(value) {
      this._bounds = value;
      return value;
    },
    get_isImage: function() {
      return false;
    },
    get_isTour: function() {
      return true;
    },
    get_isFolder: function() {
      return false;
    },
    get_isCloudCommunityItem: function() {
      return false;
    },
    get_readOnly: function() {
      return false;
    },
    get_children: function() {
      return [];
    }
  };


  // wwtlib.FileEntry

  function FileEntry(filename, size) {
    this.size = 0;
    this.offset = 0;
    this.filename = filename;
    this.size = size;
  }
  var FileEntry$ = {
    toString: function() {
      return this.filename;
    }
  };


  // wwtlib.FileCabinet

  function FileCabinet() {
    this.tempDirectory = '';
    this._currentOffset = 0;
    this._packageID = '';
    this.url = '';
    this.clearFileList();
  }
  FileCabinet.fromUrl = function(url, callMe) {
    var temp = new FileCabinet();
    temp.url = url;
    temp._callMe = callMe;
    temp._webFile = new WebFile(url);
    temp._webFile.responseType = 'blob';
    temp._webFile.onStateChange = ss.bind('_loadCabinet', temp);
    temp._webFile.send();
    return temp;
  };
  var FileCabinet$ = {
    get_packageID: function() {
      return this._packageID;
    },
    set_packageID: function(value) {
      this._packageID = value;
      return value;
    },
    addFile: function(filename, data) {
      if (data == null) {
        return;
      }
      if (!ss.keyExists(this._fileDirectory, filename)) {
        var fe = new FileEntry(filename, data.size);
        fe.offset = this._currentOffset;
        fe.blob = data;
        this.fileList.push(fe);
        this._fileDirectory[filename] = fe;
        this._currentOffset += fe.size;
      }
    },
    clearFileList: function() {
      if (this.fileList == null) {
        this.fileList = [];
      }
      if (this._fileDirectory == null) {
        this._fileDirectory = {};
      }
      this.fileList.length = 0;
      ss.clearKeys(this._fileDirectory);
      this._currentOffset = 0;
    },
    packageFiles: function() {
      var xmlWriter = new XmlTextWriter();
      xmlWriter.formatting = 1;
      xmlWriter._writeProcessingInstruction('xml', "version='1.0' encoding='UTF-8'");
      xmlWriter._writeStartElement('FileCabinet');
      xmlWriter._writeAttributeString('HeaderSize', '0x0BADFOOD');
      xmlWriter._writeStartElement('Files');
      var $enum1 = ss.enumerate(this.fileList);
      while ($enum1.moveNext()) {
        var entry = $enum1.current;
        xmlWriter._writeStartElement('File');
        xmlWriter._writeAttributeString('Name', entry.filename);
        xmlWriter._writeAttributeString('Size', entry.size.toString());
        xmlWriter._writeAttributeString('Offset', entry.offset.toString());
        xmlWriter._writeEndElement();
      }
      xmlWriter._writeEndElement();
      xmlWriter._writeFullEndElement();
      xmlWriter._close();
      var data = xmlWriter.body;
      var blob = new Blob([ data ]);
      var sizeText = ss.format('0x{0:x8}', blob.size);
      data = ss.replaceString(data, '0x0BADFOOD', sizeText);
      blob = new Blob([ data ]);
      var blobs = [];
      blobs.push(blob);
      var $enum2 = ss.enumerate(this.fileList);
      while ($enum2.moveNext()) {
        var entry = $enum2.current;
        blobs.push(entry.blob);
      }
      var cabBlob = new Blob(blobs, {type : 'application/x-wtt'});;
      return cabBlob;
    },
    _loadCabinet: function() {
      var $this = this;

      if (this._webFile.get_state() === 2) {
        alert(this._webFile.get_message());
      }
      else if (this._webFile.get_state() === 1) {
        this._mainBlob = this._webFile.getBlob();
        var chunck = new FileReader();
        chunck.onloadend = function(e) {
          var offset = $this._getSize(chunck.result);
          var header = new FileReader();
          header.onloadend = function(ee) {
            var data = ss.safeCast(header.result, String);
            var xParser = new DOMParser();
            $this.extract(xParser.parseFromString(data, 'text/xml'), offset);
            $this._callMe();
          };
          header.readAsText($this._mainBlob.slice(0, offset));
        };
        chunck.readAsText(this._mainBlob.slice(0, 255));
      }
    },
    _getSize: function(data) {
      var start = data.indexOf('0x');
      if (start === -1) {
        return 0;
      }
      return parseInt(data.substring(start, start + 10), 16);
    },
    extract: function(doc, offset) {
      try {
        var cab = Util.selectSingleNode(doc, 'FileCabinet');
        var files = Util.selectSingleNode(cab, 'Files');
        this.fileList.length = 0;
        var $enum1 = ss.enumerate(files.childNodes);
        while ($enum1.moveNext()) {
          var child = $enum1.current;
          if (child.nodeName === 'File') {
            var fe = new FileEntry(child.attributes.getNamedItem('Name').nodeValue, parseInt(child.attributes.getNamedItem('Size').nodeValue));
            fe.offset = offset;
            offset += fe.size;
            this.fileList.push(fe);
          }
        }
      }
      catch ($e2) {
      }
    },
    getFileBlob: function(filename) {
      var fe = this.getFileEntry(filename);
      if (fe != null) {
        var ext = filename.substr(filename.lastIndexOf('.')).toLowerCase();
        var type = null;
        switch (ext) {
          case '.png':
            type = 'image/png';
            break;
          case '.jpg':
          case '.jpeg':
            type = 'image/jpeg';
            break;
          case '.mp3':
            type = 'audio/mpeg3';
            break;
          case '.txt':
            type = 'text/plain';
            break;
          case '.fit':
          case '.fits':
            type = 'application/octet-stream';
            break;
        }
        return this._mainBlob.slice(fe.offset, fe.offset + fe.size, type);
      }
      return null;
    },
    getFileEntry: function(filename) {
      var $enum1 = ss.enumerate(this.fileList);
      while ($enum1.moveNext()) {
        var entry = $enum1.current;
        if (entry.filename === filename) {
          return entry;
        }
      }
      return null;
    },
    get_masterFile: function() {
      if (this.fileList.length > 0) {
        return this.fileList[0].filename;
      }
      else {
        return null;
      }
    },
    clearTempFiles: function() {
      var $enum1 = ss.enumerate(this.fileList);
      while ($enum1.moveNext()) {
        var entry = $enum1.current;
      }
    }
  };


  // wwtlib.SettingParameter

  function SettingParameter(edgeTrigger, opacity, targetState, filter) {
    this.targetState = false;
    this.edgeTrigger = false;
    this.opacity = 0;
    this.edgeTrigger = edgeTrigger;
    this.opacity = opacity;
    this.targetState = targetState;
    this.filter = filter;
  }
  var SettingParameter$ = {

  };


  // wwtlib.Overlay

  function Overlay() {
    this.isDynamic = false;
    this.isDesignTimeOnly = false;
    this._name = '';
    this.id = (Overlay.nextId++).toString();
    this._owner = null;
    this._url = '';
    this._linkID = '';
    this._domeMatrix = Matrix3d.get_identity();
    this._domeMatX = 0;
    this._domeMatY = 0;
    this._domeAngle = 0;
    this.points = null;
    this._animate = false;
    this._tweenFactor = 0;
    this._endX = 0;
    this._endY = 0;
    this._endOpacity = 0;
    this._endColor = new Color();
    this._endWidth = 0;
    this._endHeight = 0;
    this._endRotationAngle = 0;
    this._anchor = 1;
    this._x = 0;
    this._y = 0;
    this._width = 0;
    this._height = 0;
    this._color = Colors.get_white();
    this._opacity = 0.5;
    this._rotationAngle = 0;
    this.currentRotation = 0;
    this.texture = null;
    this.texture2d = null;
    this._interpolationType = 5;
  }
  Overlay._fromXml = function(owner, overlay) {
    if (overlay.attributes == null) {
      return null;
    }
    if (overlay.attributes.getNamedItem('Type') == null) {
      return null;
    }
    var overlayClassName = overlay.attributes.getNamedItem('Type').nodeValue;
    var overLayType = ss.replaceString(overlayClassName, 'TerraViewer.', '');
    var newOverlay = null;
    switch (overLayType) {
      case 'AudioOverlay':
        newOverlay = new AudioOverlay();
        break;
      case 'BitmapOverlay':
        newOverlay = new BitmapOverlay();
        break;
      case 'FlipBookOverlay':
        newOverlay = new FlipbookOverlay();
        break;
      case 'ShapeOverlay':
        newOverlay = new ShapeOverlay();
        break;
      case 'TextOverlay':
        newOverlay = new TextOverlay();
        break;
      default:
        return null;
    }
    newOverlay._owner = owner;
    newOverlay._initOverlayFromXml(overlay);
    return newOverlay;
  };
  var Overlay$ = {
    get_name: function() {
      return this._name;
    },
    set_name: function(value) {
      this._name = value;
      return value;
    },
    get_owner: function() {
      return this._owner;
    },
    set_owner: function(value) {
      this._owner = value;
      return value;
    },
    get_zOrder: function() {
      var index = 0;
      var $enum1 = ss.enumerate(this._owner.get_overlays());
      while ($enum1.moveNext()) {
        var item = $enum1.current;
        if (item === this) {
          break;
        }
        index++;
      }
      return index;
    },
    get_url: function() {
      return this._url;
    },
    set_url: function(value) {
      this._url = value;
      return value;
    },
    get_linkID: function() {
      return this._linkID;
    },
    set_linkID: function(value) {
      this._linkID = value;
      return value;
    },
    play: function() {
    },
    pause: function() {
    },
    stop: function() {
    },
    seek: function(time) {
    },
    makePosition: function(centerX, centerY, offsetX, offsetY, angle) {
      centerX -= 960;
      centerY -= 558;
      var point = Vector3d.create(centerX + offsetX, centerY + offsetY, 1347);
      if (!!this._domeMatX || !!this._domeMatY || this._domeAngle !== angle) {
        this._domeMatX = centerX;
        this._domeMatY = centerY;
        this._domeMatrix = Matrix3d.translation(Vector3d.create(-centerX, -centerY, 0));
        this._domeMatrix._multiply(Matrix3d._rotationZ((angle / 180 * Math.PI)));
        this._domeMatrix._multiply(Matrix3d.translation(Vector3d.create(centerX, centerY, 0)));
      }
      point = Vector3d._transformCoordinate(point, this._domeMatrix);
      return point;
    },
    draw3D: function(renderContext, designTime) {
      if (RenderContext.useGl) {
        if (this.texture == null || this.isDynamic) {
          this.initializeTexture();
        }
        if (!this.isDesignTimeOnly || designTime) {
          this.initiaizeGeometry();
          this.updateRotation();
        }
      }
      else {
      }
    },
    cleanUp: function() {
      if (this.texture != null) {
        this.texture = null;
      }
      this.texture2d = null;
    },
    initializeTexture: function() {
    },
    cleanUpGeometry: function() {
      this.currentRotation = 0;
      this.points = null;
    },
    initiaizeGeometry: function() {
      if (this.points == null) {
        this.currentRotation = 0;
        this.points = new Array(4);
        this.points[0] = new PositionColoredTextured();
        this.points[0].position = this.makePosition(this.get_x(), this.get_y(), -this.get_width() / 2, -this.get_height() / 2, this.get_rotationAngle());
        this.points[0].tu = 0;
        this.points[0].tv = 0;
        this.points[0].color = this.get_color();
        this.points[1] = new PositionColoredTextured();
        this.points[1].position = this.makePosition(this.get_x(), this.get_y(), this.get_width() / 2, -this.get_height() / 2, this.get_rotationAngle());
        this.points[1].tu = 1;
        this.points[1].tv = 0;
        this.points[1].color = this.get_color();
        this.points[2] = new PositionColoredTextured();
        this.points[2].position = this.makePosition(this.get_x(), this.get_y(), -this.get_width() / 2, this.get_height() / 2, this.get_rotationAngle());
        this.points[2].tu = 0;
        this.points[2].tv = 1;
        this.points[2].color = this.get_color();
        this.points[3] = new PositionColoredTextured();
        this.points[3].position = this.makePosition(this.get_x(), this.get_y(), this.get_width() / 2, this.get_height() / 2, this.get_rotationAngle());
        this.points[3].tu = 1;
        this.points[3].tv = 1;
        this.points[3].color = this.get_color();
      }
    },
    updateRotation: function() {
    },
    get_animate: function() {
      return this._animate;
    },
    set_animate: function(value) {
      if (this._animate !== value) {
        this._animate = value;
        if (this._animate) {
          this._endX = this._x;
          this._endY = this._y;
          this._endRotationAngle = this._rotationAngle;
          this._endColor = this._color;
          this._endWidth = this._width;
          this._endHeight = this._height;
          this.cleanUpGeometry();
        }
        else {
          this._endX = this._x = this.get_x();
          this._endY = this._y = this.get_y();
          this._endRotationAngle = this._rotationAngle = this.get_rotationAngle();
          this._endColor = this._color = this.get_color();
          this._endWidth = this._width = this.get_width();
          this._endHeight = this._height = this.get_height();
          this.cleanUpGeometry();
          this._tweenFactor = 0;
        }
      }
      return value;
    },
    get_tweenFactor: function() {
      return this._tweenFactor;
    },
    set_tweenFactor: function(value) {
      if (!this._animate) {
        this._tweenFactor = 0;
      }
      else {
        if (this._tweenFactor !== value) {
          this._tweenFactor = value;
          this.cleanUpGeometry();
        }
      }
      return value;
    },
    get_anchor: function() {
      return this._anchor;
    },
    set_anchor: function(value) {
      this._anchor = value;
      return value;
    },
    get_position: function() {
      return Vector2d.create(this.get_x(), this.get_y());
    },
    set_position: function(value) {
      this.set_x(value.x);
      this.set_y(value.y);
      return value;
    },
    get_x: function() {
      return (this._x * (1 - this._tweenFactor)) + (this._endX * this._tweenFactor);
    },
    set_x: function(value) {
      if (this._tweenFactor < 0.5) {
        if (this._x !== value) {
          this._x = value;
          this.cleanUpGeometry();
        }
      }
      else {
        if (this._endX !== value) {
          this._endX = value;
          this.cleanUpGeometry();
        }
      }
      return value;
    },
    get_y: function() {
      return (this._y * (1 - this._tweenFactor)) + (this._endY * this._tweenFactor);
    },
    set_y: function(value) {
      if (this._tweenFactor < 0.5) {
        if (this._y !== value) {
          this._y = value;
          this.cleanUpGeometry();
        }
      }
      else {
        if (this._endY !== value) {
          this._endY = value;
          this.cleanUpGeometry();
        }
      }
      return value;
    },
    get_width: function() {
      return (this._width * (1 - this._tweenFactor)) + (this._endWidth * this._tweenFactor);
    },
    set_width: function(value) {
      if (value < 5 && !!value) {
        value = 5;
      }
      if (this._tweenFactor < 0.5) {
        if (this._width !== value) {
          this._width = value;
          this.cleanUpGeometry();
        }
      }
      else {
        if (this._endWidth !== value) {
          this._endWidth = value;
          this.cleanUpGeometry();
        }
      }
      return value;
    },
    get_height: function() {
      return (this._height * (1 - this._tweenFactor)) + (this._endHeight * this._tweenFactor);
    },
    set_height: function(value) {
      if (value < 5 && !!value) {
        value = 5;
      }
      if (this._tweenFactor < 0.5) {
        if (this._height !== value) {
          this._height = value;
          this.cleanUpGeometry();
        }
      }
      else {
        if (this._endHeight !== value) {
          this._endHeight = value;
          this.cleanUpGeometry();
        }
      }
      return value;
    },
    get_color: function() {
      var red = ss.truncate(((this._color.r * (1 - this._tweenFactor)) + (this._endColor.r * this._tweenFactor)));
      var green = ss.truncate(((this._color.g * (1 - this._tweenFactor)) + (this._endColor.g * this._tweenFactor)));
      var blue = ss.truncate(((this._color.b * (1 - this._tweenFactor)) + (this._endColor.b * this._tweenFactor)));
      var alpha = ss.truncate(((this._color.a * (1 - this._tweenFactor)) + (this._endColor.a * this._tweenFactor)));
      return Color.fromArgb(Math.max(0, Math.min(255, alpha)), Math.max(0, Math.min(255, red)), Math.max(0, Math.min(255, green)), Math.max(0, Math.min(255, blue)));
    },
    set_color: function(value) {
      if (this._tweenFactor < 0.5) {
        if (this._color !== value) {
          this._color = value;
          this.cleanUpGeometry();
        }
      }
      else {
        if (this._endColor !== value) {
          this._endColor = value;
          this.cleanUpGeometry();
        }
      }
      return value;
    },
    get_opacity: function() {
      return this.get_color().a / 255;
    },
    set_opacity: function(value) {
      var col = this.get_color();
      this.set_color(Color.fromArgb(Math.min(255, ss.truncate((value * 255))), col.r, col.g, col.b));
      this._opacity = value;
      return value;
    },
    get_rotationAngle: function() {
      return (this._rotationAngle * (1 - this._tweenFactor)) + (this._endRotationAngle * this._tweenFactor);
    },
    set_rotationAngle: function(value) {
      if (this._tweenFactor < 0.5) {
        if (this._rotationAngle !== value) {
          this._rotationAngle = value;
          this.cleanUpGeometry();
        }
      }
      else {
        if (this._endRotationAngle !== value) {
          this._endRotationAngle = value;
          this.cleanUpGeometry();
        }
      }
      return value;
    },
    hitTest: function(pntTest) {
      var tempPoints = new Array(1);
      tempPoints[0] = Vector2d.create(pntTest.x, pntTest.y);
      var mat = Matrix2d.rotateAt(-this.get_rotationAngle() / 180 * Math.PI, Vector2d.create(this.get_x(), this.get_y()));
      mat._transformPoints(tempPoints);
      var rect = Rectangle.create((this.get_x() - (this.get_width() / 2)), (this.get_y() - (this.get_height() / 2)), this.get_width(), this.get_height());
      return rect.contains(tempPoints[0]);
    },
    get_bounds: function() {
      return this._bounds;
    },
    set_bounds: function(value) {
      this._bounds = value;
      return value;
    },
    get_interpolationType: function() {
      return this._interpolationType;
    },
    set_interpolationType: function(value) {
      this._interpolationType = value;
      return value;
    },
    saveToXml: function(xmlWriter, saveKeys) {
      xmlWriter._writeStartElement('Overlay');
      xmlWriter._writeAttributeString('Id', this.id);
      xmlWriter._writeAttributeString('Type', this.getTypeName());
      xmlWriter._writeAttributeString('Name', this.get_name());
      xmlWriter._writeAttributeString('X', this._x.toString());
      xmlWriter._writeAttributeString('Y', this._y.toString());
      xmlWriter._writeAttributeString('Width', this._width.toString());
      xmlWriter._writeAttributeString('Height', this._height.toString());
      xmlWriter._writeAttributeString('Rotation', this._rotationAngle.toString());
      xmlWriter._writeAttributeString('Color', this._color.save());
      xmlWriter._writeAttributeString('Url', this._url);
      xmlWriter._writeAttributeString('LinkID', this._linkID);
      xmlWriter._writeAttributeString('Animate', this._animate.toString());
      if (this._animate) {
        xmlWriter._writeAttributeString('EndX', this._endX.toString());
        xmlWriter._writeAttributeString('EndY', this._endY.toString());
        xmlWriter._writeAttributeString('EndWidth', this._endWidth.toString());
        xmlWriter._writeAttributeString('EndHeight', this._endHeight.toString());
        xmlWriter._writeAttributeString('EndRotation', this._endRotationAngle.toString());
        xmlWriter._writeAttributeString('EndColor', this._endColor.save());
        xmlWriter._writeAttributeString('InterpolationType', Enums.toXml('InterpolationType', this._interpolationType));
      }
      xmlWriter._writeAttributeString('Anchor', Enums.toXml('OverlayAnchor', this._anchor));
      this.writeOverlayProperties(xmlWriter);
      xmlWriter._writeEndElement();
    },
    getTypeName: function() {
      return 'TerraViewer.Overlay';
    },
    addFilesToCabinet: function(fc) {
    },
    writeOverlayProperties: function(xmlWriter) {
    },
    _initOverlayFromXml: function(node) {
      this.id = node.attributes.getNamedItem('Id').nodeValue;
      this.set_name(node.attributes.getNamedItem('Name').nodeValue);
      this._x = parseFloat(node.attributes.getNamedItem('X').nodeValue);
      this._y = parseFloat(node.attributes.getNamedItem('Y').nodeValue);
      this._width = parseFloat(node.attributes.getNamedItem('Width').nodeValue);
      this._height = parseFloat(node.attributes.getNamedItem('Height').nodeValue);
      this._rotationAngle = parseFloat(node.attributes.getNamedItem('Rotation').nodeValue);
      this._color = Color.load(node.attributes.getNamedItem('Color').nodeValue);
      if (node.attributes.getNamedItem('Url') != null) {
        this.set_url(node.attributes.getNamedItem('Url').nodeValue);
      }
      if (node.attributes.getNamedItem('LinkID') != null) {
        this.set_linkID(node.attributes.getNamedItem('LinkID').nodeValue);
      }
      if (node.attributes.getNamedItem('Animate') != null) {
        this._animate = ss.boolean(node.attributes.getNamedItem('Animate').nodeValue);
        if (this._animate) {
          this._endX = parseFloat(node.attributes.getNamedItem('EndX').nodeValue);
          this._endY = parseFloat(node.attributes.getNamedItem('EndY').nodeValue);
          this._endColor = Color.load(node.attributes.getNamedItem('EndColor').nodeValue);
          this._endWidth = parseFloat(node.attributes.getNamedItem('EndWidth').nodeValue);
          this._endHeight = parseFloat(node.attributes.getNamedItem('EndHeight').nodeValue);
          this._endRotationAngle = parseFloat(node.attributes.getNamedItem('EndRotation').nodeValue);
          if (node.attributes.getNamedItem('InterpolationType') != null) {
            this.set_interpolationType(Enums.parse('InterpolationType', node.attributes.getNamedItem('InterpolationType').nodeValue));
          }
        }
      }
      this.initializeFromXml(node);
    },
    initializeFromXml: function(node) {
    },
    toString: function() {
      return this.get_name();
    }
  };


  // wwtlib.Selection

  function Selection() {
    this._singleSelectHandles = null;
    this._multiSelectHandles = null;
    this._focusHandles = null;
    this.selectionSet = [];
    this._focus = null;
    this._ratio = 1;
    this._sprite = new Sprite2d();
    this._centerX = 0;
    this._centerY = 0;
  }
  var Selection$ = {
    clearSelection: function() {
      this.selectionSet.length = 0;
    },
    addSelection: function(overlay) {
      if (overlay != null) {
        if (!(this.selectionSet.indexOf(overlay) >= 0)) {
          this.selectionSet.push(overlay);
        }
      }
    },
    addSelectionRange: function(overlays) {
      var $enum1 = ss.enumerate(overlays);
      while ($enum1.moveNext()) {
        var ov = $enum1.current;
        this.selectionSet.push(ov);
      }
    },
    isOverlaySelected: function(overlay) {
      return (this.selectionSet.indexOf(overlay) >= 0);
    },
    setSelection: function(overlay) {
      this.selectionSet.length = 0;
      if (overlay != null) {
        this.selectionSet.push(overlay);
      }
    },
    get_multiSelect: function() {
      return this.selectionSet.length > 1;
    },
    setSelectionRange: function(overlays) {
      this.selectionSet.length = 0;
      var $enum1 = ss.enumerate(overlays);
      while ($enum1.moveNext()) {
        var ov = $enum1.current;
        this.selectionSet.push(ov);
      }
    },
    get_focus: function() {
      return this._focus;
    },
    set_focus: function(value) {
      this._focus = value;
      return value;
    },
    draw3D: function(renderContext, transparancy) {
      this._ratio = 1116 / renderContext.height;
      if (this._singleSelectHandles == null) {
        this._singleSelectHandles = Texture.fromUrl('images/Selhand.bmp');
      }
      if (this._multiSelectHandles == null) {
        this._multiSelectHandles = Texture.fromUrl('images/multiSelhand.bmp');
      }
      if (this._focusHandles == null) {
        this._focusHandles = Texture.fromUrl('images/FocusHandles.png');
      }
      if (this.selectionSet.length > 1) {
        var $enum1 = ss.enumerate(this.selectionSet);
        while ($enum1.moveNext()) {
          var overlay = $enum1.current;
          if (overlay === this._focus) {
            this._drawSelectionHandles(renderContext, overlay, this._focusHandles);
          }
          else {
            this._drawSelectionHandles(renderContext, overlay, this._multiSelectHandles);
          }
        }
      }
      else {
        var $enum2 = ss.enumerate(this.selectionSet);
        while ($enum2.moveNext()) {
          var overlay = $enum2.current;
          this._drawSelectionHandles(renderContext, overlay, this._singleSelectHandles);
        }
      }
    },
    _drawSelectionHandles: function(renderContext, overlay, handleTexture) {
      var handles = this.makeHandles(overlay);
      var angle = overlay.get_rotationAngle();
      var i = 0;
      var j = 0;
      var $enum1 = ss.enumerate(handles);
      while ($enum1.moveNext()) {
        var handle = $enum1.current;
        Selection._points[i + 0] = new PositionColoredTextured();
        Selection._points[i + 0].position = overlay.makePosition(this._centerX, this._centerY, handle.get_left() - this._centerX, handle.get_top() - this._centerY, angle);
        Selection._points[i + 0].tu = j * (1 / 9);
        Selection._points[i + 0].tv = 0;
        Selection._points[i + 0].color = Colors.get_white();
        Selection._points[i + 1] = new PositionColoredTextured();
        Selection._points[i + 1].position = overlay.makePosition(this._centerX, this._centerY, handle.get_right() - this._centerX, handle.get_top() - this._centerY, angle);
        Selection._points[i + 1].tu = (j + 1) * (1 / 9);
        Selection._points[i + 1].tv = 0;
        Selection._points[i + 1].color = Colors.get_white();
        Selection._points[i + 2] = new PositionColoredTextured();
        Selection._points[i + 2].position = overlay.makePosition(this._centerX, this._centerY, handle.get_left() - this._centerX, handle.get_bottom() - this._centerY, angle);
        Selection._points[i + 2].tu = j * (1 / 9);
        Selection._points[i + 2].tv = 1;
        Selection._points[i + 2].color = Colors.get_white();
        Selection._points[i + 3] = new PositionColoredTextured();
        Selection._points[i + 3].position = overlay.makePosition(this._centerX, this._centerY, handle.get_right() - this._centerX, handle.get_top() - this._centerY, angle);
        Selection._points[i + 3].tu = (j + 1) * (1 / 9);
        Selection._points[i + 3].tv = 0;
        Selection._points[i + 3].color = Colors.get_white();
        Selection._points[i + 4] = new PositionColoredTextured();
        Selection._points[i + 4].position = overlay.makePosition(this._centerX, this._centerY, handle.get_right() - this._centerX, handle.get_bottom() - this._centerY, angle);
        Selection._points[i + 4].tu = (j + 1) * (1 / 9);
        Selection._points[i + 4].tv = 1;
        Selection._points[i + 4].color = Colors.get_white();
        Selection._points[i + 5] = new PositionColoredTextured();
        Selection._points[i + 5].position = overlay.makePosition(this._centerX, this._centerY, handle.get_left() - this._centerX, handle.get_bottom() - this._centerY, angle);
        Selection._points[i + 5].tu = j * (1 / 9);
        Selection._points[i + 5].tv = 1;
        Selection._points[i + 5].color = Colors.get_white();
        i += 6;
        j++;
      }
      if (this.get_multiSelect()) {
        this._sprite.draw(renderContext, Selection._points, Selection._points.length - 6, handleTexture, false, 1);
      }
      else {
        this._sprite.draw(renderContext, Selection._points, Selection._points.length, handleTexture, false, 1);
      }
    },
    pointToSelectionSpace: function(pntIn) {
      var tempPoints = new Array(1);
      tempPoints[0] = Vector2d.create(pntIn.x, pntIn.y);
      var mat = Matrix2d.rotateAt(-this.selectionSet[0].get_rotationAngle() / 180 * Math.PI, Vector2d.create(this.selectionSet[0].get_x(), this.selectionSet[0].get_y()));
      mat._transformPoints(tempPoints);
      return tempPoints[0];
    },
    pointToScreenSpace: function(pntIn) {
      var tempPoints = new Array(1);
      tempPoints[0] = Vector2d.create(pntIn.x, pntIn.y);
      var mat = Matrix2d.rotateAt(this.selectionSet[0].get_rotationAngle() / 180 * Math.PI, Vector2d.create(this.selectionSet[0].get_x(), this.selectionSet[0].get_y()));
      mat._transformPoints(tempPoints);
      return tempPoints[0];
    },
    hitTest: function(position) {
      if (this.selectionSet.length === 1) {
        var $enum1 = ss.enumerate(this.selectionSet);
        while ($enum1.moveNext()) {
          var overlay = $enum1.current;
          var handles = this.makeHandles(overlay);
          var index = 0;
          var testPoint = this.pointToSelectionSpace(position);
          var $enum2 = ss.enumerate(handles);
          while ($enum2.moveNext()) {
            var rectf = $enum2.current;
            if (rectf.contains(testPoint)) {
              return index;
            }
            index++;
          }
        }
      }
      return 11;
    },
    makeHandles: function(overlay) {
      var x = ss.truncate((overlay.get_x() - (overlay.get_width() / 2))) + 0.5;
      var y = (ss.truncate(overlay.get_y()) - (overlay.get_height() / 2)) + 0.5;
      this._centerX = overlay.get_x();
      this._centerY = overlay.get_y();
      var width = overlay.get_width();
      var height = overlay.get_height();
      var handleSize = 12 * this._ratio;
      var handles = new Array(9);
      handles[0] = Rectangle.create(x - handleSize, y - handleSize, handleSize, handleSize);
      handles[1] = Rectangle.create((x + (width / 2)) - (handleSize / 2), y - handleSize, handleSize, handleSize);
      handles[2] = Rectangle.create(x + width, y - handleSize, handleSize, handleSize);
      handles[3] = Rectangle.create(x + width, (y + (height / 2)) - (handleSize / 2), handleSize, handleSize);
      handles[4] = Rectangle.create(x + width, (y + height), handleSize, handleSize);
      handles[5] = Rectangle.create((x + (width / 2)) - (handleSize / 2), (y + height), handleSize, handleSize);
      handles[6] = Rectangle.create(x - handleSize, (y + height), handleSize, handleSize);
      handles[7] = Rectangle.create(x - handleSize, (y + (height / 2)) - (handleSize / 2), handleSize, handleSize);
      handles[8] = Rectangle.create((x + (width / 2)) - (handleSize / 2), y - 30 * this._ratio, handleSize, handleSize);
      return handles;
    }
  };


  // wwtlib.TextObject

  function TextObject() {
    this.bold = false;
    this.italic = false;
    this.underline = false;
    this.fontSize = 0;
    this.borderStyle = 0;
  }
  TextObject.create = function(text, bold, italic, underline, fontSize, fontName, forgroundColor, backgroundColor, borderStyle) {
    var temp = new TextObject();
    temp.text = text;
    temp.bold = bold;
    temp.italic = italic;
    temp.underline = underline;
    temp.fontSize = fontSize;
    temp.fontName = fontName;
    temp.foregroundColor = forgroundColor;
    temp.backgroundColor = backgroundColor;
    temp.borderStyle = borderStyle;
    return temp;
  };
  TextObject._fromXml = function(node) {
    var newTextObject = new TextObject();
    newTextObject.text = Util.getInnerText(node);
    newTextObject.borderStyle = 0;
    newTextObject.bold = ss.boolean(node.attributes.getNamedItem('Bold').nodeValue);
    newTextObject.italic = ss.boolean(node.attributes.getNamedItem('Italic').nodeValue);
    newTextObject.underline = ss.boolean(node.attributes.getNamedItem('Underline').nodeValue);
    newTextObject.fontSize = parseFloat(node.attributes.getNamedItem('FontSize').nodeValue);
    newTextObject.fontName = node.attributes.getNamedItem('FontName').nodeValue;
    newTextObject.foregroundColor = Color.load(node.attributes.getNamedItem('ForgroundColor').nodeValue);
    newTextObject.backgroundColor = Color.load(node.attributes.getNamedItem('BackgroundColor').nodeValue);
    if (node.attributes.getNamedItem('BorderStyle') != null) {
      newTextObject.borderStyle = Enums.parse('TextBorderStyle', node.attributes.getNamedItem('BorderStyle').nodeValue);
    }
    return newTextObject;
  };
  var TextObject$ = {
    toString: function() {
      return this.text;
    },
    _saveToXml: function(xmlWriter) {
      xmlWriter._writeStartElement('TextObject');
      xmlWriter._writeAttributeString('Bold', this.bold.toString());
      xmlWriter._writeAttributeString('Italic', this.italic.toString());
      xmlWriter._writeAttributeString('Underline', this.underline.toString());
      xmlWriter._writeAttributeString('FontSize', this.fontSize.toString());
      xmlWriter._writeAttributeString('FontName', this.fontName);
      xmlWriter._writeAttributeString('ForgroundColor', this.foregroundColor.save());
      xmlWriter._writeAttributeString('BackgroundColor', this.backgroundColor.save());
      xmlWriter._writeAttributeString('BorderStyle', Enums.toXml('TextBorderStyle', this.borderStyle));
      xmlWriter._writeString(this.text);
      xmlWriter._writeEndElement();
    }
  };


  // wwtlib.TourDocument

  function TourDocument() {
    this._tourDirty = 0;
    this._workingDirectory = '';
    this.url = '';
    this._tagId = '';
    this._representativeThumbnailTourstop = 0;
    this._id = '';
    this._title = '';
    this._runTime = 0;
    this._lastDirtyCheck = 0;
    this._description = '';
    this._attributesAndCredits = '';
    this._authorEmailOther = '';
    this._authorEmail = '';
    this._authorUrl = '';
    this._authorPhone = '';
    this._authorContactText = '';
    this._orgName = 'None';
    this._orgUrl = '';
    this._author = '';
    this._authorImageUrl = '';
    this._authorImage = null;
    this._organizationUrl = '';
    this._filename = '';
    this._level = 0;
    this._type = 268435456;
    this._taxonomy = '';
    this._keywords = '';
    this._objects = '';
    this._editMode = false;
    this.explicitTourLinks = [];
    this.implicitTourLinks = [];
    this._tourStops = [];
    this._currentTourstopIndex = -1;
    this._textureList = {};
    this._textureList2d = {};
    this._fileCache = {};
    this.dontCleanUpTempFiles = false;
    this._id = Guid.newGuid().toString();
  }
  TourDocument.get_baseWorkingDirectory = function() {
    return '';
  };
  TourDocument.fromUrl = function(url, callMe) {
    var temp = new TourDocument();
    temp.url = url;
    temp._callMe = callMe;
    temp._cabinet = FileCabinet.fromUrl(url, ss.bind('_loadXmlDocument', temp));
    return temp;
  };
  TourDocument.fromUrlRaw = function(url, callMe) {
    var temp = new TourDocument();
    temp.url = url;
    temp._callMe = callMe;
    temp._cabinet = FileCabinet.fromUrl(url, callMe);
    return temp;
  };
  var TourDocument$ = {
    get_tourDirty: function() {
      return this._tourDirty > 0;
    },
    set_tourDirty: function(value) {
      if (value) {
        this._tourDirty++;
      }
      else {
        this._tourDirty = 0;
      }
      return value;
    },
    get_workingDirectory: function() {
      if (ss.emptyString(this._workingDirectory)) {
        this._workingDirectory = TourDocument.get_baseWorkingDirectory() + this._id + '\\';
      }
      return this._workingDirectory;
    },
    set_workingDirectory: function(value) {
      this._workingDirectory = value;
      return value;
    },
    _loadXmlDocument: function() {
      var $this = this;

      var master = this._cabinet.get_masterFile();
      var doc = new FileReader();
      doc.onloadend = function(ee) {
        var data = ss.safeCast(doc.result, String);
        var xParser = new DOMParser();
        $this.fromXml(xParser.parseFromString(data, 'text/xml'));
        $this._callMe();
      };
      doc.readAsText(this._cabinet.getFileBlob(master));
    },
    fromXml: function(doc) {
      var root = Util.selectSingleNode(doc, 'Tour');
      this._id = root.attributes.getNamedItem('ID').nodeValue;
      this.set_title(root.attributes.getNamedItem('Title').nodeValue);
      this.set_author(root.attributes.getNamedItem('Author').nodeValue);
      if (root.attributes.getNamedItem('Descirption') != null) {
        this.set_description(root.attributes.getNamedItem('Descirption').nodeValue);
      }
      if (root.attributes.getNamedItem('AuthorEmail') != null) {
        this._authorEmail = root.attributes.getNamedItem('AuthorEmail').nodeValue;
      }
      if (root.attributes.getNamedItem('Keywords') != null) {
        this.set_keywords(root.attributes.getNamedItem('Keywords').nodeValue);
      }
      if (root.attributes.getNamedItem('OrganizationName') != null) {
        this.set_orgName(root.attributes.getNamedItem('OrganizationName').nodeValue);
      }
      this._organizationUrl = root.attributes.getNamedItem('OrganizationUrl').nodeValue;
      this._level = Enums.parse('UserLevel', root.attributes.getNamedItem('UserLevel').nodeValue);
      this._type = Enums.parse('Classification', root.attributes.getNamedItem('Classification').nodeValue);
      this._taxonomy = root.attributes.getNamedItem('Taxonomy').nodeValue;
      var TourStops = Util.selectSingleNode(root, 'TourStops');
      var $enum1 = ss.enumerate(TourStops.childNodes);
      while ($enum1.moveNext()) {
        var tourStop = $enum1.current;
        if (tourStop.nodeName === 'TourStop') {
          this.addTourStop(TourStop._fromXml(this, tourStop));
        }
      }
      var Frames = Util.selectSingleNode(root, 'ReferenceFrames');
      if (Frames != null) {
        var $enum2 = ss.enumerate(Frames.childNodes);
        while ($enum2.moveNext()) {
          var frame = $enum2.current;
          if (frame.nodeName === 'ReferenceFrame') {
            var newFrame = new ReferenceFrame();
            newFrame.initializeFromXml(frame);
            if (!ss.keyExists(LayerManager.get_allMaps(), newFrame.name)) {
              var map = new LayerMap(newFrame.name, 18);
              map.frame = newFrame;
              map.loadedFromTour = true;
              LayerManager.get_allMaps()[newFrame.name] = map;
            }
          }
        }
        LayerManager.connectAllChildren();
        LayerManager.loadTree();
      }
      var Layers = Util.selectSingleNode(root, 'Layers');
      if (Layers != null) {
        var $enum3 = ss.enumerate(Layers.childNodes);
        while ($enum3.moveNext()) {
          var layer = $enum3.current;
          if (layer.nodeName === 'Layer') {
            var newLayer = Layer.fromXml(layer, true);
            if (newLayer != null) {
              var fileName = ss.format('{0}.txt', newLayer.id.toString());
              if (ss.keyExists(LayerManager.get_layerList(), newLayer.id)) {
                LayerManager.deleteLayerByID(newLayer.id, true, false);
              }
              try {
                newLayer.loadedFromTour = true;
                newLayer.loadData(this, fileName);
                LayerManager.add(newLayer, false);
              }
              catch ($e4) {
              }
            }
          }
        }
        LayerManager.loadTree();
      }
      this._tourDirty = 0;
    },
    saveToDataUrl: function() {
      return URL.createObjectURL(this.saveToBlob());;
    },
    saveToBlob: function() {
      var excludeAudio = false;
      this.cleanUp();
      var tourXml = this.getTourXML();
      var fc = new FileCabinet();
      fc.set_packageID(this.get_id());
      fc.addFile('Tour.wwtxml', new Blob([ tourXml ]));
      if (this._authorImage != null) {
      }
      var $enum1 = ss.enumerate(this.get_tourStops());
      while ($enum1.moveNext()) {
        var stop = $enum1.current;
        stop._addFilesToCabinet(fc, excludeAudio);
      }
      var masterList = this._createLayerMasterList();
      var $enum2 = ss.enumerate(masterList);
      while ($enum2.moveNext()) {
        var id = $enum2.current;
        if (ss.keyExists(LayerManager.get_layerList(), id)) {
          LayerManager.get_layerList()[id].addFilesToCabinet(fc);
        }
      }
      this.set_tourDirty(false);
      return fc.packageFiles();
    },
    getTourXML: function() {
      var xmlWriter = new XmlTextWriter();
      xmlWriter.formatting = 1;
      xmlWriter._writeProcessingInstruction('xml', "version='1.0' encoding='UTF-8'");
      xmlWriter._writeStartElement('Tour');
      xmlWriter._writeAttributeString('ID', this._id);
      xmlWriter._writeAttributeString('Title', this._title);
      xmlWriter._writeAttributeString('Descirption', this.get_description());
      xmlWriter._writeAttributeString('Description', this.get_description());
      xmlWriter._writeAttributeString('RunTime', (this.get_runTime() / 1000).toString());
      xmlWriter._writeAttributeString('Author', this._author);
      xmlWriter._writeAttributeString('AuthorEmail', this._authorEmail);
      xmlWriter._writeAttributeString('OrganizationUrl', this._organizationUrl);
      xmlWriter._writeAttributeString('OrganizationName', this.get_orgName());
      xmlWriter._writeAttributeString('Keywords', this.get_keywords());
      xmlWriter._writeAttributeString('UserLevel', Enums.toXml('UserLevel', this._level));
      xmlWriter._writeAttributeString('Classification', Enums.toXml('Classification', this._type));
      xmlWriter._writeAttributeString('Taxonomy', this._taxonomy);
      var timeLineTour = this._isTimelineTour();
      xmlWriter._writeAttributeString('TimeLineTour', timeLineTour.toString());
      xmlWriter._writeStartElement('TourStops');
      var $enum1 = ss.enumerate(this.get_tourStops());
      while ($enum1.moveNext()) {
        var stop = $enum1.current;
        stop._saveToXml(xmlWriter, true);
      }
      xmlWriter._writeEndElement();
      var masterList = this._createLayerMasterList();
      var referencedFrames = this._getReferenceFrameList();
      xmlWriter._writeStartElement('ReferenceFrames');
      var $enum2 = ss.enumerate(referencedFrames);
      while ($enum2.moveNext()) {
        var item = $enum2.current;
        item.saveToXml(xmlWriter);
      }
      xmlWriter._writeEndElement();
      xmlWriter._writeStartElement('Layers');
      var $enum3 = ss.enumerate(masterList);
      while ($enum3.moveNext()) {
        var id = $enum3.current;
        if (ss.keyExists(LayerManager.get_layerList(), id)) {
          LayerManager.get_layerList()[id].saveToXml(xmlWriter);
        }
      }
      xmlWriter._writeEndElement();
      xmlWriter._writeFullEndElement();
      xmlWriter._close();
      return xmlWriter.body;
    },
    _getReferenceFrameList: function() {
      var list = [];
      var $enum1 = ss.enumerate(ss.keys(LayerManager.get_allMaps()));
      while ($enum1.moveNext()) {
        var key = $enum1.current;
        var lm = LayerManager.get_allMaps()[key];
        if ((lm.frame.reference === 18 || lm.frame.reference === 19) && !(list.indexOf(lm.frame) >= 0) && !lm.frame._systemGenerated) {
          list.push(lm.frame);
        }
      }
      return list;
    },
    _createLayerMasterList: function() {
      var masterList = [];
      var $enum1 = ss.enumerate(this.get_tourStops());
      while ($enum1.moveNext()) {
        var stop = $enum1.current;
        var $enum2 = ss.enumerate(ss.keys(stop.layers));
        while ($enum2.moveNext()) {
          var id = $enum2.current;
          if (!(masterList.indexOf(id) >= 0)) {
            if (ss.keyExists(LayerManager.get_layerList(), id)) {
              masterList.push(id);
            }
          }
        }
      }
      return masterList;
    },
    _isTimelineTour: function() {
      return false;
    },
    get_tagId: function() {
      return this._tagId;
    },
    set_tagId: function(value) {
      this._tagId = value;
      return value;
    },
    get_authorThumbnailFilename: function() {
      return 'Author.Png';
    },
    get_tourThumbnailFilename: function() {
      if (this._representativeThumbnailTourstop < this._tourStops.length) {
        return this._tourStops[this._representativeThumbnailTourstop].get_tourStopThumbnailFilename();
      }
      else {
        return null;
      }
    },
    get_id: function() {
      return this._id;
    },
    set_id: function(value) {
      this._id = value;
      return value;
    },
    get_title: function() {
      return this._title;
    },
    set_title: function(value) {
      this._title = value;
      this.set_tourDirty(true);
      return value;
    },
    get_runTime: function() {
      if (!this._runTime || this._lastDirtyCheck !== this._tourDirty) {
        this._runTime = this._calculateRunTime();
        this._lastDirtyCheck = this._tourDirty;
      }
      return this._runTime;
    },
    get_description: function() {
      return this._description;
    },
    set_description: function(value) {
      this._description = value;
      this.set_tourDirty(true);
      return value;
    },
    get_attributesAndCredits: function() {
      return this._attributesAndCredits;
    },
    set_attributesAndCredits: function(value) {
      this._attributesAndCredits = value;
      this.set_tourDirty(true);
      return value;
    },
    get_authorEmailOther: function() {
      return this._authorEmailOther;
    },
    set_authorEmailOther: function(value) {
      this._authorEmailOther = value;
      this.set_tourDirty(true);
      return value;
    },
    get_authorEmail: function() {
      return this._authorEmail;
    },
    set_authorEmail: function(value) {
      this._authorEmail = value;
      this.set_tourDirty(true);
      return value;
    },
    get_authorUrl: function() {
      return this._authorUrl;
    },
    set_authorUrl: function(value) {
      this._authorUrl = value;
      this.set_tourDirty(true);
      return value;
    },
    get_authorPhone: function() {
      return this._authorPhone;
    },
    set_authorPhone: function(value) {
      this._authorPhone = value;
      this.set_tourDirty(true);
      return value;
    },
    get_authorContactText: function() {
      return this._authorContactText;
    },
    set_authorContactText: function(value) {
      this._authorContactText = value;
      this.set_tourDirty(true);
      return value;
    },
    get_orgName: function() {
      return this._orgName;
    },
    set_orgName: function(value) {
      this._orgName = value;
      this.set_tourDirty(true);
      return value;
    },
    get_orgUrl: function() {
      return this._orgUrl;
    },
    set_orgUrl: function(value) {
      this._orgUrl = value;
      this.set_tourDirty(true);
      return value;
    },
    get_author: function() {
      return this._author;
    },
    set_author: function(value) {
      this._author = value;
      this.set_tourDirty(true);
      return value;
    },
    get_authorImageUrl: function() {
      return this._authorImageUrl;
    },
    set_authorImageUrl: function(value) {
      this._authorImageUrl = value;
      this.set_tourDirty(true);
      return value;
    },
    get_authorImage: function() {
      return this._authorImage;
    },
    set_authorImage: function(value) {
      this._authorImage = value;
      this.set_tourDirty(true);
      return value;
    },
    get_organizationUrl: function() {
      return this._organizationUrl;
    },
    set_organizationUrl: function(value) {
      this._organizationUrl = value;
      this.set_tourDirty(true);
      return value;
    },
    get_fileName: function() {
      return this._filename;
    },
    set_fileName: function(value) {
      this._filename = value;
      return value;
    },
    get_level: function() {
      return this._level;
    },
    set_level: function(value) {
      this._level = value;
      this.set_tourDirty(true);
      return value;
    },
    get_type: function() {
      return this._type;
    },
    set_type: function(value) {
      this._type = value;
      this.set_tourDirty(true);
      return value;
    },
    get_taxonomy: function() {
      return this._taxonomy;
    },
    set_taxonomy: function(value) {
      this._taxonomy = value;
      this.set_tourDirty(true);
      return value;
    },
    get_keywords: function() {
      return this._keywords;
    },
    set_keywords: function(value) {
      this._keywords = value;
      this.set_tourDirty(true);
      return value;
    },
    get_objects: function() {
      return this._objects;
    },
    set_objects: function(value) {
      this._objects = value;
      this.set_tourDirty(true);
      return value;
    },
    get_editMode: function() {
      return this._editMode;
    },
    set_editMode: function(value) {
      this._editMode = value;
      return value;
    },
    get_tourStops: function() {
      return this._tourStops;
    },
    set_tourStops: function(value) {
      this._tourStops = value;
      return value;
    },
    get_currentTourstopIndex: function() {
      return this._currentTourstopIndex;
    },
    set_currentTourstopIndex: function(value) {
      this._currentTourstopIndex = value;
      return value;
    },
    addTourStop: function(ts) {
      ts.set_owner(this);
      this.get_tourStops().push(ts);
      this._currentTourstopIndex = this._tourStops.length - 1;
      this.set_tourDirty(true);
    },
    insertTourStop: function(ts) {
      ts.set_owner(this);
      if (this._currentTourstopIndex > -1) {
        this.get_tourStops().splice(this._currentTourstopIndex, 0, ts);
      }
      else {
        this.get_tourStops().push(ts);
        this._currentTourstopIndex = this._tourStops.length - 1;
      }
      this.set_tourDirty(true);
    },
    insertAfterTourStop: function(ts) {
      ts.set_owner(this);
      if (this._currentTourstopIndex > -1 || this._currentTourstopIndex < this.get_tourStops().length) {
        this.get_tourStops().splice(this._currentTourstopIndex + 1, 0, ts);
      }
      else {
        this.get_tourStops().push(ts);
        this._currentTourstopIndex = this._tourStops.length - 1;
      }
      this.set_tourDirty(true);
    },
    removeTourStop: function(ts) {
      ss.remove(this._tourStops, ts);
      if (this._currentTourstopIndex > this._tourStops.length - 1) {
        this._currentTourstopIndex--;
      }
      this.set_tourDirty(true);
    },
    _calculateRunTime: function() {
      var totalTime = 0;
      for (var i = 0; i < this._tourStops.length; i++) {
        totalTime += this._tourStops[i].get_duration();
        if (i > 0) {
          switch (this._tourStops[i].get__transition()) {
            case 0:
              if (this._tourStops[i].get_target().get_backgroundImageset() == null || (this._tourStops[i - 1].get_target().get_backgroundImageset().get_dataSetType() === this._tourStops[i].get_target().get_backgroundImageset().get_dataSetType() && ((this._tourStops[i - 1].get_target().get_backgroundImageset().get_dataSetType() !== 4) || (this._tourStops[i - 1].get_target().get_target() === this._tourStops[i].get_target().get_target())))) {
                var start = (this._tourStops[i - 1].get_endTarget() == null) ? this._tourStops[i - 1].get_target().get_camParams() : this._tourStops[i - 1].get_endTarget().get_camParams();
                var slew = ViewMoverSlew.create(start, this._tourStops[i].get_target().get_camParams());
                totalTime += slew.get_moveTime() * 1000;
              }
              break;
            case 2:
              break;
            case 1:
              break;
            case 5:
              break;
            default:
              break;
          }
        }
      }
      return ss.truncate(totalTime);
    },
    elapsedTimeTillTourstop: function(index) {
      if (!index && index >= this._tourStops.length) {
        return 0;
      }
      var totalTime = 0;
      for (var i = 0; i < index; i++) {
        totalTime += this._tourStops[i].get_duration();
        if (i > 0) {
          switch (this._tourStops[i].get__transition()) {
            case 0:
              var start = (this._tourStops[i - 1].get_endTarget() == null) ? this._tourStops[i - 1].get_target().get_camParams() : this._tourStops[i - 1].get_endTarget().get_camParams();
              if (this._tourStops[i - 1].get_target().get_backgroundImageset().get_dataSetType() === this._tourStops[i].get_target().get_backgroundImageset().get_dataSetType() && ((this._tourStops[i - 1].get_target().get_backgroundImageset().get_dataSetType() !== 4) || (this._tourStops[i - 1].get_target().get_target() === this._tourStops[i].get_target().get_target()))) {
                var slew = ViewMoverSlew.create(start, this._tourStops[i].get_target().get_camParams());
                totalTime += slew.get_moveTime() * 1000;
              }
              break;
            case 2:
              break;
            case 1:
              break;
            case 5:
              break;
            default:
              break;
          }
        }
      }
      return totalTime / 1000;
    },
    elapsedTimeSinceLastMaster: function(index) {
      var masterOut = null;
      if (!index && index >= this._tourStops.length) {
        return null;
      }
      var totalTime = 0;
      for (var i = 0; i < index; i++) {
        if (this._tourStops[i].get_masterSlide()) {
          totalTime = 0;
          masterOut = this._tourStops[i];
        }
        totalTime += this._tourStops[i].get_duration();
        if (i > 0) {
          switch (this._tourStops[i].get__transition()) {
            case 0:
              var start = (this._tourStops[i - 1].get_endTarget() == null) ? this._tourStops[i - 1].get_target().get_camParams() : this._tourStops[i - 1].get_endTarget().get_camParams();
              if (this._tourStops[i - 1].get_target().get_backgroundImageset().get_dataSetType() === this._tourStops[i].get_target().get_backgroundImageset().get_dataSetType() && ((this._tourStops[i - 1].get_target().get_backgroundImageset().get_dataSetType() !== 4) || (this._tourStops[i - 1].get_target().get_target() === this._tourStops[i].get_target().get_target()))) {
                var slew = ViewMoverSlew.create(start, this._tourStops[i].get_target().get_camParams());
                totalTime += slew.get_moveTime() * 1000;
              }
              break;
            case 2:
              break;
            case 1:
              break;
            case 5:
              break;
            default:
              break;
          }
        }
      }
      return new MasterTime(masterOut, totalTime / 1000);
    },
    getMasterSlideForIndex: function(index) {
      var master = -1;
      for (var i = 0; i < index; i++) {
        if (this._tourStops[i].get_masterSlide()) {
          master = i;
        }
      }
      if (master === -1) {
        return null;
      }
      return this._tourStops[master];
    },
    getTourStopIndexByID: function(id) {
      if (!id || id === 'Next') {
        return this._currentTourstopIndex++;
      }
      var index = 0;
      var $enum1 = ss.enumerate(this._tourStops);
      while ($enum1.moveNext()) {
        var stop = $enum1.current;
        if (stop.get_id() === id) {
          return index;
        }
        index++;
      }
      return -1;
    },
    cleanUp: function() {
    },
    getCachedTexture: function(filename, callMe) {
      if (this._textureList == null) {
        this._textureList = {};
      }
      if (ss.keyExists(this._textureList, filename)) {
        callMe();
        return this._textureList[filename];
      }
      var url = this.getFileStream(filename);
      if (!ss.whitespace(url)) {
        var texture = document.createElement('img');
        texture.src = this.getFileStream(filename);
        texture.addEventListener('load', function() {
          callMe();
        }, false);
        this._textureList[filename] = texture;
        return texture;
      }
      else {
        return null;
      }
    },
    getCachedTexture2d: function(filename) {
      if (this._textureList2d == null) {
        this._textureList2d = {};
      }
      if (ss.keyExists(this._textureList2d, filename)) {
        return this._textureList2d[filename];
      }
      var texture = new Texture();
      texture.load(this.getFileStream(filename));
      this._textureList2d[filename] = texture;
      return texture;
    },
    addCachedFile: function(filename, file) {
      this._fileCache[filename] = file;
      if (ss.keyExists(this._textureList2d, filename)) {
        delete this._textureList2d[filename];
      }
      if (ss.keyExists(this._textureList, filename)) {
        delete this._textureList[filename];
      }
    },
    getFileStream: function(filename) {
      var blob = this.getFileBlob(filename);
      if (blob == null) {
        return null;
      }
      return URL.createObjectURL(blob);;
    },
    getFileBlob: function(filename) {
      if (ss.keyExists(this._fileCache, filename)) {
        return this._fileCache[filename];
      }
      else if (this._cabinet != null) {
        return this._cabinet.getFileBlob(this.get_workingDirectory() + filename);
      }
      else {
        return null;
      }
    },
    get_currentTourStop: function() {
      if (this._currentTourstopIndex > -1) {
        return this.get_tourStops()[this._currentTourstopIndex];
      }
      else {
        return null;
      }
    },
    set_currentTourStop: function(value) {
      var i = 0;
      var $enum1 = ss.enumerate(this.get_tourStops());
      while ($enum1.moveNext()) {
        var stop = $enum1.current;
        if (stop === value) {
          if (this._currentTourstopIndex > -1) {
          }
          this._currentTourstopIndex = i;
          break;
        }
        i++;
      }
      return value;
    },
    clearTempFiles: function() {
    }
  };


  // wwtlib.TourEditTab

  function TourEditTab() {
    this.musicTrack = new SoundEditor();
    this.voiceTrack = new SoundEditor();
    this._tour = null;
    this.tourStopList = new TourStopList();
    this.tourEditorUI = new TourEditor();
    this._contextMenu = new ContextMenuStrip();
    this.nextSlideCallback = null;
    this.playing = false;
    this._player = null;
    this._defultColor = Colors.get_white();
  }
  var TourEditTab$ = {
    setUiStrings: function() {
    },
    get_tour: function() {
      return this._tour;
    },
    set_tour: function(value) {
      this._tour = value;
      this.tourEditorUI.set_tour(this._tour);
      this.tourStopList.tour = this._tour;
      Overlay.defaultAnchor = 1;
      if (this._tour.get_tourStops().length > 0) {
        WWTControl.singleton.gotoTarget(this._tour.get_tourStops()[0].get_target(), false, true, false);
        this._tour.set_currentTourstopIndex(0);
        this.tourStopList.selectedItem = this._tour.get_currentTourstopIndex();
        this.musicTrack.target = this._tour.get_currentTourStop();
        this.voiceTrack.target = this._tour.get_currentTourStop();
        LayerManager.setVisibleLayerList(this._tour.get_currentTourStop().layers);
      }
      this.setEditMode(this._tour.get_editMode());
      return value;
    },
    tour_CurrentTourstopChanged: function() {
      OverlayList._updateOverlayList(this._tour.get_currentTourStop(), this.tourEditorUI.selection);
      if (this.tourEditorUI != null) {
        this.tourEditorUI.clearSelection();
      }
      this.tourStopList.refresh();
    },
    setFocusedChild: function() {
    },
    selectCurrent: function() {
      this.tourStopList.selectedItem = this._tour.get_currentTourstopIndex();
      this.tourStopList.refresh();
    },
    tourEdit_Load: function(sender, e) {
    },
    playNow: function(fromStart) {
      this.playing = true;
      if (this.get_tour().get_editMode() || fromStart) {
        this.get_tour().set_currentTourstopIndex(-1);
      }
      this.setPlayPauseMode();
    },
    _tourPlayer_TourEnded: function(sender, e) {
    },
    _endTour_CloseTour: function(sender, e) {
    },
    _endTour_LaunchTour: function(sender, e) {
      this.playNow(true);
    },
    setEditMode: function(visible) {
    },
    tourStopList_ItemClicked: function(sender, e) {
      if (this._tour.get_currentTourStop() !== e) {
        this._tour.set_currentTourStop(e);
        if (e != null) {
          this.musicTrack.target = this._tour.get_currentTourStop();
          this.voiceTrack.target = this._tour.get_currentTourStop();
        }
        else {
          this.musicTrack.target = null;
          this.voiceTrack.target = null;
        }
        this.tourEditorUI.clearSelection();
      }
      if (this.playing) {
        this._playFromHere_Click(sender, new ss.EventArgs());
      }
    },
    tourStopList_ItemDoubleClicked: function(sender, e) {
      this.showSlideStartPosition(e);
    },
    showSlideStartPosition: function(ts) {
      this._tour.set_currentTourStop(ts);
      if (ts != null) {
        this.musicTrack.target = this._tour.get_currentTourStop();
        this.voiceTrack.target = this._tour.get_currentTourStop();
      }
      else {
        this.musicTrack.target = null;
        this.voiceTrack.target = null;
      }
      this.tourEditorUI.clearSelection();
      if (this._tour.get_currentTourStop() != null) {
        this._tour.get_currentTourStop().syncSettings();
        SpaceTimeController.set_now(this._tour.get_currentTourStop().get_startTime());
        SpaceTimeController.set_syncToClock(false);
        WWTControl.singleton.gotoTarget(ts.get_target(), false, true, false);
        this._tour.get_currentTourStop().set_tweenPosition(0);
        this._tour.get_currentTourStop()._updateLayerOpacity();
        LayerManager.setVisibleLayerList(this._tour.get_currentTourStop().layers);
      }
    },
    tourStopList_MouseClick: function(sender, e) {
      if (!this._tour.get_editMode()) {
      }
      if (this.tourStopList.multipleSelection) {
        if (this._contextMenu != null) {
          this._contextMenu._dispose();
        }
        this._contextMenu = new ContextMenuStrip();
        var selectAllMenu = ToolStripMenuItem.create(Language.getLocalizedText(1345, 'Select All'));
        var cutMenu = ToolStripMenuItem.create(Language.getLocalizedText(427, 'Cut'));
        var copyMenu = ToolStripMenuItem.create(Language.getLocalizedText(428, 'Copy'));
        var pasteMenu = ToolStripMenuItem.create(Language.getLocalizedText(429, 'Paste'));
        var deleteMenu = ToolStripMenuItem.create(Language.getLocalizedText(167, 'Delete'));
        cutMenu.click = ss.bind('_cutMenu_Click', this);
        copyMenu.click = ss.bind('_copyMenu_Click', this);
        pasteMenu.click = ss.bind('_pasteMenu_Click', this);
        deleteMenu.click = ss.bind('_deleteMenu_Click', this);
        selectAllMenu.click = ss.bind('_selectAllMenu_Click', this);
        var sep1 = new ToolStripSeparator();
        this._contextMenu.items.push(selectAllMenu);
        this._contextMenu.items.push(sep1);
        this._contextMenu.items.push(cutMenu);
        this._contextMenu.items.push(copyMenu);
        pasteMenu.enabled = this.tourEditorUI.clipboardType === 'WorldWideTelescope.Slide';
        this._contextMenu.items.push(pasteMenu);
        this._contextMenu.items.push(deleteMenu);
        this._contextMenu._show(Cursor.get_position());
      }
      else if (this._tour.get_currentTourStop() == null) {
        if (this._contextMenu != null) {
          this._contextMenu._dispose();
        }
        this._contextMenu = new ContextMenuStrip();
        var selectAllMenu = ToolStripMenuItem.create(Language.getLocalizedText(1345, 'Select All'));
        var pasteMenu = ToolStripMenuItem.create(Language.getLocalizedText(425, 'Paste'));
        var sep1 = new ToolStripSeparator();
        var sep2 = new ToolStripSeparator();
        var insertSlide = ToolStripMenuItem.create(Language.getLocalizedText(426, 'Add New Slide'));
        pasteMenu.click = ss.bind('_pasteMenu_Click', this);
        selectAllMenu.click = ss.bind('_selectAllMenu_Click', this);
        insertSlide.click = ss.bind('_addNewSlide_Click', this);
        pasteMenu.enabled = this.tourEditorUI.clipboardType === 'WorldWideTelescope.Slide';
        this._contextMenu.items.push(selectAllMenu);
        this._contextMenu.items.push(sep1);
        this._contextMenu.items.push(pasteMenu);
        this._contextMenu.items.push(sep2);
        this._contextMenu.items.push(insertSlide);
        this._contextMenu._show(Cursor.get_position());
      }
      else {
        if (this._contextMenu != null) {
          this._contextMenu._dispose();
        }
        this._contextMenu = new ContextMenuStrip();
        var selectAllMenu = ToolStripMenuItem.create(Language.getLocalizedText(1345, 'Select All'));
        var cutMenu = ToolStripMenuItem.create(Language.getLocalizedText(427, 'Cut'));
        var copyMenu = ToolStripMenuItem.create(Language.getLocalizedText(428, 'Copy'));
        var pasteMenu = ToolStripMenuItem.create(Language.getLocalizedText(429, 'Paste'));
        var deleteMenu = ToolStripMenuItem.create(Language.getLocalizedText(167, 'Delete'));
        var sep1 = new ToolStripSeparator();
        var sep3 = new ToolStripSeparator();
        var sep4 = new ToolStripSeparator();
        var sep5 = new ToolStripSeparator();
        var sep6 = new ToolStripSeparator();
        var sep7 = new ToolStripSeparator();
        var insertSlide = ToolStripMenuItem.create(Language.getLocalizedText(431, 'Insert New Slide'));
        var insertDuplicate = ToolStripMenuItem.create(Language.getLocalizedText(627, 'Duplicate Slide at End Position'));
        var insertSlideshow = ToolStripMenuItem.create(Language.getLocalizedText(628, 'Merge Tour after slide...'));
        var playFromHere = ToolStripMenuItem.create(Language.getLocalizedText(432, 'Preview Tour From Here'));
        var sep2 = new ToolStripSeparator();
        var captureThumbnail = ToolStripMenuItem.create(Language.getLocalizedText(433, 'Capture New Thumbnail'));
        var setSkyPosition = ToolStripMenuItem.create(Language.getLocalizedText(434, 'Set Start Camera Position'));
        var setEndSkyPosition = ToolStripMenuItem.create(Language.getLocalizedText(435, 'Set End Camera Position'));
        var showSkyPosition = ToolStripMenuItem.create(Language.getLocalizedText(436, 'Show Start Camera Position'));
        var showEndSkyPosition = ToolStripMenuItem.create(Language.getLocalizedText(437, 'Show End Camera Position'));
        var masterSlide = ToolStripMenuItem.create(Language.getLocalizedText(438, 'Master Slide'));
        var makeTimeline = ToolStripMenuItem.create(Language.getLocalizedText(1346, 'Create Timeline'));
        var showTimeline = ToolStripMenuItem.create(Language.getLocalizedText(1347, 'Show Timeline'));
        var linkString = this._tour.get_currentTourStop().get_nextSlide();
        switch (linkString) {
          case '':
          case null:
          case 'Next':
            linkString = ' (' + Language.getLocalizedText(610, 'Next Slide') + ')';
            break;
          case 'Return':
            linkString = ' (' + Language.getLocalizedText(602, 'Return to Caller') + ')';
            break;
          default:
            var index = this.get_tour().getTourStopIndexByID(linkString);
            if (index > -1) {
              if (ss.emptyString(this._tour.get_tourStops()[index].get_description())) {
                linkString = ss.format(' (Slide {0})', index);
              }
              else {
                linkString = ' (' + this._tour.get_tourStops()[index].get_description() + ')';
              }
            }
            break;
        }
        var setNextSlide = ToolStripMenuItem.create(Language.getLocalizedText(590, 'Set Next Slide') + linkString);
        var trackSpaceTime = ToolStripMenuItem.create(Language.getLocalizedText(439, 'Track Date/Time/Location'));
        var fadeInOverlays = ToolStripMenuItem.create(Language.getLocalizedText(629, 'Fade In Slide Elements'));
        var properties = ToolStripMenuItem.create(Language.getLocalizedText(20, 'Properties'));
        var interpolation = ToolStripMenuItem.create(Language.getLocalizedText(1029, 'Animation Tween Type'));
        var Linear = ToolStripMenuItem.create(Language.getLocalizedText(1030, 'Linear'));
        var Ease = ToolStripMenuItem.create(Language.getLocalizedText(1031, 'Ease In/Out'));
        var EaseIn = ToolStripMenuItem.create(Language.getLocalizedText(1032, 'Ease In'));
        var EaseOut = ToolStripMenuItem.create(Language.getLocalizedText(1033, 'Ease Out'));
        var Exponential = ToolStripMenuItem.create(Language.getLocalizedText(1034, 'Exponential'));
        Linear.tag = 0;
        Ease.tag = 3;
        EaseIn.tag = 1;
        EaseOut.tag = 2;
        Exponential.tag = 4;
        Linear.click = ss.bind('_interpolation_Click', this);
        Ease.click = ss.bind('_interpolation_Click', this);
        EaseIn.click = ss.bind('_interpolation_Click', this);
        EaseOut.click = ss.bind('_interpolation_Click', this);
        Exponential.click = ss.bind('_interpolation_Click', this);
        switch (this._tour.get_currentTourStop().get_interpolationType()) {
          case 0:
            Linear.checked = true;
            break;
          case 1:
            EaseIn.checked = true;
            break;
          case 2:
            EaseOut.checked = true;
            break;
          case 3:
            Ease.checked = true;
            break;
          case 4:
            Exponential.checked = true;
            break;
          default:
            break;
        }
        interpolation.dropDownItems.push(Linear);
        interpolation.dropDownItems.push(Ease);
        interpolation.dropDownItems.push(EaseIn);
        interpolation.dropDownItems.push(EaseOut);
        interpolation.dropDownItems.push(Exponential);
        selectAllMenu.click = ss.bind('_selectAllMenu_Click', this);
        insertDuplicate.click = ss.bind('_insertDuplicate_Click', this);
        cutMenu.click = ss.bind('_cutMenu_Click', this);
        copyMenu.click = ss.bind('_copyMenu_Click', this);
        pasteMenu.click = ss.bind('_pasteMenu_Click', this);
        deleteMenu.click = ss.bind('_deleteMenu_Click', this);
        insertSlide.click = ss.bind('_insertNewSlide_Click', this);
        properties.click = ss.bind('_properties_Click', this);
        captureThumbnail.click = ss.bind('_captureThumbnail_Click', this);
        setSkyPosition.click = ss.bind('_setSkyPosition_Click', this);
        setEndSkyPosition.click = ss.bind('_setEndSkyPosition_Click', this);
        showEndSkyPosition.click = ss.bind('_showEndSkyPosition_Click', this);
        showSkyPosition.click = ss.bind('_showSkyPosition_Click', this);
        playFromHere.click = ss.bind('_playFromHere_Click', this);
        masterSlide.click = ss.bind('_masterSlide_Click', this);
        setNextSlide.click = ss.bind('_setNextSlide_Click', this);
        trackSpaceTime.click = ss.bind('_trackSpaceTime_Click', this);
        insertSlideshow.click = ss.bind('_insertSlideshow_Click', this);
        fadeInOverlays.click = ss.bind('_fadeInOverlays_Click', this);
        if (this._tour.get_currentTourStop().get_masterSlide()) {
          masterSlide.checked = true;
        }
        if (this._tour.get_currentTourStop().get_hasTime()) {
          trackSpaceTime.checked = true;
        }
        fadeInOverlays.checked = this._tour.get_currentTourStop().get_fadeInOverlays();
        this._contextMenu.items.push(selectAllMenu);
        this._contextMenu.items.push(sep7);
        this._contextMenu.items.push(cutMenu);
        this._contextMenu.items.push(copyMenu);
        pasteMenu.enabled = this.tourEditorUI.clipboardType === 'WorldWideTelescope.Slide';
        this._contextMenu.items.push(pasteMenu);
        this._contextMenu.items.push(deleteMenu);
        this._contextMenu.items.push(sep1);
        this._contextMenu.items.push(insertSlide);
        this._contextMenu.items.push(insertDuplicate);
        this._contextMenu.items.push(insertSlideshow);
        this._contextMenu.items.push(sep2);
        this._contextMenu.items.push(playFromHere);
        this._contextMenu.items.push(sep3);
        this._contextMenu.items.push(setSkyPosition);
        this._contextMenu.items.push(setEndSkyPosition);
        this._contextMenu.items.push(sep4);
        this._contextMenu.items.push(showSkyPosition);
        this._contextMenu.items.push(showEndSkyPosition);
        this._contextMenu.items.push(sep5);
        this._contextMenu.items.push(captureThumbnail);
        this._contextMenu.items.push(sep6);
        this._contextMenu.items.push(masterSlide);
        this._contextMenu.items.push(setNextSlide);
        this._contextMenu.items.push(fadeInOverlays);
        this._contextMenu.items.push(trackSpaceTime);
        this._contextMenu.items.push(interpolation);
        this._contextMenu._show(Vector2d.create(e.clientX, e.clientY));
      }
    },
    _selectAllMenu_Click: function(sender, e) {
      this.tourStopList.selectAll();
    },
    _interpolation_Click: function(sender, e) {
      var item = sender;
      this._tour.get_currentTourStop().set_interpolationType(item.tag);
    },
    _nextSlideChosen: function() {
      if (this._selectDialog.get_OK()) {
        this._tour.get_currentTourStop().set_nextSlide(this._selectDialog.get_id());
      }
    },
    _setNextSlide_Click: function(sender, e) {
      this._selectDialog = new SelectLink(null);
      this.nextSlideCallback(this._selectDialog, ss.bind('_nextSlideChosen', this));
    },
    _insertDuplicate_Click: function(sender, e) {
      Undo.push(new UndoTourSlidelistChange(Language.getLocalizedText(530, 'Duplicate Slide at End Position'), this._tour));
      var ts = this._tour.get_currentTourStop().copy();
      if (ts == null) {
        return;
      }
      if (ts.get_endTarget() != null) {
        ts.get_endTarget().set_backgroundImageset(ts.get_target().get_backgroundImageset());
        ts.get_endTarget().set_studyImageset(ts.get_target().get_studyImageset());
        ts.set_target(ts.get_endTarget());
        ts.set_startTime(ts.get_endTime());
        ts.set_endTarget(null);
      }
      var $enum1 = ss.enumerate(ts.get_overlays());
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        overlay.set_tweenFactor(1);
        overlay.set_animate(!overlay.get_animate());
        overlay.set_animate(!overlay.get_animate());
      }
      ts.set_tweenPosition(0);
      ts.set_fadeInOverlays(false);
      this._tour.insertAfterTourStop(ts);
      this.tourStopList.refresh();
    },
    _fadeInOverlays_Click: function(sender, e) {
      this._tour.get_currentTourStop().set_fadeInOverlays(!this._tour.get_currentTourStop().get_fadeInOverlays());
    },
    _insertSlideshow_Click: function(sender, e) {
    },
    _trackSpaceTime_Click: function(sender, e) {
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(532, 'Track Time Edit'), this._tour));
      this._tour.get_currentTourStop().set_hasTime(!this._tour.get_currentTourStop().get_hasTime());
    },
    _masterSlide_Click: function(sender, e) {
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(533, 'Master Slide State Edit'), this._tour));
      this._tour.get_currentTourStop().set_masterSlide(!this._tour.get_currentTourStop().get_masterSlide());
      this.tourStopList.refresh();
    },
    _playFromHere_Click: function(sender, e) {
      this.playFromCurrentTourstop();
    },
    playFromCurrentTourstop: function() {
      this.playing = true;
      WWTControl.singleton.gotoTarget(this._tour.get_currentTourStop().get_target(), false, true, false);
      SpaceTimeController.set_now(this._tour.get_currentTourStop().get_startTime());
      SpaceTimeController.set_syncToClock(false);
      this.setPlayPauseMode();
    },
    playFromTourstop: function(ts) {
      this._tour.set_currentTourStop(ts);
      this.playFromCurrentTourstop();
    },
    _showSkyPosition_Click: function(sender, e) {
      if (this._tour.get_currentTourStop() != null) {
        WWTControl.singleton.gotoTarget(this._tour.get_currentTourStop().get_target(), false, true, false);
        this._tour.get_currentTourStop().syncSettings();
        SpaceTimeController.set_now(this._tour.get_currentTourStop().get_startTime());
        SpaceTimeController.set_syncToClock(false);
        this._tour.get_currentTourStop().set_tweenPosition(0);
        LayerManager.setVisibleLayerList(this._tour.get_currentTourStop().layers);
        this.tourStopList.refresh();
      }
    },
    _showEndSkyPosition_Click: function(sender, e) {
      this._tour.get_currentTourStop().set_tweenPosition(1);
      this._tour.get_currentTourStop()._updateLayerOpacity();
      if (this._tour.get_currentTourStop() != null && this._tour.get_currentTourStop().get_endTarget() != null) {
        WWTControl.singleton.gotoTargetFull(false, true, this._tour.get_currentTourStop().get_endTarget().get_camParams(), this._tour.get_currentTourStop().get_target().get_studyImageset(), this._tour.get_currentTourStop().get_target().get_backgroundImageset());
        WWTControl.singleton.renderContext.set_solarSystemTrack(this._tour.get_currentTourStop().get_endTarget().get_target());
        SpaceTimeController.set_now(this._tour.get_currentTourStop().get_endTime());
        this._tour.get_currentTourStop().syncSettings();
        LayerManager.setVisibleLayerList(this._tour.get_currentTourStop().layers);
        SpaceTimeController.set_syncToClock(false);
        this.tourStopList.refresh();
        this.tourEditorUI.clearSelection();
      }
    },
    _setEndSkyPosition_Click: function(sender, e) {
      if (this._tour.get_currentTourStop() != null) {
        Undo.push(new UndoTourStopChange(Language.getLocalizedText(435, 'Set End Camera Position'), this._tour));
        var newPlace = Place.createCameraParams('End Place', WWTControl.singleton.renderContext.viewCamera.copy(), 268435456, WWTControl.singleton.constellation, WWTControl.singleton.renderContext.get_backgroundImageset().get_dataSetType(), WWTControl.singleton.renderContext.get_solarSystemTrack());
        this._tour.get_currentTourStop().set_endTarget(newPlace);
        this._tour.get_currentTourStop().get_endTarget().set_constellation(WWTControl.singleton.constellation);
        this._tour.get_currentTourStop().set_endTime(SpaceTimeController.get_now());
        this._tour.get_currentTourStop().set_tweenPosition(1);
        var $enum1 = ss.enumerate(ss.keys(this._tour.get_currentTourStop().layers));
        while ($enum1.moveNext()) {
          var key = $enum1.current;
          var info = this._tour.get_currentTourStop().layers[key];
          if (ss.keyExists(LayerManager.get_layerList(), info.id)) {
            info.endOpacity = LayerManager.get_layerList()[info.id].get_opacity();
            info.endParams = LayerManager.get_layerList()[info.id].getParams();
          }
        }
        this._tour.get_currentTourStop()._updateLayerOpacity();
        this.tourStopList.refresh();
        TimeLine.refreshUi();
        this.tourEditorUI.clearSelection();
      }
    },
    _setSkyPosition_Click: function(sender, e) {
      if (this._tour.get_currentTourStop() != null) {
        Undo.push(new UndoTourStopChange(Language.getLocalizedText(434, 'Set Start Camera Position'), this._tour));
        this._tour.get_currentTourStop().get_target().set_target(WWTControl.singleton.renderContext.get_solarSystemTrack());
        this._tour.get_currentTourStop().get_target().set_type(WWTControl.singleton.renderContext.get_backgroundImageset().get_dataSetType());
        this._tour.get_currentTourStop().get_target().set_camParams(WWTControl.singleton.renderContext.viewCamera.copy());
        this._tour.get_currentTourStop().get_target().set_constellation(WWTControl.singleton.constellation);
        this._tour.get_currentTourStop().get_target().set_studyImageset(WWTControl.singleton.renderContext.get_foregroundImageset());
        this._tour.get_currentTourStop().get_target().set_type(WWTControl.singleton.renderContext.get_backgroundImageset().get_dataSetType());
        this._tour.get_currentTourStop().get_target().set_backgroundImageset(WWTControl.singleton.renderContext.get_backgroundImageset().get_stockImageSet());
        this._tour.get_currentTourStop().captureSettings();
        this._tour.get_currentTourStop().layers = LayerManager._getVisibleLayerList(this._tour.get_currentTourStop().layers);
        this._tour.get_currentTourStop().set_tweenPosition(0);
        this.tourStopList.refresh();
        TimeLine.refreshUi();
        this.tourEditorUI.clearSelection();
      }
    },
    _captureThumbnail_Click: function(sender, e) {
      if (this._tour.get_currentTourStop() != null) {
        this._captureThumbnail(this._tour.get_currentTourStop());
      }
    },
    _captureThumbnail: function(tourStop) {
      var $this = this;

      WWTControl.singleton.captureThumbnail(function(blob) {
        var filename = ss.format('{0}.thumb.png', tourStop.get_id());
        $this._tour.addCachedFile(filename, blob);
        tourStop.set_thumbnail($this._tour.getCachedTexture(filename, function() {
          $this.tourStopList.refresh();
        }));
      });
    },
    _properties_Click: function(sender, e) {
      throw new Error('The method or operation is not implemented.');
    },
    tourStopList_AddNewSlide: function(sender, e) {
      this.addSlide(false);
      this.tourStopList.ensureAddVisible();
    },
    _addNewSlide_Click: function(sender, e) {
      this.addSlide(false);
      this.tourStopList.ensureAddVisible();
    },
    _insertNewSlide_Click: function(sender, e) {
      this.addSlide(true);
    },
    addSlide: function(insert) {
      Undo.push(new UndoTourSlidelistChange(Language.getLocalizedText(426, 'Add New Slide'), this._tour));
      Cursor.set_current(Cursors.get_waitCursor());
      var placeName = 'Current Screen';
      var newPlace = Place.createCameraParams(placeName, WWTControl.singleton.renderContext.viewCamera.copy(), 268435456, WWTControl.singleton.constellation, WWTControl.singleton.renderContext.get_backgroundImageset().get_dataSetType(), WWTControl.singleton.renderContext.get_solarSystemTrack());
      newPlace.set_studyImageset(WWTControl.singleton.renderContext.get_foregroundImageset());
      newPlace.set_backgroundImageset(WWTControl.singleton.renderContext.get_backgroundImageset().get_stockImageSet());
      var newTourStop = TourStop.create(newPlace);
      if (insert) {
        this._tour.insertTourStop(newTourStop);
      }
      else {
        this._tour.addTourStop(newTourStop);
      }
      if (this._tour.get_currentTourStop() != null) {
        this.musicTrack.target = this._tour.get_currentTourStop();
        this.voiceTrack.target = this._tour.get_currentTourStop();
      }
      else {
        this.musicTrack.target = null;
        this.voiceTrack.target = null;
      }
      this._tour.get_currentTourStop().layers = LayerManager._getVisibleLayerList(this._tour.get_currentTourStop().layers);
      this._captureThumbnail(newTourStop);
      this.tourStopList.selectedItem = this.tourStopList.findItem(newTourStop);
      this.tourStopList.refresh();
      this.tourEditorUI.clearSelection();
      Cursor.set_current(Cursors.get_defaultV());
      TimeLine.refreshUi();
    },
    _deleteMenu_Click: function(sender, e) {
      Undo.push(new UndoTourSlidelistChange(Language.getLocalizedText(534, 'Delete Slide'), this._tour));
      var $enum1 = ss.enumerate(ss.keys(this.tourStopList.selectedItems));
      while ($enum1.moveNext()) {
        var key = $enum1.current;
        var item = this.tourStopList.selectedItems[key];
        this._tour.removeTourStop(item);
      }
      ss.clearKeys(this.tourStopList.selectedItems);
      this.tourStopList.selectedItem = -1;
      this._tour.set_currentTourStop(null);
      this.musicTrack.target = null;
      this.voiceTrack.target = null;
      this.tourStopList.refresh();
      this.tourEditorUI.clearSelection();
    },
    _pasteMenu_Click: function(sender, e) {
      if (this.tourEditorUI.clipboardType === 'WorldWideTelescope.Slide') {
        Undo.push(new UndoTourSlidelistChange(Language.getLocalizedText(535, 'Paste Slide'), this._tour));
        var xParser = new DOMParser();
        var doc = xParser.parseFromString(this.tourEditorUI.clipboardData, 'text/xml');
        var node = Util.selectSingleNode(doc, 'TourStops');
        var pasteStack = new ss.Stack();
        var $enum1 = ss.enumerate(node.childNodes);
        while ($enum1.moveNext()) {
          var child = $enum1.current;
          if (child.nodeName === 'TourStop') {
            var ts = TourStop._fromXml(this._tour, child);
            ts.set_id(Guid.newGuid().toString());
            pasteStack.push(ts);
          }
        }
        ss.clearKeys(this.tourStopList.selectedItems);
        var curIndex = this.tourStopList.selectedItem + pasteStack.count - 1;
        while (pasteStack.count > 0) {
          var ts = pasteStack.pop();
          this._tour.insertTourStop(ts);
          this.tourStopList.selectedItems[curIndex--] = ts;
        }
        this.tourStopList.refresh();
        this.tourEditorUI.clearSelection();
      }
    },
    _copyMenu_Click: function(sender, e) {
      var writer = new XmlTextWriter();
      writer._writeProcessingInstruction('xml', "version='1.0' encoding='UTF-8'");
      writer._writeStartElement('TourStops');
      var $enum1 = ss.enumerate(ss.keys(this.tourStopList.selectedItems));
      while ($enum1.moveNext()) {
        var key = $enum1.current;
        var item = this.tourStopList.selectedItems[key];
        item._saveToXml(writer, true);
      }
      writer._writeEndElement();
      this.tourEditorUI.clipboardType = 'WorldWideTelescope.Slide';
      this.tourEditorUI.clipboardData = writer.body;
    },
    _cutMenu_Click: function(sender, e) {
      Undo.push(new UndoTourSlidelistChange(Language.getLocalizedText(536, 'Cut Slide'), this._tour));
      this._copyMenu_Click(sender, e);
      var $enum1 = ss.enumerate(ss.keys(this.tourStopList.selectedItems));
      while ($enum1.moveNext()) {
        var key = $enum1.current;
        var item = this.tourStopList.selectedItems[key];
        this._tour.removeTourStop(item);
      }
      ss.clearKeys(this.tourStopList.selectedItems);
      this.tourStopList.refresh();
      this.tourEditorUI.clearSelection();
    },
    pauseTour: function() {
      if (this.playing) {
        this.playing = false;
      }
      this.setPlayPauseMode();
    },
    preview_Click: function(sender, e) {
      this.playing = !this.playing;
      if (this.playing && this._tour.get_editMode()) {
        this.get_tour().set_currentTourstopIndex(-1);
      }
      this.setPlayPauseMode();
    },
    setPlayPauseMode: function() {
      if (this._tour.get_editMode()) {
        if (this.playing) {
          if (this._player == null) {
            this._player = new TourPlayer();
          }
          this._player.set_tour(this._tour);
          WWTControl.singleton.uiController = this._player;
          this._player.play();
          this.tourStopList.showAddButton = false;
        }
        else {
          WWTControl.singleton.uiController = this.tourEditorUI;
          if (this._player != null) {
            this._player.stop(false);
          }
          this._player = null;
          WWTControl.singleton.set__mover(null);
          this.tourStopList.showAddButton = this._tour.get_editMode();
        }
      }
      else {
        if (this.playing) {
          if (this._player == null) {
            this._player = new TourPlayer();
          }
          this._player.set_tour(this._tour);
          WWTControl.singleton.uiController = this._player;
          this._player.play();
          this.tourStopList.showAddButton = false;
        }
        else {
          WWTControl.singleton.uiController = null;
          WWTControl.singleton.renderContext.freezeView();
          if (this._player != null) {
            this._player.stop(false);
          }
          this._player = null;
          WWTControl.singleton.uiController = null;
          WWTControl.singleton.set__mover(null);
          this.tourStopList.showAddButton = this._tour.get_editMode();
        }
      }
      this.tourStopList.refresh();
    },
    playerTimer_Tick: function(sender, e) {
      if (this.playing) {
        if (this._player != null) {
          if (!TourPlayer.get_playing()) {
            this.playing = false;
            this.setPlayPauseMode();
          }
          else {
            if (this.tourStopList.selectedItem !== this._tour.get_currentTourstopIndex()) {
              this.tourStopList.selectedItem = this._tour.get_currentTourstopIndex();
            }
          }
        }
      }
    },
    insertShapeCircle_Click: function(sender, e) {
      this.tourEditorUI.addShape('', 0);
    },
    insertShapeRectangle_Click: function(sender, e) {
      this.tourEditorUI.addShape('', 1);
    },
    insertShapeLine_Click: function(sender, e) {
      this.tourEditorUI.addShape('', 5);
    },
    insertDonut_Click: function(sender, e) {
      this.tourEditorUI.addShape('', 3);
    },
    _addArrow_Click: function(sender, e) {
      this.tourEditorUI.addShape('', 4);
    },
    insertVideo_Click: function(sender, e) {
    },
    insertAudio_Click: function(sender, e) {
    },
    insertHyperlink_Click: function(sender, e) {
    },
    colorPicker_Click: function(sender, e) {
    },
    tourEditTab_Leave: function(sender, e) {
    },
    editTourProperties_Click: function(sender, e) {
    },
    saveTour_Click: function(sender, e) {
      this.save(false);
    },
    save: function(saveAs) {
      return true;
    },
    addVideo_Click: function(sender, e) {
    },
    addPicture_Click: function(sender, e) {
    },
    addShape_Click: function(sender, e) {
    },
    _addOpenRectangle_Click: function(sender, e) {
      this.tourEditorUI.addShape('', 6);
    },
    _addStar_Click: function(sender, e) {
      this.tourEditorUI.addShape('', 2);
    },
    addText_Click: function(sender, e) {
    },
    preview_EnabledChanged: function(sender, e) {
      if (this.playing) {
      }
      else {
      }
    },
    preview_MouseEnter: function(sender, e) {
    },
    preview_MouseLeave: function(sender, e) {
    },
    preview_MouseUp: function(sender, e) {
    },
    preview_MouseDown: function(sender, e) {
    },
    tourStopList_ItemHover: function(sender, e) {
    },
    refresh: function() {
    },
    undoStep: function() {
      if (Undo.peekAction()) {
        Undo.stepBack();
        this.tourStopList.refresh();
        this.tourStopList.selectedItem = this._tour.get_currentTourstopIndex();
        this.showSlideStartPosition(this._tour.get_currentTourStop());
        this.refresh();
        OverlayList._updateOverlayList(this._tour.get_currentTourStop(), this.tourEditorUI.selection);
      }
    },
    redoStep: function() {
      if (Undo.peekRedoAction()) {
        Undo.stepForward();
        this.tourStopList.refresh();
        this.tourStopList.selectedItem = this._tour.get_currentTourstopIndex();
        this.showSlideStartPosition(this._tour.get_currentTourStop());
        this.refresh();
        OverlayList._updateOverlayList(this._tour.get_currentTourStop(), this.tourEditorUI.selection);
      }
    },
    tourStopList_ShowEndPosition: function(sender, e) {
      this._showEndSkyPosition_Click(this, new ss.EventArgs());
    },
    tourStopList_ShowStartPosition: function(sender, e) {
      this.showSlideStartPosition(this.get_tour().get_currentTourStop());
      this.tourEditorUI.clearSelection();
    },
    tourStopList_KeyDown: function(sender, e) {
      if (e.ctrlKey) {
        switch (e.keyCode) {
          case 67:
            this._copyMenu_Click(null, new ss.EventArgs());
            break;
          case 86:
            this._pasteMenu_Click(null, new ss.EventArgs());
            break;
          case 88:
            this._cutMenu_Click(null, new ss.EventArgs());
            break;
          case 90:
            if (Undo.peekAction()) {
              TourEdit._undoStep();
            }
            else {
              UiTools._beep();
            }
            break;
          case 89:
            if (Undo.peekRedoAction()) {
              TourEdit._redoStep();
            }
            else {
              UiTools._beep();
            }
            break;
        }
      }
      if (e.keyCode === 46) {
        this._deleteMenu_Click(null, new ss.EventArgs());
      }
    },
    _ensureSelectedVisible: function() {
      this.tourStopList.ensureSelectedVisible();
    }
  };


  // wwtlib.TourEditor

  function TourEditor() {
    this.selection = new Selection();
    this._contextMenu = new ContextMenuStrip();
    this._tour = null;
    this._mouseDown = false;
    this._selectionAction = 11;
    this._needUndoFrame = false;
    this._contextPoint = new Vector2d();
    this._dragCopying = false;
    this._brokeThreshold = false;
    this.nextSlideCallback = null;
    this.clipboardData = '';
    this.clipboardType = '';
    this.editTextCallback = null;
    this._defaultColor = Colors.get_white();
  }
  var TourEditor$ = {
    render: function(renderContext) {
      renderContext.setupMatricesOverlays();
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        return;
      }
      var $enum1 = ss.enumerate(this._tour.get_currentTourStop().get_overlays());
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        if (overlay.get_animate() && this.get_tour().get_currentTourStop().get_keyFramed()) {
          overlay.set_tweenFactor(this._tour.get_currentTourStop().get_tweenPosition());
        }
        else if (!this.get_tour().get_currentTourStop().get_keyFramed()) {
          overlay.set_tweenFactor((this._tour.get_currentTourStop().get_tweenPosition() < 0.5) ? 0 : 1);
        }
        overlay.draw3D(renderContext, true);
      }
      this.selection.draw3D(renderContext, 1);
      if (TourEditor.currentEditor != null) {
        TourEditor.currentEditor.render(renderContext);
      }
      Settings.tourSettings = null;
    },
    get_tour: function() {
      return this._tour;
    },
    set_tour: function(value) {
      this._tour = value;
      return value;
    },
    close: function() {
      if (this._tour != null) {
        this._tour = null;
        this.set_focus(null);
      }
    },
    clearSelection: function() {
      this.selection.clearSelection();
      OverlayList._updateOverlayListSelection(this.selection);
      this.set_focus(null);
    },
    get_focus: function() {
      return this.selection.get_focus();
    },
    set_focus: function(value) {
      this.selection.set_focus(value);
      return value;
    },
    pointToView: function(pnt) {
      var clientHeight = WWTControl.singleton.renderContext.height;
      var clientWidth = WWTControl.singleton.renderContext.width;
      var viewWidth = (WWTControl.singleton.renderContext.width / WWTControl.singleton.renderContext.height) * 1116;
      var x = ((pnt.x) / (clientWidth) * viewWidth) - ((viewWidth - 1920) / 2);
      var y = (pnt.y) / clientHeight * 1116;
      return Vector2d.create(x, y);
    },
    mouseDown: function(sender, e) {
      this._brokeThreshold = false;
      this._needUndoFrame = true;
      var location = this.pointToView(Vector2d.create(e.offsetX, e.offsetY));
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        this._needUndoFrame = false;
        return false;
      }
      if (TourEditor.currentEditor != null) {
        if (TourEditor.currentEditor.mouseDown(sender, e)) {
          return true;
        }
      }
      if (this.get_focus() != null) {
        if (this.selection.get_multiSelect()) {
          var $enum1 = ss.enumerate(this.selection.selectionSet);
          while ($enum1.moveNext()) {
            var overlay = $enum1.current;
            if (overlay.hitTest(location)) {
              this._selectionAction = 9;
              this._mouseDown = true;
              this._pointDown = location;
              this.set_focus(overlay);
              if (e.ctrlKey) {
                this._dragCopying = true;
              }
              return true;
            }
          }
        }
        else {
          if (this.get_focus().hitTest(location)) {
            this._selectionAction = 9;
            this._mouseDown = true;
            this._pointDown = location;
            if (e.ctrlKey) {
              this._dragCopying = true;
            }
            return true;
          }
        }
        var hit = this.selection.hitTest(location);
        if (hit !== 11) {
          this._selectionAction = hit;
          this._mouseDown = true;
          if (hit === 8) {
            this._pointDown = location;
          }
          else {
            this._pointDown = this.selection.pointToSelectionSpace(location);
          }
          return true;
        }
      }
      for (var i = this._tour.get_currentTourStop().get_overlays().length - 1; i >= 0; i--) {
        if (this._tour.get_currentTourStop().get_overlays()[i].hitTest(location)) {
          this._selectionAction = 9;
          this.set_focus(this._tour.get_currentTourStop().get_overlays()[i]);
          if (e.ctrlKey || e.shiftKey) {
            this.selection.addSelection(this.get_focus());
          }
          else {
            this.selection.setSelection(this.get_focus());
          }
          OverlayList._updateOverlayListSelection(this.selection);
          this._mouseDown = true;
          this._pointDown = location;
          return true;
        }
      }
      this.set_focus(null);
      this.clearSelection();
      this._needUndoFrame = false;
      return false;
    },
    mouseUp: function(sender, e) {
      this._brokeThreshold = false;
      if (TourEditor.currentEditor != null) {
        if (TourEditor.currentEditor.mouseUp(sender, e)) {
          return true;
        }
      }
      this._contextPoint = Vector2d.create(e.offsetX, e.offsetY);
      if (this._mouseDown) {
        this._mouseDown = false;
        if (e.button === 2) {
          if (this.get_focus() != null) {
            this.showSelectionContextMenu(Vector2d.create(e.offsetX, e.offsetY));
          }
        }
        return true;
      }
      if (e.button === 2) {
        if (this.get_focus() == null) {
          this._showNoSelectionContextMenu(Vector2d.create(e.offsetX, e.offsetY));
        }
        return true;
      }
      return false;
    },
    mouseMove: function(sender, e) {
      if (TourEditor.currentEditor != null) {
        if (TourEditor.currentEditor.mouseMove(sender, e)) {
          return true;
        }
      }
      var location = this.pointToView(Vector2d.create(e.offsetX, e.offsetY));
      if (this._mouseDown && this.get_focus() != null) {
        var undoFrame = null;
        var actionText = Language.getLocalizedText(502, 'Edit');
        if (this._needUndoFrame) {
          undoFrame = new UndoTourStopChange(Language.getLocalizedText(502, 'Edit'), this._tour);
        }
        var moveX;
        var moveY;
        if (this._selectionAction !== 9 && this._selectionAction !== 8) {
          var newPoint = this.selection.pointToSelectionSpace(location);
          moveX = newPoint.x - this._pointDown.x;
          moveY = newPoint.y - this._pointDown.y;
          this._pointDown = newPoint;
        }
        else {
          moveX = location.x - this._pointDown.x;
          moveY = location.y - this._pointDown.y;
          if (this._selectionAction === 9 && !this._brokeThreshold) {
            if (Math.abs(moveX) > 3 || Math.abs(moveY) > 3) {
              this._brokeThreshold = true;
            }
            else {
              return true;
            }
          }
          this._pointDown = location;
        }
        if (this._dragCopying) {
          if (this.selection.get_multiSelect()) {
            var set = this.selection.selectionSet;
            this.clearSelection();
            var $enum1 = ss.enumerate(set);
            while ($enum1.moveNext()) {
              var overlay = $enum1.current;
              var newOverlay = this.addOverlay(overlay);
              newOverlay.set_x(overlay.get_x());
              newOverlay.set_y(overlay.get_y());
              this.set_focus(newOverlay);
              this.selection.addSelection(this.get_focus());
            }
            OverlayList._updateOverlayList(this._tour.get_currentTourStop(), this.selection);
            this._dragCopying = false;
          }
          else {
            var newOverlay = this.addOverlay(this.get_focus());
            newOverlay.set_x(this.get_focus().get_x());
            newOverlay.set_y(this.get_focus().get_y());
            this.set_focus(newOverlay);
            this.selection.setSelection(this.get_focus());
            OverlayList._updateOverlayList(this._tour.get_currentTourStop(), this.selection);
            this._dragCopying = false;
          }
        }
        var aspect = this.get_focus().get_width() / this.get_focus().get_height();
        var center = Vector2d.create(this.get_focus().get_x(), this.get_focus().get_y());
        if (e.ctrlKey) {
          actionText = Language.getLocalizedText(537, 'Resize');
          switch (this._selectionAction) {
            case 0:
              this.get_focus().set_width(Math.max(2, this.get_focus().get_width() - moveX * 2));
              this.get_focus().set_height(Math.max(2, this.get_focus().get_height() - (moveX / aspect) * 2));
              break;
            case 1:
              this.get_focus().set_height(Math.max(2, this.get_focus().get_height() - moveY * 2));
              break;
            case 2:
              this.get_focus().set_width(Math.max(2, this.get_focus().get_width() + moveX * 2));
              this.get_focus().set_height(Math.max(2, this.get_focus().get_height() + (moveX / aspect) * 2));
              break;
            case 3:
              this.get_focus().set_width(Math.max(2, this.get_focus().get_width() + moveX * 2));
              break;
            case 4:
              this.get_focus().set_width(Math.max(2, this.get_focus().get_width() + moveX * 2));
              this.get_focus().set_height(Math.max(2, this.get_focus().get_height() + (moveX / aspect) * 2));
              break;
            case 5:
              this.get_focus().set_height(Math.max(2, this.get_focus().get_height() + moveY * 2));
              break;
            case 6:
              this.get_focus().set_width(Math.max(2, this.get_focus().get_width() - moveX * 2));
              this.get_focus().set_height(Math.max(2, this.get_focus().get_height() - (moveX / aspect) * 2));
              break;
            case 7:
              this.get_focus().set_width(Math.max(2, this.get_focus().get_width() - moveX * 2));
              break;
            case 8:
              actionText = Language.getLocalizedText(538, 'Rotate');
              this.get_focus().set_rotationAngle(this.get_focus().get_rotationAngle() + moveX / 10);
              break;
            case 9:
              actionText = Language.getLocalizedText(539, 'Drag Copy');
              center.x += moveX;
              center.y += moveY;
              break;
            case 10:
              break;
            case 11:
              break;
            default:
              break;
          }
        }
        else {
          if (this._selectionAction !== 8 && this._selectionAction !== 9) {
            if (moveX > (this.get_focus().get_width() - 2)) {
              moveX = 0;
            }
            if (moveY > (this.get_focus().get_height() - 2)) {
              moveY = 0;
            }
          }
          actionText = Language.getLocalizedText(537, 'Resize');
          switch (this._selectionAction) {
            case 0:
              this.get_focus().set_width(this.get_focus().get_width() - moveX);
              this.get_focus().set_height(this.get_focus().get_height() - (moveX / aspect));
              center.x += (moveX / 2);
              center.y += ((moveX / aspect) / 2);
              break;
            case 1:
              this.get_focus().set_height(this.get_focus().get_height() - moveY);
              center.y += (moveY / 2);
              break;
            case 2:
              this.get_focus().set_width(this.get_focus().get_width() + moveX);
              this.get_focus().set_height(this.get_focus().get_height() + (moveX / aspect));
              center.x += (moveX / 2);
              center.y -= ((moveX / aspect) / 2);
              break;
            case 3:
              this.get_focus().set_width(this.get_focus().get_width() + moveX);
              center.x += (moveX / 2);
              break;
            case 4:
              this.get_focus().set_width(this.get_focus().get_width() + moveX);
              this.get_focus().set_height(this.get_focus().get_height() + (moveX / aspect));
              center.x += (moveX / 2);
              center.y += ((moveX / aspect) / 2);
              break;
            case 5:
              this.get_focus().set_height(this.get_focus().get_height() + moveY);
              center.y += (moveY / 2);
              break;
            case 6:
              this.get_focus().set_width(this.get_focus().get_width() - moveX);
              this.get_focus().set_height(this.get_focus().get_height() - (moveX / aspect));
              center.x += (moveX / 2);
              center.y -= ((moveX / aspect) / 2);
              break;
            case 7:
              this.get_focus().set_width(this.get_focus().get_width() - moveX);
              center.x += (moveX / 2);
              break;
            case 8:
              actionText = Language.getLocalizedText(538, 'Rotate');
              this.get_focus().set_rotationAngle(this.get_focus().get_rotationAngle() + moveX);
              break;
            case 9:
              actionText = Language.getLocalizedText(540, 'Move');
              center.x += moveX;
              center.y += moveY;
              break;
            case 10:
              break;
            case 11:
              break;
            default:
              break;
          }
        }
        if (this._selectionAction !== 9 && this._selectionAction !== 8) {
          center = this.selection.pointToScreenSpace(center);
        }
        if (this.selection.get_multiSelect()) {
          var $enum2 = ss.enumerate(this.selection.selectionSet);
          while ($enum2.moveNext()) {
            var overlay = $enum2.current;
            overlay.set_x(overlay.get_x() + moveX);
            overlay.set_y(overlay.get_y() + moveY);
          }
        }
        else {
          this.get_focus().set_x(center.x);
          this.get_focus().set_y(center.y);
        }
        if (this._needUndoFrame) {
          this._needUndoFrame = false;
          undoFrame.set_actionText(actionText);
          Undo.push(undoFrame);
        }
      }
      else {
        if (this.get_focus() != null) {
          if (this.get_focus().hitTest(location)) {
            Cursor.set_current(Cursors.get_sizeAll());
            return false;
          }
          var hit = this.selection.hitTest(location);
          if (hit === 11) {
            return false;
          }
          switch (hit) {
            case 0:
              Cursor.set_current(Cursors.get_sizeNWSE());
              break;
            case 1:
              Cursor.set_current(Cursors.get_sizeNS());
              break;
            case 2:
              Cursor.set_current(Cursors.get_sizeNESW());
              break;
            case 3:
              Cursor.set_current(Cursors.get_sizeWE());
              break;
            case 4:
              Cursor.set_current(Cursors.get_sizeNWSE());
              break;
            case 5:
              Cursor.set_current(Cursors.get_sizeNS());
              break;
            case 6:
              Cursor.set_current(Cursors.get_sizeNESW());
              break;
            case 7:
              Cursor.set_current(Cursors.get_sizeWE());
              break;
            case 8:
              Cursor.set_current(Cursors.get_sizeWE());
              break;
            case 10:
              break;
            case 11:
              break;
            default:
              break;
          }
        }
      }
      return false;
    },
    _showNoSelectionContextMenu: function(position) {
      if (this._contextMenu != null) {
        this._contextMenu._dispose();
      }
      if (this._tour.get_currentTourStop() == null) {
        return;
      }
      this._contextMenu = new ContextMenuStrip();
      var pasteMenu = ToolStripMenuItem.create(Language.getLocalizedText(425, 'Paste'));
      pasteMenu.enabled = this.clipboardType === 'WorldWideTelescope.Overlay';
      pasteMenu.click = ss.bind('_pasteMenu_Click', this);
      this._contextMenu.items.push(pasteMenu);
      this._contextMenu._show(position);
    },
    _addOpenRectangle_Click: function(sender, e) {
      this.addShape('', 6);
    },
    _addStar_Click: function(sender, e) {
      this.addShape('', 2);
    },
    _insertShapeCircle_Click: function(sender, e) {
      this.addShape('', 0);
    },
    _insertShapeRectangle_Click: function(sender, e) {
      this.addShape('', 1);
    },
    _insertShapeLine_Click: function(sender, e) {
      this.addShape('', 5);
    },
    _insertDonut_Click: function(sender, e) {
      this.addShape('', 3);
    },
    _addArrow_Click: function(sender, e) {
      this.addShape('', 4);
    },
    showSelectionContextMenu: function(position) {
      if (this.get_focus() == null) {
        return;
      }
      var multiSelect = this.selection.get_multiSelect();
      if (this._contextMenu != null) {
        this._contextMenu._dispose();
      }
      this._contextMenu = new ContextMenuStrip();
      var cutMenu = ToolStripMenuItem.create(Language.getLocalizedText(427, 'Cut'));
      var copyMenu = ToolStripMenuItem.create(Language.getLocalizedText(428, 'Copy'));
      var pasteMenu = ToolStripMenuItem.create(Language.getLocalizedText(425, 'Paste'));
      var deleteMenu = ToolStripMenuItem.create(Language.getLocalizedText(167, 'Delete'));
      var sep1 = new ToolStripSeparator();
      var sep2 = new ToolStripSeparator();
      var sep3 = new ToolStripSeparator();
      var bringToFront = ToolStripMenuItem.create(Language.getLocalizedText(452, 'Bring to Front'));
      var sendToBack = ToolStripMenuItem.create(Language.getLocalizedText(453, 'Send to Back'));
      var bringForward = ToolStripMenuItem.create(Language.getLocalizedText(454, 'Bring Forward'));
      var sendBackward = ToolStripMenuItem.create(Language.getLocalizedText(455, 'Send Backward'));
      var properties = ToolStripMenuItem.create(Language.getLocalizedText(20, 'Properties'));
      var editText = ToolStripMenuItem.create(Language.getLocalizedText(502, 'Edit'));
      var url = ToolStripMenuItem.create(Language.getLocalizedText(587, 'Hyperlink'));
      var linkString = this.get_focus().get_linkID();
      switch (this.get_focus().get_linkID()) {
        case '':
        case null:
          linkString = ' (' + Language.getLocalizedText(609, 'No Link') + ')';
          break;
        case 'Next':
          linkString = ' (' + Language.getLocalizedText(610, 'Next Slide') + ')';
          break;
        case 'Return':
          linkString = ' (' + Language.getLocalizedText(602, 'Return to Caller') + ')';
          break;
        default:
          var index = this.get_tour().getTourStopIndexByID(this.get_focus().get_linkID());
          if (index > -1) {
            if (ss.emptyString(this._tour.get_tourStops()[index].get_description())) {
              linkString = ss.format(' (' + Language.getLocalizedText(1340, 'Slide') + ' {0})', index);
            }
            else {
              linkString = ' (' + this._tour.get_tourStops()[index].get_description() + ')';
            }
          }
          break;
      }
      var animateMenu = ToolStripMenuItem.create(Language.getLocalizedText(588, 'Animate'));
      var linkID = ToolStripMenuItem.create(Language.getLocalizedText(589, 'Link to Slide') + linkString);
      var pickColor = ToolStripMenuItem.create(Language.getLocalizedText(458, 'Color/Opacity'));
      var flipbookProperties = ToolStripMenuItem.create(Language.getLocalizedText(630, 'Flipbook Properties'));
      var interpolateMenu = ToolStripMenuItem.create(Language.getLocalizedText(1029, 'Animation Tween Type'));
      var Linear = ToolStripMenuItem.create(Language.getLocalizedText(1030, 'Linear'));
      var Ease = ToolStripMenuItem.create(Language.getLocalizedText(1031, 'Ease In/Out'));
      var EaseIn = ToolStripMenuItem.create(Language.getLocalizedText(1032, 'Ease In'));
      var EaseOut = ToolStripMenuItem.create(Language.getLocalizedText(1033, 'Ease Out'));
      var Exponential = ToolStripMenuItem.create(Language.getLocalizedText(1034, 'Exponential'));
      var Default = ToolStripMenuItem.create(Language.getLocalizedText(1035, 'Slide Default'));
      var Align = ToolStripMenuItem.create(Language.getLocalizedText(790, 'Align'));
      var AlignTop = ToolStripMenuItem.create(Language.getLocalizedText(1333, 'Top'));
      var AlignBottom = ToolStripMenuItem.create(Language.getLocalizedText(1334, 'Bottom'));
      var AlignLeft = ToolStripMenuItem.create(Language.getLocalizedText(1335, 'Left'));
      var AlignRight = ToolStripMenuItem.create(Language.getLocalizedText(1336, 'Right'));
      var AlignHorizon = ToolStripMenuItem.create(Language.getLocalizedText(1337, 'Horizontal'));
      var AlignVertical = ToolStripMenuItem.create(Language.getLocalizedText(1338, 'Vertical'));
      var AlignCenter = ToolStripMenuItem.create(Language.getLocalizedText(1339, 'Centered'));
      Align.dropDownItems.push(AlignTop);
      Align.dropDownItems.push(AlignBottom);
      Align.dropDownItems.push(AlignLeft);
      Align.dropDownItems.push(AlignRight);
      Align.dropDownItems.push(AlignHorizon);
      Align.dropDownItems.push(AlignVertical);
      Align.dropDownItems.push(AlignCenter);
      Linear.tag = 0;
      Ease.tag = 3;
      EaseIn.tag = 1;
      EaseOut.tag = 2;
      Exponential.tag = 4;
      Default.tag = 5;
      Linear.click = ss.bind('_interpolation_Click', this);
      Ease.click = ss.bind('_interpolation_Click', this);
      EaseIn.click = ss.bind('_interpolation_Click', this);
      EaseOut.click = ss.bind('_interpolation_Click', this);
      Exponential.click = ss.bind('_interpolation_Click', this);
      Default.click = ss.bind('_interpolation_Click', this);
      switch (this.get_focus().get_interpolationType()) {
        case 0:
          Linear.checked = true;
          break;
        case 1:
          EaseIn.checked = true;
          break;
        case 2:
          EaseOut.checked = true;
          break;
        case 3:
          Ease.checked = true;
          break;
        case 4:
          Exponential.checked = true;
          break;
        case 5:
          Default.checked = true;
          break;
        default:
          break;
      }
      interpolateMenu.dropDownItems.push(Default);
      interpolateMenu.dropDownItems.push(Linear);
      interpolateMenu.dropDownItems.push(Ease);
      interpolateMenu.dropDownItems.push(EaseIn);
      interpolateMenu.dropDownItems.push(EaseOut);
      interpolateMenu.dropDownItems.push(Exponential);
      cutMenu.click = ss.bind('_cutMenu_Click', this);
      copyMenu.click = ss.bind('_copyMenu_Click', this);
      deleteMenu.click = ss.bind('_deleteMenu_Click', this);
      bringToFront.click = ss.bind('_bringToFront_Click', this);
      sendToBack.click = ss.bind('_sendToBack_Click', this);
      sendBackward.click = ss.bind('_sendBackward_Click', this);
      bringForward.click = ss.bind('_bringForward_Click', this);
      properties.click = ss.bind('_properties_Click', this);
      editText.click = ss.bind('_editText_Click', this);
      url.click = ss.bind('_url_Click', this);
      pickColor.click = ss.bind('_pickColor_Click', this);
      pasteMenu.click = ss.bind('_pasteMenu_Click', this);
      animateMenu.click = ss.bind('_animateMenu_Click', this);
      flipbookProperties.click = ss.bind('_flipbookProperties_Click', this);
      linkID.click = ss.bind('_linkID_Click', this);
      AlignTop.click = ss.bind('_alignTop_Click', this);
      AlignBottom.click = ss.bind('_alignBottom_Click', this);
      AlignLeft.click = ss.bind('_alignLeft_Click', this);
      AlignRight.click = ss.bind('_alignRight_Click', this);
      AlignHorizon.click = ss.bind('_alignHorizon_Click', this);
      AlignVertical.click = ss.bind('_alignVertical_Click', this);
      AlignCenter.click = ss.bind('_alignCenter_Click', this);
      this._contextMenu.items.push(cutMenu);
      this._contextMenu.items.push(copyMenu);
      this._contextMenu.items.push(pasteMenu);
      this._contextMenu.items.push(deleteMenu);
      this._contextMenu.items.push(sep1);
      this._contextMenu.items.push(bringToFront);
      this._contextMenu.items.push(sendToBack);
      this._contextMenu.items.push(bringForward);
      this._contextMenu.items.push(sendBackward);
      this._contextMenu.items.push(Align);
      this._contextMenu.items.push(sep2);
      pasteMenu.enabled = false;
      this._contextMenu.items.push(pickColor);
      this._contextMenu.items.push(url);
      this._contextMenu.items.push(linkID);
      this._contextMenu.items.push(animateMenu);
      this._contextMenu.items.push(sep3);
      this._contextMenu.items.push(flipbookProperties);
      animateMenu.checked = this.get_focus().get_animate();
      this._contextMenu.items.push(interpolateMenu);
      interpolateMenu.enabled = this.get_focus().get_animate();
      flipbookProperties.visible = (ss.canCast(this.get_focus(), FlipbookOverlay));
      sep3.visible = (ss.canCast(this.get_focus(), FlipbookOverlay));
      if (multiSelect) {
        url.visible = false;
        linkID.visible = false;
        properties.visible = false;
        flipbookProperties.visible = false;
        bringForward.visible = false;
        sendBackward.visible = false;
      }
      else {
        Align.visible = false;
      }
      this._contextMenu.items.push(properties);
      if (this.get_focus() != null) {
        if (ss.typeOf(this.get_focus()) === TextOverlay) {
          this._contextMenu.items.push(editText);
        }
      }
      this._contextMenu._show(position);
    },
    _editText_Click: function(sender, e) {
      if (this.get_focus() != null) {
        if (ss.typeOf(this.get_focus()) === TextOverlay) {
          this._editText();
        }
      }
    },
    _alignVertical_Click: function(sender, e) {
      if (this.get_focus() == null) {
        return;
      }
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(1036, 'Vertical Align'), this._tour));
      var xCenter = this.get_focus().get_x();
      var $enum1 = ss.enumerate(this.selection.selectionSet);
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        overlay.set_x(xCenter);
      }
    },
    _alignHorizon_Click: function(sender, e) {
      if (this.get_focus() == null) {
        return;
      }
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(1037, 'Horizontal Align'), this._tour));
      var yCenter = this.get_focus().get_y();
      var $enum1 = ss.enumerate(this.selection.selectionSet);
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        overlay.set_y(yCenter);
      }
    },
    _alignCenter_Click: function(sender, e) {
      if (this.get_focus() == null) {
        return;
      }
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(1038, 'Align Centers'), this._tour));
      var yCenter = this.get_focus().get_y();
      var xCenter = this.get_focus().get_x();
      var $enum1 = ss.enumerate(this.selection.selectionSet);
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        overlay.set_y(yCenter);
        overlay.set_x(xCenter);
      }
    },
    _alignRight_Click: function(sender, e) {
      if (this.get_focus() == null) {
        return;
      }
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(1040, 'Align Right'), this._tour));
      var left = this.get_focus().get_x() + this.get_focus().get_width() / 2;
      var $enum1 = ss.enumerate(this.selection.selectionSet);
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        overlay.set_x(left - overlay.get_width() / 2);
      }
    },
    _alignLeft_Click: function(sender, e) {
      if (this.get_focus() == null) {
        return;
      }
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(1041, 'Align Left'), this._tour));
      var right = this.get_focus().get_x() - this.get_focus().get_width() / 2;
      var $enum1 = ss.enumerate(this.selection.selectionSet);
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        overlay.set_x(right + overlay.get_width() / 2);
      }
    },
    _alignBottom_Click: function(sender, e) {
      if (this.get_focus() == null) {
        return;
      }
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(1042, 'Align Bottoms'), this._tour));
      var top = this.get_focus().get_y() + this.get_focus().get_height() / 2;
      var $enum1 = ss.enumerate(this.selection.selectionSet);
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        overlay.set_y(top - overlay.get_height() / 2);
      }
    },
    _alignTop_Click: function(sender, e) {
      if (this.get_focus() == null) {
        return;
      }
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(1039, 'Align Tops'), this._tour));
      var top = this.get_focus().get_y() - this.get_focus().get_height() / 2;
      var $enum1 = ss.enumerate(this.selection.selectionSet);
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        overlay.set_y(top + overlay.get_height() / 2);
      }
    },
    _interpolation_Click: function(sender, e) {
      var item = sender;
      if (this.get_focus() != null) {
        var $enum1 = ss.enumerate(this.selection.selectionSet);
        while ($enum1.moveNext()) {
          var overlay = $enum1.current;
          overlay.set_interpolationType(item.tag);
        }
      }
    },
    _linkSlideChosen: function() {
      if (this.selectDialog.get_OK()) {
        this.get_focus().set_linkID(this.selectDialog.get_id());
      }
    },
    _linkID_Click: function(sender, e) {
      this.selectDialog = new SelectLink(this.get_focus().get_linkID());
      this.nextSlideCallback(this.selectDialog, ss.bind('_linkSlideChosen', this));
    },
    _flipbookProperties_Click: function(sender, e) {
    },
    _animateMenu_Click: function(sender, e) {
      if (this.get_focus() != null) {
        Undo.push(new UndoTourStopChange(Language.getLocalizedText(588, 'Animate'), this._tour));
        var animate = !this.get_focus().get_animate();
        var $enum1 = ss.enumerate(this.selection.selectionSet);
        while ($enum1.moveNext()) {
          var overlay = $enum1.current;
          overlay.set_animate(animate);
        }
      }
    },
    _url_Click: function(sender, e) {
      var $this = this;

      if (this.get_focus() != null) {
        var input = new SimpleInput(Language.getLocalizedText(541, 'Edit Hyperlink'), Language.getLocalizedText(542, 'Url'), this.get_focus().get_url(), 2048);
        input.show(Cursor.get_position(), function() {
          Undo.push(new UndoTourStopChange(Language.getLocalizedText(541, 'Edit Hyperlink'), $this._tour));
          $this.get_focus().set_url(input.text);
        });
      }
    },
    _pickColor_Click: function(sender, e) {
      var $this = this;

      var picker = new ColorPicker();
      picker.color = this.get_focus().get_color();
      picker.callBack = function() {
        Undo.push(new UndoTourStopChange(Language.getLocalizedText(543, 'Edit Color'), $this._tour));
        var $enum1 = ss.enumerate($this.selection.selectionSet);
        while ($enum1.moveNext()) {
          var overlay = $enum1.current;
          overlay.set_color(picker.color);
        }
      };
      picker.show(e);
    },
    _volume_Click: function(sender, e) {
      var vol = new PopupVolume();
      vol.volume = (this.get_focus()).get_volume();
      vol.showDialog();
      (this.get_focus()).set_volume(vol.volume);
    },
    _deleteMenu_Click: function(sender, e) {
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        return;
      }
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(167, 'Delete'), this._tour));
      var $enum1 = ss.enumerate(this.selection.selectionSet);
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        this._tour.get_currentTourStop().removeOverlay(overlay);
      }
      this.set_focus(null);
      this.clearSelection();
      OverlayList._updateOverlayList(this._tour.get_currentTourStop(), this.selection);
    },
    _properties_Click: function(sender, e) {
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
      }
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(549, 'Properties Edit'), this._tour));
      var props = new OverlayProperties();
      props.overlay = this.get_focus();
      props.showDialog();
      OverlayList._updateOverlayList(this._tour.get_currentTourStop(), this.selection);
    },
    _bringForward_Click: function(sender, e) {
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        return;
      }
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(454, 'Bring Forward'), this._tour));
      var $enum1 = ss.enumerate(this._getSortedSelection(false));
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        this._tour.get_currentTourStop().bringForward(overlay);
      }
      OverlayList._updateOverlayList(this._tour.get_currentTourStop(), this.selection);
    },
    _sendBackward_Click: function(sender, e) {
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        return;
      }
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(455, 'Send Backward'), this._tour));
      var $enum1 = ss.enumerate(this._getSortedSelection(true));
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        this._tour.get_currentTourStop().sendBackward(overlay);
      }
      OverlayList._updateOverlayList(this._tour.get_currentTourStop(), this.selection);
    },
    _sendToBack_Click: function(sender, e) {
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        return;
      }
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(453, 'Send to Back'), this._tour));
      var $enum1 = ss.enumerate(this._getSortedSelection(true));
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        this._tour.get_currentTourStop().sendToBack(overlay);
      }
      OverlayList._updateOverlayList(this._tour.get_currentTourStop(), this.selection);
    },
    _bringToFront_Click: function(sender, e) {
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        return;
      }
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(452, 'Bring to Front'), this._tour));
      var $enum1 = ss.enumerate(this._getSortedSelection(false));
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        this._tour.get_currentTourStop().bringToFront(overlay);
      }
      OverlayList._updateOverlayList(this._tour.get_currentTourStop(), this.selection);
    },
    _getSortedSelection: function(reverse) {
      var sorted = [];
      var $enum1 = ss.enumerate(this.selection.selectionSet);
      while ($enum1.moveNext()) {
        var ov = $enum1.current;
        sorted.push(ov);
      }
      if (reverse) {
        sorted.sort(function(p1, p2) {
          return -Util.compare(p1.get_zOrder(), p2.get_zOrder());
        });
      }
      else {
        sorted.sort(function(p1, p2) {
          return Util.compare(p1.get_zOrder(), p2.get_zOrder());
        });
      }
      return sorted;
    },
    _copyMenu_Click: function(sender, e) {
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        return;
      }
      var writer = new XmlTextWriter();
      writer._writeProcessingInstruction('xml', "version='1.0' encoding='UTF-8'");
      writer._writeStartElement('Overlays');
      var $enum1 = ss.enumerate(this.selection.selectionSet);
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        overlay.saveToXml(writer, true);
      }
      writer._writeEndElement();
      this.clipboardData = writer.body;
      this.clipboardType = 'WorldWideTelescope.Overlay';
    },
    _cutMenu_Click: function(sender, e) {
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        return;
      }
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(427, 'Cut'), this._tour));
      this._copyMenu_Click(sender, e);
      var $enum1 = ss.enumerate(this.selection.selectionSet);
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        this._tour.get_currentTourStop().removeOverlay(overlay);
      }
      this.set_focus(null);
      this.clearSelection();
      OverlayList._updateOverlayList(this._tour.get_currentTourStop(), this.selection);
    },
    _pasteMenu_Click: function(sender, e) {
      Undo.push(new UndoTourSlidelistChange(Language.getLocalizedText(544, 'Paste Object'), this._tour));
      if (this.clipboardType === 'WorldWideTelescope.Overlay') {
        var xParser = new DOMParser();
        var doc = xParser.parseFromString(this.clipboardData, 'text/xml');
        this.clearSelection();
        var parent = Util.selectSingleNode(doc, 'Overlays');
        var $enum1 = ss.enumerate(parent.childNodes);
        while ($enum1.moveNext()) {
          var child = $enum1.current;
          if (child.nodeName === 'Overlay') {
            var copy = Overlay._fromXml(this._tour.get_currentTourStop(), child);
            var found = false;
            var maxX = 0;
            var maxY = 0;
            var $enum2 = ss.enumerate(this._tour.get_currentTourStop().get_overlays());
            while ($enum2.moveNext()) {
              var item = $enum2.current;
              if (item.id === copy.id && ss.typeOf(item) === ss.typeOf(copy)) {
                found = true;
                if (maxY < item.get_y() || maxX < item.get_x()) {
                  maxX = item.get_x();
                  maxY = item.get_y();
                }
              }
            }
            if (found) {
              copy.set_x(maxX + 20);
              copy.set_y(maxY + 20);
            }
            this._tour.get_currentTourStop().addOverlay(copy);
            this.set_focus(copy);
            this.selection.addSelection(this.get_focus());
            OverlayList._updateOverlayList(this._tour.get_currentTourStop(), this.selection);
          }
        }
      }
    },
    mouseClick: function(sender, e) {
      if (TourEditor.currentEditor != null) {
        if (TourEditor.currentEditor.mouseClick(sender, e)) {
          return true;
        }
      }
      return false;
    },
    click: function(sender, e) {
      if (TourEditor.currentEditor != null) {
        if (TourEditor.currentEditor.click(sender, e)) {
          return true;
        }
      }
      return false;
    },
    mouseDoubleClick: function(sender, e) {
      if (TourEditor.currentEditor != null) {
        if (TourEditor.currentEditor.mouseDoubleClick(sender, e)) {
          return true;
        }
      }
      if (this.get_focus() != null) {
        if (ss.typeOf(this.get_focus()) === TextOverlay) {
          this._editText();
          return true;
        }
      }
      return true;
    },
    _doneEditing: function() {
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(545, 'Text Edit'), this._tour));
      (this.get_focus()).set_width(0);
      (this.get_focus()).set_height(0);
      this.get_focus().set_color((this.get_focus()).textObject.foregroundColor);
      this.get_focus().cleanUp();
    },
    _editText: function() {
      var textObj = (this.get_focus()).textObject;
      this.editTextCallback(textObj, ss.bind('_doneEditing', this));
    },
    keyDown: function(sender, e) {
      if (TourEditor.currentEditor != null) {
        if (TourEditor.currentEditor.keyDown(sender, e)) {
          return true;
        }
      }
      var increment = 1;
      if (e.ctrlKey) {
        increment = 10;
      }
      switch (e.keyCode) {
        case 65:
          if (e.ctrlKey) {
            this.clearSelection();
            this.selection.addSelectionRange(this._tour.get_currentTourStop().get_overlays());
            OverlayList._updateOverlayListSelection(this.selection);
            if (this._tour.get_currentTourStop().get_overlays().length > 0) {
              this.set_focus(this._tour.get_currentTourStop().get_overlays()[0]);
            }
          }
          break;
        case 90:
          if (e.ctrlKey) {
            if (Undo.peekAction()) {
              TourEdit._undoStep();
            }
            else {
              UiTools._beep();
            }
          }
          break;
        case 89:
          if (e.ctrlKey) {
            if (Undo.peekRedoAction()) {
              TourEdit._redoStep();
            }
            else {
              UiTools._beep();
            }
          }
          break;
        case 67:
          if (e.ctrlKey) {
            this._copyMenu_Click(this, new ss.EventArgs());
          }
          break;
        case 86:
          if (e.ctrlKey) {
            this._pasteMenu_Click(this, new ss.EventArgs());
          }
          break;
        case 88:
          if (e.ctrlKey) {
            this._cutMenu_Click(this, new ss.EventArgs());
          }
          break;
        case 46:
          this._deleteMenu_Click(null, null);
          return true;
        case 9:
          if (e.shiftKey) {
            this._selectLast();
          }
          else {
            this._selectNext();
          }
          return true;
        case 37:
          if (this.get_focus() != null) {
            var $enum1 = ss.enumerate(this.selection.selectionSet);
            while ($enum1.moveNext()) {
              var overlay = $enum1.current;
              if (e.shiftKey) {
                if (e.altKey) {
                  if (overlay.get_width() > increment) {
                    Undo.push(new UndoTourStopChange(Language.getLocalizedText(537, 'Resize'), this._tour));
                    overlay.set_width(overlay.get_width() - increment);
                  }
                }
                else {
                  var aspect = overlay.get_width() / overlay.get_height();
                  if (overlay.get_width() > increment && overlay.get_height() > (increment * aspect)) {
                    Undo.push(new UndoTourStopChange(Language.getLocalizedText(537, 'Resize'), this._tour));
                    overlay.set_width(overlay.get_width() - increment);
                    overlay.set_height(overlay.get_height() - increment * aspect);
                  }
                }
              }
              else if (e.altKey) {
                Undo.push(new UndoTourStopChange(Language.getLocalizedText(538, 'Rotate'), this._tour));
                overlay.set_rotationAngle(overlay.get_rotationAngle() - increment);
              }
              else {
                Undo.push(new UndoTourStopChange(Language.getLocalizedText(540, 'Move'), this._tour));
                overlay.set_x(overlay.get_x() - increment);
              }
            }
            return true;
          }
          break;
        case 39:
          if (this.get_focus() != null) {
            var $enum2 = ss.enumerate(this.selection.selectionSet);
            while ($enum2.moveNext()) {
              var overlay = $enum2.current;
              if (e.shiftKey) {
                Undo.push(new UndoTourStopChange(Language.getLocalizedText(537, 'Resize'), this._tour));
                if (e.altKey) {
                  overlay.set_width(overlay.get_width() + increment);
                }
                else {
                  var aspect = overlay.get_width() / overlay.get_height();
                  overlay.set_width(overlay.get_width() + increment);
                  overlay.set_height(overlay.get_height() + increment * aspect);
                }
              }
              else if (e.altKey) {
                Undo.push(new UndoTourStopChange(Language.getLocalizedText(538, 'Rotate'), this._tour));
                overlay.set_rotationAngle(overlay.get_rotationAngle() + increment);
              }
              else {
                Undo.push(new UndoTourStopChange(Language.getLocalizedText(540, 'Move'), this._tour));
                overlay.set_x(overlay.get_x() + increment);
              }
            }
            return true;
          }
          break;
        case 38:
          if (this.get_focus() != null) {
            var $enum3 = ss.enumerate(this.selection.selectionSet);
            while ($enum3.moveNext()) {
              var overlay = $enum3.current;
              if (e.shiftKey) {
                Undo.push(new UndoTourStopChange(Language.getLocalizedText(537, 'Resize'), this._tour));
                if (e.altKey) {
                  overlay.set_height(overlay.get_height() + increment);
                }
                else {
                  var aspect = overlay.get_width() / overlay.get_height();
                  overlay.set_width(overlay.get_width() + increment);
                  overlay.set_height(overlay.get_height() + increment * aspect);
                }
              }
              else if (!e.altKey) {
                Undo.push(new UndoTourStopChange(Language.getLocalizedText(540, 'Move'), this._tour));
                overlay.set_y(overlay.get_y() - increment);
              }
            }
            return true;
          }
          break;
        case 40:
          if (this.get_focus() != null) {
            var $enum4 = ss.enumerate(this.selection.selectionSet);
            while ($enum4.moveNext()) {
              var overlay = $enum4.current;
              if (e.shiftKey) {
                if (e.altKey) {
                  if (overlay.get_height() > increment) {
                    Undo.push(new UndoTourStopChange(Language.getLocalizedText(537, 'Resize'), this._tour));
                    overlay.set_height(overlay.get_height() - increment);
                  }
                }
                else {
                  var aspect = overlay.get_width() / overlay.get_height();
                  if (overlay.get_width() > increment && overlay.get_height() > (increment * aspect)) {
                    Undo.push(new UndoTourStopChange(Language.getLocalizedText(537, 'Resize'), this._tour));
                    overlay.set_width(overlay.get_width() - increment);
                    overlay.set_height(overlay.get_height() - increment * aspect);
                  }
                }
              }
              else if (!e.altKey) {
                Undo.push(new UndoTourStopChange(Language.getLocalizedText(540, 'Move'), this._tour));
                overlay.set_y(overlay.get_y() + increment);
              }
            }
            return true;
          }
          break;
        case 34:
          if (e.altKey) {
            if (this._tour.get_currentTourstopIndex() < (this._tour.get_tourStops().length - 1)) {
              this._tour.set_currentTourstopIndex(this._tour.get_currentTourstopIndex() + 1) - 1;
              TourEdit._selectCurrent();
              TourEdit._ensureSelectedVisible();
            }
            return true;
          }
          break;
        case 33:
          if (e.altKey) {
            if (this._tour.get_currentTourstopIndex() > 0) {
              this._tour.set_currentTourstopIndex(this._tour.get_currentTourstopIndex() - 1) + 1;
              TourEdit._selectCurrent();
              TourEdit._ensureSelectedVisible();
            }
            return true;
          }
          break;
      }
      return false;
    },
    _selectNext: function() {
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        return;
      }
      this.set_focus(this._tour.get_currentTourStop().getNextOverlay(this.get_focus()));
      this.selection.setSelection(this.get_focus());
      OverlayList._updateOverlayList(this._tour.get_currentTourStop(), this.selection);
    },
    _selectLast: function() {
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        return;
      }
      this.set_focus(this._tour.get_currentTourStop().getPerviousOverlay(this.get_focus()));
      this.selection.setSelection(this.get_focus());
      OverlayList._updateOverlayList(this._tour.get_currentTourStop(), this.selection);
    },
    keyUp: function(sender, e) {
      if (TourEditor.currentEditor != null) {
        if (TourEditor.currentEditor.keyUp(sender, e)) {
          return true;
        }
      }
      return false;
    },
    addPicture: function(file) {
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        return false;
      }
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(546, 'Insert Picture'), this._tour));
      var bmp = BitmapOverlay.create(this._tour.get_currentTourStop(), file);
      bmp.set_x(960);
      bmp.set_y(600);
      this._tour.get_currentTourStop().addOverlay(bmp);
      OverlayList._updateOverlayList(this._tour.get_currentTourStop(), this.selection);
      return true;
    },
    addFlipbook: function(filename) {
      return false;
    },
    addAudio: function(file, music) {
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        return false;
      }
      var audio = AudioOverlay.create(this._tour.get_currentTourStop(), file);
      audio.set_x(900);
      audio.set_y(600);
      if (music) {
        this._tour.get_currentTourStop().set_musicTrack(audio);
      }
      else {
        this._tour.get_currentTourStop().set_voiceTrack(audio);
      }
      return true;
    },
    addVideo: function(filename) {
      return true;
    },
    addText: function(p, textObject) {
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        return false;
      }
      var text = TextOverlay.create(textObject);
      text.set_color(textObject.foregroundColor);
      text.set_x(960);
      text.set_y(600);
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(547, 'Insert Text'), this._tour));
      this._tour.get_currentTourStop().addOverlay(text);
      OverlayList._updateOverlayList(this._tour.get_currentTourStop(), this.selection);
      return true;
    },
    addOverlay: function(ol) {
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        return null;
      }
      if (ss.typeOf(ol) === ShapeOverlay) {
        var srcShapeOverlay = ol;
        if (srcShapeOverlay != null) {
          var shape = ShapeOverlay._create(this._tour.get_currentTourStop(), srcShapeOverlay.get_shapeType());
          shape.set_width(srcShapeOverlay.get_width());
          shape.set_height(srcShapeOverlay.get_height());
          shape.set_x(this._contextPoint.x);
          shape.set_y(this._contextPoint.y);
          shape.set_color(srcShapeOverlay.get_color());
          shape.set_rotationAngle(srcShapeOverlay.get_rotationAngle());
          this._tour.get_currentTourStop().addOverlay(shape);
          return shape;
        }
      }
      else if (ss.typeOf(ol) === TextOverlay) {
        var srcTxtOverlay = ol;
        if (srcTxtOverlay != null) {
          var text = TextOverlay.create(srcTxtOverlay.textObject);
          text.set_x(this._contextPoint.x);
          text.set_y(this._contextPoint.y);
          text.set_color(srcTxtOverlay.get_color());
          this._tour.get_currentTourStop().addOverlay(text);
          return text;
        }
      }
      else if (ss.typeOf(ol) === BitmapOverlay) {
        var srcBmpOverlay = ol;
        if (srcBmpOverlay != null) {
          var bitmap = srcBmpOverlay.copy(this._tour.get_currentTourStop());
          bitmap.set_x(this._contextPoint.x);
          bitmap.set_y(this._contextPoint.y);
          this._tour.get_currentTourStop().addOverlay(bitmap);
          return bitmap;
        }
      }
      else if (ss.typeOf(ol) === FlipbookOverlay) {
        var srcFlipbookOverlay = ol;
        if (srcFlipbookOverlay != null) {
          var bitmap = srcFlipbookOverlay.copy(this._tour.get_currentTourStop());
          bitmap.set_x(this._contextPoint.x);
          bitmap.set_y(this._contextPoint.y);
          this._tour.get_currentTourStop().addOverlay(bitmap);
          return bitmap;
        }
      }
      return null;
    },
    addShape: function(p, shapeType) {
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        return false;
      }
      Undo.push(new UndoTourStopChange(Language.getLocalizedText(548, 'Insert Shape'), this._tour));
      var shape = ShapeOverlay._create(this._tour.get_currentTourStop(), shapeType);
      shape.set_width(200);
      shape.set_height(200);
      if (shapeType === 4) {
        shape.set_height(shape.get_height() / 2);
      }
      if (shapeType === 5) {
        shape.set_height(12);
      }
      shape.set_x(960);
      shape.set_y(600);
      this._tour.get_currentTourStop().addOverlay(shape);
      this.set_focus(shape);
      this.selection.setSelection(this.get_focus());
      OverlayList._updateOverlayList(this._tour.get_currentTourStop(), this.selection);
      return true;
    },
    getCurrentColor: function() {
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        return this._defaultColor;
      }
      if (this.get_focus() != null) {
        return this.get_focus().get_color();
      }
      else {
        return this._defaultColor;
      }
    },
    setCurrentColor: function(color) {
      this._defaultColor = color;
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        return;
      }
      if (this.get_focus() != null) {
        this.get_focus().set_color(color);
      }
    },
    dispose: function() {
      if (this._contextMenu != null) {
        this._contextMenu._dispose();
        this._contextMenu = null;
      }
    },
    hover: function(pnt) {
      if (TourEditor.currentEditor != null) {
        if (TourEditor.currentEditor.hover(pnt)) {
          return true;
        }
      }
      return true;
    }
  };


  // wwtlib.OverlayList

  function OverlayList() {
  }
  OverlayList._updateOverlayList = function(currentTourStop, selection) {
  };
  OverlayList._updateOverlayListSelection = function(selection) {
  };
  var OverlayList$ = {

  };


  // wwtlib.TourEdit

  function TourEdit() {
  }
  TourEdit._ensureSelectedVisible = function() {
  };
  TourEdit._selectCurrent = function() {
  };
  TourEdit._undoStep = function() {
    if (Undo.peekAction()) {
      Undo.stepBack();
    }
  };
  TourEdit._redoStep = function() {
    if (Undo.peekRedoAction()) {
      Undo.stepForward();
    }
  };
  var TourEdit$ = {

  };


  // wwtlib.SoundEditor

  function SoundEditor() {
    this.target = null;
  }
  var SoundEditor$ = {

  };


  // wwtlib.TourStopList

  function TourStopList() {
    this.tour = null;
    this.showAddButton = false;
    this.selectedItems = null;
    this.selectedItem = -1;
    this.refreshCallback = null;
    this.multipleSelection = false;
    this.hitType = false;
  }
  var TourStopList$ = {
    selectAll: function() {
      this.selectedItems = {};
      for (var i = 0; i < this.tour.get_tourStops().length; i++) {
        this.selectedItems[i] = this.tour.get_tourStops()[i];
      }
    },
    refresh: function() {
      if (this.refreshCallback != null) {
        this.refreshCallback();
      }
    },
    findItem: function(ts) {
      return -1;
    },
    ensureSelectedVisible: function() {
    },
    ensureAddVisible: function() {
    }
  };


  // wwtlib.TimeLine

  function TimeLine() {
  }
  TimeLine.refreshUi = function() {
  };
  var TimeLine$ = {

  };


  // wwtlib.TourPlayer

  function TourPlayer() {
    this._overlayBlend = BlendState.create(false, 1000);
    this._playerState = BlendState.create(false, 2000);
    this._middleHover = false;
    this._leftHover = false;
    this._rightHover = false;
    this._middleDown = false;
    this._leftDown = false;
    this._rightDown = false;
    this._top = 1;
    this._center = 1;
    this._lastHit = ss.now();
    this._imageCount = 0;
    this._imageLoadCount = 0;
    this._imagesLoaded = false;
    this._downloading = false;
    this._tour = null;
    this._onTarget = false;
    this._currentMasterSlide = null;
    this._callStack = new ss.Stack();
  }
  TourPlayer.get_playing = function() {
    return TourPlayer._playing;
  };
  TourPlayer.set_playing = function(value) {
    TourPlayer._playing = value;
    return value;
  };
  TourPlayer.add_tourEnded = function(value) {
    TourPlayer.__tourEnded = ss.bindAdd(TourPlayer.__tourEnded, value);
  };
  TourPlayer.remove_tourEnded = function(value) {
    TourPlayer.__tourEnded = ss.bindSub(TourPlayer.__tourEnded, value);
  };
  var TourPlayer$ = {
    render: function(renderContext) {
      if (this._tour == null || this._tour.get_currentTourStop() == null || !TourPlayer._playing) {
        return;
      }
      renderContext.save();
      this.updateSlideStates();
      if (!this._onTarget) {
        this._slideStartTime = ss.now();
        if (renderContext.onTarget(this.get_tour().get_currentTourStop().get_target())) {
          this._onTarget = true;
          this._overlayBlend.set_state(!this.get_tour().get_currentTourStop().get_fadeInOverlays());
          this._overlayBlend.set_targetState(true);
          if (this._tour.get_currentTourStop().get_musicTrack() != null) {
            this._tour.get_currentTourStop().get_musicTrack().play();
          }
          if (this._tour.get_currentTourStop().get_voiceTrack() != null) {
            this._tour.get_currentTourStop().get_voiceTrack().play();
          }
          var caption = '';
          var $enum1 = ss.enumerate(this._tour.get_currentTourStop().get_overlays());
          while ($enum1.moveNext()) {
            var overlay = $enum1.current;
            if (overlay.get_name().toLowerCase() === 'caption') {
              var text = ss.safeCast(overlay, TextOverlay);
              if (text != null) {
                caption = text.textObject.text;
              }
            }
            overlay.play();
          }
          LayerManager.setVisibleLayerList(this._tour.get_currentTourStop().layers);
          if (this._tour.get_currentTourStop().get_endTarget() != null && this._tour.get_currentTourStop().get_endTarget().get_zoomLevel() !== -1) {
            if (this._tour.get_currentTourStop().get_target().get_type() === 4) {
            }
            renderContext.viewMover = new ViewMoverKenBurnsStyle(this._tour.get_currentTourStop().get_target().get_camParams(), this._tour.get_currentTourStop().get_endTarget().get_camParams(), this._tour.get_currentTourStop().get_duration() / 1000, this._tour.get_currentTourStop().get_startTime(), this._tour.get_currentTourStop().get_endTime(), this._tour.get_currentTourStop().get_interpolationType());
          }
          Settings.tourSettings = this._tour.get_currentTourStop();
          SpaceTimeController.set_now(this._tour.get_currentTourStop().get_startTime());
          SpaceTimeController.set_syncToClock(false);
          WWTControl.scriptInterface._fireSlideChanged(caption);
        }
      }
      if (renderContext.gl != null) {
        renderContext.setupMatricesOverlays();
        if (this._currentMasterSlide != null) {
          var $enum2 = ss.enumerate(this._currentMasterSlide.get_overlays());
          while ($enum2.moveNext()) {
            var overlay = $enum2.current;
            overlay.set_tweenFactor(1);
            overlay.draw3D(renderContext, false);
          }
        }
        if (this._onTarget) {
          var $enum3 = ss.enumerate(this._tour.get_currentTourStop().get_overlays());
          while ($enum3.moveNext()) {
            var overlay = $enum3.current;
            if (overlay.get_name().toLowerCase() !== 'caption' || WWTControl.scriptInterface.get_showCaptions()) {
              overlay.set_tweenFactor(CameraParameters.easeCurve(this._tour.get_currentTourStop().get_tweenPosition(), (overlay.get_interpolationType() === 5) ? this._tour.get_currentTourStop().get_interpolationType() : overlay.get_interpolationType()));
              overlay.draw3D(renderContext, false);
            }
          }
        }
        renderContext.restore();
      }
      else {
        renderContext.device.scale(renderContext.height / 1116, renderContext.height / 1116);
        var aspectOrig = 1920 / 1116;
        var aspectNow = renderContext.width / renderContext.height;
        renderContext.device.translate(-((1920 - (aspectNow * 1116)) / 2), 0);
        if (this._currentMasterSlide != null) {
          var $enum4 = ss.enumerate(this._currentMasterSlide.get_overlays());
          while ($enum4.moveNext()) {
            var overlay = $enum4.current;
            overlay.set_tweenFactor(1);
            overlay.draw3D(renderContext, false);
          }
        }
        if (this._onTarget) {
          var $enum5 = ss.enumerate(this._tour.get_currentTourStop().get_overlays());
          while ($enum5.moveNext()) {
            var overlay = $enum5.current;
            if (overlay.get_name().toLowerCase() !== 'caption' || WWTControl.scriptInterface.get_showCaptions()) {
              overlay.set_tweenFactor(CameraParameters.easeCurve(this._tour.get_currentTourStop().get_tweenPosition(), (overlay.get_interpolationType() === 5) ? this._tour.get_currentTourStop().get_interpolationType() : overlay.get_interpolationType()));
              overlay.draw3D(renderContext, false);
            }
          }
        }
        else {
          var i = 0;
        }
        renderContext.restore();
        this._drawPlayerControls(renderContext);
      }
    },
    _drawPlayerControls: function(renderContext) {
      this._loadImages();
      if (!this._imagesLoaded) {
        return;
      }
      if (this._playerState.get_state()) {
        var span = ss.now() - this._lastHit;
        if (span > 7000) {
          this._playerState.set_targetState(false);
        }
        var ctx = renderContext.device;
        ctx.save();
        ctx.globalAlpha = this._playerState.get_opacity();
        this._top = renderContext.height - 60;
        this._center = renderContext.width / 2;
        var left = (this._leftDown) ? this._buttonPreviousPressed : ((this._leftHover) ? this._buttonPreviousHover : this._buttonPreviousNormal);
        var middle = (TourPlayer.get_playing()) ? ((this._middleDown) ? this._buttonPausePressed : ((this._middleHover) ? this._buttonPauseHover : this._buttonPauseNormal)) : ((this._middleDown) ? this._buttonPlayPressed : ((this._middleHover) ? this._buttonPlayHover : this._buttonPlayNormal));
        var right = (this._rightDown) ? this._buttonNextPressed : ((this._rightHover) ? this._buttonNextHover : this._buttonNextNormal);
        ctx.drawImage(left, this._center - 110, this._top);
        ctx.drawImage(right, this._center, this._top);
        ctx.drawImage(middle, this._center - 32, this._top - 4);
        ctx.restore();
      }
    },
    _hitTextPlayerControls: function(point, click, act) {
      if (click) {
        this._leftDown = false;
        this._rightDown = false;
        this._middleDown = false;
      }
      else {
        this._leftHover = false;
        this._rightHover = false;
        this._middleHover = false;
      }
      if (point.y < (this._top - 2)) {
        return false;
      }
      if (point.x < (this._center - 32) && point.x > (this._center - 105)) {
        if (click) {
          this._leftDown = true;
        }
        else {
          this._leftHover = true;
        }
        if (act) {
          this._playPreviousSlide();
          this._lastHit = ss.now();
        }
        return true;
      }
      if (point.x < (this._center + 105) && point.x > (this._center + 32)) {
        if (click) {
          this._rightDown = true;
        }
        else {
          this._rightHover = true;
        }
        if (act) {
          this._playNextSlide();
          this._lastHit = ss.now();
        }
        return true;
      }
      if (point.x < (this._center + 32) && point.x > (this._center - 32)) {
        if (click) {
          this._middleDown = true;
        }
        else {
          this._middleHover = true;
        }
        if (act) {
          this.pauseTour();
          this._lastHit = ss.now();
        }
        return true;
      }
      return false;
    },
    _loadImages: function() {
      if (!this._imagesLoaded && !this._downloading) {
        this._buttonNextDisabled = this._loadImageElement('images/button_next_disabled.png');
        this._buttonNextHover = this._loadImageElement('images/button_next_hover.png');
        this._buttonNextNormal = this._loadImageElement('images/button_next_normal.png');
        this._buttonNextPressed = this._loadImageElement('images/button_next_pressed.png');
        this._buttonPauseDisabled = this._loadImageElement('images/button_pause_disabled.png');
        this._buttonPauseHover = this._loadImageElement('images/button_pause_hover.png');
        this._buttonPauseNormal = this._loadImageElement('images/button_pause_normal.png');
        this._buttonPausePressed = this._loadImageElement('images/button_pause_pressed.png');
        this._buttonPlayDisabled = this._loadImageElement('images/button_play_disabled.png');
        this._buttonPlayHover = this._loadImageElement('images/button_play_hover.png');
        this._buttonPlayNormal = this._loadImageElement('images/button_play_normal.png');
        this._buttonPlayPressed = this._loadImageElement('images/button_play_pressed.png');
        this._buttonPreviousDisabled = this._loadImageElement('images/button_previous_disabled.png');
        this._buttonPreviousHover = this._loadImageElement('images/button_previous_hover.png');
        this._buttonPreviousNormal = this._loadImageElement('images/button_previous_normal.png');
        this._buttonPreviousPressed = this._loadImageElement('images/button_previous_pressed.png');
      }
    },
    _loadImageElement: function(url) {
      var $this = this;

      this._imageCount++;
      this._imagesLoaded = false;
      this._downloading = true;
      var temp = document.createElement('img');
      temp.src = url;
      temp.addEventListener('load', function(e) {
        $this._imageLoadCount++;
        if ($this._imageLoadCount === $this._imageCount) {
          $this._downloading = false;
          $this._imagesLoaded = true;
        }
      }, false);
      return temp;
    },
    get_tour: function() {
      return this._tour;
    },
    set_tour: function(value) {
      this._tour = value;
      return value;
    },
    nextSlide: function() {
      if (this._tour.get_currentTourStop() != null) {
        if (!this._tour.get_currentTourStop().get_masterSlide()) {
          if (this._tour.get_currentTourStop().get_musicTrack() != null) {
            this._tour.get_currentTourStop().get_musicTrack().stop();
          }
          if (this._tour.get_currentTourStop().get_voiceTrack() != null) {
            this._tour.get_currentTourStop().get_voiceTrack().stop();
          }
          var $enum1 = ss.enumerate(this._tour.get_currentTourStop().get_overlays());
          while ($enum1.moveNext()) {
            var overlay = $enum1.current;
            overlay.stop();
          }
        }
        else {
          this._currentMasterSlide = this._tour.get_currentTourStop();
        }
      }
      if (this._tour.get_currentTourstopIndex() < (this._tour.get_tourStops().length - 1) || this._tour.get_currentTourStop().get_isLinked()) {
        if (this._tour.get_currentTourStop().get_endTarget() != null) {
          WWTControl.singleton.gotoTargetFull(false, true, this._tour.get_currentTourStop().get_endTarget().get_camParams(), this._tour.get_currentTourStop().get_target().get_studyImageset(), this._tour.get_currentTourStop().get_target().get_backgroundImageset());
          WWTControl.singleton.set__mover(null);
        }
        this._onTarget = false;
        if (this._tour.get_currentTourStop().get_isLinked()) {
          try {
            switch (this._tour.get_currentTourStop().get_nextSlide()) {
              case 'Return':
                if (this._callStack.count > 0) {
                  this._playFromTourstop(this._tour.get_tourStops()[this._callStack.pop()]);
                }
                else {
                  this._tour.set_currentTourstopIndex(this._tour.get_tourStops().length - 1);
                }
                break;
              default:
                this._playFromTourstop(this._tour.get_tourStops()[this._tour.getTourStopIndexByID(this._tour.get_currentTourStop().get_nextSlide())]);
                break;
            }
          }
          catch ($e2) {
            if ((this._tour.get_currentTourstopIndex() < (this._tour.get_tourStops().length - 1))) {
              this._tour.set_currentTourstopIndex(this._tour.get_currentTourstopIndex() + 1) - 1;
            }
          }
        }
        else {
          this._tour.set_currentTourstopIndex(this._tour.get_currentTourstopIndex() + 1) - 1;
        }
        if (this._currentMasterSlide != null && this._tour.get_currentTourStop().get_masterSlide()) {
          this._stopCurrentMaster();
        }
        var instant = false;
        switch (this._tour.get_currentTourStop().get__transition()) {
          case 0:
            break;
          case 1:
            instant = true;
            break;
          case 2:
            instant = true;
            break;
          case 3:
            instant = true;
            break;
          case 5:
            instant = true;
            break;
          case 4:
            instant = true;
            break;
          default:
            break;
        }
        WWTControl.singleton.gotoTarget(this._tour.get_currentTourStop().get_target(), false, instant, false);
        this._slideStartTime = ss.now();
        Settings.tourSettings = this._tour.get_currentTourStop();
        SpaceTimeController.set_now(this._tour.get_currentTourStop().get_startTime());
        SpaceTimeController.set_syncToClock(false);
      }
      else {
        this._stopCurrentMaster();
        TourPlayer._playing = false;
        if (Settings.get_current().autoRepeatTour) {
          this._tour.set_currentTourstopIndex(-1);
          this.play();
        }
        else {
          WWTControl.singleton._freezeView();
          if (TourPlayer.__tourEnded != null) {
            TourPlayer.__tourEnded(this, new ss.EventArgs());
          }
          this.showEndTourPopup();
          WWTControl.singleton._hideUI(false);
          WWTControl.scriptInterface._fireTourEnded();
        }
      }
    },
    _stopCurrentMaster: function() {
      if (this._currentMasterSlide != null) {
        if (this._currentMasterSlide.get_musicTrack() != null) {
          this._currentMasterSlide.get_musicTrack().stop();
        }
        if (this._currentMasterSlide.get_voiceTrack() != null) {
          this._currentMasterSlide.get_voiceTrack().stop();
        }
        var $enum1 = ss.enumerate(this._currentMasterSlide.get_overlays());
        while ($enum1.moveNext()) {
          var overlay = $enum1.current;
          overlay.stop();
        }
        this._currentMasterSlide = null;
      }
    },
    showEndTourPopup: function() {
    },
    play: function() {
      if (this._tour == null) {
        return;
      }
      if (TourPlayer._playing) {
        this.stop(true);
      }
      else {
        TourPlayer._playing = true;
      }
      WWTControl.singleton._hideUI(true);
      TourPlayer._playing = true;
      if (this._tour.get_tourStops().length > 0) {
        this._onTarget = false;
        if (this._tour.get_currentTourstopIndex() === -1) {
          this._tour.set_currentTourStop(this._tour.get_tourStops()[0]);
        }
        if (this._tour.get_currentTourstopIndex() > 0) {
          this._playMasterForCurrent();
        }
        WWTControl.singleton.gotoTarget(this._tour.get_currentTourStop().get_target(), false, true, false);
      }
      this._slideStartTime = ss.now();
      TourPlayer._playing = true;
    },
    _playMasterForCurrent: function() {
      if (!this._tour.get_currentTourStop().get_masterSlide()) {
        var currentMaster = this._tour.elapsedTimeSinceLastMaster(this._tour.get_currentTourstopIndex());
        if (currentMaster != null && this._currentMasterSlide != null) {
          var elapsed = currentMaster.durration;
          this._currentMasterSlide = currentMaster.master;
          if (this._currentMasterSlide.get_musicTrack() != null) {
            this._currentMasterSlide.get_musicTrack().play();
            this._currentMasterSlide.get_musicTrack().seek(elapsed);
          }
          if (this._currentMasterSlide.get_voiceTrack() != null) {
            this._currentMasterSlide.get_voiceTrack().play();
            this._currentMasterSlide.get_voiceTrack().seek(elapsed);
          }
          var $enum1 = ss.enumerate(this._currentMasterSlide.get_overlays());
          while ($enum1.moveNext()) {
            var overlay = $enum1.current;
            overlay.play();
            overlay.seek(elapsed);
          }
        }
      }
    },
    stop: function(noSwitchBackFullScreen) {
      if (TourPlayer._switchedToFullScreen && !noSwitchBackFullScreen) {
      }
      Settings.tourSettings = null;
      TourPlayer._playing = false;
      if (this._tour.get_currentTourStop() != null) {
        if (this._tour.get_currentTourStop().get_musicTrack() != null) {
          this._tour.get_currentTourStop().get_musicTrack().stop();
        }
        if (this._tour.get_currentTourStop().get_voiceTrack() != null) {
          this._tour.get_currentTourStop().get_voiceTrack().stop();
        }
        var $enum1 = ss.enumerate(this._tour.get_currentTourStop().get_overlays());
        while ($enum1.moveNext()) {
          var overlay = $enum1.current;
          overlay.stop();
        }
      }
      if (this._currentMasterSlide != null) {
        if (this._currentMasterSlide.get_musicTrack() != null) {
          this._currentMasterSlide.get_musicTrack().stop();
        }
        if (this._currentMasterSlide.get_voiceTrack() != null) {
          this._currentMasterSlide.get_voiceTrack().stop();
        }
        var $enum2 = ss.enumerate(this._currentMasterSlide.get_overlays());
        while ($enum2.moveNext()) {
          var overlay = $enum2.current;
          overlay.stop();
        }
      }
      WWTControl.singleton._hideUI(TourPlayer.noRestoreUIOnStop);
      WWTControl.scriptInterface._fireTourEnded();
    },
    updateSlideStates: function() {
      var slideChanging = false;
      var slideElapsedTime = ss.now() - this._slideStartTime;
      if (slideElapsedTime > this._tour.get_currentTourStop().get_duration() && TourPlayer._playing) {
        this.nextSlide();
        slideChanging = true;
      }
      slideElapsedTime = ss.now() - this._slideStartTime;
      if (this._tour.get_currentTourStop() != null) {
        this._tour.get_currentTourStop().set_tweenPosition(Math.min(1, (slideElapsedTime / this._tour.get_currentTourStop().get_duration())));
      }
      if (this._tour.get_currentTourStop() != null) {
        this._tour.get_currentTourStop().faderOpacity = 0;
        var elapsedSeconds = this._tour.get_currentTourStop().get_tweenPosition() * this._tour.get_currentTourStop().get_duration() / 1000;
        if (slideChanging) {
          WWTControl.singleton.set_crossFadeFrame(false);
        }
        switch (this._tour.get_currentTourStop().get__transition()) {
          case 0:
            this._tour.get_currentTourStop().faderOpacity = 0;
            WWTControl.singleton.set_crossFadeFrame(false);
            break;
          case 2:
            if (slideChanging) {
            }
            if (elapsedSeconds < (elapsedSeconds - this._tour.get_currentTourStop().get__transitionHoldTime())) {
              WWTControl.singleton.set_crossFadeFrame(true);
              this._tour.get_currentTourStop().faderOpacity = 1;
            }
            else {
              this._tour.get_currentTourStop().faderOpacity = 0;
              WWTControl.singleton.set_crossFadeFrame(false);
            }
            break;
          case 1:
            WWTControl.singleton.set_crossFadeFrame(true);
            var opacity = Math.max(0, 1 - Math.min(1, (elapsedSeconds - this._tour.get_currentTourStop().get__transitionHoldTime()) / this._tour.get_currentTourStop().get__transitionTime()));
            this._tour.get_currentTourStop().faderOpacity = opacity;
            if (slideChanging) {
            }
            break;
          case 3:
          case 4:
            WWTControl.singleton.set_crossFadeFrame(false);
            var opacity = Math.max(0, 1 - Math.max(0, elapsedSeconds - this._tour.get_currentTourStop().get__transitionHoldTime()) / this._tour.get_currentTourStop().get__transitionTime());
            this._tour.get_currentTourStop().faderOpacity = opacity;
            break;
          case 5:
            WWTControl.singleton.set_crossFadeFrame(false);
            break;
          default:
            break;
        }
        if (!this._tour.get_currentTourStop().get_isLinked() && this._tour.get_currentTourstopIndex() < (this._tour.get_tourStops().length - 1)) {
          var nextTrans = this._tour.get_tourStops()[this._tour.get_currentTourstopIndex() + 1].get__transition();
          var nextTransTime = this._tour.get_tourStops()[this._tour.get_currentTourstopIndex() + 1].get__transitionOutTime();
          switch (nextTrans) {
            case 5:
            case 3:
              if (!this._tour.get_currentTourStop().faderOpacity) {
                WWTControl.singleton.set_crossFadeFrame(false);
                var opacity = Math.max(0, 1 - Math.min(1, ((this._tour.get_currentTourStop().get_duration() / 1000) - elapsedSeconds) / nextTransTime));
                this._tour.get_currentTourStop().faderOpacity = opacity;
              }
              break;
            default:
              break;
          }
        }
      }
    },
    updateTweenPosition: function(tween) {
      var slideElapsedTime = ss.now() - this._slideStartTime;
      if (tween > -1) {
        return this._tour.get_currentTourStop().set_tweenPosition(Math.min(1, tween));
      }
      else {
        return this._tour.get_currentTourStop().set_tweenPosition(Math.min(1, (slideElapsedTime / this._tour.get_currentTourStop().get_duration())));
      }
    },
    close: function() {
      if (this._tour != null) {
        if (TourPlayer.get_playing()) {
          this.stop(TourPlayer._switchedToFullScreen);
        }
        this._tour = null;
      }
    },
    mouseDown: function(sender, e) {
      var location;
      location = this.pointToView(Vector2d.create(e.offsetX, e.offsetY));
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        return false;
      }
      for (var i = this._tour.get_currentTourStop().get_overlays().length - 1; i >= 0; i--) {
        if (this._tour.get_currentTourStop().get_overlays()[i].hitTest(location)) {
          if (!ss.emptyString(this._tour.get_currentTourStop().get_overlays()[i].get_url())) {
            var linkItem = this._tour.get_currentTourStop().get_overlays()[i];
            Util._openUrl(linkItem.get_url(), true);
            return true;
          }
          if (!ss.emptyString(this._tour.get_currentTourStop().get_overlays()[i].get_linkID())) {
            this._callStack.push(this._tour.get_currentTourstopIndex());
            this._playFromTourstop(this._tour.get_tourStops()[this._tour.getTourStopIndexByID(this._tour.get_currentTourStop().get_overlays()[i].get_linkID())]);
            return true;
          }
        }
      }
      if (this._playerState.get_state()) {
        return this._hitTextPlayerControls(Vector2d.create(e.offsetX, e.offsetY), true, true);
      }
      else {
        this._playerState.set_targetState(true);
        this._lastHit = ss.now();
      }
      return false;
    },
    mouseUp: function(sender, e) {
      if (this._leftDown || this._rightDown || this._middleDown) {
        this._leftDown = false;
        this._rightDown = false;
        this._middleDown = false;
        return true;
      }
      return false;
    },
    mouseMove: function(sender, e) {
      var location;
      try {
        location = this.pointToView(Vector2d.create(e.offsetX, e.offsetY));
      }
      catch ($e1) {
        return false;
      }
      if (this._tour == null || this._tour.get_currentTourStop() == null) {
        return false;
      }
      for (var i = this._tour.get_currentTourStop().get_overlays().length - 1; i >= 0; i--) {
        if (this._tour.get_currentTourStop().get_overlays()[i].hitTest(location) && (!ss.emptyString(this._tour.get_currentTourStop().get_overlays()[i].get_url()) || !ss.emptyString(this._tour.get_currentTourStop().get_overlays()[i].get_linkID()))) {
          return true;
        }
      }
      if (this._playerState.get_state()) {
        return this._hitTextPlayerControls(Vector2d.create(e.offsetX, e.offsetY), false, false);
      }
      return false;
    },
    mouseClick: function(sender, e) {
      return false;
    },
    click: function(sender, e) {
      return false;
    },
    mouseDoubleClick: function(sender, e) {
      return false;
    },
    keyDown: function(sender, e) {
      switch (e.keyCode) {
        case 27:
          this.stop(TourPlayer._switchedToFullScreen);
          WWTControl.singleton._closeTour();
          return true;
        case 32:
          this.pauseTour();
          return true;
        case 39:
          this._playNextSlide();
          return true;
        case 37:
          this._playPreviousSlide();
          return true;
        case 35:
          if (this._tour.get_tourStops().length > 0) {
            this._playFromTourstop(this._tour.get_tourStops()[this._tour.get_tourStops().length - 1]);
          }
          return true;
        case 36:
          if (this._tour.get_tourStops().length > 0) {
            this._playFromTourstop(this._tour.get_tourStops()[0]);
          }
          return true;
      }
      return false;
    },
    _playNextSlide: function() {
      if ((this._tour.get_currentTourstopIndex() < this._tour.get_tourStops().length - 1) && this._tour.get_tourStops().length > 0) {
        this._playFromTourstop(this._tour.get_tourStops()[this._tour.get_currentTourstopIndex() + 1]);
      }
    },
    _playPreviousSlide: function() {
      if (this._tour.get_currentTourstopIndex() > 0) {
        this._playFromTourstop(this._tour.get_tourStops()[this._tour.get_currentTourstopIndex() - 1]);
      }
    },
    _playFromTourstop: function(tourStop) {
      this.stop(true);
      this._tour.set_currentTourStop(tourStop);
      WWTControl.singleton.gotoTarget(this._tour.get_currentTourStop().get_target(), false, true, false);
      SpaceTimeController.set_now(this._tour.get_currentTourStop().get_startTime());
      SpaceTimeController.set_syncToClock(false);
      this.play();
    },
    pauseTour: function() {
      if (TourPlayer._playing) {
        this.stop(TourPlayer._switchedToFullScreen);
        WWTControl.singleton._freezeView();
        WWTControl.scriptInterface._fireTourPaused();
      }
      else {
        this.play();
        WWTControl.scriptInterface._fireTourResume();
      }
    },
    keyUp: function(sender, e) {
      return false;
    },
    hover: function(pnt) {
      if (TourPlayer._playing) {
        return true;
      }
      return false;
    },
    pointToView: function(pnt) {
      var clientHeight = WWTControl.singleton.canvas.height;
      var clientWidth = WWTControl.singleton.canvas.width;
      var viewWidth = (clientWidth / clientHeight) * 1116;
      var x = ((pnt.x) / (clientWidth) * viewWidth) - ((viewWidth - 1920) / 2);
      var y = (pnt.y) / clientHeight * 1116;
      return Vector2d.create(x, y);
    }
  };


  // wwtlib.MasterTime

  function MasterTime(master, durration) {
    this.durration = 0;
    this.master = master;
    this.durration = durration;
  }
  var MasterTime$ = {

  };


  // wwtlib.TourStop

  function TourStop() {
    this._tourStopType = 0;
    this._keyFramed = false;
    this._tweenPosition = 0;
    this.faderOpacity = 0;
    this._owner = null;
    this._transition = 0;
    this._transitionTime = 2;
    this._transitionHoldTime = 4;
    this._transitionOutTime = 2;
    this._nextSlide = 'Next';
    this._fadeInOverlays = false;
    this._masterSlide = false;
    this._id = '';
    this._description = '';
    this._name = '';
    this._duration = 10000;
    this._interpolationType = 0;
    this._hasLocation = true;
    this._hasTime = true;
    this._startTime = SpaceTimeController.get_now();
    this._endTime = SpaceTimeController.get_now();
    this._actualPlanetScale = Settings.get_current().get_actualPlanetScale();
    this._locationAltitude = Settings.get_current().get_locationAltitude();
    this._locationLat = Settings.get_current().get_locationLat();
    this._locationLng = Settings.get_current().get_locationLng();
    this._showClouds = Settings.get_current().get_showClouds();
    this._showConstellationBoundries = Settings.get_current().get_showConstellationBoundries();
    this._showConstellationFigures = Settings.get_current().get_showConstellationFigures();
    this._showConstellationSelection = Settings.get_current().get_showConstellationSelection();
    this._showEcliptic = Settings.get_current().get_showEcliptic();
    this._showElevationModel = Settings.get_current().get_showElevationModel();
    this._showFieldOfView = Settings.get_current().get_showFieldOfView();
    this._showGrid = Settings.get_current().get_showGrid();
    this._showHorizon = Settings.get_current().get_showHorizon();
    this._showHorizonPanorama = Settings.get_current().get_showHorizonPanorama();
    this._showMoonsAsPointSource = Settings.get_current().get_showMoonsAsPointSource();
    this._showSolarSystem = Settings.get_current().get_showSolarSystem();
    this._fovTelescope = Settings.get_current().get_fovTelescope();
    this._fovEyepiece = Settings.get_current().get_fovEyepiece();
    this._fovCamera = Settings.get_current().get_fovCamera();
    this._localHorizonMode = Settings.get_current().get_localHorizonMode();
    this._galacticMode = Settings.get_current().get_galacticMode();
    this._solarSystemStars = Settings.get_current().get_solarSystemStars();
    this._solarSystemMilkyWay = Settings.get_current().get_solarSystemMilkyWay();
    this._solarSystemCosmos = Settings.get_current().get_solarSystemCosmos();
    this._solarSystemOrbits = Settings.get_current().get_solarSystemOrbits();
    this._solarSystemOverlays = Settings.get_current().get_solarSystemOverlays();
    this._solarSystemLighting = Settings.get_current().get_solarSystemLighting();
    this._solarSystemScale = Settings.get_current().get_solarSystemScale();
    this._solarSystemMultiRes = Settings.get_current().get_solarSystemMultiRes();
    this._showEquatorialGridText = Settings.get_current().get_showEquatorialGridText();
    this._showGalacticGrid = Settings.get_current().get_showGalacticGrid();
    this._showGalacticGridText = Settings.get_current().get_showGalacticGridText();
    this._showEclipticGrid = Settings.get_current().get_showEclipticGrid();
    this._showEclipticGridText = Settings.get_current().get_showEclipticGridText();
    this._showEclipticOverviewText = Settings.get_current().get_showEclipticOverviewText();
    this._showAltAzGrid = Settings.get_current().get_showAltAzGrid();
    this._showAltAzGridText = Settings.get_current().get_showAltAzGridText();
    this._showPrecessionChart = Settings.get_current().get_showPrecessionChart();
    this._showConstellationPictures = Settings.get_current().get_showConstellationPictures();
    this._showConstellationLabels = Settings.get_current().get_showConstellationLabels();
    this._solarSystemCMB = Settings.get_current().get_solarSystemCMB();
    this._solarSystemMinorPlanets = Settings.get_current().get_solarSystemMinorPlanets();
    this._solarSystemPlanets = Settings.get_current().get_solarSystemPlanets();
    this._showEarthSky = Settings.get_current().get_showEarthSky();
    this._solarSystemMinorOrbits = Settings.get_current().get_solarSystemMinorOrbits();
    this._constellationsEnabled = '';
    this._constellationFiguresFilter = Settings.get_current().get_constellationFiguresFilter().clone();
    this._constellationBoundariesFilter = Settings.get_current().get_constellationBoundariesFilter().clone();
    this._constellationNamesFilter = Settings.get_current().get_constellationNamesFilter().clone();
    this._constellationArtFilter = Settings.get_current().get_constellationArtFilter().clone();
    this._showSkyOverlays = Settings.get_current().get_showSkyOverlays();
    this._showConstellations = Settings.get_current().get_showConstellations();
    this._showSkyNode = Settings.get_current().get_showSkyNode();
    this._showSkyGrids = Settings.get_current().get_showSkyGrids();
    this._showSkyOverlaysIn3d = Settings.get_current().get_showSkyOverlaysIn3d();
    this._earthCutawayView = Settings.get_current().get_earthCutawayView();
    this._showISSModel = Settings.get_current().get_showISSModel();
    this._milkyWayModel = Settings.get_current().get_milkyWayModel();
    this._minorPlanetsFilter = Settings.get_current().get_minorPlanetsFilter();
    this._planetOrbitsFilter = Settings.get_current().get_planetOrbitsFilter();
    this._thumbnailString = '';
    this._thumbnail = null;
    this.layers = {};
    this._overlays = [];
    this._musicTrack = null;
    this._voiceTrack = null;
    this._id = Guid.newGuid().toString();
  }
  TourStop.create = function(target) {
    var ts = new TourStop();
    ts._target = target;
    return ts;
  };
  TourStop.getXmlText = function(ts) {
    var writer = new XmlTextWriter();
    writer._writeProcessingInstruction('xml', "version='1.0' encoding='UTF-8'");
    ts._saveToXml(writer, true);
    writer._close();
    return writer.body;
  };
  TourStop._fromXml = function(owner, tourStop) {
    var newTourStop = new TourStop();
    newTourStop._owner = owner;
    newTourStop.set_id(tourStop.attributes.getNamedItem('Id').nodeValue);
    newTourStop.set_name(tourStop.attributes.getNamedItem('Name').nodeValue);
    newTourStop.set_description(tourStop.attributes.getNamedItem('Description').nodeValue);
    newTourStop._thumbnailString = tourStop.attributes.getNamedItem('Thumbnail').nodeValue;
    newTourStop._duration = Util.parseTimeSpan(tourStop.attributes.getNamedItem('Duration').nodeValue);
    if (tourStop.attributes.getNamedItem('Master') != null) {
      newTourStop._masterSlide = ss.boolean(tourStop.attributes.getNamedItem('Master').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('NextSlide') != null) {
      newTourStop._nextSlide = tourStop.attributes.getNamedItem('NextSlide').nodeValue;
    }
    if (tourStop.attributes.getNamedItem('InterpolationType') != null) {
      newTourStop.set_interpolationType(Enums.parse('InterpolationType', tourStop.attributes.getNamedItem('InterpolationType').nodeValue));
    }
    newTourStop._fadeInOverlays = true;
    if (tourStop.attributes.getNamedItem('FadeInOverlays') != null) {
      newTourStop._fadeInOverlays = ss.boolean(tourStop.attributes.getNamedItem('FadeInOverlays').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('Transition') != null) {
      newTourStop._transition = Enums.parse('TransitionType', tourStop.attributes.getNamedItem('Transition').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('HasLocation') != null) {
      newTourStop._hasLocation = ss.boolean(tourStop.attributes.getNamedItem('HasLocation').nodeValue);
    }
    if (newTourStop._hasLocation) {
      if (tourStop.attributes.getNamedItem('LocationAltitude') != null) {
        newTourStop._locationAltitude = parseFloat(tourStop.attributes.getNamedItem('LocationAltitude').nodeValue);
      }
      if (tourStop.attributes.getNamedItem('LocationLat') != null) {
        newTourStop._locationLat = parseFloat(tourStop.attributes.getNamedItem('LocationLat').nodeValue);
      }
      if (tourStop.attributes.getNamedItem('LocationLng') != null) {
        newTourStop._locationLng = parseFloat(tourStop.attributes.getNamedItem('LocationLng').nodeValue);
      }
    }
    if (tourStop.attributes.getNamedItem('HasTime') != null) {
      newTourStop._hasTime = ss.boolean(tourStop.attributes.getNamedItem('HasTime').nodeValue);
      if (newTourStop._hasTime) {
        if (tourStop.attributes.getNamedItem('StartTime') != null) {
          newTourStop._startTime = ss.date(tourStop.attributes.getNamedItem('StartTime').nodeValue + ' UTC');
        }
        if (tourStop.attributes.getNamedItem('EndTime') != null) {
          newTourStop._endTime = ss.date(tourStop.attributes.getNamedItem('EndTime').nodeValue + ' UTC');
        }
      }
    }
    if (tourStop.attributes.getNamedItem('ActualPlanetScale') != null) {
      newTourStop._actualPlanetScale = ss.boolean(tourStop.attributes.getNamedItem('ActualPlanetScale').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowClouds') != null) {
      newTourStop._showClouds = ss.boolean(tourStop.attributes.getNamedItem('ShowClouds').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowConstellationBoundries') != null) {
      newTourStop._showConstellationBoundries = ss.boolean(tourStop.attributes.getNamedItem('ShowConstellationBoundries').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowConstellationFigures') != null) {
      newTourStop._showConstellationFigures = ss.boolean(tourStop.attributes.getNamedItem('ShowConstellationFigures').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowConstellationSelection') != null) {
      newTourStop._showConstellationSelection = ss.boolean(tourStop.attributes.getNamedItem('ShowConstellationSelection').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowEcliptic') != null) {
      newTourStop._showEcliptic = ss.boolean(tourStop.attributes.getNamedItem('ShowEcliptic').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowElevationModel') != null) {
      newTourStop._showElevationModel = ss.boolean(tourStop.attributes.getNamedItem('ShowElevationModel').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowFieldOfView') != null) {
      newTourStop._showFieldOfView = ss.boolean(tourStop.attributes.getNamedItem('ShowFieldOfView').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowGrid') != null) {
      newTourStop._showGrid = ss.boolean(tourStop.attributes.getNamedItem('ShowGrid').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowHorizon') != null) {
      newTourStop._showHorizon = ss.boolean(tourStop.attributes.getNamedItem('ShowHorizon').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowHorizonPanorama') != null) {
      newTourStop._showHorizonPanorama = ss.boolean(tourStop.attributes.getNamedItem('ShowHorizonPanorama').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowMoonsAsPointSource') != null) {
      newTourStop._showMoonsAsPointSource = ss.boolean(tourStop.attributes.getNamedItem('ShowMoonsAsPointSource').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowSolarSystem') != null) {
      newTourStop._showSolarSystem = ss.boolean(tourStop.attributes.getNamedItem('ShowSolarSystem').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('FovTelescope') != null) {
      newTourStop._fovTelescope = parseInt(tourStop.attributes.getNamedItem('FovTelescope').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('FovEyepiece') != null) {
      newTourStop._fovEyepiece = parseInt(tourStop.attributes.getNamedItem('FovEyepiece').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('FovCamera') != null) {
      newTourStop._fovCamera = parseInt(tourStop.attributes.getNamedItem('FovCamera').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('LocalHorizonMode') != null) {
      newTourStop._localHorizonMode = ss.boolean(tourStop.attributes.getNamedItem('LocalHorizonMode').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('GalacticMode') != null) {
      newTourStop._galacticMode = ss.boolean(tourStop.attributes.getNamedItem('GalacticMode').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemStars') != null) {
      newTourStop._solarSystemStars = ss.boolean(tourStop.attributes.getNamedItem('SolarSystemStars').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemMilkyWay') != null) {
      newTourStop._solarSystemMilkyWay = ss.boolean(tourStop.attributes.getNamedItem('SolarSystemMilkyWay').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemCosmos') != null) {
      newTourStop._solarSystemCosmos = ss.boolean(tourStop.attributes.getNamedItem('SolarSystemCosmos').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemOrbits') != null) {
      newTourStop._solarSystemOrbits = ss.boolean(tourStop.attributes.getNamedItem('SolarSystemOrbits').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemOverlays') != null) {
      newTourStop._solarSystemOverlays = ss.boolean(tourStop.attributes.getNamedItem('SolarSystemOverlays').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemLighting') != null) {
      newTourStop._solarSystemLighting = ss.boolean(tourStop.attributes.getNamedItem('SolarSystemLighting').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemScale') != null) {
      newTourStop._solarSystemScale = parseInt(tourStop.attributes.getNamedItem('SolarSystemScale').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemMultiRes') != null) {
      newTourStop._solarSystemMultiRes = ss.boolean(tourStop.attributes.getNamedItem('SolarSystemMultiRes').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowEquatorialGridText') != null) {
      newTourStop._showEquatorialGridText = ss.boolean(tourStop.attributes.getNamedItem('ShowEquatorialGridText').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowGalacticGrid') != null) {
      newTourStop._showGalacticGrid = ss.boolean(tourStop.attributes.getNamedItem('ShowGalacticGrid').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowGalacticGridText') != null) {
      newTourStop._showGalacticGridText = ss.boolean(tourStop.attributes.getNamedItem('ShowGalacticGridText').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowEclipticGrid') != null) {
      newTourStop._showEclipticGrid = ss.boolean(tourStop.attributes.getNamedItem('ShowEclipticGrid').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowEclipticGridText') != null) {
      newTourStop._showEclipticGridText = ss.boolean(tourStop.attributes.getNamedItem('ShowEclipticGridText').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowEclipticOverviewText') != null) {
      newTourStop._showEclipticOverviewText = ss.boolean(tourStop.attributes.getNamedItem('ShowEclipticOverviewText').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowAltAzGrid') != null) {
      newTourStop._showAltAzGrid = ss.boolean(tourStop.attributes.getNamedItem('ShowAltAzGrid').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowAltAzGridText') != null) {
      newTourStop._showAltAzGridText = ss.boolean(tourStop.attributes.getNamedItem('ShowAltAzGridText').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowPrecessionChart') != null) {
      newTourStop._showPrecessionChart = ss.boolean(tourStop.attributes.getNamedItem('ShowPrecessionChart').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowConstellationPictures') != null) {
      newTourStop._showConstellationPictures = ss.boolean(tourStop.attributes.getNamedItem('ShowConstellationPictures').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowConstellationLabels') != null) {
      newTourStop._showConstellationLabels = ss.boolean(tourStop.attributes.getNamedItem('ShowConstellationLabels').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemCMB') != null) {
      newTourStop._solarSystemCMB = ss.boolean(tourStop.attributes.getNamedItem('SolarSystemCMB').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemMinorPlanets') != null) {
      newTourStop._solarSystemMinorPlanets = ss.boolean(tourStop.attributes.getNamedItem('SolarSystemMinorPlanets').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemPlanets') != null) {
      newTourStop._solarSystemPlanets = ss.boolean(tourStop.attributes.getNamedItem('SolarSystemPlanets').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowEarthSky') != null) {
      newTourStop._showEarthSky = ss.boolean(tourStop.attributes.getNamedItem('ShowEarthSky').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('SolarSystemMinorOrbits') != null) {
      newTourStop._solarSystemMinorOrbits = ss.boolean(tourStop.attributes.getNamedItem('SolarSystemMinorOrbits').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowSkyOverlays') != null) {
      newTourStop._showSkyOverlays = ss.boolean(tourStop.attributes.getNamedItem('ShowSkyOverlays').nodeValue);
    }
    else {
      newTourStop._showSkyOverlays = true;
    }
    if (tourStop.attributes.getNamedItem('ShowConstellations') != null) {
      newTourStop._showConstellations = ss.boolean(tourStop.attributes.getNamedItem('ShowConstellations').nodeValue);
    }
    else {
      newTourStop._showConstellations = true;
    }
    if (tourStop.attributes.getNamedItem('ShowSkyNode') != null) {
      newTourStop._showSkyNode = ss.boolean(tourStop.attributes.getNamedItem('ShowSkyNode').nodeValue);
    }
    else {
      newTourStop._showSkyNode = true;
    }
    if (tourStop.attributes.getNamedItem('ShowSkyGrids') != null) {
      newTourStop._showSkyGrids = ss.boolean(tourStop.attributes.getNamedItem('ShowSkyGrids').nodeValue);
    }
    else {
      newTourStop._showSkyGrids = true;
    }
    if (tourStop.attributes.getNamedItem('ShowSkyOverlaysIn3d') != null) {
      newTourStop._showSkyOverlaysIn3d = ss.boolean(tourStop.attributes.getNamedItem('ShowSkyOverlaysIn3d').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('EarthCutawayView') != null) {
      newTourStop._earthCutawayView = ss.boolean(tourStop.attributes.getNamedItem('EarthCutawayView').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ShowISSModel') != null) {
      newTourStop._showISSModel = ss.boolean(tourStop.attributes.getNamedItem('ShowISSModel').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('MilkyWayModel') != null) {
      newTourStop._milkyWayModel = ss.boolean(tourStop.attributes.getNamedItem('MilkyWayModel').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('ConstellationBoundariesFilter') != null) {
      newTourStop._constellationBoundariesFilter = ConstellationFilter.parse(tourStop.attributes.getNamedItem('ConstellationBoundariesFilter').nodeValue);
    }
    else {
      newTourStop._constellationBoundariesFilter = ConstellationFilter.get_allConstellation();
    }
    if (tourStop.attributes.getNamedItem('ConstellationBoundariesFilter') != null) {
      newTourStop._constellationFiguresFilter = ConstellationFilter.parse(tourStop.attributes.getNamedItem('ConstellationBoundariesFilter').nodeValue);
    }
    else {
      newTourStop._constellationFiguresFilter = new ConstellationFilter();
    }
    if (tourStop.attributes.getNamedItem('ConstellationNamesFilter') != null) {
      newTourStop._constellationNamesFilter = ConstellationFilter.parse(tourStop.attributes.getNamedItem('ConstellationNamesFilter').nodeValue);
    }
    else {
      newTourStop._constellationNamesFilter = new ConstellationFilter();
    }
    if (tourStop.attributes.getNamedItem('ConstellationArtFilter') != null) {
      newTourStop._constellationArtFilter = ConstellationFilter.parse(tourStop.attributes.getNamedItem('ConstellationArtFilter').nodeValue);
    }
    else {
      newTourStop._constellationArtFilter = new ConstellationFilter();
    }
    if (tourStop.attributes.getNamedItem('MinorPlanetsFilter') != null) {
      newTourStop._minorPlanetsFilter = parseInt(tourStop.attributes.getNamedItem('MinorPlanetsFilter').nodeValue);
    }
    if (tourStop.attributes.getNamedItem('PlanetOrbitsFilter') != null) {
      newTourStop._planetOrbitsFilter = parseInt(tourStop.attributes.getNamedItem('PlanetOrbitsFilter').nodeValue);
    }
    var place = Util.selectSingleNode(tourStop, 'Place');
    newTourStop._target = Place._fromXml(place);
    var endTarget = Util.selectSingleNode(tourStop, 'EndTarget');
    if (endTarget != null) {
      newTourStop._endTarget = Place._fromXml(endTarget);
    }
    var overlays = Util.selectSingleNode(tourStop, 'Overlays');
    var $enum1 = ss.enumerate(overlays.childNodes);
    while ($enum1.moveNext()) {
      var overlay = $enum1.current;
      if (overlay.nodeName === 'Overlay') {
        newTourStop.addOverlay(Overlay._fromXml(newTourStop, overlay));
      }
    }
    var musicNode = Util.selectSingleNode(tourStop, 'MusicTrack');
    if (musicNode != null) {
      newTourStop._musicTrack = Overlay._fromXml(newTourStop, Util.selectSingleNode(musicNode, 'Overlay'));
    }
    var voiceNode = Util.selectSingleNode(tourStop, 'VoiceTrack');
    if (voiceNode != null) {
      newTourStop._voiceTrack = Overlay._fromXml(newTourStop, Util.selectSingleNode(voiceNode, 'Overlay'));
    }
    var layerNode = Util.selectSingleNode(tourStop, 'VisibleLayers');
    if (layerNode != null) {
      newTourStop._loadLayerList(layerNode);
    }
    newTourStop._thumbnail = owner.getCachedTexture(ss.format('{0}.thumb.png', newTourStop._id), function() {
      var c = 0;
    });
    return newTourStop;
  };
  var TourStop$ = {
    get_keyFramed: function() {
      return this._keyFramed;
    },
    get_tourStopType: function() {
      if (this._target.get_backgroundImageset() != null) {
        return this._target.get_backgroundImageset().get_dataSetType();
      }
      else {
        return this._tourStopType;
      }
    },
    set_tourStopType: function(value) {
      if (this._target.get_backgroundImageset() != null) {
        if (this._target.get_backgroundImageset().get_dataSetType() !== value) {
          this._target.set_backgroundImageset(null);
        }
      }
      this._tourStopType = value;
      return value;
    },
    get_tweenPosition: function() {
      return this._tweenPosition;
    },
    set_tweenPosition: function(value) {
      if (this._tweenPosition !== value) {
        this._tweenPosition = Math.max(0, Math.min(1, value));
        this.updateTweenPosition();
      }
      return value;
    },
    updateTweenPosition: function() {
      if (this.get_keyFramed()) {
      }
    },
    copy: function() {
      var writer = new XmlTextWriter();
      writer._writeProcessingInstruction('xml', "version='1.0' encoding='UTF-8'");
      this._saveToXml(writer, true);
      try {
        var xParser = new DOMParser();
        var doc = xParser.parseFromString(writer.body, 'text/xml');
        var node = Util.selectSingleNode(doc, 'TourStop');
        var ts = TourStop._fromXml(this.get_owner(), node);
        ts.set_id(Guid.newGuid().toString());
        return ts;
      }
      catch ($e1) {
      }
      return null;
    },
    get_owner: function() {
      return this._owner;
    },
    set_owner: function(value) {
      this._owner = value;
      return value;
    },
    get__transition: function() {
      return this._transition;
    },
    set__transition: function(value) {
      if (this._transition !== value) {
        this._transition = value;
        if (this._owner != null) {
          this._owner.set_tourDirty(true);
        }
      }
      return value;
    },
    get__transitionTime: function() {
      return this._transitionTime;
    },
    set__transitionTime: function(value) {
      if (this._transitionTime !== value) {
        this._transitionTime = value;
        if (this._owner != null) {
          this._owner.set_tourDirty(true);
        }
      }
      return value;
    },
    get__transitionHoldTime: function() {
      return this._transitionHoldTime;
    },
    set__transitionHoldTime: function(value) {
      if (this._transitionHoldTime !== value) {
        this._transitionHoldTime = value;
        if (this._owner != null) {
          this._owner.set_tourDirty(true);
        }
      }
      return value;
    },
    get__transitionOutTime: function() {
      return this._transitionOutTime;
    },
    set__transitionOutTime: function(value) {
      if (this._transitionOutTime !== value) {
        this._transitionOutTime = value;
        if (this._owner != null) {
          this._owner.set_tourDirty(true);
        }
      }
      return value;
    },
    get_nextSlide: function() {
      return this._nextSlide;
    },
    set_nextSlide: function(value) {
      this._nextSlide = value;
      return value;
    },
    get_isLinked: function() {
      if (this._nextSlide == null || this._nextSlide === 'Next' || !this._nextSlide) {
        return false;
      }
      return true;
    },
    get_fadeInOverlays: function() {
      return this._fadeInOverlays;
    },
    set_fadeInOverlays: function(value) {
      this._fadeInOverlays = value;
      return value;
    },
    get_masterSlide: function() {
      return this._masterSlide;
    },
    set_masterSlide: function(value) {
      if (this._masterSlide !== value) {
        this._masterSlide = value;
        if (this._owner != null) {
          this._owner.set_tourDirty(true);
        }
      }
      return value;
    },
    get_id: function() {
      return this._id;
    },
    set_id: function(value) {
      this._id = value;
      if (this._owner != null) {
        this._owner.set_tourDirty(true);
      }
      return value;
    },
    toString: function() {
      if (this._target != null) {
        return this.get_target().get_name();
      }
      else {
        return this._description;
      }
    },
    get_description: function() {
      return this._description;
    },
    set_description: function(value) {
      if (this._description !== value) {
        this._description = value;
        if (this._owner != null) {
          this._owner.set_tourDirty(true);
        }
      }
      return value;
    },
    get_name: function() {
      if (this._target != null) {
        return this._target.get_name();
      }
      return this._name;
    },
    set_name: function(value) {
      if (this._name !== value) {
        this._name = value;
        if (this._owner != null) {
          this._owner.set_tourDirty(true);
        }
      }
      return value;
    },
    get_duration: function() {
      return this._duration;
    },
    set_duration: function(value) {
      if (this._duration !== value) {
        this._duration = value;
        if (this._owner != null) {
          this._owner.set_tourDirty(true);
        }
      }
      return value;
    },
    get_target: function() {
      return this._target;
    },
    set_target: function(value) {
      if (this._target !== value) {
        this._target = value;
        if (this._owner != null) {
          this._owner.set_tourDirty(true);
        }
      }
      return value;
    },
    get_endTarget: function() {
      return this._endTarget;
    },
    set_endTarget: function(value) {
      if (this._endTarget !== value) {
        this._endTarget = value;
        if (this._owner != null) {
          this._owner.set_tourDirty(true);
        }
      }
      return value;
    },
    get_interpolationType: function() {
      return this._interpolationType;
    },
    set_interpolationType: function(value) {
      this._interpolationType = value;
      return value;
    },
    get_hasLocation: function() {
      return this._hasTime;
    },
    set_hasLocation: function(value) {
      if (this._hasLocation !== value) {
        this._hasLocation = value;
        if (this._owner != null) {
          this._owner.set_tourDirty(true);
        }
      }
      return value;
    },
    get_hasTime: function() {
      return this._hasTime;
    },
    set_hasTime: function(value) {
      if (this._hasTime !== value) {
        this._hasTime = this._hasLocation = value;
        if (this._owner != null) {
          this._owner.set_tourDirty(true);
        }
      }
      return value;
    },
    get_startTime: function() {
      return this._startTime;
    },
    set_startTime: function(value) {
      this._startTime = value;
      if (!ss.compareDates(this._startTime, value)) {
        this._startTime = value;
        if (this._owner != null) {
          this._owner.set_tourDirty(true);
        }
      }
      return value;
    },
    get_endTime: function() {
      return this._endTime;
    },
    set_endTime: function(value) {
      if (!ss.compareDates(this._endTime, value)) {
        this._endTime = value;
        if (this._owner != null) {
          this._owner.set_tourDirty(true);
        }
      }
      return value;
    },
    captureSettings: function() {
      this._startTime = SpaceTimeController.get_now();
      this._actualPlanetScale = Settings.get_current().get_actualPlanetScale();
      this._locationAltitude = Settings.get_current().get_locationAltitude();
      this._locationLat = Settings.get_current().get_locationLat();
      this._locationLng = Settings.get_current().get_locationLng();
      this._showClouds = Settings.get_current().get_showClouds();
      this._showConstellationBoundries = Settings.get_current().get_showConstellationBoundries();
      this._showConstellationFigures = Settings.get_current().get_showConstellationFigures();
      this._showConstellationSelection = Settings.get_current().get_showConstellationSelection();
      this._showEcliptic = Settings.get_current().get_showEcliptic();
      this._showElevationModel = Settings.get_current().get_showElevationModel();
      this._showFieldOfView = Settings.get_current().get_showFieldOfView();
      this._showGrid = Settings.get_current().get_showGrid();
      this._showHorizon = Settings.get_current().get_showHorizon();
      this._showHorizonPanorama = Settings.get_current().get_showHorizonPanorama();
      this._showMoonsAsPointSource = Settings.get_current().get_showMoonsAsPointSource();
      this._showSolarSystem = Settings.get_current().get_showSolarSystem();
      this._fovTelescope = Settings.get_current().get_fovTelescope();
      this._fovEyepiece = Settings.get_current().get_fovEyepiece();
      this._fovCamera = Settings.get_current().get_fovCamera();
      this._localHorizonMode = Settings.get_current().get_localHorizonMode();
      this._galacticMode = Settings.get_current().get_galacticMode();
      this._solarSystemStars = Settings.get_current().get_solarSystemStars();
      this._solarSystemMilkyWay = Settings.get_current().get_solarSystemMilkyWay();
      this._solarSystemCosmos = Settings.get_current().get_solarSystemCosmos();
      this._solarSystemOrbits = Settings.get_current().get_solarSystemOrbits();
      this._solarSystemOverlays = Settings.get_current().get_solarSystemOverlays();
      this._solarSystemLighting = Settings.get_current().get_solarSystemLighting();
      this._solarSystemScale = Settings.get_current().get_solarSystemScale();
      this._solarSystemMultiRes = Settings.get_current().get_solarSystemMultiRes();
      this._showEquatorialGridText = Settings.get_current().get_showEquatorialGridText();
      this._showGalacticGrid = Settings.get_current().get_showGalacticGrid();
      this._showGalacticGridText = Settings.get_current().get_showGalacticGridText();
      this._showEclipticGrid = Settings.get_current().get_showEclipticGrid();
      this._showEclipticGridText = Settings.get_current().get_showEclipticGridText();
      this._showEclipticOverviewText = Settings.get_current().get_showEclipticOverviewText();
      this._showAltAzGrid = Settings.get_current().get_showAltAzGrid();
      this._showAltAzGridText = Settings.get_current().get_showAltAzGridText();
      this._showPrecessionChart = Settings.get_current().get_showPrecessionChart();
      this._showConstellationPictures = Settings.get_current().get_showConstellationPictures();
      this._showConstellationLabels = Settings.get_current().get_showConstellationLabels();
      this._solarSystemCMB = Settings.get_current().get_solarSystemCMB();
      this._solarSystemMinorPlanets = Settings.get_current().get_solarSystemMinorPlanets();
      this._solarSystemPlanets = Settings.get_current().get_solarSystemPlanets();
      this._showEarthSky = Settings.get_current().get_showEarthSky();
      this._solarSystemMinorOrbits = Settings.get_current().get_solarSystemMinorOrbits();
      this._constellationFiguresFilter = Settings.get_current().get_constellationFiguresFilter().clone();
      this._constellationBoundariesFilter = Settings.get_current().get_constellationBoundariesFilter().clone();
      this._constellationNamesFilter = Settings.get_current().get_constellationNamesFilter().clone();
      this._constellationArtFilter = Settings.get_current().get_constellationArtFilter().clone();
      this._showSkyOverlays = Settings.get_current().get_showSkyOverlays();
      this._showConstellations = Settings.get_current().get_showConstellations();
      this._showSkyNode = Settings.get_current().get_showSkyNode();
      this._showSkyGrids = Settings.get_current().get_showSkyGrids();
      this._showSkyOverlaysIn3d = Settings.get_current().get_showSkyOverlaysIn3d();
      this._earthCutawayView = Settings.get_current().get_earthCutawayView();
      this._showISSModel = Settings.get_current().get_showISSModel();
      this._milkyWayModel = Settings.get_current().get_milkyWayModel();
      this._minorPlanetsFilter = Settings.get_current().get_minorPlanetsFilter();
      this._planetOrbitsFilter = Settings.get_current().get_planetOrbitsFilter();
    },
    syncSettings: function() {
      Settings.get_globalSettings().set_actualPlanetScale(this._actualPlanetScale);
      Settings.get_globalSettings().set_locationAltitude(this._locationAltitude);
      Settings.get_globalSettings().set_locationLat(this._locationLat);
      Settings.get_globalSettings().set_locationLng(this._locationLng);
      Settings.get_globalSettings().set_earthCutawayView(this._earthCutawayView);
      Settings.get_globalSettings().set_showConstellationBoundries(this._showConstellationBoundries);
      Settings.get_globalSettings().set_showConstellationFigures(this._showConstellationFigures);
      Settings.get_globalSettings().set_showConstellationSelection(this._showConstellationSelection);
      Settings.get_globalSettings().set_showEcliptic(this._showEcliptic);
      Settings.get_globalSettings().set_showElevationModel(this._showElevationModel);
      Settings.get_globalSettings().set_showGrid(this._showGrid);
      Settings.get_globalSettings().set_showHorizon(this._showHorizon);
      Settings.get_globalSettings().set_showSolarSystem(this._showSolarSystem);
      Settings.get_globalSettings().set_localHorizonMode(this._localHorizonMode);
      Settings.get_globalSettings().set_galacticMode(this._galacticMode);
      Settings.get_globalSettings().set_solarSystemStars(this._solarSystemStars);
      Settings.get_globalSettings().set_solarSystemMilkyWay(this._solarSystemMilkyWay);
      Settings.get_globalSettings().set_solarSystemCosmos(this._solarSystemCosmos);
      Settings.get_globalSettings().set_solarSystemCMB(this._solarSystemCMB);
      Settings.get_globalSettings().set_solarSystemOrbits(this._solarSystemOrbits);
      Settings.get_globalSettings().set_solarSystemMinorOrbits(this._solarSystemMinorOrbits);
      Settings.get_globalSettings().set_solarSystemMinorPlanets(this._solarSystemMinorPlanets);
      Settings.get_globalSettings().set_solarSystemOverlays(this._solarSystemOverlays);
      Settings.get_globalSettings().set_solarSystemLighting(this._solarSystemLighting);
      Settings.get_globalSettings().set_showISSModel(this._showISSModel);
      Settings.get_globalSettings().set_solarSystemScale(this._solarSystemScale);
      Settings.get_globalSettings().set_solarSystemMultiRes(this._solarSystemMultiRes);
      Settings.get_globalSettings().set_showEarthSky(this._showEarthSky);
      Settings.get_globalSettings().set_minorPlanetsFilter(this._minorPlanetsFilter);
      Settings.get_globalSettings().set_planetOrbitsFilter(this._planetOrbitsFilter);
      Settings.get_globalSettings().set_showEquatorialGridText(this._showEquatorialGridText);
      Settings.get_globalSettings().set_showGalacticGrid(this._showGalacticGrid);
      Settings.get_globalSettings().set_showGalacticGridText(this._showGalacticGridText);
      Settings.get_globalSettings().set_showEclipticGrid(this._showEclipticGrid);
      Settings.get_globalSettings().set_showEclipticGridText(this._showEclipticGridText);
      Settings.get_globalSettings().set_showEclipticOverviewText(this._showEclipticOverviewText);
      Settings.get_globalSettings().set_showAltAzGrid(this._showAltAzGrid);
      Settings.get_globalSettings().set_showAltAzGridText(this._showAltAzGridText);
      Settings.get_globalSettings().set_showPrecessionChart(this._showPrecessionChart);
      Settings.get_globalSettings().set_showConstellationPictures(this._showConstellationPictures);
      Settings.get_globalSettings().set_constellationsEnabled(this._constellationsEnabled);
      Settings.get_globalSettings().set_showSkyOverlays(this._showSkyOverlays);
      Settings.get_globalSettings().set_constellations(this._showConstellations);
      Settings.get_globalSettings().set_showSkyNode(this._showSkyNode);
      Settings.get_globalSettings().set_showSkyGrids(this._showSkyGrids);
      Settings.get_globalSettings().set_constellationFiguresFilter(this._constellationFiguresFilter.clone());
      Settings.get_globalSettings().set_constellationBoundariesFilter(this._constellationBoundariesFilter.clone());
      Settings.get_globalSettings().set_constellationNamesFilter(this._constellationNamesFilter.clone());
      Settings.get_globalSettings().set_constellationArtFilter(this._constellationArtFilter.clone());
    },
    get_solarSystemStars: function() {
      return this._solarSystemStars;
    },
    get_solarSystemMultiRes: function() {
      return this._solarSystemMultiRes;
    },
    get_solarSystemMilkyWay: function() {
      return this._solarSystemMilkyWay;
    },
    get_solarSystemCosmos: function() {
      return this._solarSystemCosmos;
    },
    get_solarSystemOrbits: function() {
      return this._solarSystemOrbits;
    },
    get_solarSystemOverlays: function() {
      return this._solarSystemOverlays;
    },
    get_solarSystemLighting: function() {
      return this._solarSystemLighting;
    },
    get_solarSystemScale: function() {
      return this._solarSystemScale;
    },
    get_actualPlanetScale: function() {
      return this._actualPlanetScale;
    },
    get_fovCamera: function() {
      return this._fovCamera;
    },
    get_fovEyepiece: function() {
      return this._fovEyepiece;
    },
    get_fovTelescope: function() {
      return this._fovTelescope;
    },
    get_locationAltitude: function() {
      if (this._hasLocation) {
        return this._locationAltitude;
      }
      else {
        return Settings.get_current().get_locationAltitude();
      }
    },
    get_locationLat: function() {
      if (this._hasLocation) {
        return this._locationLat;
      }
      else {
        return Settings.get_current().get_locationLat();
      }
    },
    get_locationLng: function() {
      if (this._hasLocation) {
        return this._locationLng;
      }
      else {
        return Settings.get_current().get_locationLng();
      }
    },
    get_showClouds: function() {
      return this._showClouds;
    },
    get_showConstellationBoundries: function() {
      return this._showConstellationBoundries;
    },
    get_showConstellationFigures: function() {
      return this._showConstellationFigures;
    },
    get_showConstellationSelection: function() {
      return this._showConstellationSelection;
    },
    get_showEcliptic: function() {
      return this._showEcliptic;
    },
    get_showElevationModel: function() {
      return this._showElevationModel;
    },
    get_showFieldOfView: function() {
      return this._showFieldOfView;
    },
    get_showGrid: function() {
      return this._showGrid;
    },
    get_showHorizon: function() {
      return this._showHorizon;
    },
    get_showHorizonPanorama: function() {
      return this._showHorizonPanorama;
    },
    get_showMoonsAsPointSource: function() {
      return this._showMoonsAsPointSource;
    },
    get_showSolarSystem: function() {
      return this._showSolarSystem;
    },
    get_localHorizonMode: function() {
      return this._localHorizonMode;
    },
    get_galacticMode: function() {
      return this._galacticMode;
    },
    get_thumbnail: function() {
      if (this._target != null && this._thumbnail == null) {
        return null;
      }
      return this._thumbnail;
    },
    set_thumbnail: function(value) {
      this._thumbnail = value;
      if (this._owner != null) {
        this._owner.set_tourDirty(true);
      }
      return value;
    },
    get_overlays: function() {
      return this._overlays;
    },
    get_musicTrack: function() {
      return this._musicTrack;
    },
    set_musicTrack: function(value) {
      if (this._musicTrack !== value) {
        this._musicTrack = value;
        if (this._owner != null) {
          this._owner.set_tourDirty(true);
        }
      }
      return value;
    },
    get_voiceTrack: function() {
      return this._voiceTrack;
    },
    set_voiceTrack: function(value) {
      if (this._voiceTrack !== value) {
        this._voiceTrack = value;
        if (this._owner != null) {
          this._owner.set_tourDirty(true);
        }
      }
      return value;
    },
    addOverlay: function(overlay) {
      if (overlay == null) {
        return;
      }
      overlay.set_owner(this);
      this._overlays.push(overlay);
      if (this._owner != null) {
        this._owner.set_tourDirty(true);
      }
    },
    removeOverlay: function(overlay) {
      ss.remove(this._overlays, overlay);
      if (this._owner != null) {
        this._owner.set_tourDirty(true);
      }
    },
    cleanUp: function() {
      var $enum1 = ss.enumerate(this.get_overlays());
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        overlay.cleanUp();
      }
      if (this._voiceTrack != null) {
        this._voiceTrack.cleanUp();
      }
      if (this._musicTrack != null) {
        this._musicTrack.cleanUp();
      }
    },
    sendToBack: function(target) {
      ss.remove(this._overlays, target);
      this._overlays.splice(0, 0, target);
      if (this._owner != null) {
        this._owner.set_tourDirty(true);
      }
    },
    bringToFront: function(target) {
      ss.remove(this._overlays, target);
      this._overlays.push(target);
      if (this._owner != null) {
        this._owner.set_tourDirty(true);
      }
    },
    bringForward: function(target) {
      var index = this._overlays.indexOf(target);
      if (index < this._overlays.length - 1) {
        ss.remove(this._overlays, target);
        this._overlays.splice(index + 1, 0, target);
      }
      if (this._owner != null) {
        this._owner.set_tourDirty(true);
      }
    },
    sendBackward: function(target) {
      var index = this._overlays.indexOf(target);
      if (index > 0) {
        ss.remove(this._overlays, target);
        this._overlays.splice(index - 1, 0, target);
      }
      if (this._owner != null) {
        this._owner.set_tourDirty(true);
      }
    },
    getNextOverlay: function(current) {
      if (current == null) {
        if (this._overlays.length > 0) {
          return this._overlays[0];
        }
        else {
          return null;
        }
      }
      var index = this._overlays.indexOf(current);
      if (index < this._overlays.length - 1) {
        return this._overlays[index + 1];
      }
      else {
        return this._overlays[0];
      }
    },
    getPerviousOverlay: function(current) {
      if (current == null) {
        if (this._overlays.length > 0) {
          return this._overlays[0];
        }
        else {
          return null;
        }
      }
      var index = this._overlays.indexOf(current);
      if (index > 0) {
        return this._overlays[index - 1];
      }
      else {
        return this._overlays[this._overlays.length - 1];
      }
    },
    getOverlayById: function(id) {
      var $enum1 = ss.enumerate(this._overlays);
      while ($enum1.moveNext()) {
        var ol = $enum1.current;
        if (ol.id === id) {
          return ol;
        }
      }
      return null;
    },
    get_tourStopThumbnailFilename: function() {
      return ss.format('{0}.thumb.png', this._id);
    },
    _saveToXml: function(xmlWriter, saveContent) {
      if (saveContent) {
        if (this._thumbnail != null) {
        }
      }
      xmlWriter._writeStartElement('TourStop');
      xmlWriter._writeAttributeString('Id', this._id);
      xmlWriter._writeAttributeString('Name', this._name);
      xmlWriter._writeAttributeString('Description', this._description);
      xmlWriter._writeAttributeString('Thumbnail', this._thumbnailString);
      xmlWriter._writeAttributeString('Duration', Util.xmlDuration(this._duration));
      xmlWriter._writeAttributeString('Master', this._masterSlide.toString());
      xmlWriter._writeAttributeString('TransitionType', Enums.toXml('TransitionType', this._transition));
      xmlWriter._writeAttributeString('TransitionTime', this._transitionTime.toString());
      xmlWriter._writeAttributeString('TransitionOutTime', this._transitionOutTime.toString());
      xmlWriter._writeAttributeString('TransitionHoldTime', this._transitionHoldTime.toString());
      xmlWriter._writeAttributeString('NextSlide', this._nextSlide);
      xmlWriter._writeAttributeString('InterpolationType', Enums.toXml('InterpolationType', this._interpolationType));
      xmlWriter._writeAttributeString('HasLocation', this._hasLocation.toString());
      if (this._hasLocation) {
        xmlWriter._writeAttributeString('LocationAltitude', this._locationAltitude.toString());
        xmlWriter._writeAttributeString('LocationLat', this._locationLat.toString());
        xmlWriter._writeAttributeString('LocationLng', this._locationLng.toString());
      }
      xmlWriter._writeAttributeString('HasTime', this._hasTime.toString());
      if (this._hasTime) {
        xmlWriter._writeAttributeString('StartTime', Util.xmlDate(this._startTime));
        xmlWriter._writeAttributeString('EndTime', Util.xmlDate(this._endTime));
      }
      xmlWriter._writeAttributeString('ActualPlanetScale', this._actualPlanetScale.toString());
      xmlWriter._writeAttributeString('ShowClouds', this._showClouds.toString());
      xmlWriter._writeAttributeString('EarthCutawayView', this._earthCutawayView.toString());
      xmlWriter._writeAttributeString('ShowConstellationBoundries', this._showConstellationBoundries.toString());
      xmlWriter._writeAttributeString('ShowConstellationFigures', this._showConstellationFigures.toString());
      xmlWriter._writeAttributeString('ShowConstellationSelection', this._showConstellationSelection.toString());
      xmlWriter._writeAttributeString('ShowEcliptic', this._showEcliptic.toString());
      xmlWriter._writeAttributeString('ShowElevationModel', this._showElevationModel.toString());
      this._showFieldOfView = false;
      xmlWriter._writeAttributeString('ShowFieldOfView', this._showFieldOfView.toString());
      xmlWriter._writeAttributeString('ShowGrid', this._showGrid.toString());
      xmlWriter._writeAttributeString('ShowHorizon', this._showHorizon.toString());
      xmlWriter._writeAttributeString('ShowHorizonPanorama', this._showHorizonPanorama.toString());
      xmlWriter._writeAttributeString('ShowMoonsAsPointSource', this._showMoonsAsPointSource.toString());
      xmlWriter._writeAttributeString('ShowSolarSystem', this._showSolarSystem.toString());
      xmlWriter._writeAttributeString('FovTelescope', this._fovTelescope.toString());
      xmlWriter._writeAttributeString('FovEyepiece', this._fovEyepiece.toString());
      xmlWriter._writeAttributeString('FovCamera', this._fovCamera.toString());
      xmlWriter._writeAttributeString('LocalHorizonMode', this._localHorizonMode.toString());
      xmlWriter._writeAttributeString('GalacticMode', this._galacticMode.toString());
      xmlWriter._writeAttributeString('FadeInOverlays', this._fadeInOverlays.toString());
      xmlWriter._writeAttributeString('SolarSystemStars', this._solarSystemStars.toString());
      xmlWriter._writeAttributeString('SolarSystemMilkyWay', this._solarSystemMilkyWay.toString());
      xmlWriter._writeAttributeString('SolarSystemCosmos', this._solarSystemCosmos.toString());
      xmlWriter._writeAttributeString('SolarSystemCMB', this._solarSystemCMB.toString());
      xmlWriter._writeAttributeString('SolarSystemOrbits', this._solarSystemOrbits.toString());
      xmlWriter._writeAttributeString('SolarSystemMinorOrbits', this._solarSystemMinorOrbits.toString());
      xmlWriter._writeAttributeString('SolarSystemOverlays', this._solarSystemOverlays.toString());
      xmlWriter._writeAttributeString('SolarSystemLighting', this._solarSystemLighting.toString());
      xmlWriter._writeAttributeString('ShowISSModel', this._showISSModel.toString());
      xmlWriter._writeAttributeString('SolarSystemScale', this._solarSystemScale.toString());
      xmlWriter._writeAttributeString('MinorPlanetsFilter', this._minorPlanetsFilter.toString());
      xmlWriter._writeAttributeString('PlanetOrbitsFilter', this._planetOrbitsFilter.toString());
      xmlWriter._writeAttributeString('SolarSystemMultiRes', this._solarSystemMultiRes.toString());
      xmlWriter._writeAttributeString('SolarSystemMinorPlanets', this._solarSystemMinorPlanets.toString());
      xmlWriter._writeAttributeString('SolarSystemPlanets', this._solarSystemPlanets.toString());
      xmlWriter._writeAttributeString('ShowEarthSky', this._showEarthSky.toString());
      xmlWriter._writeAttributeString('ShowEquatorialGridText', this.get_showEquatorialGridText().toString());
      xmlWriter._writeAttributeString('ShowGalacticGrid', this.get_showGalacticGrid().toString());
      xmlWriter._writeAttributeString('ShowGalacticGridText', this.get_showGalacticGridText().toString());
      xmlWriter._writeAttributeString('ShowEclipticGrid', this.get_showEclipticGrid().toString());
      xmlWriter._writeAttributeString('ShowEclipticGridText', this.get_showEclipticGridText().toString());
      xmlWriter._writeAttributeString('ShowEclipticOverviewText', this.get_showEclipticOverviewText().toString());
      xmlWriter._writeAttributeString('ShowAltAzGrid', this.get_showAltAzGrid().toString());
      xmlWriter._writeAttributeString('ShowAltAzGridText', this.get_showAltAzGridText().toString());
      xmlWriter._writeAttributeString('ShowPrecessionChart', this.get_showPrecessionChart().toString());
      xmlWriter._writeAttributeString('ConstellationPictures', this.get_showConstellationPictures().toString());
      xmlWriter._writeAttributeString('ConstellationsEnabled', this.get_constellationsEnabled());
      xmlWriter._writeAttributeString('ShowConstellationLabels', this.get_showConstellationLabels().toString());
      xmlWriter._writeAttributeString('ShowSkyOverlays', this.get_showSkyOverlays().toString());
      xmlWriter._writeAttributeString('ShowConstellations', this.get_showConstellations().toString());
      xmlWriter._writeAttributeString('ShowSkyNode', this.get_showSkyNode().toString());
      xmlWriter._writeAttributeString('ShowSkyGrids', this.get_showSkyGrids().toString());
      xmlWriter._writeAttributeString('SkyOverlaysIn3d', this.get_showSkyOverlaysIn3d().toString());
      xmlWriter._writeAttributeString('ConstellationFiguresFilter', this._constellationFiguresFilter.toString());
      xmlWriter._writeAttributeString('ConstellationBoundariesFilter', this._constellationBoundariesFilter.toString());
      xmlWriter._writeAttributeString('ConstellationNamesFilter', this._constellationNamesFilter.toString());
      xmlWriter._writeAttributeString('ConstellationArtFilter', this._constellationArtFilter.toString());
      this._target._saveToXml(xmlWriter, 'Place');
      if (this._endTarget != null) {
        this._endTarget._saveToXml(xmlWriter, 'EndTarget');
      }
      xmlWriter._writeStartElement('Overlays');
      var $enum1 = ss.enumerate(this._overlays);
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        overlay.saveToXml(xmlWriter, false);
      }
      xmlWriter._writeEndElement();
      if (this._musicTrack != null) {
        xmlWriter._writeStartElement('MusicTrack');
        this._musicTrack.saveToXml(xmlWriter, false);
        xmlWriter._writeEndElement();
      }
      if (this._voiceTrack != null) {
        xmlWriter._writeStartElement('VoiceTrack');
        this._voiceTrack.saveToXml(xmlWriter, false);
        xmlWriter._writeEndElement();
      }
      this._writeLayerList(xmlWriter);
      xmlWriter._writeEndElement();
    },
    _writeLayerList: function(xmlWriter) {
      if (ss.keyCount(this.layers) > 0) {
        xmlWriter._writeStartElement('VisibleLayers');
        var $enum1 = ss.enumerate(ss.keys(this.layers));
        while ($enum1.moveNext()) {
          var key = $enum1.current;
          var info = this.layers[key];
          xmlWriter._writeStartElement('Layer');
          xmlWriter._writeAttributeString('StartOpacity', info.startOpacity.toString());
          xmlWriter._writeAttributeString('EndOpacity', info.endOpacity.toString());
          var len = info.startParams.length;
          xmlWriter._writeAttributeString('ParamCount', len.toString());
          for (var i = 0; i < len; i++) {
            xmlWriter._writeAttributeString(ss.format('StartParam{0}', i), info.startParams[i].toString());
            xmlWriter._writeAttributeString(ss.format('EndParam{0}', i), info.endParams[i].toString());
          }
          xmlWriter._writeValue(info.id.toString());
          xmlWriter._writeEndElement();
        }
        xmlWriter._writeEndElement();
      }
    },
    _addFilesToCabinet: function(fc, excludeAudio) {
      if (this._thumbnail != null) {
        var filename = ss.format('{0}.thumb.png', this._id);
        var blob = this._owner.getFileBlob(filename);
        fc.addFile(this._owner.get_workingDirectory() + filename, blob);
      }
      if (!excludeAudio) {
        if (this._musicTrack != null) {
          this._musicTrack.addFilesToCabinet(fc);
        }
        if (this._voiceTrack != null) {
          this._voiceTrack.addFilesToCabinet(fc);
        }
      }
      var $enum1 = ss.enumerate(this._overlays);
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        overlay.addFilesToCabinet(fc);
      }
    },
    getNextDefaultName: function(baseName) {
      var suffixId = 1;
      var $enum1 = ss.enumerate(this._overlays);
      while ($enum1.moveNext()) {
        var overlay = $enum1.current;
        if (ss.startsWith(overlay.get_name(), baseName)) {
          var id = 0;
          try {
            id = parseInt(overlay.get_name().substr(baseName.length));
          }
          catch ($e2) {
          }
          if (id >= suffixId) {
            suffixId = id + 1;
          }
        }
      }
      return ss.format('{0} {1}', baseName, suffixId);
    },
    _loadLayerList: function(layersNode) {
      var $enum1 = ss.enumerate(layersNode.childNodes);
      while ($enum1.moveNext()) {
        var layer = $enum1.current;
        if (layer.nodeName === 'Layer') {
          var info = new LayerInfo();
          var id = layer.innerHTML;
          info.id = Guid.fromString(id);
          info.startOpacity = parseFloat(layer.attributes.getNamedItem('StartOpacity').nodeValue);
          info.endOpacity = parseFloat(layer.attributes.getNamedItem('EndOpacity').nodeValue);
          var len = 0;
          if (layer.attributes.getNamedItem('ParamCount') != null) {
            len = parseInt(layer.attributes.getNamedItem('ParamCount').nodeValue);
          }
          info.startParams = new Array(len);
          info.endParams = new Array(len);
          info.frameParams = new Array(len);
          for (var i = 0; i < len; i++) {
            info.startParams[i] = parseFloat(layer.attributes.getNamedItem(ss.format('StartParam{0}', i)).nodeValue);
            info.endParams[i] = parseFloat(layer.attributes.getNamedItem(ss.format('EndParam{0}', i)).nodeValue);
            info.frameParams[i] = info.startParams[i];
          }
          this.layers[info.id] = info;
        }
      }
    },
    _updateLayerOpacity: function() {
      if (!this.get_keyFramed()) {
      }
      else {
        this.updateTweenPosition();
      }
    },
    get_showEquatorialGridText: function() {
      return this._showEquatorialGridText;
    },
    set_showEquatorialGridText: function(value) {
      this._showEquatorialGridText = value;
      return value;
    },
    get_showGalacticGrid: function() {
      return this._showGalacticGrid;
    },
    set_showGalacticGrid: function(value) {
      this._showGalacticGrid = value;
      return value;
    },
    get_showGalacticGridText: function() {
      return this._showGalacticGridText;
    },
    set_showGalacticGridText: function(value) {
      this._showGalacticGridText = value;
      return value;
    },
    get_showEclipticGrid: function() {
      return this._showEclipticGrid;
    },
    set_showEclipticGrid: function(value) {
      this._showEclipticGrid = value;
      return value;
    },
    get_showEclipticGridText: function() {
      return this._showEclipticGridText;
    },
    set_showEclipticGridText: function(value) {
      this._showEclipticGridText = value;
      return value;
    },
    get_showEclipticOverviewText: function() {
      return this._showEclipticOverviewText;
    },
    set_showEclipticOverviewText: function(value) {
      this._showEclipticOverviewText = value;
      return value;
    },
    get_showAltAzGrid: function() {
      return this._showAltAzGrid;
    },
    set_showAltAzGrid: function(value) {
      this._showAltAzGrid = value;
      return value;
    },
    get_showAltAzGridText: function() {
      return this._showAltAzGridText;
    },
    set_showAltAzGridText: function(value) {
      this._showAltAzGridText = value;
      return value;
    },
    get_showPrecessionChart: function() {
      return this._showPrecessionChart;
    },
    set_showPrecessionChart: function(value) {
      this._showPrecessionChart = value;
      return value;
    },
    get_showConstellationPictures: function() {
      return this._showConstellationPictures;
    },
    set_showConstellationPictures: function(value) {
      this._showConstellationPictures = value;
      return value;
    },
    get_showConstellationLabels: function() {
      return this._showConstellationLabels;
    },
    set_showConstellationLabels: function(value) {
      this._showConstellationLabels = value;
      return value;
    },
    get_solarSystemCMB: function() {
      return this._solarSystemCMB;
    },
    set_solarSystemCMB: function(value) {
      this._solarSystemCMB = value;
      return value;
    },
    get_solarSystemMinorPlanets: function() {
      return this._solarSystemMinorPlanets;
    },
    set_solarSystemMinorPlanets: function(value) {
      this._solarSystemMinorPlanets = value;
      return value;
    },
    get_solarSystemPlanets: function() {
      return this._solarSystemPlanets;
    },
    set_solarSystemPlanets: function(value) {
      this._solarSystemPlanets = value;
      return value;
    },
    get_showEarthSky: function() {
      return this._showEarthSky;
    },
    set_showEarthSky: function(value) {
      this._showEarthSky = value;
      return value;
    },
    get_solarSystemMinorOrbits: function() {
      return this._solarSystemMinorOrbits;
    },
    set_solarSystemMinorOrbits: function(value) {
      this._solarSystemMinorOrbits = value;
      return value;
    },
    get_constellationsEnabled: function() {
      return this._constellationsEnabled;
    },
    set_constellationsEnabled: function(value) {
      this._constellationsEnabled = value;
      return value;
    },
    get_constellationFiguresFilter: function() {
      return this._constellationFiguresFilter;
    },
    set_constellationFiguresFilter: function(value) {
      this._constellationFiguresFilter = value;
      return value;
    },
    get_constellationBoundariesFilter: function() {
      return this._constellationBoundariesFilter;
    },
    set_constellationBoundariesFilter: function(value) {
      this._constellationBoundariesFilter = value;
      return value;
    },
    get_constellationNamesFilter: function() {
      return this._constellationNamesFilter;
    },
    set_constellationNamesFilter: function(value) {
      this._constellationNamesFilter = value;
      return value;
    },
    get_constellationArtFilter: function() {
      return this._constellationArtFilter;
    },
    set_constellationArtFilter: function(value) {
      this._constellationArtFilter = value;
      return value;
    },
    get_showSkyOverlays: function() {
      return this._showSkyOverlays;
    },
    set_showSkyOverlays: function(value) {
      this._showSkyOverlays = value;
      return value;
    },
    get_showConstellations: function() {
      return this._showConstellations;
    },
    set_showConstellations: function(value) {
      this._showConstellations = value;
      return value;
    },
    get_showSkyNode: function() {
      return this._showSkyNode;
    },
    set_showSkyNode: function(value) {
      this._showSkyNode = value;
      return value;
    },
    get_showSkyGrids: function() {
      return this._showSkyGrids;
    },
    set_showSkyGrids: function(value) {
      this._showSkyGrids = value;
      return value;
    },
    get_showSkyOverlaysIn3d: function() {
      return this._showSkyOverlaysIn3d;
    },
    set_showSkyOverlaysIn3d: function(value) {
      this._showSkyOverlaysIn3d = value;
      return value;
    },
    get_earthCutawayView: function() {
      return this._earthCutawayView;
    },
    set_earthCutawayView: function(value) {
      this._earthCutawayView = value;
      return value;
    },
    get_showISSModel: function() {
      return this._showISSModel;
    },
    set_showISSModel: function(value) {
      this._showISSModel = value;
      return value;
    },
    get_milkyWayModel: function() {
      return this._milkyWayModel;
    },
    set_milkyWayModel: function(value) {
      this._milkyWayModel = value;
      return value;
    },
    get_minorPlanetsFilter: function() {
      return this._minorPlanetsFilter;
    },
    set_minorPlanetsFilter: function(value) {
      this._minorPlanetsFilter = value;
      return value;
    },
    get_planetOrbitsFilter: function() {
      return this._planetOrbitsFilter;
    },
    set_planetOrbitsFilter: function(value) {
      this._planetOrbitsFilter = value;
      return value;
    },
    getSetting: function(type) {
      if (type === 17) {
        return new SettingParameter(true, this.faderOpacity, !!this.faderOpacity, null);
      }
      return new SettingParameter(false, 1, false, null);
    }
  };


  // wwtlib.LayerInfo

  function LayerInfo() {
    this.id = Guid.newGuid();
    this.startOpacity = 1;
    this.endOpacity = 1;
    this.frameOpacity = 1;
    this.startParams = new Array(0);
    this.endParams = new Array(0);
    this.frameParams = new Array(0);
  }
  var LayerInfo$ = {

  };


  // wwtlib.UndoTourStopChange

  function UndoTourStopChange(text, tour) {
    this._undoXml = '';
    this._redoXml = '';
    this._currentIndex = 0;
    this._actionText = '';
    this._targetTour = null;
    this._currentIndex = tour.get_currentTourstopIndex();
    this._actionText = text;
    this._targetTour = tour;
    this._undoXml = TourStop.getXmlText(tour.get_currentTourStop());
    this._targetTour.set_tourDirty(true);
  }
  var UndoTourStopChange$ = {
    get_actionText: function() {
      return this._actionText;
    },
    set_actionText: function(value) {
      this._actionText = value;
      return value;
    },
    undo: function() {
      var tsRedo = this._targetTour.get_tourStops()[this._currentIndex];
      var parser = new DOMParser();
      var doc = parser.parseFromString(this._undoXml, 'text/xml');
      var node = Util.selectSingleNode(doc, 'TourStop');
      this._targetTour.get_tourStops()[this._currentIndex] = TourStop._fromXml(this._targetTour, node);
      this._targetTour.set_currentTourstopIndex(this._currentIndex);
      if (ss.emptyString(this._redoXml)) {
        this._redoXml = TourStop.getXmlText(tsRedo);
      }
      this._targetTour.set_tourDirty(true);
    },
    redo: function() {
      var parser = new DOMParser();
      var doc = parser.parseFromString(this._redoXml, 'text/xml');
      var node = Util.selectSingleNode(doc, 'TourStop');
      this._targetTour.get_tourStops()[this._currentIndex] = TourStop._fromXml(this._targetTour, node);
      this._targetTour.set_currentTourstopIndex(this._currentIndex);
      this._targetTour.set_tourDirty(true);
    },
    toString: function() {
      return this._actionText;
    }
  };


  // wwtlib.Undo

  function Undo() {
  }
  Undo.clear = function() {
    Undo._undoStack = new ss.Stack();
    Undo._redoStack = new ss.Stack();
  };
  Undo.push = function(step) {
    Undo._undoStack.push(step);
    Undo._redoStack = new ss.Stack();
  };
  Undo.peekActionString = function() {
    if (Undo._undoStack.count > 0) {
      return Undo._undoStack.peek().toString();
    }
    else {
      return Language.getLocalizedText(551, 'Nothing to Undo');
    }
  };
  Undo.peekRedoActionString = function() {
    if (Undo._redoStack.count > 0) {
      return Undo._redoStack.peek().toString();
    }
    else {
      return '';
    }
  };
  Undo.peekAction = function() {
    return (Undo._undoStack.count > 0);
  };
  Undo.peekRedoAction = function() {
    return (Undo._redoStack.count > 0);
  };
  Undo.stepBack = function() {
    var step = Undo._undoStack.pop();
    step.undo();
    Undo._redoStack.push(step);
  };
  Undo.stepForward = function() {
    var step = Undo._redoStack.pop();
    step.redo();
    Undo._undoStack.push(step);
  };
  var Undo$ = {

  };


  // wwtlib.UndoStep

  function UndoStep() {
  }
  var UndoStep$ = {
    undo: function() {
    },
    redo: function() {
    },
    toString: function() {
      return Language.getLocalizedText(551, 'Nothing to Undo');
    }
  };


  // wwtlib.UndoTourSlidelistChange

  function UndoTourSlidelistChange(text, tour) {
    this._currentIndex = 0;
    this._actionText = '';
    this._targetTour = null;
    this._undoList = [];
    for (var i = 0; i < tour.get_tourStops().length; i++) {
      this._undoList.push(tour.get_tourStops()[i]);
    }
    this._currentIndex = tour.get_currentTourstopIndex();
    this._actionText = text;
    this._targetTour = tour;
    this._targetTour.set_tourDirty(true);
  }
  var UndoTourSlidelistChange$ = {
    get_actionText: function() {
      return this._actionText;
    },
    set_actionText: function(value) {
      this._actionText = value;
      return value;
    },
    undo: function() {
      this._redoList = this._targetTour.get_tourStops();
      this._targetTour.set_tourStops(this._undoList);
      this._targetTour.set_currentTourstopIndex(this._currentIndex);
      this._targetTour.set_tourDirty(true);
    },
    redo: function() {
      this._undoList = this._targetTour.get_tourStops();
      this._targetTour.set_tourStops(this._redoList);
      this._targetTour.set_currentTourstopIndex(this._currentIndex);
      this._targetTour.set_tourDirty(true);
    },
    toString: function() {
      return this._actionText;
    }
  };


  // wwtlib.UndoTourPropertiesChange

  function UndoTourPropertiesChange(text, tour) {
    this._actionText = '';
    this._targetTour = null;
    this._undoDomeMode = false;
    this._undoLevel = 0;
    this._redoDomeMode = false;
    this._redoLevel = 0;
    this._undoTitle = tour.get_title();
    this._undoAuthor = tour.get_author();
    this._undoAuthorEmail = tour.get_authorEmail();
    this._undoDescription = tour.get_description();
    this._undoAuthorImage = tour.get_authorImage();
    this._undoOrganizationUrl = tour.get_organizationUrl();
    this._undoOrgName = tour.get_orgName();
    this._undoKeywords = tour.get_keywords();
    this._undoTaxonomy = tour.get_taxonomy();
    this._undoLevel = tour.get_level();
    this._actionText = text;
    this._targetTour = tour;
    this._targetTour.set_tourDirty(true);
  }
  var UndoTourPropertiesChange$ = {
    get_actionText: function() {
      return this._actionText;
    },
    set_actionText: function(value) {
      this._actionText = value;
      return value;
    },
    undo: function() {
      this._redoTitle = this._targetTour.get_title();
      this._redoAuthor = this._targetTour.get_author();
      this._redoAuthorEmail = this._targetTour.get_authorEmail();
      this._redoDescription = this._targetTour.get_description();
      this._redoAuthorImage = this._targetTour.get_authorImage();
      this._redoOrganizationUrl = this._targetTour.get_organizationUrl();
      this._redoOrgName = this._targetTour.get_orgName();
      this._redoKeywords = this._targetTour.get_keywords();
      this._redoTaxonomy = this._targetTour.get_taxonomy();
      this._redoLevel = this._targetTour.get_level();
      this._targetTour.set_title(this._undoTitle);
      this._targetTour.set_author(this._undoAuthor);
      this._targetTour.set_authorEmail(this._undoAuthorEmail);
      this._targetTour.set_description(this._undoDescription);
      this._targetTour.set_authorImage(this._undoAuthorImage);
      this._targetTour.set_organizationUrl(this._undoOrganizationUrl);
      this._targetTour.set_orgName(this._undoOrgName);
      this._targetTour.set_keywords(this._undoKeywords);
      this._targetTour.set_taxonomy(this._undoTaxonomy);
      this._targetTour.set_level(this._undoLevel);
      this._targetTour.set_tourDirty(true);
    },
    redo: function() {
      this._targetTour.set_title(this._redoTitle);
      this._targetTour.set_author(this._redoAuthor);
      this._targetTour.set_authorEmail(this._redoAuthorEmail);
      this._targetTour.set_description(this._redoDescription);
      this._targetTour.set_authorImage(this._redoAuthorImage);
      this._targetTour.set_organizationUrl(this._redoOrganizationUrl);
      this._targetTour.set_orgName(this._redoOrgName);
      this._targetTour.set_keywords(this._redoKeywords);
      this._targetTour.set_taxonomy(this._redoTaxonomy);
      this._targetTour.set_level(this._redoLevel);
      this._targetTour.set_tourDirty(true);
    },
    toString: function() {
      return this._actionText;
    }
  };


  // wwtlib.Triangle

  function Triangle() {
    this.a = 0;
    this.b = 0;
    this.c = 0;
    this.a = -1;
    this.b = -1;
    this.c = -1;
  }
  Triangle.create = function(a, b, c) {
    var temp = new Triangle();
    temp.a = a;
    temp.b = b;
    temp.c = c;
    return temp;
  };
  var Triangle$ = {
    subDivide: function(triList, vertexList) {
      var a1 = Vector3d.lerp(vertexList[this.b].position, vertexList[this.c].position, 0.5);
      var b1 = Vector3d.lerp(vertexList[this.c].position, vertexList[this.a].position, 0.5);
      var c1 = Vector3d.lerp(vertexList[this.a].position, vertexList[this.b].position, 0.5);
      var a1uv = Vector2d.lerp(Vector2d.create(vertexList[this.b].tu, vertexList[this.b].tv), Vector2d.create(vertexList[this.c].tu, vertexList[this.c].tv), 0.5);
      var b1uv = Vector2d.lerp(Vector2d.create(vertexList[this.c].tu, vertexList[this.c].tv), Vector2d.create(vertexList[this.a].tu, vertexList[this.a].tv), 0.5);
      var c1uv = Vector2d.lerp(Vector2d.create(vertexList[this.a].tu, vertexList[this.a].tv), Vector2d.create(vertexList[this.b].tu, vertexList[this.b].tv), 0.5);
      a1.normalize();
      b1.normalize();
      c1.normalize();
      var aIndex = vertexList.length;
      var bIndex = vertexList.length + 1;
      var cIndex = vertexList.length + 2;
      vertexList.push(PositionTexture.createPosRaw(a1, a1uv.x, a1uv.y));
      vertexList.push(PositionTexture.createPosRaw(b1, b1uv.x, b1uv.y));
      vertexList.push(PositionTexture.createPosRaw(c1, c1uv.x, c1uv.y));
      triList.push(Triangle.create(this.a, cIndex, bIndex));
      triList.push(Triangle.create(this.b, aIndex, cIndex));
      triList.push(Triangle.create(this.c, bIndex, aIndex));
      triList.push(Triangle.create(aIndex, bIndex, cIndex));
    },
    subDivideNoNormalize: function(triList, vertexList) {
      var a1 = Vector3d.lerp(vertexList[this.b].position, vertexList[this.c].position, 0.5);
      var b1 = Vector3d.lerp(vertexList[this.c].position, vertexList[this.a].position, 0.5);
      var c1 = Vector3d.lerp(vertexList[this.a].position, vertexList[this.b].position, 0.5);
      var a1uv = Vector2d.lerp(Vector2d.create(vertexList[this.b].tu, vertexList[this.b].tv), Vector2d.create(vertexList[this.c].tu, vertexList[this.c].tv), 0.5);
      var b1uv = Vector2d.lerp(Vector2d.create(vertexList[this.c].tu, vertexList[this.c].tv), Vector2d.create(vertexList[this.a].tu, vertexList[this.a].tv), 0.5);
      var c1uv = Vector2d.lerp(Vector2d.create(vertexList[this.a].tu, vertexList[this.a].tv), Vector2d.create(vertexList[this.b].tu, vertexList[this.b].tv), 0.5);
      var aIndex = vertexList.length;
      var bIndex = vertexList.length + 1;
      var cIndex = vertexList.length + 2;
      vertexList.push(PositionTexture.createPosRaw(a1, a1uv.x, a1uv.y));
      vertexList.push(PositionTexture.createPosRaw(b1, b1uv.x, b1uv.y));
      vertexList.push(PositionTexture.createPosRaw(c1, c1uv.x, c1uv.y));
      triList.push(Triangle.create(this.a, cIndex, bIndex));
      triList.push(Triangle.create(this.b, aIndex, cIndex));
      triList.push(Triangle.create(this.c, bIndex, aIndex));
      triList.push(Triangle.create(aIndex, bIndex, cIndex));
    }
  };


  // wwtlib.UiTools

  function UiTools() {
  }
  UiTools.gamma = function(val, gamma) {
    return Math.min(255, ss.truncate(((255 * Math.pow(val / 255, 1 / gamma)) + 0.5)));
  };
  UiTools.getNamesStringFromArray = function(array) {
    var names = '';
    var delim = '';
    var $enum1 = ss.enumerate(array);
    while ($enum1.moveNext()) {
      var name = $enum1.current;
      names += delim;
      names += name;
      delim = ';';
    }
    return names;
  };
  UiTools.solarSystemToMeters = function(SolarSystemCameraDistance) {
    return SolarSystemCameraDistance * 149598000 * 370;
  };
  UiTools.metersToSolarSystemDistance = function(meters) {
    return meters / 370 * 149598000;
  };
  UiTools.metersToZoom = function(meters) {
    return ((meters / 1000 / 370) - 1E-06) / 4 * 9;
  };
  UiTools.formatDistance = function(distance) {
    if (distance < 0.1) {
      var km = (distance * 149598000);
      if (km < 10) {
        var m = ss.truncate((km * 1000));
        return ss.format('{0} m', m);
      }
      else {
        km = ss.truncate(km);
        return ss.format('{0} km', km);
      }
    }
    else if (distance < (10)) {
      var au = ss.truncate((distance * 10)) / 10;
      return ss.format('{0} au', au);
    }
    else if (distance < (63239.6717 / 10)) {
      var au = ss.truncate(distance);
      return ss.format('{0} au', au);
    }
    else if (distance < (63239.6717 * 10)) {
      var ly = ss.truncate(((distance * 10) / 63239.6717)) / 10;
      return ss.format('{0} ly', ly);
    }
    else if (distance < (63239.6717 * 1000000)) {
      var ly = ss.truncate((distance / 63239.6717));
      return ss.format('{0} ly', ly);
    }
    else if (distance < (206264.806 * 10000000)) {
      var mpc = ss.truncate(((distance * 10) / (206264.806 * 1000000))) / 10;
      return ss.format('{0} Mpc', mpc);
    }
    else if (distance < (206264.806 * 1000000000)) {
      var mpc = ss.truncate((distance / (206264.806 * 1000000)));
      return ss.format('{0} Mpc', mpc);
    }
    else {
      var mpc = ss.truncate(((distance * 10) / (206264.806 * 1000000000))) / 10;
      return ss.format('{0} Gpc', mpc);
    }
  };
  UiTools.formatDecimalHours = function(dayFraction) {
    var today = ss.now();
    var ts = today.getTimezoneOffset() / 60;
    ts = 0;
    var day = (dayFraction - ts) + 0.0083333334;
    while (day > 24) {
      day -= 24;
    }
    while (day < 0) {
      day += 24;
    }
    var hours = ss.truncate(day);
    var minutes = ss.truncate(((day * 60) - (hours * 60)));
    var seconds = ss.truncate(((day * 3600) - ((hours * 3600) + (minutes * 60))));
    return ss.format('{0}:{1}', hours, minutes, seconds);
  };
  UiTools.splitString = function(data, delimiter) {
    var output = [];
    var nestingLevel = 0;
    var current = 0;
    var count = 0;
    var start = 0;
    while (current < data.length) {
      if (data.substr(current, 1) === '(') {
        nestingLevel++;
      }
      if (data.substr(current, 1) === ')') {
        nestingLevel--;
      }
      if (current === (data.length - 1)) {
        count++;
      }
      if (current === (data.length - 1) || (data.substr(current, 1) === delimiter && delimiter === '\t') || (!nestingLevel && data.substr(current, 1) === delimiter)) {
        output.push(data.substr(start, count));
        start = current + 1;
        count = 0;
      }
      else {
        count++;
      }
      current++;
    }
    return output;
  };
  UiTools.split = function(data, delimiters) {
    var output = [];
    var nestingLevel = 0;
    var current = 0;
    var count = 0;
    var start = 0;
    while (current < data.length) {
      if (current === (data.length - 1)) {
        count++;
      }
      if (current === (data.length - 1) || delimiters.indexOf(data.substr(current, 1)) > -1) {
        output.push(data.substr(start, count));
        start = current + 1;
        count = 0;
      }
      else {
        count++;
      }
      current++;
    }
    return output;
  };
  UiTools._beep = function() {
  };
  var UiTools$ = {

  };


  // wwtlib.Util

  function Util() {
  }
  Util.splitString = function(target, split) {
    var parts = [];
    var start = 0;
    var end = 0;
    for (var i = 0; i < target.length; i++) {
      var found = false;
      for (var j = 0; j < split.length; j++) {
        if (target[i] === split[j]) {
          parts.push(target.substring(start, end - start));
          found = true;
          continue;
        }
        start = i + 1;
        end = i + 1;
      }
      if (!found) {
        end++;
      }
    }
    if (end > start) {
      parts.push(target.substring(start, end - start));
    }
    return parts;
  };
  Util.stringContains = function(target, chars) {
    for (var i = 0; i < chars.length; i++) {
      if (target.indexOf(chars[i]) > -1) {
        return true;
      }
    }
    return false;
  };
  Util.getHashCode = function(target) {
    var hash = 0;
    if (!target.length) {
      return hash;
    }
    for (var i = 0; i < target.length; i++) {
      var c = target.charCodeAt(i);
      hash = ((hash << 5) - hash) + c;
    }
    return hash;
  };
  Util.compare = function(l, r) {
    if (l === r) {
      return 0;
    }
    if (l > r) {
      return 1;
    }
    return -1;
  };
  Util.logN = function(num, b) {
    return Math.log(num) / Math.log(b);
  };
  Util.getUrlParam = function(name) {
    return '';
  };
  Util.getProxiedUrl = function(url) {
    if (ss.startsWith(url.toLowerCase(), '//worldwidetelescope.org') || ss.startsWith(url.toLowerCase(), '//worldwidetelescope.org')) {
      if (url.toLowerCase().indexOf('worldwidetelescope.org/wwtweb/') < 12) {
        return url;
      }
      return url.split('worldwidetelescope.org')[1];
    }
    if (ss.startsWith(url.toLowerCase(), '//wwtstaging.azurewebsites.net') || ss.startsWith(url.toLowerCase(), '//wwtstaging.azurewebsites.net')) {
      if (url.toLowerCase().indexOf('wwtstaging.azurewebsites.net/wwtweb/') < 12) {
        return url;
      }
      return url.split('wwtstaging.azurewebsites.net')[1];
    }
    if (ss.startsWith(url.toLowerCase(), 'http')) {
      return '//worldwidetelescope.org/webserviceproxy.aspx?targeturl=' + encodeURIComponent(url);
    }
    return url;
  };
  Util.parseTimeSpan = function(timespan) {
    var val = 0;
    var parts = timespan.split(':');
    if (parts.length === 3) {
      val += parseInt(parts[0]) * 36000000;
      val += parseInt(parts[1]) * 600000;
      val += ss.truncate((parseFloat(parts[2]) * 1000));
    }
    return val;
  };
  Util.xmlDuration = function(duration) {
    var s = duration / 1000;
    var hours = Math.floor(s / 3600);
    var min = Math.floor(s / 60) - (hours * 60);
    var sec = s - ((hours * 3600) + min * 60);
    return ss.format('{0}:{1}:{2}', hours, min, sec);
  };
  Util.getTourComponent = function(url, name) {
    return '//worldwidetelescope.org/GetTourFile.aspx?targeturl=' + encodeURIComponent(url) + '&filename=' + name;
  };
  Util.xmlDate = function(d) {
    var hours = d.getHours();
    var amPm = 'AM';
    if (hours > 12) {
      hours -= 12;
      amPm = 'PM';
    }
    return (d.getMonth() + 1).toString() + '/' + d.getDate().toString() + '/' + d.getFullYear().toString() + ' ' + hours.toString() + ':' + d.getMinutes().toString() + ':' + d.getSeconds().toString() + ' ' + amPm;
  };
  Util.selectSingleNode = function(parent, name) {
    var node = null;
    var $enum1 = ss.enumerate(parent.childNodes);
    while ($enum1.moveNext()) {
      var child = $enum1.current;
      if (child.nodeName === name) {
        node = child;
        break;
      }
    }
    return node;
  };
  Util.getInnerText = function(node) {
    if (ss.emptyString(node.text)) {
      var cn = node;
      return cn.textContent;
    }
    else {
      return node.text;
    }
  };
  Util.getWrappedText = function(ctx, text, width) {
    var lines = [];
    lines.push(text);
    return lines;
  };
  Util.toHex = function(number) {
    var num = Math.max(0, Math.min(ss.truncate(number), 255));
    return '0123456789ABCDEF'.substr((num - num % 16) / 16, 1) + '0123456789ABCDEF'.substr(num % 16, 1);
  };
  Util.fromHex = function(data) {
    var val = 0;
    switch (data.substr(1, 1).toUpperCase()) {
      case 'A':
        val += 10;
        break;
      case 'B':
        val += 11;
        break;
      case 'C':
        val += 12;
        break;
      case 'D':
        val += 13;
        break;
      case 'E':
        val += 14;
        break;
      case 'F':
        val += 15;
        break;
      default:
        val += parseInt(data.substr(1, 1));
        break;
    }
    switch (data.substr(0, 1).toUpperCase()) {
      case 'A':
        val += 10 * 16;
        break;
      case 'B':
        val += 11 * 16;
        break;
      case 'C':
        val += 12 * 16;
        break;
      case 'D':
        val += 13 * 16;
        break;
      case 'E':
        val += 14 * 16;
        break;
      case 'F':
        val += 15 * 16;
        break;
      default:
        val += parseInt(data.substr(0, 1)) * 16;
        break;
    }
    return val;
  };
  Util._openUrl = function(p, p_2) {
  };
  Util.log10 = function(num) {
    return Math.log(num) / 2.30258509299405;
  };
  Util.sign = function(num) {
    if (num < 0) {
      return -1;
    }
    return 1;
  };
  var Util$ = {

  };


  // wwtlib.Rectangle

  function Rectangle() {
    this.x = 0;
    this.y = 0;
    this.width = 0;
    this.height = 0;
  }
  Rectangle.create = function(x, y, width, height) {
    var temp = new Rectangle();
    temp.x = x;
    temp.y = y;
    temp.width = width;
    temp.height = height;
    return temp;
  };
  var Rectangle$ = {
    get_left: function() {
      return this.x;
    },
    get_right: function() {
      return this.x + this.width;
    },
    get_top: function() {
      return this.y;
    },
    get_bottom: function() {
      return this.y + this.height;
    },
    contains: function(point) {
      return (this._between(point.x, this.x, this.x + this.width) && this._between(point.y, this.y, this.y + this.height));
    },
    _between: function(n, n1, n2) {
      if (n1 > n2) {
        return !(n > n1) && !(n < n2);
      }
      else {
        return !(n < n1) && !(n > n2);
      }
    },
    copy: function() {
      var temp = new Rectangle();
      temp.x = this.x;
      temp.y = this.y;
      temp.width = this.width;
      temp.height = this.height;
      return temp;
    }
  };


  // wwtlib.Guid

  function Guid() {
    this._guid = Guid.create();
  }
  Guid.newGuid = function() {
    return new Guid();
  };
  Guid.fromString = function(id) {
    var temp = new Guid();
    temp._guid = ss.trim(id);
    return temp;
  };
  Guid.create = function() {
    return  'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) { var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8); return v.toString(16); });;
  };
  var Guid$ = {
    toString: function() {
      return this._guid;
    }
  };


  // wwtlib.Enums

  function Enums() {
  }
  Enums.parse = function(enumType, value) {
    if (value === 'Default') {
      value = 'DefaultV';
    }
    if (value === '0') {
      return 0;
    }
    var val = value.substr(0, 1).toLowerCase() + value.substr(1);
    return wwtlib[enumType][val];
  };
  Enums.toXml = function(enumType, value) {
     var x = "0"; var p = Object.keys(wwtlib[enumType]); for (var i in p)
 { if ( wwtlib[enumType][p[i]] == value ) {
 x = p[i]; break; 
}
 };
    var val =  x;
    var enumString = val.substr(0, 1).toUpperCase() + val.substr(1);
    if (enumString === 'DefaultV') {
      enumString = 'Default';
    }
    return enumString;
  };
  var Enums$ = {

  };


  // wwtlib.Mouse

  function Mouse() {
  }
  Mouse.offsetX = function(canvas, e) {
    var x = 0;
    var element = canvas;
    var me = e;
    if (element.offsetParent != null) {
      do {
        x += element.offsetLeft;
      } while ((element = element.offsetParent) != null);
    }
    return me.pageX - x;
  };
  Mouse.offsetY = function(canvas, e) {
    var y = 0;
    var element = canvas;
    var me = e;
    if (element.offsetParent != null) {
      do {
        y += element.offsetTop;
      } while ((element = element.offsetParent) != null);
    }
    return me.pageY - y;
  };


  // wwtlib.Language

  function Language() {
  }
  Language.getLocalizedText = function(id, text) {
    return text;
  };
  var Language$ = {

  };


  // wwtlib.Cursor

  function Cursor() {
  }
  Cursor.get_position = function() {
    return new Vector2d();
  };
  Cursor.get_current = function() {
    return document.body.style.cursor;
  };
  Cursor.set_current = function(value) {
    document.body.style.cursor = value;
    return value;
  };
  var Cursor$ = {

  };


  // wwtlib.Cursors

  function Cursors() {
  }
  Cursors.get_arrow = function() {
    return 'default';
  };
  Cursors.get_cross = function() {
    return 'crosshair';
  };
  Cursors.get_defaultV = function() {
    return 'default';
  };
  Cursors.get_hand = function() {
    return 'grab';
  };
  Cursors.get_help = function() {
    return 'help';
  };
  Cursors.get_hSplit = function() {
    return 'row-resize';
  };
  Cursors.get_iBeam = function() {
    return 'text';
  };
  Cursors.get_no = function() {
    return 'not-allowed';
  };
  Cursors.get_sizeAll = function() {
    return 'help';
  };
  Cursors.get_sizeNESW = function() {
    return 'nwse-resize';
  };
  Cursors.get_sizeNS = function() {
    return 'ns-resize';
  };
  Cursors.get_sizeNWSE = function() {
    return 'nwse-resize';
  };
  Cursors.get_sizeWE = function() {
    return 'ew-resize';
  };
  Cursors.get_upArrow = function() {
    return 'help';
  };
  Cursors.get_vSplit = function() {
    return 'col-resize';
  };
  Cursors.get_waitCursor = function() {
    return 'wait';
  };
  var Cursors$ = {

  };


  // wwtlib.SelectLink

  function SelectLink(id) {
    this._return = false;
    this._next = true;
    this._linkSlide = false;
    this._slide = null;
    this._ok = false;
    if (id != null) {
      this.set_id(id);
    }
    else {
      this.set_next(true);
    }
  }
  var SelectLink$ = {
    get_returnCaller: function() {
      return this._return;
    },
    set_returnCaller: function(value) {
      if (value) {
        this._slide = 'Return';
      }
      this._return = value;
      return value;
    },
    get_next: function() {
      return this._next;
    },
    set_next: function(value) {
      if (value) {
        this._slide = 'Next';
      }
      this._next = value;
      return value;
    },
    get_linkToSlide: function() {
      return this._linkSlide;
    },
    set_linkToSlide: function(value) {
      if (value) {
        this._slide = 'Next';
      }
      this._linkSlide = value;
      return value;
    },
    get_id: function() {
      return this._slide;
    },
    set_id: function(value) {
      this._return = false;
      this._next = false;
      this._linkSlide = true;
      this._slide = value;
      return value;
    },
    get_OK: function() {
      return this._ok;
    },
    set_OK: function(value) {
      this._ok = value;
      return value;
    }
  };


  // wwtlib.PopupVolume

  function PopupVolume() {
    this.volume = 0;
  }
  var PopupVolume$ = {
    showDialog: function() {
      return 1;
    }
  };


  // wwtlib.PopupColorPicker

  function PopupColorPicker() {
    this.volume = 0;
    this.location = new Vector2d();
    this.color = new Color();
  }
  var PopupColorPicker$ = {
    showDialog: function() {
      return 1;
    }
  };


  // wwtlib.OverlayProperties

  function OverlayProperties() {
    this.volume = 0;
    this.location = new Vector2d();
    this.overlay = null;
  }
  var OverlayProperties$ = {
    showDialog: function() {
      return 1;
    }
  };


  // wwtlib.BinaryReader

  function BinaryReader(arraybuf) {
    this.position = 0;
    this._data = null;
    this._data = arraybuf;
  }
  var BinaryReader$ = {
    get_position: function() {
      return this.position;
    },
    seek: function(pos) {
      this.position = pos;
    },
    seekRelative: function(pos) {
      this.position += pos;
    },
    get_length: function() {
      return this._data.length;
    },
    readByte: function() {
      var result;
      result = this._data[this.position];
      this.position += 1;
      return result;
    },
    readSByte: function() {
      var result;
      result = this._data[this.position];
      this.position += 1;
      return result;
    },
    readBytes: function(count) {
      var buf = new Array(count);
      for (var i = 0; i < count; i++) {
        buf[i] = this._data[this.position + i];
      }
      this.position += count;
      return buf;
    },
    readByteString: function(count) {
      var data = '';
      for (var i = 0; i < count; i++) {
        data += String.fromCharCode(this._data[this.position + i]);
      }
      this.position += count;
      return data;
    },
    readSingle: function() {
      var tmp = new Uint8Array(4);
      tmp[0] = this._data[this.position];
      tmp[1] = this._data[this.position + 1];
      tmp[2] = this._data[this.position + 2];
      tmp[3] = this._data[this.position + 3];
      var result = new Float32Array(tmp.buffer, 0, 1)[0];
      this.position += 4;
      return result;
    },
    readUInt32: function() {
      var result = (this._data[this.position] + (this._data[this.position + 1] << 8) + (this._data[this.position + 2] << 16) + (this._data[this.position + 3] << 24));
      this.position += 4;
      return result;
    },
    readUInt16: function() {
      var result = (this._data[this.position] + (this._data[this.position + 1] << 8));
      this.position += 2;
      return result;
    },
    readInt32: function() {
      var result = this.readUInt32();
      if (!!(result & 2147483648)) {
        return (-((result - 1) ^ 4294967295));
      }
      return result;
    },
    readInt64: function() {
      this.position += 8;
      return BinaryReader.id++;
    },
    close: function() {
    }
  };


  // wwtlib.Bitmap

  function Bitmap() {
    this.width = 0;
    this.height = 0;
  }
  Bitmap.create = function(width, height) {
    height = Texture.fitPowerOfTwo(height);
    width = Texture.fitPowerOfTwo(width);
    var bmp = new Bitmap();
    bmp.height = height;
    bmp.width = width;
    bmp._buffer = new Uint8Array(width * height * 4);
    return bmp;
  };
  var Bitmap$ = {
    setPixel: function(x, y, r, g, b, a) {
      var index = (x + y * this.width) * 4;
      this._buffer[index++] = r;
      this._buffer[index++] = g;
      this._buffer[index++] = b;
      this._buffer[index++] = a;
    },
    getTexture: function() {
      var tex = Tile.prepDevice.createTexture();
      Tile.prepDevice.bindTexture(3553, tex);
      Tile.prepDevice.texParameteri(3553, 10242, 33071);
      Tile.prepDevice.texParameteri(3553, 10243, 33071);
      Tile.prepDevice.texImage2D(3553, 0, 6408, this.width, this.height, 0, 6408, 5121, this._buffer);
      Tile.prepDevice.texParameteri(3553, 10241, 9985);
      Tile.prepDevice.generateMipmap(3553);
      Tile.prepDevice.bindTexture(3553, null);
      return tex;
    }
  };


  // wwtlib.ColorPicker

  function ColorPicker() {
    this.callBack = null;
    this.color = Colors.get_white();
  }
  var ColorPicker$ = {
    nonMenuClick: function(e) {
    },
    show: function(e) {
      WWTControl.scriptInterface.showColorPicker(this, e);
    },
    getColorFromClick: function(e) {
      var image = document.getElementById('colorhex');
      var canvas = document.createElement('canvas');
      canvas.width = image.width;
      canvas.height = image.height;
      var ctx = canvas.getContext('2d');
      ctx.drawImage(image, 0, 0);
      var pixels = ctx.getImageData(e.offsetX, e.offsetY, 1, 1).data;
      this.color = Color.fromArgb(pixels[3], pixels[0], pixels[1], pixels[2]);
      return this.color;
    },
    pickColor: function(e) {
      this.callBack(this.color);
    }
  };


  // wwtlib.ContextMenuStrip

  function ContextMenuStrip() {
    this.items = [];
  }
  var ContextMenuStrip$ = {
    _dispose: function() {
    },
    _nonMenuClick: function(e) {
      var menu = document.getElementById('contextmenu');
      menu.style.display = 'none';
      window.removeEventListener('click', ss.bind('_nonMenuClick', this), false);
      var popup = document.getElementById('popoutmenu');
      while (popup.firstChild != null) {
        popup.removeChild(popup.firstChild);
      }
      popup.style.display = 'none';
    },
    _menuItemClicked: function(e) {
      var me = e.currentTarget;
      me.itemTag.click(me.itemTag, new ss.EventArgs());
    },
    _show: function(position) {
      var menu = document.getElementById('contextmenu');
      while (menu.firstChild != null) {
        menu.removeChild(menu.firstChild);
      }
      menu.className = 'contextmenu';
      menu.style.display = 'block';
      menu.style.left = position.x.toString() + 'px';
      menu.style.top = position.y.toString() + 'px';
      window.addEventListener('click', ss.bind('_nonMenuClick', this), true);
      var $enum1 = ss.enumerate(this.items);
      while ($enum1.moveNext()) {
        var item = $enum1.current;
        if (item.visible) {
          var md = document.createElement('div');
          if (item.dropDownItems.length > 0) {
            md.className = 'contextmenuitem submenu';
          }
          else {
            if (item.checked) {
              md.className = 'contextmenuitem checkedmenu';
            }
            else {
              md.className = 'contextmenuitem';
            }
          }
          md.innerText = item.name;
          var it = md;
          it.itemTag = item;
          md.addEventListener('mouseover', ss.bind('_openSubMenu', this), false);
          if (item.click != null) {
            md.addEventListener('click', ss.bind('_menuItemClicked', this), false);
          }
          menu.appendChild(md);
        }
      }
    },
    _openSubMenu: function(e) {
      var me = e.currentTarget;
      var child = me.itemTag;
      var menu = document.getElementById('popoutmenu');
      while (menu.firstChild != null) {
        menu.removeChild(menu.firstChild);
      }
      menu.style.display = 'none';
      if (!child.dropDownItems.length) {
        return;
      }
      var position = new Vector2d();
      position.x = e.currentTarget.parentNode.offsetLeft + e.currentTarget.parentNode.clientWidth;
      position.y = e.currentTarget.parentNode.offsetTop + e.currentTarget.offsetTop;
      menu.className = 'contextmenu';
      menu.style.display = 'block';
      menu.style.left = position.x.toString() + 'px';
      menu.style.top = position.y.toString() + 'px';
      window.addEventListener('click', ss.bind('_nonMenuClick', this), true);
      var $enum1 = ss.enumerate(child.dropDownItems);
      while ($enum1.moveNext()) {
        var item = $enum1.current;
        if (item.visible) {
          var md = document.createElement('div');
          md.className = (item.checked) ? 'contextmenuitem checkedmenu' : 'contextmenuitem';
          md.innerText = item.name;
          var it = md;
          it.itemTag = item;
          md.addEventListener('click', ss.bind('_menuItemClicked', this), false);
          menu.appendChild(md);
        }
      }
    }
  };


  // wwtlib.ToolStripMenuItem

  function ToolStripMenuItem() {
    this.tag = null;
    this.dropDownItems = [];
    this.checked = false;
    this.enabled = true;
    this.visible = true;
  }
  ToolStripMenuItem.create = function(name) {
    var tsmi = new ToolStripMenuItem();
    tsmi.name = name;
    return tsmi;
  };
  var ToolStripMenuItem$ = {

  };


  // wwtlib.TagMe

  function TagMe() {
  }
  var TagMe$ = {

  };


  // wwtlib.Dialog

  function Dialog() {
  }
  var Dialog$ = {
    add_showDialogHook: function(value) {
      this.__showDialogHook = ss.bindAdd(this.__showDialogHook, value);
    },
    remove_showDialogHook: function(value) {
      this.__showDialogHook = ss.bindSub(this.__showDialogHook, value);
    },
    show: function(dialogArgs, e) {
      if (this.__showDialogHook != null) {
        this.__showDialogHook(dialogArgs, e);
      }
    }
  };


  // wwtlib.Histogram

  function Histogram() {
    this.image = null;
    this.layer = null;
    this.tile = null;
    this._dropDown = null;
    this._downPosition = 0;
    this._lowPosition = 0;
    this._highPosition = 255;
    this._center = 127;
    this._ignoreNextClick = false;
    this._dragType = 4;
    this._updated = false;
    this.selectedCurveStyle = 0;
  }
  Histogram.updateImage = function(isl, z) {
    var image = ss.safeCast(isl.get_imageSet().get_wcsImage(), FitsImage);
    var Tile = TileCache.getTile(0, 0, 0, isl.get_imageSet(), null);
    var low = image.lastBitmapMin;
    var hi = image.lastBitmapMax;
    Tile.texture2d = image.getScaledBitmap(low, hi, image.lastScale, Math.floor(z * (image.depth - 1))).getTexture();
  };
  Histogram.updateScale = function(isl, scale, low, hi) {
    var image = ss.safeCast(isl.get_imageSet().get_wcsImage(), FitsImage);
    var Tile = TileCache.getTile(0, 0, 0, isl.get_imageSet(), null);
    var z = image.lastBitmapZ;
    Tile.texture2d = image.getScaledBitmap(low, hi, scale, z).getTexture();
  };
  var Histogram$ = {
    close: function(e) {
      var menu = document.getElementById('histogram');
      var closeBtn = document.getElementById('histogramClose');
      menu.style.display = 'none';
      window.removeEventListener('click', ss.bind('close', this), true);
      var image = document.getElementById('graph');
      image.removeEventListener('mousedown', ss.bind('mouseDown', this), false);
      image.removeEventListener('mousemove', ss.bind('mousemove', this), false);
      image.removeEventListener('mouseup', ss.bind('mouseup', this), false);
      this._dropDown.removeEventListener('change', ss.bind('curveStyleSelected', this), false);
      this._dropDown.removeEventListener('click', ss.bind('ignoreMe', this), true);
    },
    show: function(position) {
      this.tile = TileCache.getTile(0, 0, 0, this.layer.get_imageSet(), null);
      var picker = document.getElementById('histogram');
      var closeBtn = document.getElementById('histogramClose');
      picker.style.display = 'block';
      picker.style.left = position.x.toString() + 'px';
      picker.style.top = position.y.toString() + 'px';
      this.selectedCurveStyle = this.image.lastScale;
      this._dropDown = document.getElementById('ScaleTypePicker');
      this._dropDown.addEventListener('change', ss.bind('curveStyleSelected', this), false);
      this._dropDown.addEventListener('click', ss.bind('ignoreMe', this), true);
      var canvas = document.getElementById('graph');
      canvas.addEventListener('mousedown', ss.bind('mouseDown', this), false);
      canvas.addEventListener('mousemove', ss.bind('mousemove', this), false);
      canvas.addEventListener('mouseup', ss.bind('mouseup', this), false);
      closeBtn.addEventListener('click', ss.bind('close', this), true);
      this.draw();
    },
    ignoreMe: function(e) {
      this._ignoreNextClick = true;
    },
    curveStyleSelected: function(e) {
      this.selectedCurveStyle = this._dropDown.selectedIndex;
      this.setUpdateTimer();
      this.draw();
      this._ignoreNextClick = true;
    },
    mouseDown: function(e) {
      var canvas = document.getElementById('graph');
      var x = Mouse.offsetX(canvas, e);
      var y = Mouse.offsetY(canvas, e);
      if ((Math.abs(x - this._center) < 10) && Math.abs(y - 75) < 10) {
        this._dragType = 3;
      }
      else if (Math.abs(x - this._lowPosition) < 3) {
        this._dragType = 0;
      }
      else if (Math.abs(x - this._highPosition) < 3) {
        this._dragType = 1;
      }
      else {
        this._dragType = 2;
        this._downPosition = Math.min(255, Math.max(0, x));
        this.draw();
      }
      e.cancelBubble = true;
    },
    mousemove: function(e) {
      var canvas = document.getElementById('graph');
      var x = Mouse.offsetX(canvas, e);
      var y = Mouse.offsetY(canvas, e);
      switch (this._dragType) {
        case 0:
          this._lowPosition = Math.min(255, Math.max(0, x));
          break;
        case 1:
          this._highPosition = Math.min(255, Math.max(0, x));
          break;
        case 2:
          this._lowPosition = this._downPosition;
          this._highPosition = Math.min(255, Math.max(0, x));
          break;
        case 3:
          var hWidth = Math.abs(this._highPosition - this._lowPosition) / 2;
          var adCenter = Math.min(255 - hWidth, Math.max(hWidth, x));
          var moved = this._center - adCenter;
          this._lowPosition -= moved;
          this._highPosition -= moved;
          break;
        case 4:
          return;
        default:
          break;
      }
      this._center = (this._lowPosition + this._highPosition) / 2;
      this.draw();
      var factor = (this.image.maxVal - this.image.minVal) / 256;
      var low = this.image.minVal + (this._lowPosition * factor);
      var hi = this.image.minVal + (this._highPosition * factor);
      this.setUpdateTimer();
      this.image.lastMax = this._highPosition;
      this.image.lastMin = this._lowPosition;
      e.cancelBubble = true;
    },
    mouseup: function(e) {
      if (this._dragType !== 4) {
        this._dragType = 4;
        this.setUpdateTimer();
        this._ignoreNextClick = true;
      }
      e.cancelBubble = true;
    },
    setUpdateTimer: function() {
      var $this = this;

      setTimeout(function() {
        $this.update();
      }, 500);
      this._updated = false;
    },
    update: function() {
      if (this._updated) {
        return;
      }
      if (this.image != null) {
        var factor = (this.image.maxVal - this.image.minVal) / 256;
        var low = this.image.minVal + (this._lowPosition * factor);
        var hi = this.image.minVal + (this._highPosition * factor);
        var z = this.image.lastBitmapZ;
        this.tile.texture2d = this.image.getScaledBitmap(low, hi, this.selectedCurveStyle, z).getTexture();
      }
      this._updated = true;
    },
    draw: function() {
      var canvas = document.getElementById('graph');
      var ctx = canvas.getContext('2d');
      if (this.image != null) {
        this.image.drawHistogram(ctx);
      }
      var red = 'rgba(255,0,0,255)';
      var green = 'rgba(0,255,0,255)';
      var blue = 'rgba(0,0,255,255)';
      ctx.strokeStyle = red;
      ctx.beginPath();
      ctx.moveTo(this._lowPosition, 0);
      ctx.lineTo(this._lowPosition, 150);
      ctx.stroke();
      ctx.strokeStyle = green;
      ctx.beginPath();
      ctx.moveTo(this._highPosition, 0);
      ctx.lineTo(this._highPosition, 150);
      ctx.stroke();
      ctx.strokeStyle = blue;
      ctx.beginPath();
      ctx.arc(this._center, 75, 10, 0, Math.PI * 2, false);
      ctx.closePath();
      ctx.stroke();
      var Curve = [];
      switch (this.selectedCurveStyle) {
        case 0:
          Curve.length = 0;
          Curve.push(Vector2d.create(this._lowPosition, 150));
          Curve.push(Vector2d.create(this._highPosition, 0));
          break;
        case 1:
          Curve.length = 0;
          var factor = 150 / Math.log(255);
          var diff = (this._highPosition - this._lowPosition);
          var jump = (diff < 0) ? -1 : 1;
          var step = Math.abs(256 / ((!diff) ? 1E-06 : diff));
          var val = 1E-06;
          for (var i = this._lowPosition; i !== this._highPosition; i += jump) {
            Curve.push(Vector2d.create(i, (150 - (Math.log(val) * factor))));
            val += step;
          }
          break;
        case 2:
          Curve.length = 0;
          var factor = 150 / Math.pow(255, 2);
          var diff = (this._highPosition - this._lowPosition);
          var jump = (diff < 0) ? -1 : 1;
          var step = Math.abs(256 / ((!diff) ? 1E-06 : diff));
          var val = 1E-06;
          for (var i = this._lowPosition; i !== this._highPosition; i += jump) {
            Curve.push(Vector2d.create(i, (150 - (Math.pow(val, 2) * factor))));
            val += step;
          }
          break;
        case 3:
          Curve.length = 0;
          var factor = 150 / Math.sqrt(255);
          var diff = (this._highPosition - this._lowPosition);
          var jump = (diff < 0) ? -1 : 1;
          var step = Math.abs(256 / ((!diff) ? 1E-06 : diff));
          var val = 1E-06;
          for (var i = this._lowPosition; i !== this._highPosition; i += jump) {
            Curve.push(Vector2d.create(i, (150 - (Math.sqrt(val) * factor))));
            val += step;
          }
          break;
      }
      if (Curve.length > 1) {
        ctx.beginPath();
        ctx.strokeStyle = blue;
        ctx.moveTo(Curve[0].x, Curve[0].y);
        for (var i = 1; i < Curve.length; i++) {
          ctx.lineTo(Curve[i].x, Curve[i].y);
        }
        ctx.stroke();
      }
    }
  };


  // wwtlib.SimpleInput

  function SimpleInput(title, label, text, v3) {
    this.title = 'Tile';
    this.label = 'Enter Text Below';
    this.text = '';
    this._textElement = null;
    this._ignoreNextClick = false;
    this.title = title;
    this.label = label;
    this.text = text;
  }
  var SimpleInput$ = {
    showDialog: function() {
      return 1;
    },
    nonMenuClick: function(e) {
      if (!this._ignoreNextClick) {
        this._close();
      }
      this._ignoreNextClick = false;
    },
    show: function(position, callback) {
      var simpleInputElement = document.getElementById('simpleinput');
      var modalElement = document.getElementById('simplemodal');
      modalElement.style.display = 'block';
      simpleInputElement.style.display = 'block';
      simpleInputElement.style.marginLeft = position.x.toString() + 'px';
      simpleInputElement.style.marginTop = position.y.toString() + 'px';
      this._textElement = document.getElementById('inputtext');
      this._textElement.value = this.text;
      var titleDiv = document.getElementById('simpletitle');
      var labelDiv = document.getElementById('inputlabel');
      titleDiv.innerText = this.title;
      labelDiv.innerText = this.label;
      this._textElement.addEventListener('change', ss.bind('textChanged', this), false);
      this._textElement.addEventListener('click', ss.bind('ignoreMe', this), true);
      var okButton = document.getElementById('simpleinputok');
      var cancelButton = document.getElementById('simpleinputcancel');
      okButton.addEventListener('click', ss.bind('okClicked', this), false);
      cancelButton.addEventListener('click', ss.bind('cancelClicked', this), false);
      this._okCallback = callback;
    },
    okClicked: function(e) {
      this._close();
      if (this._okCallback != null) {
        this._okCallback();
      }
    },
    cancelClicked: function(e) {
      this._close();
    },
    _close: function() {
      var simpleInputElement = document.getElementById('simplemodal');
      simpleInputElement.style.display = 'none';
      this._textElement.removeEventListener('change', ss.bind('textChanged', this), false);
      var okButton = document.getElementById('simpleinputok');
      var cancelButton = document.getElementById('simpleinputcancel');
      okButton.removeEventListener('click', ss.bind('okClicked', this), false);
      cancelButton.removeEventListener('click', ss.bind('cancelClicked', this), false);
    },
    ignoreMe: function(e) {
      this._ignoreNextClick = true;
    },
    textChanged: function(e) {
      this.text = this._textElement.value;
      this._ignoreNextClick = true;
    }
  };


  // wwtlib.XmlTextWriter

  function XmlTextWriter() {
    this.body = "<?xml version='1.0' encoding='UTF-8'?>\r\n";
    this.formatting = 1;
    this._elementStack = new ss.Stack();
    this._pending = false;
    this._currentName = '';
    this._attributes = {};
    this._value = '';
  }
  var XmlTextWriter$ = {
    _pushNewElement: function(name) {
      this._writePending(false);
      this._elementStack.push(name);
      this._pending = true;
      this._currentName = name;
    },
    _writePending: function(fullClose) {
      var closed = true;
      if (this._pending) {
        for (var i = 1; i < this._elementStack.count; i++) {
          this.body += '  ';
        }
        this.body += '<' + this._currentName;
        if (ss.keyCount(this._attributes) > 0) {
          var $enum1 = ss.enumerate(ss.keys(this._attributes));
          while ($enum1.moveNext()) {
            var key = $enum1.current;
            this.body += ss.format(' {0}="{1}"', key, this._attributes[key]);
          }
        }
        if (!ss.emptyString(this._value)) {
          this.body += '>';
          closed = false;
          if (!ss.emptyString(this._value)) {
            this.body += this._value;
          }
        }
        else {
          if (fullClose) {
            this.body += ' />\r\n';
            closed = true;
          }
          else {
            this.body += '>\r\n';
          }
        }
        this._pending = false;
        this._currentName = '';
        this._value = '';
        this._attributes = {};
        return closed;
      }
      return false;
    },
    _writeProcessingInstruction: function(v1, v2) {
    },
    _writeStartElement: function(name) {
      this._pushNewElement(name);
    },
    _writeAttributeString: function(key, value) {
      if (value != null) {
        this._attributes[key] = ss.replaceString(value.toString(), '&', '&amp;');
      }
      else {
        this._attributes[key] = '';
      }
    },
    _writeEndElement: function() {
      if (!this._writePending(true)) {
        for (var i = 1; i < this._elementStack.count; i++) {
          this.body += '  ';
        }
        this.body += ss.format('</{0}>\r\n', this._elementStack.pop());
      }
      else {
        this._elementStack.pop();
      }
    },
    _writeString: function(text) {
      this._value = ss.replaceString(text, '&', '&amp;');
    },
    _writeFullEndElement: function() {
      this._writePending(false);
      for (var i = 1; i < this._elementStack.count; i++) {
        this.body += '  ';
      }
      this.body += ss.format('</{0}>\r\n', this._elementStack.pop());
    },
    _close: function() {
    },
    _writeElementString: function(name, value) {
      this._writeStartElement(name);
      this._writeValue(ss.replaceString(value, '&', '&amp;'));
      this._writeEndElement();
    },
    _writeValue: function(val) {
      this._value = ss.replaceString(val, '&', '&amp;');
    },
    _writeCData: function(htmlDescription) {
      this._value = ss.format('<![CDATA[{0}]]>', htmlDescription);
    }
  };


  // wwtlib.VizLayer

  function VizLayer() {
    this.table = [];
    this.items = [];
    this._imageReady = false;
    this._dateColumn = 0;
    this._latColumn = 1;
    this._lngColumn = 2;
    this._depthColumn = 3;
    this._magColumn = 4;
  }
  var VizLayer$ = {
    load: function(data) {
      var $this = this;

      var lines = data.split('\r\n');
      this._starProfile = document.createElement('img');
      this._starProfile.addEventListener('load', function(e) {
        $this._imageReady = true;
      }, false);
      this._starProfile.src = 'images/StarProfileAlpha.png';
      var gotHeader = false;
      var $enum1 = ss.enumerate(lines);
      while ($enum1.moveNext()) {
        var line = $enum1.current;
        if (gotHeader) {
          this.table.push(line.split('\t'));
        }
        else {
          this.header = line.split('\t');
          gotHeader = true;
        }
      }
    },
    prepare: function() {
      this._worldList = new Array(this.table.length);
      this._transformedList = new Array(this.table.length);
      var index = 0;
      var $enum1 = ss.enumerate(this.table);
      while ($enum1.moveNext()) {
        var row = $enum1.current;
        var item = new DataItem();
        item.eventTime = ss.date(row[this._dateColumn]);
        var radius = (6371000 - parseFloat(row[this._depthColumn]) * 1000) / 6371000;
        item.location = Coordinates.geoTo3dRad(parseFloat(row[this._latColumn]), parseFloat(row[this._lngColumn]) + 180, radius);
        item.tranformed = new Vector3d();
        item.size = Math.pow(2, parseFloat(row[this._magColumn])) / 50;
        this._worldList[index] = item.location;
        this._transformedList[index] = item.tranformed;
        this.items.push(item);
        index++;
      }
    },
    draw: function(renderContext) {
      if (!this._imageReady) {
        return;
      }
      renderContext.device.save();
      renderContext.WVP.projectArrayToScreen(this._worldList, this._transformedList);
      var ctx = renderContext.device;
      ctx.globalAlpha = 0.4;
      var width = renderContext.width;
      var height = renderContext.height;
      var viewPoint = Vector3d.makeCopy(renderContext.get_viewPoint());
      var scaleFactor = renderContext.get_fovScale() / 100;
      var $enum1 = ss.enumerate(this.items);
      while ($enum1.moveNext()) {
        var item = $enum1.current;
        if (item.tranformed.z < 1) {
          var x = item.tranformed.x;
          var y = item.tranformed.y;
          var size = 4 * item.size / scaleFactor;
          var half = size / 2;
          if (x > -half && x < width + half && y > -half && y < height + half) {
            ctx.drawImage(this._starProfile, x - size / 2, y - size / 2, size, size);
          }
        }
      }
      renderContext.device.restore();
    }
  };


  // wwtlib.DataItem

  function DataItem() {
    this.size = 0;
  }
  var DataItem$ = {
    getColor: function() {
      return 'Red';
    }
  };


  // wwtlib.WebFile

  function WebFile(url) {
    this._state = 0;
    this.responseType = '';
    this._triedOnce = false;
    this._url = url;
  }
  var WebFile$ = {
    send: function() {
      var version = navigator.appVersion;
      if (version.indexOf('MSIE 8') > -1 || version.indexOf('MSIE 9') > -1) {
        this._ieCrossDomain();
      }
      else {
        this._CORS();
      }
      this.set_state(0);
    },
    get_message: function() {
      return this._message;
    },
    get_state: function() {
      return this._state;
    },
    set_state: function(value) {
      this._state = value;
      if (this.onStateChange != null) {
        this.onStateChange();
      }
      return value;
    },
    _loadData: function(textReceived) {
      this._data = textReceived;
      this.set_state(1);
    },
    _loadBlob: function(blob) {
      this._blobdata = blob;
      this.set_state(1);
    },
    _error: function() {
      this._message = ss.format('Error encountered loading {0}', this._url);
      this.set_state(2);
    },
    _timeOut: function() {
      this._message = ss.format('Timeout encountered loading {0}', this._url);
      this.set_state(2);
    },
    _ieCrossDomain: function() {
      var $this = this;

      this._xdr = new XDomainRequest();
      this._xdr.onload = function() {
        $this._loadData($this._xdr.responseText);
      };
      this._xdr.onTimeout = ss.bind('_error', this);
      this._xdr.onError = ss.bind('_timeOut', this);
      this._xdr.open('get', this._url);
      this._xdr.send();
    },
    _CORS: function() {
      var $this = this;

      this._xhr = new XMLHttpRequest();
      try {
        this._xhr.open('GET', this._url);
        if (this.responseType != null) {
          this._xhr.responseType = this.responseType;
        }
        this._xhr.onreadystatechange = function() {
          if ($this._xhr.readyState === 4) {
            if (!$this._xhr.status) {
              if (!$this._triedOnce) {
                $this._triedOnce = true;
                $this._xhr.onreadystatechange = null;
                $this._url = Util.getProxiedUrl($this._url);
                $this._CORS();
              }
            }
            else {
              if (!$this.responseType) {
                $this._loadData($this._xhr.responseText);
              }
              else {
                $this._loadBlob($this._xhr.response);
              }
            }
          }
        };
        this._xhr.send();
      }
      catch (err) {
        this._message = err.message;
        this.set_state(2);
        throw err;
      }
    },
    getText: function() {
      return this._data;
    },
    getBlob: function() {
      return this._blobdata;
    },
    getXml: function() {
      var xParser = new DOMParser();
      return xParser.parseFromString(this._data, 'text/xml');
    }
  };


  // wwtlib.Wtml

  function Wtml() {
  }
  Wtml.getWtmlFile = function(url, complete) {
    var temp = new Folder();
    temp.loadFromUrl(url, function() {
      Wtml.loadImagesets(temp);
      complete();
    });
  };
  Wtml.loadImagesets = function(folder) {
    var $enum1 = ss.enumerate(folder.get_children());
    while ($enum1.moveNext()) {
      var child = $enum1.current;
      var imageset = null;
      if (ss.canCast(child, Imageset)) {
        imageset = child;
        WWTControl.imageSets.push(imageset);
      }
      if (ss.canCast(child, Place)) {
        var place = child;
        if (place.get_studyImageset() != null) {
          WWTControl.imageSets.push(place.get_studyImageset());
        }
        if (place.get_backgroundImageset() != null) {
          WWTControl.imageSets.push(place.get_backgroundImageset());
        }
      }
    }
    if (!ss.emptyString(WWTControl.imageSetName)) {
      var name = WWTControl.imageSetName.toLowerCase();
      var $enum2 = ss.enumerate(WWTControl.imageSets);
      while ($enum2.moveNext()) {
        var imageset = $enum2.current;
        if (imageset.get_name().toLowerCase() === name) {
          WWTControl.singleton.renderContext.set_backgroundImageset(imageset);
        }
      }
    }
  };
  var Wtml$ = {

  };


  // wwtlib.WWTControl

  function WWTControl() {
    this.uiController = null;
    this._annotations = [];
    this.layers = [];
    this._frameCount = 0;
    this._zoomMax = 360;
    this._zoomMaxSolarSystem = 10000000000000000;
    this._zoomMin = 0.001373291015625;
    this._zoomMinSolarSystem = 0.0001;
    this.constellation = 'UMA';
    this._fadePoints = null;
    this.fader = BlendState.create(true, 2000);
    this._crossFadeFrame = false;
    this._crossFadeTexture = null;
    this._sprite = new Sprite2d();
    this.renderType = 2;
    this._milkyWayBackground = null;
    this._foregroundCanvas = null;
    this._fgDevice = null;
    this._beginZoom = 1;
    this._hoverText = '';
    this._hoverTextPoint = new Vector2d();
    this._lastMouseMove = new Date(1900, 1, 0, 0, 0, 0, 0);
    this._isPintching = false;
    this._pointerIds = new Array(2);
    this._dragging = false;
    this._rect = new Array(2);
    this._mouseDown = false;
    this._lastX = 0;
    this._lastY = 0;
    this._moved = false;
    this._tracking = false;
    this._trackingObject = null;
    this.sandboxMode = false;
    this._solarSystemTrack = 65536;
    this._moving = false;
    this._targetStudyImageset = null;
    this._targetBackgroundImageset = null;
    this.tour = null;
    this.tourEdit = null;
    this._crossHarirs = null;
  }
  WWTControl.get_renderNeeded = function() {
    return WWTControl._renderNeeded;
  };
  WWTControl.set_renderNeeded = function(value) {
    WWTControl._renderNeeded = true;
    return value;
  };
  WWTControl.showExplorerUI = function() {
    if (WWTControl.singleton != null) {
      WWTControl.singleton.createExplorerUI();
    }
  };
  WWTControl.initControl = function(DivId) {
    return WWTControl.initControlParam(DivId, false);
  };
  WWTControl.initControlParam = function(DivId, webGL) {
    if (WWTControl.singleton.renderContext.device == null) {
      WWTControl.scriptInterface = new ScriptInterface();
      WWTControl.scriptInterface.settings = Settings.get_current();
      var canvas = WWTControl._createCanvasElement(DivId);
      var webgltext = 'webgl';
      var gl = null;
      webGL = true;
      if (webGL) {
        gl = canvas.getContext(webgltext);
      }
      if (gl == null) {
        webgltext = 'experimental-webgl';
        gl = canvas.getContext(webgltext);
      }
      if (gl == null) {
        var ctx = canvas.getContext('2d');
        WWTControl.singleton.renderContext.device = ctx;
      }
      else {
        Tile.prepDevice = gl;
        WWTControl.singleton.renderContext.gl = gl;
        RenderContext.useGl = true;
      }
      WWTControl.singleton.canvas = canvas;
      WWTControl.singleton.renderContext.width = canvas.width;
      WWTControl.singleton.renderContext.height = canvas.height;
      WWTControl.singleton.setup(canvas);
      WWTControl.singleton.renderContext.set_backgroundImageset(Imageset.create('DSS', '//cdn.worldwidetelescope.org/wwtweb/dss.aspx?q={1},{2},{3}', 2, 3, 3, 100, 0, 12, 256, 180, '.png', false, '', 0, 0, 0, false, '//worldwidetelescope.org/thumbnails/DSS.png', true, false, 0, 0, 0, '', '', '', '', 1, 'Sky'));
      if (WWTControl.startMode === 'earth') {
        WWTControl.singleton.renderContext.set_backgroundImageset(Imageset.create('Blue Marble', '//worldwidetelescope.org/wwtweb/tiles.aspx?q={1},{2},{3},bm200407', 0, 3, 3, 101, 0, 7, 256, 180, '.png', false, '', 0, 0, 0, false, '//worldwidetelescope.org/wwtweb/thumbnail.aspx?name=bm200407', true, false, 0, 0, 0, '', '', '', '', 6371000, 'Earth'));
      }
      if (WWTControl.startMode === 'bing') {
        WWTControl.singleton.renderContext.set_backgroundImageset(Imageset.create('Virtual Earth Aerial', '//a{0}.ortho.tiles.virtualearth.net/tiles/a{1}.jpeg?g=15', 0, 3, 0, 102, 1, 20, 256, 360, '.png', false, '0123', 0, 0, 0, false, '//worldwidetelescope.org/wwtweb/thumbnail.aspx?name=earth', true, false, 0, 0, 0, '', '', '', '', 6371000, 'Earth'));
      }
    }
    WWTControl.singleton.renderContext.viewCamera.lng += 0;
    WWTControl.singleton.renderContext._initGL();
    WWTControl.singleton.render();
    return WWTControl.scriptInterface;
  };
  WWTControl.useUserLocation = function() {
    navigator.geolocation.getCurrentPosition(WWTControl._getLocation, WWTControl._getLocationError);
  };
  WWTControl._getLocation = function(pos) {
    if (!!pos.coords.latitude) {
      Settings.get_globalSettings().set_locationLat(pos.coords.latitude);
    }
    if (!!pos.coords.longitude) {
      Settings.get_globalSettings().set_locationLng(pos.coords.longitude);
    }
    if (!!pos.coords.altitude) {
      Settings.get_globalSettings().set_locationAltitude(pos.coords.altitude);
    }
  };
  WWTControl._getLocationError = function(pos) {
    if (pos != null && pos.coords != null) {
      var lat = pos.coords.latitude;
      var lng = pos.coords.longitude;
    }
  };
  WWTControl._createCanvasElement = function(DivId) {
    var canvas = null;
    var div = document.getElementById(DivId);
    var style = div.attributes.getNamedItem('style');
    canvas = document.createElement('canvas');
    canvas.height = parseInt(div.style.height);
    canvas.width = parseInt(div.style.width);
    div.appendChild(canvas);
    return canvas;
  };
  WWTControl.showFolderUI = function() {
    WWTControl.singleton.createExplorerUI();
  };
  WWTControl.go = function(mode, lat, lng, zoom) {
    if (mode != null && mode.length > 0) {
      WWTControl.startMode = mode;
    }
    if (!!zoom) {
      WWTControl.startLat = lat;
      WWTControl.startLng = lng;
      WWTControl.startZoom = zoom * 6;
    }
  };
  WWTControl.setBackgroundImageName = function(name) {
    WWTControl.imageSetName = name;
  };
  WWTControl.setForegroundImageName = function(name) {
    WWTControl.imageSetName = name;
  };
  WWTControl.showLayers = function(show) {
    WWTControl.showDataLayers = show;
  };
  var WWTControl$ = {
    _addAnnotation: function(annotation) {
      this._annotations.push(annotation);
      Annotation.batchDirty = true;
    },
    _removeAnnotation: function(annotation) {
      ss.remove(this._annotations, annotation);
      Annotation.batchDirty = true;
    },
    _clearAnnotations: function() {
      this._annotations.length = 0;
      Annotation.batchDirty = true;
    },
    get__zoomMax: function() {
      if (this.renderContext.get_backgroundImageset() != null && this.renderContext.get_backgroundImageset().get_dataSetType() === 4) {
        return this._zoomMaxSolarSystem;
      }
      else {
        return this._zoomMax;
      }
    },
    get_zoomMin: function() {
      if (this.renderContext.get_backgroundImageset() != null && this.renderContext.get_backgroundImageset().get_dataSetType() === 4) {
        return this._zoomMinSolarSystem / 10000;
      }
      else {
        return this._zoomMin;
      }
    },
    set_zoomMin: function(value) {
      this._zoomMin = value;
      return value;
    },
    _notifyMoveComplete: function() {
    },
    get_crossFadeFrame: function() {
      return this._crossFadeFrame;
    },
    set_crossFadeFrame: function(value) {
      if (value && this._crossFadeFrame !== value) {
        if (this._crossFadeTexture != null) {
        }
        this._crossFadeTexture = this.renderContext._getScreenTexture();
      }
      this._crossFadeFrame = value;
      if (!value) {
        if (this._crossFadeTexture != null) {
          this._crossFadeTexture = null;
        }
      }
      return value;
    },
    _fadeFrame: function() {
      if (this.renderContext.gl != null) {
        var sp = Settings.get_active().getSetting(17);
        if ((sp.opacity > 0)) {
          var color = Color._fromArgbColor(255 - UiTools.gamma(255 - ss.truncate((sp.opacity * 255)), 1 / 2.2), Colors.get_black());
          if (!(sp.opacity > 0)) {
            color = Color._fromArgbColor(255 - UiTools.gamma(255 - ss.truncate((sp.opacity * 255)), 1 / 2.2), Colors.get_black());
          }
          if (this._crossFadeFrame) {
            color = Color._fromArgbColor(UiTools.gamma(ss.truncate((sp.opacity * 255)), 1 / 2.2), Colors.get_white());
          }
          else {
            if (this._crossFadeTexture != null) {
              this._crossFadeTexture = null;
            }
          }
          if (this._fadePoints == null) {
            this._fadePoints = new Array(4);
            for (var i = 0; i < 4; i++) {
              this._fadePoints[i] = new PositionColoredTextured();
            }
          }
          this._fadePoints[0].position.x = -this.renderContext.width / 2;
          this._fadePoints[0].position.y = this.renderContext.height / 2;
          this._fadePoints[0].position.z = 1347;
          this._fadePoints[0].tu = 0;
          this._fadePoints[0].tv = 1;
          this._fadePoints[0].color = color;
          this._fadePoints[1].position.x = -this.renderContext.width / 2;
          this._fadePoints[1].position.y = -this.renderContext.height / 2;
          this._fadePoints[1].position.z = 1347;
          this._fadePoints[1].tu = 0;
          this._fadePoints[1].tv = 0;
          this._fadePoints[1].color = color;
          this._fadePoints[2].position.x = this.renderContext.width / 2;
          this._fadePoints[2].position.y = this.renderContext.height / 2;
          this._fadePoints[2].position.z = 1347;
          this._fadePoints[2].tu = 1;
          this._fadePoints[2].tv = 1;
          this._fadePoints[2].color = color;
          this._fadePoints[3].position.x = this.renderContext.width / 2;
          this._fadePoints[3].position.y = -this.renderContext.height / 2;
          this._fadePoints[3].position.z = 1347;
          this._fadePoints[3].tu = 1;
          this._fadePoints[3].tv = 0;
          this._fadePoints[3].color = color;
          this._sprite.draw(this.renderContext, this._fadePoints, 4, this._crossFadeTexture, true, 1);
        }
      }
    },
    render: function() {
      var $this = this;

      if (this.renderContext.get_backgroundImageset() != null) {
        this.renderType = this.renderContext.get_backgroundImageset().get_dataSetType();
      }
      else {
        this.renderType = 2;
      }
      var sizeChange = false;
      if (this.canvas.width !== parseInt(this.canvas.parentNode.style.width)) {
        this.canvas.width = parseInt(this.canvas.parentNode.style.width);
        sizeChange = true;
      }
      if (this.canvas.height !== parseInt(this.canvas.parentNode.style.height)) {
        this.canvas.height = parseInt(this.canvas.parentNode.style.height);
        sizeChange = true;
      }
      if (sizeChange) {
        if (this.explorer != null) {
          this.explorer.refresh();
        }
      }
      Tile.lastDeepestLevel = Tile.deepestLevel;
      RenderTriangle.width = this.renderContext.width = this.canvas.width;
      RenderTriangle.height = this.renderContext.height = this.canvas.height;
      Tile.tilesInView = 0;
      Tile.tilesTouched = 0;
      Tile.deepestLevel = 0;
      if (this.get__mover() != null) {
        SpaceTimeController.set_now(this.get__mover().get_currentDateTime());
        Planets.updatePlanetLocations(this.get_solarSystemMode());
        if (this.get__mover() != null) {
          var newCam = this.get__mover().get_currentPosition();
          this.renderContext.targetCamera = newCam.copy();
          this.renderContext.viewCamera = newCam.copy();
          if (this.renderContext.space && Settings.get_active().get_galacticMode()) {
            var gPoint = Coordinates.j2000toGalactic(newCam.get_RA() * 15, newCam.get_dec());
            this.renderContext.targetAlt = this.renderContext.alt = gPoint[1];
            this.renderContext.targetAz = this.renderContext.az = gPoint[0];
          }
          else if (this.renderContext.space && Settings.get_active().get_localHorizonMode()) {
            var currentAltAz = Coordinates.equitorialToHorizon(Coordinates.fromRaDec(newCam.get_RA(), newCam.get_dec()), SpaceTimeController.get_location(), SpaceTimeController.get_now());
            this.renderContext.targetAlt = this.renderContext.alt = currentAltAz.get_alt();
            this.renderContext.targetAz = this.renderContext.az = currentAltAz.get_az();
          }
          if (this.get__mover().get_complete()) {
            WWTControl.scriptInterface._fireArrived(this.get__mover().get_currentPosition().get_RA(), this.get__mover().get_currentPosition().get_dec(), WWTControl.singleton.renderContext.viewCamera.zoom);
            this.set__mover(null);
            this._notifyMoveComplete();
          }
        }
      }
      else {
        SpaceTimeController.updateClock();
        Planets.updatePlanetLocations(this.get_solarSystemMode());
        this._updateViewParameters();
      }
      this.renderContext.clear();
      if (this.renderType === 4) {
        if (this._solarSystemTrack < 20) {
          var radius = Planets.getAdjustedPlanetRadius(this._solarSystemTrack);
          var distance = this.renderContext.get_solarSystemCameraDistance();
          var camAngle = this.renderContext.get_fovLocal();
        }
        if (this._trackingObject == null) {
        }
        this.renderContext.setupMatricesSolarSystem(true);
        var zoom = this.renderContext.viewCamera.zoom;
        var milkyWayBlend = Math.min(1, Math.max(0, (Math.log(zoom) - 8.4)) / 4.2);
        var milkyWayBlendIn = Math.min(1, Math.max(0, (Math.log(zoom) - 17.9)) / 2.3);
        var matOldMW = this.renderContext.get_world();
        var matLocalMW = this.renderContext.get_world().clone();
        matLocalMW._multiply(Matrix3d._scaling(100000, 100000, 100000));
        matLocalMW._multiply(Matrix3d._rotationX(23.5 / 180 * Math.PI));
        matLocalMW._multiply(Matrix3d.translation(this.renderContext.cameraPosition));
        this.renderContext.set_world(matLocalMW);
        this.renderContext.set_worldBase(matLocalMW);
        this.renderContext.space = true;
        this.renderContext.makeFrustum();
        var lighting = this.renderContext.lighting;
        this.renderContext.lighting = false;
        if (Settings.get_active().get_solarSystemMilkyWay()) {
          if (milkyWayBlend < 1) {
            if (this._milkyWayBackground == null) {
              this._milkyWayBackground = this.getImagesetByName('Digitized Sky Survey (Color)');
            }
            if (this._milkyWayBackground != null) {
              RenderTriangle.cullInside = true;
              var c = (1 - milkyWayBlend) / 2;
              this.renderContext.drawImageSet(this._milkyWayBackground, c * 100);
              RenderTriangle.cullInside = false;
            }
          }
        }
        this._drawSkyOverlays();
        this.renderContext.lighting = lighting;
        this.renderContext.space = false;
        this.renderContext.set_world(matOldMW);
        this.renderContext.set_worldBase(matOldMW);
        this.renderContext.makeFrustum();
        var oldCamera = this.renderContext.cameraPosition;
        var matOld = this.renderContext.get_world();
        var matLocal = this.renderContext.get_world();
        matLocal._multiply(Matrix3d.translation(this.renderContext.viewCamera.viewTarget));
        this.renderContext.cameraPosition = Vector3d.subtractVectors(this.renderContext.cameraPosition, this.renderContext.viewCamera.viewTarget);
        this.renderContext.set_world(matLocal);
        this.renderContext.makeFrustum();
        if (Settings.get_active().get_solarSystemCosmos()) {
          Grids.drawCosmos3D(this.renderContext, 1);
        }
        if (Settings.get_active().get_solarSystemMilkyWay() && milkyWayBlendIn > 0) {
          Grids.drawGalaxyImage(this.renderContext, milkyWayBlendIn);
        }
        if (Settings.get_active().get_solarSystemStars()) {
          Grids.drawStars3D(this.renderContext, 1);
        }
        matLocal = matOld;
        var pnt = this.renderContext.viewCamera.viewTarget;
        var vt = Vector3d.create(-pnt.x, -pnt.y, -pnt.z);
        this.renderContext.cameraPosition = oldCamera;
        matLocal._multiply(Matrix3d.translation(vt));
        this.renderContext.set_world(matLocal);
        this.renderContext.makeFrustum();
        LayerManager._draw(this.renderContext, 1, true, 'Sky', true, false);
        this.renderContext.set_world(matOld);
        this.renderContext.makeFrustum();
        if (this.renderContext.get_solarSystemCameraDistance() < 15000) {
          this.renderContext.setupMatricesSolarSystem(false);
          if (Settings.get_active().get_solarSystemMinorPlanets()) {
            MinorPlanets.drawMPC3D(this.renderContext, 1, this.renderContext.viewCamera.viewTarget);
          }
          if (Settings.get_active().get_solarSystemPlanets()) {
            Planets.drawPlanets3D(this.renderContext, 1, this.renderContext.viewCamera.viewTarget);
          }
        }
      }
      else {
        if (!this.renderType || this.renderType === 1) {
          this.renderContext._setupMatricesLand3d();
        }
        else {
          this.renderContext.setupMatricesSpace3d(this.renderContext.width, this.renderContext.height);
        }
        this.renderContext.drawImageSet(this.renderContext.get_backgroundImageset(), 100);
        if (this.renderContext.get_foregroundImageset() != null) {
          if (this.renderContext.viewCamera.opacity !== 100 && this.renderContext.gl == null) {
            if (this._foregroundCanvas.width !== this.renderContext.width || this._foregroundCanvas.height !== this.renderContext.height) {
              this._foregroundCanvas.width = ss.truncate(this.renderContext.width);
              this._foregroundCanvas.height = ss.truncate(this.renderContext.height);
            }
            var saveDevice = this.renderContext.device;
            this._fgDevice.clearRect(0, 0, this.renderContext.width, this.renderContext.height);
            this.renderContext.device = this._fgDevice;
            this.renderContext.drawImageSet(this.renderContext.get_foregroundImageset(), 100);
            this.renderContext.device = saveDevice;
            this.renderContext.device.save();
            this.renderContext.device.globalAlpha = this.renderContext.viewCamera.opacity / 100;
            this.renderContext.device.drawImage(this._foregroundCanvas, 0, 0);
            this.renderContext.device.restore();
          }
          else {
            this.renderContext.drawImageSet(this.renderContext.get_foregroundImageset(), this.renderContext.viewCamera.opacity);
          }
        }
        if (this.renderType === 2 && Settings.get_active().get_showSolarSystem()) {
          Planets.drawPlanets(this.renderContext, 1);
          this.constellation = Constellations.containment.findConstellationForPoint(this.renderContext.viewCamera.get_RA(), this.renderContext.viewCamera.get_dec());
          this._drawSkyOverlays();
        }
        if (this.get_planetLike() || this.get_space()) {
          if (!this.get_space()) {
            var angle = Coordinates.mstFromUTC2(SpaceTimeController.get_now(), 0) / 180 * Math.PI;
            this.renderContext.set_worldBaseNonRotating(Matrix3d.multiplyMatrix(Matrix3d._rotationY(angle), this.renderContext.get_worldBase()));
            if (this._targetBackgroundImageset != null) {
              this.renderContext.set_nominalRadius(this._targetBackgroundImageset.get_meanRadius());
            }
          }
          else {
            this.renderContext.set_worldBaseNonRotating(this.renderContext.get_world());
            if (this._targetBackgroundImageset != null) {
              this.renderContext.set_nominalRadius(this._targetBackgroundImageset.get_meanRadius());
            }
          }
          var referenceFrame = this._getCurrentReferenceFrame();
          LayerManager._draw(this.renderContext, 1, this.get_space(), referenceFrame, true, this.get_space());
        }
      }
      var worldSave = this.renderContext.get_world();
      var viewSave = this.renderContext.get_view();
      var projSave = this.renderContext.get_projection();
      var raDecDownDown = this.getCoordinatesForScreenPoint(this.renderContext.width / 2, this.renderContext.height / 2);
      if (Settings.get_current().get_showCrosshairs()) {
        this._drawCrosshairs(this.renderContext);
      }
      if (this.uiController != null) {
        this.uiController.render(this.renderContext);
      }
      else {
        var index = 0;
        Annotation.prepBatch(this.renderContext);
        var $enum1 = ss.enumerate(this._annotations);
        while ($enum1.moveNext()) {
          var item = $enum1.current;
          item.draw(this.renderContext);
          index++;
        }
        Annotation.drawBatch(this.renderContext);
        if ((ss.now() - this._lastMouseMove) > 400) {
          var raDecDown = this.getCoordinatesForScreenPoint(this._hoverTextPoint.x, this._hoverTextPoint.y);
          this._annotationHover(raDecDown.x, raDecDown.y, this._hoverTextPoint.x, this._hoverTextPoint.y);
          this._lastMouseMove = new Date(2100, 1, 1);
        }
        if (!ss.emptyString(this._hoverText)) {
          this._drawHoverText(this.renderContext);
        }
      }
      this.renderContext.setupMatricesOverlays();
      this._fadeFrame();
      this._frameCount++;
      TileCache.decimateQueue();
      TileCache.processQueue(this.renderContext);
      Tile.currentRenderGeneration++;
      if (!TourPlayer.get_playing()) {
        this.set_crossFadeFrame(false);
      }
      this.renderContext.set_world(worldSave);
      this.renderContext.set_view(viewSave);
      this.renderContext.set_projection(projSave);
      var now = ss.now();
      var ms = now - this._lastUpdate;
      if (ms > 1000) {
        this._lastUpdate = now;
        this._frameCount = 0;
        RenderTriangle.trianglesRendered = 0;
        RenderTriangle.trianglesCulled = 0;
      }
      setTimeout(function() {
        $this.render();
      }, 10);
    },
    _getCurrentReferenceFrame: function() {
      if (this.renderContext.get_backgroundImageset() == null) {
        return 'Sun';
      }
      if (!ss.emptyString(this.renderContext.get_backgroundImageset().get_referenceFrame())) {
        return this.renderContext.get_backgroundImageset().get_referenceFrame();
      }
      if (!this.renderContext.get_backgroundImageset().get_dataSetType()) {
        return 'Earth';
      }
      if (this.renderContext.get_backgroundImageset().get_name() === 'Visible Imagery' && this.renderContext.get_backgroundImageset().get_url().toLowerCase().indexOf('mars') > -1) {
        this.renderContext.get_backgroundImageset().set_referenceFrame('Mars');
        return this.renderContext.get_backgroundImageset().get_referenceFrame();
      }
      if (this.renderContext.get_backgroundImageset().get_dataSetType() === 1) {
        var $enum1 = ss.enumerate(WWTControl.solarSystemObjectsNames);
        while ($enum1.moveNext()) {
          var name = $enum1.current;
          if (this.renderContext.get_backgroundImageset().get_name().toLowerCase().indexOf(name.toLowerCase()) > -1) {
            this.renderContext.get_backgroundImageset().set_referenceFrame(name);
            return name;
          }
        }
      }
      if (this.renderContext.get_backgroundImageset().get_dataSetType() === 2) {
        return 'Sky';
      }
      return '';
    },
    get_planetLike: function() {
      if (this.renderContext.get_backgroundImageset() != null) {
        return !this.renderContext.get_backgroundImageset().get_dataSetType() || this.renderContext.get_backgroundImageset().get_dataSetType() === 1;
      }
      else {
        return true;
      }
    },
    get_space: function() {
      if (this.renderContext.get_backgroundImageset() != null) {
        return this.renderContext.get_backgroundImageset().get_dataSetType() === 2;
      }
      else {
        return true;
      }
    },
    _drawSkyOverlays: function() {
      if (Settings.get_active().get_showConstellationPictures()) {
        Constellations.drawArtwork(this.renderContext);
      }
      if (Settings.get_active().get_showConstellationFigures()) {
        if (WWTControl.constellationsFigures == null) {
          WWTControl.constellationsFigures = Constellations.create('Constellations', '//worldwidetelescope.org/data/figures.txt', false, false, false);
        }
        WWTControl.constellationsFigures.draw(this.renderContext, false, 'UMA', false);
      }
      if (Settings.get_active().get_showEclipticGrid()) {
        Grids.drawEclipticGrid(this.renderContext, 1, Colors.get_green());
        if (Settings.get_active().get_showEclipticGridText()) {
          Grids.drawEclipticGridText(this.renderContext, 1, Colors.get_green());
        }
      }
      if (Settings.get_active().get_showGalacticGrid()) {
        Grids.drawGalacticGrid(this.renderContext, 1, Colors.get_cyan());
        if (Settings.get_active().get_showGalacticGridText()) {
          Grids.drawGalacticGridText(this.renderContext, 1, Colors.get_cyan());
        }
      }
      if (Settings.get_active().get_showAltAzGrid()) {
        Grids.drawAltAzGrid(this.renderContext, 1, Colors.get_magenta());
        if (Settings.get_active().get_showAltAzGridText()) {
          Grids.drawAltAzGridText(this.renderContext, 1, Colors.get_magenta());
        }
      }
      if (Settings.get_active().get_showPrecessionChart()) {
        Grids.drawPrecessionChart(this.renderContext, 1, Colors.get_orange());
      }
      if (Settings.get_active().get_showEcliptic()) {
        Grids.drawEcliptic(this.renderContext, 1, Colors.get_blue());
        if (Settings.get_active().get_showEclipticOverviewText()) {
          Grids.drawEclipticText(this.renderContext, 1, Colors.get_blue());
        }
      }
      if (Settings.get_active().get_showGrid()) {
        Grids.drawEquitorialGrid(this.renderContext, 1, Colors.get_white());
        if (Settings.get_active().get_showEquatorialGridText()) {
          Grids.drawEquitorialGridText(this.renderContext, 1, Colors.get_white());
        }
      }
      if (Settings.get_active().get_showConstellationBoundries()) {
        if (WWTControl.constellationsBoundries == null) {
          WWTControl.constellationsBoundries = Constellations.create('Constellations', '//worldwidetelescope.org/data/constellations.txt', true, false, false);
        }
        WWTControl.constellationsBoundries.draw(this.renderContext, Settings.get_active().get_showConstellationSelection(), this.constellation, false);
      }
      if (Settings.get_active().get_showConstellationLabels()) {
        Constellations.drawConstellationNames(this.renderContext, 1, Colors.get_yellow());
      }
    },
    _drawHoverText: function(RenderContext) {
      if (RenderContext.gl == null) {
        var ctx = RenderContext.device;
        ctx.save();
        ctx.fillStyle = 'White';
        ctx.font = '15px Arial';
        ctx.fillText(this._hoverText, this._hoverTextPoint.x, this._hoverTextPoint.y);
        ctx.restore();
      }
    },
    rAtoViewLng: function(ra) {
      return (((180 - (ra / 24 * 360) - 180) + 540) % 360) - 180;
    },
    _updateViewParameters: function() {
      if (this.renderContext.space && this._tracking && this._trackingObject != null) {
        if (Settings.get_active().get_galacticMode() && this.renderContext.space) {
          var gPoint = Coordinates.j2000toGalactic(this._trackingObject.get_RA() * 15, this._trackingObject.get_dec());
          this.renderContext.targetAlt = this.renderContext.alt = gPoint[1];
          this.renderContext.targetAz = this.renderContext.az = gPoint[0];
        }
        else if (this.renderContext.space && Settings.get_active().get_localHorizonMode()) {
          var currentAltAz = Coordinates.equitorialToHorizon(Coordinates.fromRaDec(this._trackingObject.get_RA(), this._trackingObject.get_dec()), SpaceTimeController.get_location(), SpaceTimeController.get_now());
          this.renderContext.targetAlt = currentAltAz.get_alt();
          this.renderContext.targetAz = currentAltAz.get_az();
        }
        else {
          this.renderContext.viewCamera.lng = this.renderContext.targetCamera.lng = this.rAtoViewLng(this._trackingObject.get_RA());
          this.renderContext.viewCamera.lat = this.renderContext.targetCamera.lat = this._trackingObject.get_dec();
        }
      }
      else if (!this.get_solarSystemMode()) {
        this._tracking = false;
        this._trackingObject = null;
      }
      var oneMinusDragCoefficient = 1 - 0.8;
      var dc = 0.8;
      if (!this._tracking) {
        var minDelta = (this.renderContext.viewCamera.zoom / 4000);
        if (this.renderContext.viewCamera.zoom > 360) {
          minDelta = (360 / 40000);
        }
        if (this.renderContext.space && (Settings.get_active().get_localHorizonMode() || Settings.get_active().get_galacticMode())) {
          if ((((Math.abs(this.renderContext.targetAlt - this.renderContext.alt) >= minDelta) | (Math.abs(this.renderContext.targetAz - this.renderContext.az) >= minDelta)) === 1)) {
            this.renderContext.alt += (this.renderContext.targetAlt - this.renderContext.alt) / 10;
            if (Math.abs(this.renderContext.targetAz - this.renderContext.az) > 170) {
              if (this.renderContext.targetAz > this.renderContext.az) {
                this.renderContext.az += (this.renderContext.targetAz - (360 + this.renderContext.az)) / 10;
              }
              else {
                this.renderContext.az += ((360 + this.renderContext.targetAz) - this.renderContext.az) / 10;
              }
            }
            else {
              this.renderContext.az += (this.renderContext.targetAz - this.renderContext.az) / 10;
            }
            this.renderContext.az = ((this.renderContext.az + 720) % 360);
          }
        }
        else {
          if ((((Math.abs(this.renderContext.targetCamera.lat - this.renderContext.viewCamera.lat) >= minDelta) | (Math.abs(this.renderContext.targetCamera.lng - this.renderContext.viewCamera.lng) >= minDelta)) === 1)) {
            this.renderContext.viewCamera.lat += (this.renderContext.targetCamera.lat - this.renderContext.viewCamera.lat) / 10;
            if (Math.abs(this.renderContext.targetCamera.lng - this.renderContext.viewCamera.lng) > 170) {
              if (this.renderContext.targetCamera.lng > this.renderContext.viewCamera.lng) {
                this.renderContext.viewCamera.lng += (this.renderContext.targetCamera.lng - (360 + this.renderContext.viewCamera.lng)) / 10;
              }
              else {
                this.renderContext.viewCamera.lng += ((360 + this.renderContext.targetCamera.lng) - this.renderContext.viewCamera.lng) / 10;
              }
            }
            else {
              this.renderContext.viewCamera.lng += (this.renderContext.targetCamera.lng - this.renderContext.viewCamera.lng) / 10;
            }
            this.renderContext.viewCamera.lng = ((this.renderContext.viewCamera.lng + 720) % 360);
          }
          else {
            if (this.renderContext.viewCamera.lat !== this.renderContext.targetCamera.lat || this.renderContext.viewCamera.lng !== this.renderContext.targetCamera.lng) {
              this.renderContext.viewCamera.lat = this.renderContext.targetCamera.lat;
              this.renderContext.viewCamera.lng = this.renderContext.targetCamera.lng;
            }
          }
        }
      }
      this.renderContext.viewCamera.zoom = dc * this.renderContext.viewCamera.zoom + oneMinusDragCoefficient * this.renderContext.targetCamera.zoom;
      this.renderContext.viewCamera.rotation = dc * this.renderContext.viewCamera.rotation + oneMinusDragCoefficient * this.renderContext.targetCamera.rotation;
      this.renderContext.viewCamera.angle = dc * this.renderContext.viewCamera.angle + oneMinusDragCoefficient * this.renderContext.targetCamera.angle;
    },
    move: function(x, y) {
      var scaleY = this.renderContext.get_fovScale() / (3600);
      if (this.renderContext.get_backgroundImageset().get_dataSetType() === 4) {
        scaleY = 0.06;
      }
      var scaleX = scaleY / Math.max(0.2, Math.cos(this.renderContext.viewCamera.lat / 180 * Math.PI));
      if (!this.renderContext.get_backgroundImageset().get_dataSetType() || this.renderContext.get_backgroundImageset().get_dataSetType() === 1 || this.renderContext.get_backgroundImageset().get_dataSetType() === 4) {
        scaleX = scaleX * 6.3;
        scaleY = scaleY * 6.3;
      }
      if (this.renderContext.space && (Settings.get_active().get_galacticMode() || Settings.get_active().get_localHorizonMode())) {
        x = (Settings.get_active().get_localHorizonMode()) ? -x : x;
        this.renderContext.targetAz += x * scaleX;
        this.renderContext.targetAz = ((this.renderContext.targetAz + 720) % 360);
        this.renderContext.targetAlt += y * scaleY;
        if (this.renderContext.targetAlt > 90) {
          this.renderContext.targetAlt = 90;
        }
        if (this.renderContext.targetAlt < -90) {
          this.renderContext.targetAlt = -90;
        }
      }
      else {
        this.renderContext.targetCamera.lng -= x * scaleX;
        this.renderContext.targetCamera.lng = ((this.renderContext.targetCamera.lng + 720) % 360);
        this.renderContext.targetCamera.lat += y * scaleY;
        if (this.renderContext.targetCamera.lat > 90) {
          this.renderContext.targetCamera.lat = 90;
        }
        if (this.renderContext.targetCamera.lat < -90) {
          this.renderContext.targetCamera.lat = -90;
        }
      }
      if (!Settings.get_globalSettings().get_smoothPan()) {
        this.renderContext.viewCamera = this.renderContext.targetCamera.copy();
      }
      if (!!x && !!y) {
        this._tracking = false;
        this._trackingObject = null;
      }
    },
    zoom: function(factor) {
      this.renderContext.targetCamera.zoom *= factor;
      if (this.renderContext.targetCamera.zoom > this.get__zoomMax()) {
        this.renderContext.targetCamera.zoom = this.get__zoomMax();
      }
      if (!Settings.get_globalSettings().get_smoothPan()) {
        this.renderContext.viewCamera = this.renderContext.targetCamera.copy();
      }
    },
    setup: function(canvas) {
      window.addEventListener('contextmenu', ss.bind('onContextMenu', this), false);
      canvas.addEventListener('dblclick', ss.bind('onDoubleClick', this), false);
      canvas.addEventListener('mousedown', ss.bind('onMouseDown', this), false);
      canvas.addEventListener('mousewheel', ss.bind('onMouseWheel', this), false);
      canvas.addEventListener('DOMMouseScroll', ss.bind('onMouseWheel', this), false);
      canvas.addEventListener('touchstart', ss.bind('onTouchStart', this), false);
      canvas.addEventListener('touchmove', ss.bind('onTouchMove', this), false);
      canvas.addEventListener('touchend', ss.bind('onTouchEnd', this), false);
      canvas.addEventListener('gesturechange', ss.bind('onGestureChange', this), false);
      canvas.addEventListener('gesturestart', ss.bind('onGestureStart', this), false);
      canvas.addEventListener('gestureend', ss.bind('onGestureEnd', this), false);
      document.body.addEventListener('keydown', ss.bind('onKeyDown', this), false);
      canvas.addEventListener('pointerdown', ss.bind('onPointerDown', this), false);
      canvas.addEventListener('pointermove', ss.bind('onPointerMove', this), false);
      canvas.addEventListener('pointerup', ss.bind('onPointerUp', this), false);
      this.renderContext.viewCamera.lat = WWTControl.startLat;
      this.renderContext.viewCamera.lng = WWTControl.startLng;
      this.renderContext.viewCamera.zoom = WWTControl.startZoom;
      this.renderContext.targetCamera = this.renderContext.viewCamera.copy();
      if (this.renderContext.gl == null) {
        this._foregroundCanvas = document.createElement('canvas');
        this._foregroundCanvas.width = canvas.width;
        this._foregroundCanvas.height = canvas.height;
        this._fgDevice = this._foregroundCanvas.getContext('2d');
      }
      this._webFolder = new Folder();
      this._webFolder.loadFromUrl('//worldwidetelescope.org/wwtweb/catalog.aspx?X=ImageSets5', ss.bind('setupComplete', this));
      var webFile = new WebFile('//worldwidetelescope.org/wwtweb/weblogin.aspx?user=12345678-03D2-4935-8D0F-DCE54C9113E5&Version=HTML5&webkey=AX2011Gqqu&platform=web');
      webFile.send();
    },
    setupComplete: function() {
      Wtml.loadImagesets(this._webFolder);
      WWTControl.scriptInterface._fireReady();
    },
    createExplorerUI: function() {
      var $this = this;

      if (this.explorer == null) {
        this.explorer = FolderBrowser.create();
        var div = document.getElementById('UI');
        div.insertBefore(this.explorer.canvas);
        WWTControl.exploreRoot = new Folder();
        WWTControl.exploreRoot.loadFromUrl('//worldwidetelescope.org/wwtweb/catalog.aspx?W=NewExploreRoot', function() {
          $this.explorer._addItems(WWTControl.exploreRoot.get_children());
          $this.explorer.refresh();
        });
      }
    },
    onKeyDown: function(e) {
      if (this.uiController != null) {
        this.uiController.keyDown(this, e);
      }
    },
    onDoubleClick: function(e) {
      WWTControl.showDataLayers = true;
    },
    onGestureStart: function(e) {
      this._mouseDown = false;
      this._beginZoom = this.renderContext.viewCamera.zoom;
    },
    onGestureChange: function(e) {
      var g = e;
      this._mouseDown = false;
      this.renderContext.targetCamera.zoom = this.renderContext.viewCamera.zoom = Math.min(360, this._beginZoom * (1 / g.scale));
    },
    onGestureEnd: function(e) {
      var g = e;
      this._mouseDown = false;
    },
    _annotationclicked: function(ra, dec, x, y) {
      if (this._annotations != null && this._annotations.length > 0) {
        var index = 0;
        var $enum1 = ss.enumerate(this._annotations);
        while ($enum1.moveNext()) {
          var note = $enum1.current;
          if (note.hitTest(this.renderContext, ra, dec, x, y)) {
            WWTControl.scriptInterface._fireAnnotationclicked(ra, dec, note.get_id());
            return true;
          }
          index++;
        }
      }
      return false;
    },
    _annotationHover: function(ra, dec, x, y) {
      if (this._annotations != null && this._annotations.length > 0) {
        var index = 0;
        var $enum1 = ss.enumerate(this._annotations);
        while ($enum1.moveNext()) {
          var note = $enum1.current;
          if (note.hitTest(this.renderContext, ra, dec, x, y)) {
            this._hoverText = note.get_label();
            this._hoverTextPoint = Vector2d.create(x, y);
            return true;
          }
          index++;
        }
      }
      return false;
    },
    onTouchStart: function(e) {
      var ev = e;
      ev.preventDefault();
      ev.stopPropagation();
      this._lastX = ev.targetTouches[0].pageX;
      this._lastY = ev.targetTouches[0].pageY;
      if (ev.targetTouches.length === 2) {
        this._isPintching = true;
        return;
      }
      else if (this.uiController != null) {
        var ee = new WWTElementEvent(this._lastX, this._lastY);
        if (this.uiController.mouseDown(this, ee)) {
          this._mouseDown = false;
          this._dragging = false;
          return;
        }
      }
      this._mouseDown = true;
    },
    onPointerDown: function(e) {
      var pe = e;
      var index = 0;
      var evt = arguments[0], cnv = arguments[0].target; if (cnv.setPointerCapture) {cnv.setPointerCapture(evt.pointerId);} else if (cnv.msSetPointerCapture) { cnv.msSetPointerCapture(evt.pointerId); };
      if (!this._pointerIds[0]) {
        this._pointerIds[0] = pe.pointerId;
        index = 0;
      }
      else {
        if (!this._pointerIds[1]) {
          this._pointerIds[1] = pe.pointerId;
          index = 1;
        }
        else {
          return;
        }
      }
      this._rect[index] = Vector2d.create(e.offsetX, e.offsetY);
    },
    onPointerMove: function(e) {
      var pe = e;
      var index = 0;
      if (this._pointerIds[0] === pe.pointerId) {
        index = 0;
      }
      else {
        if (this._pointerIds[1] === pe.pointerId) {
          index = 1;
        }
        else {
          return;
        }
      }
      if (!!this._pointerIds[0] && !!this._pointerIds[1]) {
        if (this._rect[0] != null) {
          var oldDist = this.getDistance(this._rect[0], this._rect[1]);
          this._rect[index] = Vector2d.create(e.offsetX, e.offsetY);
          var newDist = this.getDistance(this._rect[0], this._rect[1]);
          var ratio = oldDist / newDist;
          this.zoom(ratio);
        }
        e.stopPropagation();
        e.preventDefault();
      }
      this._rect[index] = Vector2d.create(e.offsetX, e.offsetY);
    },
    onPointerUp: function(e) {
      var pe = e;
      if (this._pointerIds[0] === pe.pointerId) {
        this._pointerIds[0] = 0;
      }
      else {
        if (this._pointerIds[1] === pe.pointerId) {
          this._pointerIds[1] = 0;
        }
        else {
          return;
        }
      }
    },
    onTouchMove: function(e) {
      var ev = e;
      if (this._isPintching) {
        this.pinchMove(ev);
        return;
      }
      ev.preventDefault();
      ev.stopPropagation();
      if (this._mouseDown) {
        this._dragging = true;
        var curX = ev.targetTouches[0].pageX - this._lastX;
        var curY = ev.targetTouches[0].pageY - this._lastY;
        this.move(curX, curY);
        this._lastX = ev.targetTouches[0].pageX;
        this._lastY = ev.targetTouches[0].pageY;
      }
      else {
        if (this.uiController != null) {
          if (this.uiController.mouseMove(this, e)) {
            e.preventDefault();
            e.stopPropagation();
            return;
          }
        }
      }
    },
    onTouchEnd: function(e) {
      var ev = e;
      ev.preventDefault();
      ev.stopPropagation();
      this._rect = new Array(2);
      if (this._isPintching) {
        if (ev.touches.length < 2) {
          this._isPintching = false;
        }
        return;
      }
      if (this.uiController != null) {
        var ee = new WWTElementEvent(this._lastX, this._lastY);
        if (this.uiController.mouseUp(this, ee)) {
          this._mouseDown = false;
          this._dragging = false;
          return;
        }
      }
      this._mouseDown = false;
      this._dragging = false;
    },
    pinchStart: function(ev) {
      var t0 = ev.touches[0];
      var t1 = ev.touches[1];
      this._rect[0] = Vector2d.create(t0.pageX, t0.pageY);
      this._rect[1] = Vector2d.create(t1.pageX, t1.pageY);
      ev.stopPropagation();
      ev.preventDefault();
    },
    pinchMove: function(ev) {
      var t0 = ev.touches[0];
      var t1 = ev.touches[1];
      var newRect = new Array(2);
      newRect[0] = Vector2d.create(t0.pageX, t0.pageY);
      newRect[1] = Vector2d.create(t1.pageX, t1.pageY);
      if (this._rect[0] != null) {
        var oldDist = this.getDistance(this._rect[0], this._rect[1]);
        var newDist = this.getDistance(newRect[0], newRect[1]);
        var ratio = oldDist / newDist;
        this.zoom(ratio);
      }
      this._rect = newRect;
      ev.stopPropagation();
      ev.preventDefault();
    },
    getDistance: function(a, b) {
      var x;
      var y;
      x = a.x - b.x;
      y = a.y - b.y;
      return Math.sqrt(x * x + y * y);
    },
    onMouseDown: function(e) {
      document.addEventListener('mousemove', ss.bind('onMouseMove', this), false);
      document.addEventListener('mouseup', ss.bind('onMouseUp', this), false);
      if (this.uiController != null) {
        if (this.uiController.mouseDown(this, e)) {
          return;
        }
      }
      this._mouseDown = true;
      this._lastX = Mouse.offsetX(this.canvas, e);
      this._lastY = Mouse.offsetY(this.canvas, e);
    },
    onContextMenu: function(e) {
      e.preventDefault();
      e.stopPropagation();
    },
    onMouseMove: function(e) {
      this._lastMouseMove = ss.now();
      this._hoverTextPoint = Vector2d.create(Mouse.offsetX(this.canvas, e), Mouse.offsetY(this.canvas, e));
      this._hoverText = '';
      if (this._mouseDown) {
        e.preventDefault();
        e.stopPropagation();
        this._moved = true;
        if (e.ctrlKey) {
          this._tilt(Mouse.offsetX(this.canvas, e) - this._lastX, Mouse.offsetY(this.canvas, e) - this._lastY);
        }
        else {
          this.move(Mouse.offsetX(this.canvas, e) - this._lastX, Mouse.offsetY(this.canvas, e) - this._lastY);
        }
        this._lastX = Mouse.offsetX(this.canvas, e);
        this._lastY = Mouse.offsetY(this.canvas, e);
      }
      else {
        if (this.uiController != null) {
          if (this.uiController.mouseMove(this, e)) {
            e.preventDefault();
            e.stopPropagation();
            return;
          }
        }
      }
    },
    _tilt: function(x, y) {
      this.renderContext.targetCamera.rotation += x * 0.001;
      this.renderContext.targetCamera.angle += y * 0.001;
      if (this.renderContext.targetCamera.angle < -1.52) {
        this.renderContext.targetCamera.angle = -1.52;
      }
      if (this.renderContext.targetCamera.angle > 0) {
        this.renderContext.targetCamera.angle = 0;
      }
    },
    onMouseUp: function(e) {
      document.removeEventListener('mousemove', ss.bind('onMouseMove', this), false);
      document.removeEventListener('mouseup', ss.bind('onMouseUp', this), false);
      if (this.uiController != null) {
        if (this.uiController.mouseUp(this, e)) {
          this._mouseDown = false;
          e.preventDefault();
          return;
        }
      }
      if (this._mouseDown && !this._moved) {
        var raDecDown = this.getCoordinatesForScreenPoint(Mouse.offsetX(this.canvas, e), Mouse.offsetY(this.canvas, e));
        if (!this._annotationclicked(raDecDown.x, raDecDown.y, Mouse.offsetX(this.canvas, e), Mouse.offsetY(this.canvas, e))) {
          WWTControl.scriptInterface._fireClick(raDecDown.x, raDecDown.y);
        }
      }
      this._mouseDown = false;
      this._moved = false;
    },
    getCoordinatesForScreenPoint: function(x, y) {
      var result;
      var PickRayOrig;
      var PickRayDir;
      var pt = Vector2d.create(x, y);
      PickRayDir = this.transformPickPointToWorldSpace(pt, this.renderContext.width, this.renderContext.height);
      result = Coordinates.cartesianToSphericalSky(PickRayDir);
      return result;
    },
    transformPickPointToWorldSpace: function(ptCursor, backBufferWidth, backBufferHeight) {
      var vPickRayOrig;
      var vPickRayDir;
      var v = new Vector3d();
      v.x = (((2 * ptCursor.x) / backBufferWidth) - 1) / this.renderContext.get_projection().get_m11();
      v.y = (((2 * ptCursor.y) / backBufferHeight) - 1) / this.renderContext.get_projection().get_m22();
      v.z = 1;
      var m = Matrix3d.multiplyMatrix(this.renderContext.get_view(), this.renderContext.get_world());
      m.invert();
      vPickRayDir = new Vector3d();
      vPickRayOrig = new Vector3d();
      vPickRayDir.x = v.x * m.get_m11() + v.y * m.get_m21() + v.z * m.get_m31();
      vPickRayDir.y = v.x * m.get_m12() + v.y * m.get_m22() + v.z * m.get_m32();
      vPickRayDir.z = v.x * m.get_m13() + v.y * m.get_m23() + v.z * m.get_m33();
      vPickRayDir.normalize();
      return vPickRayDir;
    },
    onMouseWheel: function(e) {
      var ev = e;
      var delta;
      if (!!ev.detail) {
        delta = ev.detail * -1;
      }
      else {
        delta = ev.wheelDelta / 40;
      }
      if (delta > 0) {
        this.zoom(0.9);
      }
      else {
        this.zoom(1.1);
      }
    },
    gotoRADecZoom: function(ra, dec, zoom, instant) {
      ra = DoubleUtilities.clamp(ra, 0, 24);
      dec = DoubleUtilities.clamp(dec, -90, 90);
      zoom = DoubleUtilities.clamp(zoom, this.get_zoomMin(), this.get__zoomMax());
      this._tracking = false;
      this._trackingObject = null;
      this.gotoTargetFull(false, instant, CameraParameters.create(dec, WWTControl.singleton.renderContext.rAtoViewLng(ra), zoom, WWTControl.singleton.renderContext.viewCamera.rotation, WWTControl.singleton.renderContext.viewCamera.angle, WWTControl.singleton.renderContext.viewCamera.opacity), WWTControl.singleton.renderContext.get_foregroundImageset(), WWTControl.singleton.renderContext.get_backgroundImageset());
    },
    get_solarSystemMode: function() {
      if (this.renderContext.get_backgroundImageset() == null) {
        return false;
      }
      return this.renderContext.get_backgroundImageset().get_dataSetType() === 4;
    },
    gotoTarget: function(place, noZoom, instant, trackObject) {
      if (place == null) {
        return;
      }
      if ((trackObject && this.get_solarSystemMode())) {
        if ((place.get_classification() === 536870912 && place.get_type() !== 4) || (place.get_classification() === 1) || (place.get_classification() === 1048576) && place.get_distance() > 0) {
          var target = 65536;
          if (place.get_classification() === 1 || place.get_classification() === 1048576) {
            target = 20;
          }
          else {
            try {
              if (place.get_target() !== 65536) {
                target = place.get_target();
              }
              else {
                target = Planets.getPlanetIDFromName(place.get_name());
              }
            }
            catch ($e1) {
            }
          }
          if (target !== 65536) {
            this._trackingObject = place;
            if (target === this._solarSystemTrack && !(place.get_classification() === 1 || place.get_classification() === 1048576)) {
              this.gotoTarget3(place.get_camParams(), noZoom, instant);
              return;
            }
            var jumpTime = 4;
            if (target === 20) {
              jumpTime = 17;
            }
            else {
              jumpTime += 13 * (101 - Settings.get_active().get_solarSystemScale()) / 100;
            }
            if (instant) {
              jumpTime = 1;
            }
            var camTo = this.renderContext.viewCamera.copy();
            camTo.targetReferenceFrame = '';
            camTo.target = target;
            var zoom = 10;
            if (target === 20) {
              if (place.get_classification() === 1048576) {
                zoom = 1404946007758;
              }
              else {
                zoom = 63239.6717 * 100;
              }
              var vect = Coordinates.raDecTo3dAu(place.get_RA(), place.get_dec(), place.get_distance());
              var ecliptic = Coordinates.meanObliquityOfEcliptic(SpaceTimeController.get_jNow()) / 180 * Math.PI;
              vect.rotateX(ecliptic);
              camTo.viewTarget = Vector3d.negate(camTo.viewTarget);
            }
            else {
              camTo.viewTarget = Planets.getPlanet3dLocationJD(target, SpaceTimeController.getJNowForFutureTime(jumpTime));
              switch (target) {
                case 0:
                  zoom = 0.6;
                  break;
                case 1:
                  zoom = 0.0004;
                  break;
                case 2:
                  zoom = 0.0004;
                  break;
                case 3:
                  zoom = 0.0004;
                  break;
                case 4:
                  zoom = 0.007;
                  break;
                case 5:
                  zoom = 0.007;
                  break;
                case 6:
                  zoom = 0.004;
                  break;
                case 7:
                  zoom = 0.004;
                  break;
                case 8:
                  zoom = 0.0004;
                  break;
                case 9:
                  zoom = 0.0004;
                  break;
                case 10:
                  zoom = 0.0004;
                  break;
                case 11:
                  zoom = 0.0004;
                  break;
                case 12:
                  zoom = 0.0004;
                  break;
                case 13:
                  zoom = 0.0004;
                  break;
                case 19:
                  zoom = 0.0004;
                  break;
                case 20:
                  zoom = 10;
                  break;
                default:
                  break;
              }
              zoom = zoom * Settings.get_active().get_solarSystemScale();
            }
            var fromParams = this.renderContext.viewCamera.copy();
            if (this._solarSystemTrack === 20 && !ss.emptyString(this.renderContext.get_trackingFrame())) {
              fromParams = this.renderContext.customTrackingParams;
              this.renderContext.set_trackingFrame('');
            }
            camTo.zoom = zoom;
            var toVector = camTo.viewTarget;
            toVector.subtract(fromParams.viewTarget);
            if (place.get_classification() === 1) {
              toVector = Vector3d.negate(toVector);
            }
            if (!!toVector.length()) {
              var raDec = toVector.toRaDec();
              if (target === 20) {
                camTo.lat = -raDec.y;
              }
              else {
                camTo.lat = raDec.y;
              }
              camTo.lng = raDec.x * 15 - 90;
            }
            else {
              camTo.lat = this.renderContext.viewCamera.lat;
              camTo.lng = this.renderContext.viewCamera.lng;
            }
            if (target !== 20) {
              camTo.viewTarget = Planets.getPlanetTargetPoint(target, camTo.lat, camTo.lng, SpaceTimeController.getJNowForFutureTime(jumpTime));
            }
            var solarMover = new ViewMoverKenBurnsStyle(fromParams, camTo, jumpTime, SpaceTimeController.get_now(), SpaceTimeController.getTimeForFutureTime(jumpTime), 3);
            solarMover.fastDirectionMove = true;
            this.set__mover(solarMover);
            return;
          }
        }
      }
      this._tracking = false;
      this._trackingObject = null;
      var camParams = place.get_camParams().copy();
      if (this.renderContext.get_backgroundImageset() != null && place.get_type() !== this.renderContext.get_backgroundImageset().get_dataSetType()) {
        this.renderContext.targetCamera = place.get_camParams().copy();
        this.renderContext.viewCamera = this.renderContext.targetCamera.copy();
        this.renderContext.set_backgroundImageset(this.getDefaultImageset(place.get_type(), 3));
        instant = true;
      }
      else if (this.get_solarSystemMode() && place.get_target() !== this._solarSystemTrack) {
        this.renderContext.targetCamera = place.get_camParams().copy();
        this.renderContext.viewCamera = this.renderContext.targetCamera.copy();
        this._solarSystemTrack = place.get_target();
        instant = true;
      }
      if (place.get_classification() === 128) {
        camParams.zoom = this.get__zoomMax();
        this.gotoTargetFull(false, instant, camParams, null, null);
      }
      else {
        this._solarSystemTrack = place.get_target();
        this.gotoTargetFull(noZoom, instant, camParams, place.get_studyImageset(), place.get_backgroundImageset());
        if (trackObject) {
          this._tracking = true;
          this._trackingObject = place;
        }
      }
    },
    gotoTarget3: function(camParams, noZoom, instant) {
      this._tracking = false;
      this._trackingObject = null;
      this.gotoTargetFull(noZoom, instant, camParams, this.renderContext.get_foregroundImageset(), this.renderContext.get_backgroundImageset());
    },
    gotoTargetFull: function(noZoom, instant, cameraParams, studyImageSet, backgroundImageSet) {
      WWTControl.set_renderNeeded(true);
      this._tracking = false;
      this._trackingObject = null;
      this._targetStudyImageset = studyImageSet;
      this._targetBackgroundImageset = backgroundImageSet;
      if (noZoom) {
        cameraParams.zoom = this.renderContext.viewCamera.zoom;
        cameraParams.angle = this.renderContext.viewCamera.angle;
        cameraParams.rotation = this.renderContext.viewCamera.rotation;
      }
      else {
        if (cameraParams.zoom === -1 || !cameraParams.zoom) {
          if (this.renderContext.space) {
            cameraParams.zoom = 1.40625;
          }
          else {
            cameraParams.zoom = 0.09;
          }
        }
      }
      if (instant || (Math.abs(this.renderContext.viewCamera.lat - cameraParams.lat) < 1E-12 && Math.abs(this.renderContext.viewCamera.lng - cameraParams.lng) < 1E-12 && Math.abs(this.renderContext.viewCamera.zoom - cameraParams.zoom) < 1E-12)) {
        this.set__mover(null);
        this.renderContext.targetCamera = cameraParams.copy();
        this.renderContext.viewCamera = this.renderContext.targetCamera.copy();
        this._mover_Midpoint();
        this._moving = true;
      }
      else {
        this.set__mover(ViewMoverSlew.create(this.renderContext.viewCamera, cameraParams));
        WWTControl.set_renderNeeded(true);
        this.get__mover().set_midpoint(ss.bind('_mover_Midpoint', this));
      }
    },
    _freezeView: function() {
      this.renderContext.viewCamera = this.renderContext.targetCamera.copy();
      this.set__mover(null);
    },
    get__mover: function() {
      return this.renderContext.viewMover;
    },
    set__mover: function(value) {
      this.renderContext.viewMover = value;
      WWTControl.set_renderNeeded(true);
      return value;
    },
    fadeInImageSet: function(newImageSet) {
      if (this.renderContext.get_backgroundImageset() != null && newImageSet.get_dataSetType() !== this.renderContext.get_backgroundImageset().get_dataSetType()) {
        TileCache.purgeQueue();
        TileCache.clearCache();
      }
      this.renderContext.set_backgroundImageset(newImageSet);
    },
    _mover_Midpoint: function() {
      if ((this._targetStudyImageset != null && this.renderContext.get_foregroundImageset() == null) || (this.renderContext.get_foregroundImageset() != null && !this.renderContext.get_foregroundImageset().equals(this._targetStudyImageset))) {
        this.renderContext.set_foregroundImageset(this._targetStudyImageset);
      }
      if (this.renderContext.get_backgroundImageset() != null && (this._targetBackgroundImageset != null && !this.renderContext.get_backgroundImageset().equals(this._targetBackgroundImageset))) {
        if (this._targetBackgroundImageset != null && this._targetBackgroundImageset.get_generic()) {
          this.fadeInImageSet(this._getRealImagesetFromGeneric(this._targetBackgroundImageset));
        }
        else {
          this.fadeInImageSet(this._targetBackgroundImageset);
        }
      }
    },
    getDefaultImageset: function(imageSetType, bandPass) {
      var $enum1 = ss.enumerate(WWTControl.imageSets);
      while ($enum1.moveNext()) {
        var imageset = $enum1.current;
        if (imageset.get_defaultSet() && imageset.get_bandPass() === bandPass && imageset.get_dataSetType() === imageSetType) {
          return imageset;
        }
      }
      var $enum2 = ss.enumerate(WWTControl.imageSets);
      while ($enum2.moveNext()) {
        var imageset = $enum2.current;
        if (imageset.get_bandPass() === bandPass && imageset.get_dataSetType() === imageSetType) {
          return imageset;
        }
      }
      var $enum3 = ss.enumerate(WWTControl.imageSets);
      while ($enum3.moveNext()) {
        var imageset = $enum3.current;
        if (imageset.get_dataSetType() === imageSetType) {
          return imageset;
        }
      }
      return WWTControl.imageSets[0];
    },
    _getRealImagesetFromGeneric: function(generic) {
      var $enum1 = ss.enumerate(WWTControl.imageSets);
      while ($enum1.moveNext()) {
        var imageset = $enum1.current;
        if (imageset.get_defaultSet() && imageset.get_bandPass() === generic.get_bandPass() && imageset.get_dataSetType() === generic.get_dataSetType()) {
          return imageset;
        }
      }
      var $enum2 = ss.enumerate(WWTControl.imageSets);
      while ($enum2.moveNext()) {
        var imageset = $enum2.current;
        if (imageset.get_bandPass() === generic.get_bandPass() && imageset.get_dataSetType() === generic.get_dataSetType()) {
          return imageset;
        }
      }
      return WWTControl.imageSets[0];
    },
    _hideUI: function(p) {
    },
    _closeTour: function() {
    },
    createTour: function(name) {
      if (ss.canCast(this.uiController, TourPlayer)) {
        var player = this.uiController;
        player.stop(false);
      }
      this.tour = new TourDocument();
      this.tour.set_title(name);
      this.setupTour();
      this.tour.set_editMode(true);
      return this.tour;
    },
    setupTour: function() {
      this.tourEdit = new TourEditTab();
      this.tourEdit.set_tour(this.tour);
      this.tour.set_currentTourstopIndex(0);
      this.tour.set_editMode(false);
      this.uiController = this.tourEdit.tourEditorUI;
    },
    playTour: function(url) {
      var $this = this;

      if (ss.canCast(this.uiController, TourPlayer)) {
        var player = this.uiController;
        player.stop(false);
      }
      this.tour = TourDocument.fromUrl(url, function() {
        $this.setupTour();
        $this.tourEdit.playNow(true);
        WWTControl.scriptInterface._fireTourReady();
      });
    },
    playCurrentTour: function() {
      if (ss.canCast(this.uiController, TourPlayer)) {
        var player = this.uiController;
        player.play();
      }
    },
    pauseCurrentTour: function() {
      if (ss.canCast(this.uiController, TourPlayer)) {
        var player = this.uiController;
        player.pauseTour();
      }
    },
    stopCurrentTour: function() {
      if (ss.canCast(this.uiController, TourPlayer)) {
        var player = this.uiController;
        player.stop(false);
      }
    },
    getImagesetByName: function(name) {
      var $enum1 = ss.enumerate(WWTControl.imageSets);
      while ($enum1.moveNext()) {
        var imageset = $enum1.current;
        if (imageset.get_name().toLowerCase().indexOf(name.toLowerCase()) > -1) {
          return imageset;
        }
      }
      return null;
    },
    setBackgroundImageByName: function(name) {
      var newBackground = this.getImagesetByName(name);
      if (newBackground != null) {
        this.renderContext.set_backgroundImageset(newBackground);
      }
    },
    setForegroundImageByName: function(name) {
      var newForeground = this.getImagesetByName(name);
      if (newForeground != null) {
        this.renderContext.set_foregroundImageset(newForeground);
      }
    },
    _drawCrosshairs: function(context) {
      if (context.gl == null) {
        var ctx = context.device;
        ctx.save();
        ctx.beginPath();
        ctx.strokeStyle = Settings.get_current().get_crosshairsColor();
        ctx.lineWidth = 2;
        var x = context.width / 2, y = context.height / 2;
        var halfLength = 5;
        ctx.moveTo(x, y + halfLength);
        ctx.lineTo(x, y - halfLength);
        ctx.moveTo(x + halfLength, y);
        ctx.lineTo(x - halfLength, y);
        ctx.stroke();
        ctx.restore();
      }
      else {
        if (this._crossHarirs == null) {
          this._crossHarirs = new SimpleLineList();
          this._crossHarirs.set_depthBuffered(false);
          this._crossHarirs.pure2D = true;
          this._crossHarirs.addLine(Vector3d.create(-0.02, 0, 0), Vector3d.create(0.02, 0, 0));
          this._crossHarirs.addLine(Vector3d.create(0, -0.03, 0), Vector3d.create(0, 0.03, 0));
        }
        this._crossHarirs.drawLines(context, 1, Colors.get_white());
      }
    },
    captureThumbnail: function(blobReady) {
      this.render();
      var image = document.createElement('img');
      image.addEventListener('load', function(e) {
        var imageAspect = (image.width) / image.height;
        var clientAspect = 96 / 45;
        var cw = 96;
        var ch = 45;
        if (imageAspect < clientAspect) {
          ch = ss.truncate((cw / imageAspect));
        }
        else {
          cw = ss.truncate((ch * imageAspect));
        }
        var cx = (96 - cw) / 2;
        var cy = (45 - ch) / 2;
        var temp = document.createElement('canvas');
        temp.height = 45;
        temp.width = 96;
        var ctx = temp.getContext('2d');
        ctx.drawImage(image, cx, cy, cw, ch);
        if ( typeof temp.msToBlob == 'function') { var blob = temp.msToBlob(); blobReady(blob); } else { temp.toBlob(blobReady, 'image/jpeg'); };
      }, false);
      image.src = WWTControl.singleton.canvas.toDataURL();
    }
  };


  // wwtlib.WWTElementEvent

  function WWTElementEvent(x, y) {
    this.offsetX = 0;
    this.offsetY = 0;
    this.offsetX = x;
    this.offsetY = y;
  }
  var WWTElementEvent$ = {

  };


  // wwtlib.Annotation

  function Annotation() {
    this.addedToPrimitives = false;
    this.annotationDirty = true;
    this._opacity = 1;
    this._showHoverLabel = false;
  }
  Annotation.prepBatch = function(renderContext) {
    if (Annotation.pointList == null || Annotation.batchDirty) {
      Annotation.pointList = new PointList(renderContext);
      Annotation.lineList = new LineList();
      Annotation.triangleList = new TriangleList();
      Annotation.lineList.set_depthBuffered(false);
      Annotation.triangleList.depthBuffered = false;
    }
  };
  Annotation.drawBatch = function(renderContext) {
    Annotation.batchDirty = false;
    if (renderContext.gl == null) {
      return;
    }
    if (Annotation.pointList != null) {
      Annotation.pointList.draw(renderContext, 1, false);
    }
    if (Annotation.lineList != null) {
      Annotation.lineList.drawLines(renderContext, 1);
    }
    if (Annotation.triangleList != null) {
      Annotation.triangleList.draw(renderContext, 1, 0);
    }
  };
  Annotation.separation = function(Alpha1, Delta1, Alpha2, Delta2) {
    Delta1 = Delta1 / 180 * Math.PI;
    Delta2 = Delta2 / 180 * Math.PI;
    Alpha1 = Alpha1 / 12 * Math.PI;
    Alpha2 = Alpha2 / 12 * Math.PI;
    var x = Math.cos(Delta1) * Math.sin(Delta2) - Math.sin(Delta1) * Math.cos(Delta2) * Math.cos(Alpha2 - Alpha1);
    var y = Math.cos(Delta2) * Math.sin(Alpha2 - Alpha1);
    var z = Math.sin(Delta1) * Math.sin(Delta2) + Math.cos(Delta1) * Math.cos(Delta2) * Math.cos(Alpha2 - Alpha1);
    var vvalue = Math.atan2(Math.sqrt(x * x + y * y), z);
    vvalue = vvalue / Math.PI * 180;
    if (vvalue < 0) {
      vvalue += 180;
    }
    return vvalue;
  };
  Annotation.colorToUint = function(col) {
    return (col.a) << 24 | (col.r << 16) | (col.g) << 8 | col.b;
  };
  Annotation.colorToUintAlpha = function(col, opacity) {
    return opacity << 24 | col.r << 16 | col.g << 8 | col.b;
  };
  var Annotation$ = {
    draw: function(renderContext) {
    },
    get_opacity: function() {
      return this._opacity;
    },
    set_opacity: function(value) {
      this._opacity = value;
      return value;
    },
    get_id: function() {
      return this._id;
    },
    set_id: function(value) {
      this._id = value;
      return value;
    },
    get_tag: function() {
      return this._tag;
    },
    set_tag: function(value) {
      this._tag = value;
      return value;
    },
    get_label: function() {
      return this._label;
    },
    set_label: function(value) {
      this._label = value;
      return value;
    },
    get_showHoverLabel: function() {
      return this._showHoverLabel;
    },
    set_showHoverLabel: function(value) {
      this._showHoverLabel = value;
      return value;
    },
    hitTest: function(renderContext, RA, dec, x, y) {
      return false;
    },
    get_center: function() {
      return this.center;
    },
    set_center: function(value) {
      this.center = value;
      return value;
    }
  };


  // wwtlib.BlendState

  function BlendState() {
    this._state = false;
    this._targetState = false;
    this._delayTime = 0;
    this._switchedTime = new Date(1990, 0, 0, 0, 0, 0, 0);
    this._state = false;
    this._targetState = this._state;
    this._delayTime = 1000;
  }
  BlendState.create = function(initialState, delayTime) {
    var temp = new BlendState();
    temp._state = initialState;
    temp._targetState = initialState;
    temp._delayTime = delayTime;
    return temp;
  };
  var BlendState$ = {
    get_state: function() {
      if (this._targetState !== this._state) {
        var ts = ss.now() - this._switchedTime;
        if (ts > this._delayTime) {
          this._state = this._targetState;
        }
        return true;
      }
      return this._state;
    },
    set_state: function(value) {
      this._switchedTime = new Date(1990, 0, 0, 0, 0, 0, 0);
      this._state = value;
      this._targetState = this._state;
      return value;
    },
    get_targetState: function() {
      return this._targetState;
    },
    set_targetState: function(value) {
      if (this._targetState !== value) {
        this._switchedTime = ss.now();
        this._targetState = value;
      }
      return value;
    },
    get_opacity: function() {
      if (this._targetState !== this._state) {
        var ts = ss.now() - this._switchedTime;
        if (ts > this._delayTime) {
          this._state = this._targetState;
        }
        else {
          var opacity = (ts / this._delayTime);
          return (this._targetState) ? opacity : 1 - opacity;
        }
      }
      return (this._state) ? 1 : 0;
    },
    get_delayTime: function() {
      return this._delayTime;
    },
    set_delayTime: function(value) {
      this._delayTime = value;
      return value;
    }
  };


  // wwtlib.CameraParameters

  function CameraParameters() {
    this.lat = 0;
    this.lng = 0;
    this.zoom = 0;
    this.rotation = 0;
    this.angle = 0;
    this.raDec = false;
    this.opacity = 0;
    this.target = 0;
    this.zoom = 360;
    this.viewTarget = new Vector3d();
  }
  CameraParameters.create = function(lat, lng, zoom, rotation, angle, opactity) {
    var temp = new CameraParameters();
    temp.lat = lat;
    temp.lng = lng;
    temp.zoom = zoom;
    temp.rotation = rotation;
    temp.angle = angle;
    temp.raDec = false;
    temp.opacity = opactity;
    temp.viewTarget = Vector3d.create(0, 0, 0);
    temp.target = 20;
    temp.targetReferenceFrame = '';
    return temp;
  };
  CameraParameters.logN = function(num, b) {
    return Math.log(num) / Math.log(b);
  };
  CameraParameters.sinh = function(v) {
    return (Math.exp(v) - Math.exp(-v)) / 2;
  };
  CameraParameters.interpolate = function(from, to, alphaIn, type, fastDirectionMove) {
    var result = new CameraParameters();
    var alpha = CameraParameters.easeCurve(alphaIn, type);
    var alphaBIn = Math.min(1, alphaIn * 2);
    var alphaB = CameraParameters.easeCurve(alphaBIn, type);
    result.angle = to.angle * alpha + from.angle * (1 - alpha);
    result.rotation = to.rotation * alpha + from.rotation * (1 - alpha);
    if (fastDirectionMove) {
      result.lat = to.lat * alphaB + from.lat * (1 - alphaB);
      result.lng = to.lng * alphaB + from.lng * (1 - alphaB);
    }
    else {
      result.lat = to.lat * alpha + from.lat * (1 - alpha);
      result.lng = to.lng * alpha + from.lng * (1 - alpha);
    }
    result.zoom = Math.pow(2, CameraParameters.logN(to.zoom, 2) * alpha + CameraParameters.logN(from.zoom, 2) * (1 - alpha));
    result.opacity = (to.opacity * alpha + from.opacity * (1 - alpha));
    result.viewTarget = Vector3d.lerp(from.viewTarget, to.viewTarget, alpha);
    result.targetReferenceFrame = to.targetReferenceFrame;
    if (to.target === from.target) {
      result.target = to.target;
    }
    else {
      result.target = 20;
    }
    return result;
  };
  CameraParameters.interpolateGreatCircle = function(from, to, alphaIn, type, fastDirectionMove) {
    var result = new CameraParameters();
    var alpha = CameraParameters.easeCurve(alphaIn, type);
    var alphaBIn = Math.min(1, alphaIn * 2);
    var alphaB = CameraParameters.easeCurve(alphaBIn, type);
    result.angle = to.angle * alpha + from.angle * (1 - alpha);
    result.rotation = to.rotation * alpha + from.rotation * (1 - alpha);
    var left = Coordinates.geoTo3dDouble(from.lat, from.lng);
    var right = Coordinates.geoTo3dDouble(to.lat, to.lng);
    var mid = Vector3d.slerp(left, right, alpha);
    var midV2 = Coordinates.cartesianToLatLng(mid);
    result.lat = midV2.y;
    result.lng = midV2.x;
    result.zoom = Math.pow(2, CameraParameters.logN(to.zoom, 2) * alpha + CameraParameters.logN(from.zoom, 2) * (1 - alpha));
    result.opacity = (to.opacity * alpha + from.opacity * (1 - alpha));
    result.viewTarget = Vector3d.lerp(from.viewTarget, to.viewTarget, alpha);
    result.targetReferenceFrame = to.targetReferenceFrame;
    if (to.target === from.target) {
      result.target = to.target;
    }
    else {
      result.target = 20;
    }
    return result;
  };
  CameraParameters.easeCurve = function(alpha, type) {
    switch (type) {
      case 0:
        return alpha;
      case 4:
        return Math.pow(alpha, 2);
      case 1:
        return ((1 - alpha) * CameraParameters.sinh(alpha / (0.1085712344 * 2)) / 100) + alpha * alpha;
      case 2:
        return (alpha * (1 - CameraParameters.sinh((1 - alpha) / (0.1085712344 * 2)) / 100)) + (1 - alpha) * alpha;
      case 3:
        if (alpha < 0.5) {
          return CameraParameters.sinh(alpha / 0.1085712344) / 100;
        }
        else {
          return 1 - (CameraParameters.sinh((1 - alpha) / 0.1085712344) / 100);
        }
      default:
        return alpha;
    }
  };
  var CameraParameters$ = {
    copy: function() {
      var temp = new CameraParameters();
      temp.lat = this.lat;
      temp.lng = this.lng;
      temp.zoom = this.zoom;
      temp.rotation = this.rotation;
      temp.angle = this.angle;
      temp.raDec = this.raDec;
      temp.opacity = this.opacity;
      temp.viewTarget = this.viewTarget.copy();
      temp.target = this.target;
      temp.targetReferenceFrame = this.targetReferenceFrame;
      return temp;
    },
    get_RA: function() {
      return ((((180 - (this.lng - 180)) / 360) * 24) % 24);
    },
    set_RA: function(value) {
      this.lng = 180 - (value / 24 * 360) - 180;
      this.raDec = true;
      return value;
    },
    get_dec: function() {
      return this.lat;
    },
    set_dec: function(value) {
      this.lat = value;
      return value;
    },
    equals: function(obj) {
      if (ss.canCast(obj, CameraParameters)) {
        var cam = obj;
        if (Math.abs(cam.angle - this.angle) > 0.01 || Math.abs(cam.lat - this.lat) > (cam.zoom / 10000) || Math.abs(cam.get_RA() - this.get_RA()) > (cam.zoom / 1000) || Math.abs(cam.rotation - this.rotation) > 0.1 || Math.abs(cam.zoom - this.zoom) > (Math.abs(cam.zoom) / 1000)) {
          return false;
        }
        return true;
      }
      else {
        return false;
      }
    }
  };


  // wwtlib.Color

  function Color() {
    this.a = 255;
    this.b = 255;
    this.g = 255;
    this.r = 255;
    this.name = '';
  }
  Color.fromArgb = function(a, r, g, b) {
    var temp = new Color();
    temp.a = a;
    temp.r = r;
    temp.g = g;
    temp.b = b;
    return temp;
  };
  Color._fromArgbColor = function(a, col) {
    var temp = new Color();
    temp.a = a;
    temp.r = col.r;
    temp.g = col.g;
    temp.b = col.b;
    return temp;
  };
  Color.fromName = function(name) {
    var temp = Color.load(name);
    return temp;
  };
  Color.load = function(color) {
    var a = 255, r = 255, g = 255, b = 255;
    var pieces = color.split(':');
    if (pieces.length === 5) {
      a = parseInt(pieces[1]);
      r = parseInt(pieces[2]);
      g = parseInt(pieces[3]);
      b = parseInt(pieces[4]);
    }
    else if (pieces.length === 2) {
      return Color.fromName(pieces[1].toLowerCase());
    }
    else if (pieces.length === 1 && ss.startsWith(pieces[0], '#')) {
      return Color.fromHex(pieces[0]);
    }
    else if (pieces.length === 1 && pieces[0].length === 8) {
      return Color.fromSimpleHex(pieces[0]);
    }
    else if (pieces.length === 1) {
      return Color._fromWindowsNamedColor(pieces[0]);
    }
    return Color.fromArgb(a, r, g, b);
  };
  Color._fromWindowsNamedColor = function(color) {
    switch (color.toLowerCase()) {
      case 'activeborder':
        return Color.fromArgb(255, 180, 180, 180);
      case 'activecaption':
        return Color.fromArgb(255, 153, 180, 209);
      case 'activecaptiontext':
        return Color.fromArgb(255, 0, 0, 0);
      case 'appworkspace':
        return Color.fromArgb(255, 171, 171, 171);
      case 'control':
        return Color.fromArgb(255, 240, 240, 240);
      case 'controldark':
        return Color.fromArgb(255, 160, 160, 160);
      case 'controldarkdark':
        return Color.fromArgb(255, 105, 105, 105);
      case 'controllight':
        return Color.fromArgb(255, 227, 227, 227);
      case 'controllightlight':
        return Color.fromArgb(255, 255, 255, 255);
      case 'controltext':
        return Color.fromArgb(255, 0, 0, 0);
      case 'desktop':
        return Color.fromArgb(255, 255, 255, 255);
      case 'graytext':
        return Color.fromArgb(255, 109, 109, 109);
      case 'highlight':
        return Color.fromArgb(255, 51, 153, 255);
      case 'highlighttext':
        return Color.fromArgb(255, 255, 255, 255);
      case 'hottrack':
        return Color.fromArgb(255, 0, 102, 204);
      case 'inactiveborder':
        return Color.fromArgb(255, 244, 247, 252);
      case 'inactivecaption':
        return Color.fromArgb(255, 191, 205, 219);
      case 'inactivecaptiontext':
        return Color.fromArgb(255, 0, 0, 0);
      case 'info':
        return Color.fromArgb(255, 255, 255, 225);
      case 'infotext':
        return Color.fromArgb(255, 0, 0, 0);
      case 'menu':
        return Color.fromArgb(255, 240, 240, 240);
      case 'menutext':
        return Color.fromArgb(255, 0, 0, 0);
      case 'scrollbar':
        return Color.fromArgb(255, 200, 200, 200);
      case 'window':
        return Color.fromArgb(255, 255, 255, 255);
      case 'windowframe':
        return Color.fromArgb(255, 100, 100, 100);
      case 'windowtext':
        return Color.fromArgb(255, 0, 0, 0);
      case 'transparent':
        return Color.fromArgb(0, 255, 255, 255);
      case 'aliceblue':
        return Color.fromArgb(255, 240, 248, 255);
      case 'antiquewhite':
        return Color.fromArgb(255, 250, 235, 215);
      case 'aqua':
        return Color.fromArgb(255, 0, 255, 255);
      case 'aquamarine':
        return Color.fromArgb(255, 127, 255, 212);
      case 'azure':
        return Color.fromArgb(255, 240, 255, 255);
      case 'beige':
        return Color.fromArgb(255, 245, 245, 220);
      case 'bisque':
        return Color.fromArgb(255, 255, 228, 196);
      case 'black':
        return Color.fromArgb(255, 0, 0, 0);
      case 'blanchedalmond':
        return Color.fromArgb(255, 255, 235, 205);
      case 'blue':
        return Color.fromArgb(255, 0, 0, 255);
      case 'blueviolet':
        return Color.fromArgb(255, 138, 43, 226);
      case 'brown':
        return Color.fromArgb(255, 165, 42, 42);
      case 'burlywood':
        return Color.fromArgb(255, 222, 184, 135);
      case 'cadetblue':
        return Color.fromArgb(255, 95, 158, 160);
      case 'chartreuse':
        return Color.fromArgb(255, 127, 255, 0);
      case 'chocolate':
        return Color.fromArgb(255, 210, 105, 30);
      case 'coral':
        return Color.fromArgb(255, 255, 127, 80);
      case 'cornflowerblue':
        return Color.fromArgb(255, 100, 149, 237);
      case 'cornsilk':
        return Color.fromArgb(255, 255, 248, 220);
      case 'crimson':
        return Color.fromArgb(255, 220, 20, 60);
      case 'cyan':
        return Color.fromArgb(255, 0, 255, 255);
      case 'darkblue':
        return Color.fromArgb(255, 0, 0, 139);
      case 'darkcyan':
        return Color.fromArgb(255, 0, 139, 139);
      case 'darkgoldenrod':
        return Color.fromArgb(255, 184, 134, 11);
      case 'darkgray':
        return Color.fromArgb(255, 169, 169, 169);
      case 'darkgreen':
        return Color.fromArgb(255, 0, 100, 0);
      case 'darkkhaki':
        return Color.fromArgb(255, 189, 183, 107);
      case 'darkmagenta':
        return Color.fromArgb(255, 139, 0, 139);
      case 'darkolivegreen':
        return Color.fromArgb(255, 85, 107, 47);
      case 'darkorange':
        return Color.fromArgb(255, 255, 140, 0);
      case 'darkorchid':
        return Color.fromArgb(255, 153, 50, 204);
      case 'darkred':
        return Color.fromArgb(255, 139, 0, 0);
      case 'darksalmon':
        return Color.fromArgb(255, 233, 150, 122);
      case 'darkseagreen':
        return Color.fromArgb(255, 143, 188, 139);
      case 'darkslateblue':
        return Color.fromArgb(255, 72, 61, 139);
      case 'darkslategray':
        return Color.fromArgb(255, 47, 79, 79);
      case 'darkturquoise':
        return Color.fromArgb(255, 0, 206, 209);
      case 'darkviolet':
        return Color.fromArgb(255, 148, 0, 211);
      case 'deeppink':
        return Color.fromArgb(255, 255, 20, 147);
      case 'deepskyblue':
        return Color.fromArgb(255, 0, 191, 255);
      case 'dimgray':
        return Color.fromArgb(255, 105, 105, 105);
      case 'dodgerblue':
        return Color.fromArgb(255, 30, 144, 255);
      case 'firebrick':
        return Color.fromArgb(255, 178, 34, 34);
      case 'floralwhite':
        return Color.fromArgb(255, 255, 250, 240);
      case 'forestgreen':
        return Color.fromArgb(255, 34, 139, 34);
      case 'fuchsia':
        return Color.fromArgb(255, 255, 0, 255);
      case 'gainsboro':
        return Color.fromArgb(255, 220, 220, 220);
      case 'ghostwhite':
        return Color.fromArgb(255, 248, 248, 255);
      case 'gold':
        return Color.fromArgb(255, 255, 215, 0);
      case 'goldenrod':
        return Color.fromArgb(255, 218, 165, 32);
      case 'gray':
        return Color.fromArgb(255, 128, 128, 128);
      case 'green':
        return Color.fromArgb(255, 0, 128, 0);
      case 'greenyellow':
        return Color.fromArgb(255, 173, 255, 47);
      case 'honeydew':
        return Color.fromArgb(255, 240, 255, 240);
      case 'hotpink':
        return Color.fromArgb(255, 255, 105, 180);
      case 'indianred':
        return Color.fromArgb(255, 205, 92, 92);
      case 'indigo':
        return Color.fromArgb(255, 75, 0, 130);
      case 'ivory':
        return Color.fromArgb(255, 255, 255, 240);
      case 'khaki':
        return Color.fromArgb(255, 240, 230, 140);
      case 'lavender':
        return Color.fromArgb(255, 230, 230, 250);
      case 'lavenderblush':
        return Color.fromArgb(255, 255, 240, 245);
      case 'lawngreen':
        return Color.fromArgb(255, 124, 252, 0);
      case 'lemonchiffon':
        return Color.fromArgb(255, 255, 250, 205);
      case 'lightblue':
        return Color.fromArgb(255, 173, 216, 230);
      case 'lightcoral':
        return Color.fromArgb(255, 240, 128, 128);
      case 'lightcyan':
        return Color.fromArgb(255, 224, 255, 255);
      case 'lightgoldenrodyellow':
        return Color.fromArgb(255, 250, 250, 210);
      case 'lightgray':
        return Color.fromArgb(255, 211, 211, 211);
      case 'lightgreen':
        return Color.fromArgb(255, 144, 238, 144);
      case 'lightpink':
        return Color.fromArgb(255, 255, 182, 193);
      case 'lightsalmon':
        return Color.fromArgb(255, 255, 160, 122);
      case 'lightseagreen':
        return Color.fromArgb(255, 32, 178, 170);
      case 'lightskyblue':
        return Color.fromArgb(255, 135, 206, 250);
      case 'lightslategray':
        return Color.fromArgb(255, 119, 136, 153);
      case 'lightsteelblue':
        return Color.fromArgb(255, 176, 196, 222);
      case 'lightyellow':
        return Color.fromArgb(255, 255, 255, 224);
      case 'lime':
        return Color.fromArgb(255, 0, 255, 0);
      case 'limegreen':
        return Color.fromArgb(255, 50, 205, 50);
      case 'linen':
        return Color.fromArgb(255, 250, 240, 230);
      case 'magenta':
        return Color.fromArgb(255, 255, 0, 255);
      case 'maroon':
        return Color.fromArgb(255, 128, 0, 0);
      case 'mediumaquamarine':
        return Color.fromArgb(255, 102, 205, 170);
      case 'mediumblue':
        return Color.fromArgb(255, 0, 0, 205);
      case 'mediumorchid':
        return Color.fromArgb(255, 186, 85, 211);
      case 'mediumpurple':
        return Color.fromArgb(255, 147, 112, 219);
      case 'mediumseagreen':
        return Color.fromArgb(255, 60, 179, 113);
      case 'mediumslateblue':
        return Color.fromArgb(255, 123, 104, 238);
      case 'mediumspringgreen':
        return Color.fromArgb(255, 0, 250, 154);
      case 'mediumturquoise':
        return Color.fromArgb(255, 72, 209, 204);
      case 'mediumvioletred':
        return Color.fromArgb(255, 199, 21, 133);
      case 'midnightblue':
        return Color.fromArgb(255, 25, 25, 112);
      case 'mintcream':
        return Color.fromArgb(255, 245, 255, 250);
      case 'mistyrose':
        return Color.fromArgb(255, 255, 228, 225);
      case 'moccasin':
        return Color.fromArgb(255, 255, 228, 181);
      case 'navajowhite':
        return Color.fromArgb(255, 255, 222, 173);
      case 'navy':
        return Color.fromArgb(255, 0, 0, 128);
      case 'oldlace':
        return Color.fromArgb(255, 253, 245, 230);
      case 'olive':
        return Color.fromArgb(255, 128, 128, 0);
      case 'olivedrab':
        return Color.fromArgb(255, 107, 142, 35);
      case 'orange':
        return Color.fromArgb(255, 255, 165, 0);
      case 'orangered':
        return Color.fromArgb(255, 255, 69, 0);
      case 'orchid':
        return Color.fromArgb(255, 218, 112, 214);
      case 'palegoldenrod':
        return Color.fromArgb(255, 238, 232, 170);
      case 'palegreen':
        return Color.fromArgb(255, 152, 251, 152);
      case 'paleturquoise':
        return Color.fromArgb(255, 175, 238, 238);
      case 'palevioletred':
        return Color.fromArgb(255, 219, 112, 147);
      case 'papayawhip':
        return Color.fromArgb(255, 255, 239, 213);
      case 'peachpuff':
        return Color.fromArgb(255, 255, 218, 185);
      case 'peru':
        return Color.fromArgb(255, 205, 133, 63);
      case 'pink':
        return Color.fromArgb(255, 255, 192, 203);
      case 'plum':
        return Color.fromArgb(255, 221, 160, 221);
      case 'powderblue':
        return Color.fromArgb(255, 176, 224, 230);
      case 'purple':
        return Color.fromArgb(255, 128, 0, 128);
      case 'red':
        return Color.fromArgb(255, 255, 0, 0);
      case 'rosybrown':
        return Color.fromArgb(255, 188, 143, 143);
      case 'royalblue':
        return Color.fromArgb(255, 65, 105, 225);
      case 'saddlebrown':
        return Color.fromArgb(255, 139, 69, 19);
      case 'salmon':
        return Color.fromArgb(255, 250, 128, 114);
      case 'sandybrown':
        return Color.fromArgb(255, 244, 164, 96);
      case 'seagreen':
        return Color.fromArgb(255, 46, 139, 87);
      case 'seashell':
        return Color.fromArgb(255, 255, 245, 238);
      case 'sienna':
        return Color.fromArgb(255, 160, 82, 45);
      case 'silver':
        return Color.fromArgb(255, 192, 192, 192);
      case 'skyblue':
        return Color.fromArgb(255, 135, 206, 235);
      case 'slateblue':
        return Color.fromArgb(255, 106, 90, 205);
      case 'slategray':
        return Color.fromArgb(255, 112, 128, 144);
      case 'snow':
        return Color.fromArgb(255, 255, 250, 250);
      case 'springgreen':
        return Color.fromArgb(255, 0, 255, 127);
      case 'steelblue':
        return Color.fromArgb(255, 70, 130, 180);
      case 'tan':
        return Color.fromArgb(255, 210, 180, 140);
      case 'teal':
        return Color.fromArgb(255, 0, 128, 128);
      case 'thistle':
        return Color.fromArgb(255, 216, 191, 216);
      case 'tomato':
        return Color.fromArgb(255, 255, 99, 71);
      case 'turquoise':
        return Color.fromArgb(255, 64, 224, 208);
      case 'violet':
        return Color.fromArgb(255, 238, 130, 238);
      case 'wheat':
        return Color.fromArgb(255, 245, 222, 179);
      case 'white':
        return Color.fromArgb(255, 255, 255, 255);
      case 'whitesmoke':
        return Color.fromArgb(255, 245, 245, 245);
      case 'yellow':
        return Color.fromArgb(255, 255, 255, 0);
      case 'yellowgreen':
        return Color.fromArgb(255, 154, 205, 50);
      case 'buttonface':
        return Color.fromArgb(255, 240, 240, 240);
      case 'buttonhighlight':
        return Color.fromArgb(255, 255, 255, 255);
      case 'buttonshadow':
        return Color.fromArgb(255, 160, 160, 160);
      case 'gradientactivecaption':
        return Color.fromArgb(255, 185, 209, 234);
      case 'gradientinactivecaption':
        return Color.fromArgb(255, 215, 228, 242);
      case 'menubar':
        return Color.fromArgb(255, 240, 240, 240);
      case 'menuhighlight':
        return Color.fromArgb(255, 51, 153, 255);
    }
    return Color.fromArgb(255, 255, 255, 255);
  };
  Color.fromHex = function(data) {
    var r = Util.fromHex(data.substr(1, 2));
    var g = Util.fromHex(data.substr(3, 2));
    var b = Util.fromHex(data.substr(5, 2));
    var a = 255;
    return Color.fromArgb(a, r, g, b);
  };
  Color.fromSimpleHex = function(data) {
    var a = Util.fromHex(data.substr(0, 2));
    var r = Util.fromHex(data.substr(2, 2));
    var g = Util.fromHex(data.substr(4, 2));
    var b = Util.fromHex(data.substr(6, 2));
    return Color.fromArgb(a, r, g, b);
  };
  Color.fromInt = function(color) {
    var r = (color & 4278190080) >>> 24;
    var g = (color & 16711680) >>> 16;
    var b = (color & 65280) >>> 8;
    var a = (color & 255);
    return Color.fromArgb(a, r, g, b);
  };
  var Color$ = {
    toFormat: function() {
      if (ss.emptyString(this.name)) {
        return ss.format('rgb({0},{1},{2})', this.r.toString(), this.g.toString(), this.b.toString());
      }
      else {
        return this.name;
      }
    },
    save: function() {
      if (!ss.emptyString(this.name)) {
        return ss.format('{0}:{1}', 0, this.name);
      }
      else {
        return ss.format('{0}:{1}:{2}:{3}:{4}', 1, this.a, this.r, this.g, this.b);
      }
    },
    toString: function() {
      if (ss.emptyString(this.name)) {
        return ss.format('#{0}{1}{2}', Util.toHex(this.r), Util.toHex(this.g), Util.toHex(this.b));
      }
      else {
        return this.name;
      }
    },
    _clone: function() {
      return Color.fromArgb(this.a, this.r, this.g, this.b);
    }
  };


  // wwtlib.Colors

  function Colors() {
  }
  Colors.get_black = function() {
    return Color.fromArgb(255, 0, 0, 0);
  };
  Colors.get_blue = function() {
    return Color.fromArgb(255, 0, 0, 255);
  };
  Colors.get_brown = function() {
    return Color.fromArgb(255, 165, 42, 42);
  };
  Colors.get_cyan = function() {
    return Color.fromArgb(255, 0, 255, 255);
  };
  Colors.get_darkGray = function() {
    return Color.fromArgb(255, 169, 169, 169);
  };
  Colors.get_gray = function() {
    return Color.fromArgb(255, 128, 128, 128);
  };
  Colors.get_green = function() {
    return Color.fromArgb(255, 0, 255, 0);
  };
  Colors.get_lightGray = function() {
    return Color.fromArgb(255, 211, 211, 211);
  };
  Colors.get_magenta = function() {
    return Color.fromArgb(255, 255, 0, 255);
  };
  Colors.get_orange = function() {
    return Color.fromArgb(255, 255, 165, 0);
  };
  Colors.get_purple = function() {
    return Color.fromArgb(255, 128, 0, 128);
  };
  Colors.get_red = function() {
    return Color.fromArgb(255, 255, 0, 0);
  };
  Colors.get_transparent = function() {
    return Color.fromArgb(0, 255, 255, 255);
  };
  Colors.get_white = function() {
    return Color.fromArgb(255, 255, 255, 255);
  };
  Colors.get_yellow = function() {
    return Color.fromArgb(255, 255, 255, 0);
  };
  var Colors$ = {

  };


  // wwtlib.Constellations

  function Constellations() {
    this._pointCount = 0;
    this._boundry = false;
    this._noInterpollation = false;
    this.readOnly = false;
    this.radius = 1;
    this._drawCount = 0;
    this._constellationVertexBuffers = {};
  }
  Constellations.createBasic = function(name) {
    var temp = new Constellations();
    temp._name = name;
    temp._url = null;
    temp.lines = [];
    var $enum1 = ss.enumerate(ss.keys(Constellations.fullNames));
    while ($enum1.moveNext()) {
      var abbrv = $enum1.current;
      temp.lines.push(new Lineset(abbrv));
    }
    return temp;
  };
  Constellations.create = function(name, url, boundry, noInterpollation, resource) {
    var temp = new Constellations();
    temp._noInterpollation = noInterpollation;
    temp._boundry = boundry;
    temp._name = name;
    temp._url = url;
    temp.getFile();
    return temp;
  };
  Constellations.drawConstellationNames = function(renderContext, opacity, drawColor) {
    if (Constellations._namesBatch == null) {
      Constellations.initializeConstellationNames();
      if (Constellations._namesBatch == null) {
        return;
      }
    }
    Constellations._namesBatch.draw(renderContext, opacity, drawColor);
  };
  Constellations.initializeConstellationNames = function() {
    if (Constellations.constellationCentroids == null) {
      return;
    }
    Constellations._namesBatch = new Text3dBatch(80);
    var $enum1 = ss.enumerate(ss.keys(Constellations.constellationCentroids));
    while ($enum1.moveNext()) {
      var key = $enum1.current;
      var centroid = Constellations.constellationCentroids[key];
      var center = Coordinates.raDecTo3dAu(centroid.get_RA(), centroid.get_dec(), 1);
      var up = Vector3d.create(0, 1, 0);
      var name = centroid.get_name();
      if (centroid.get_name() === 'Triangulum Australe') {
        name = ss.replaceString(name, ' ', '\n   ');
      }
      Constellations._namesBatch.add(new Text3d(center, up, name, 80, 0.000125));
    }
  };
  Constellations.drawArtwork = function(renderContext) {
    if (Constellations.artwork == null) {
      if (Constellations._artFile == null) {
        Constellations._artFile = new Folder();
        Constellations._artFile.loadFromUrl('//worldwidetelescope.org/wwtweb/catalog.aspx?W=hevelius', Constellations._onArtReady);
      }
      return;
    }
    Constellations._maxSeperation = Math.max(0.5, Math.cos((renderContext.get_fovAngle() * 2) / 180 * Math.PI));
    var $enum1 = ss.enumerate(Constellations.artwork);
    while ($enum1.moveNext()) {
      var place = $enum1.current;
      var bs = Constellations.pictureBlendStates[place.get_constellation()];
      bs.set_targetState(Settings.get_active().get_constellationArtFilter().isSet(place.get_constellation()));
      if (bs.get_state()) {
        var reverse = false;
        var centroid = Constellations.constellationCentroids[place.get_constellation()];
        if (centroid != null) {
          var pos = Coordinates.raDecTo3d((reverse) ? -centroid.get_RA() - 6 : centroid.get_RA(), (reverse) ? centroid.get_dec() : centroid.get_dec());
          if (Vector3d.dot(renderContext.get_viewPoint(), pos) > Constellations._maxSeperation) {
            renderContext.drawImageSet(place.get_studyImageset(), 100);
          }
        }
      }
    }
  };
  Constellations._onArtReady = function() {
    Constellations._artFile.childLoadCallback(Constellations._loadArtList);
  };
  Constellations._loadArtList = function() {
    Constellations.artwork = Constellations._artFile.get_places();
  };
  Constellations._loadNames = function() {
    if (Constellations._webFileConstNames.get_state() === 2) {
      alert(Constellations._webFileConstNames.get_message());
    }
    else if (Constellations._webFileConstNames.get_state() === 1) {
      Constellations._centroidsReady(Constellations._webFileConstNames.getText());
    }
  };
  Constellations._centroidsReady = function(file) {
    Constellations.constellationCentroids = {};
    Constellations.fullNames = {};
    Constellations.abbreviations = {};
    Constellations.bitIDs = {};
    var rows = file.split('\r\n');
    var id = 0;
    var line;
    var $enum1 = ss.enumerate(rows);
    while ($enum1.moveNext()) {
      var row = $enum1.current;
      line = row;
      var data = line.split(',');
      Constellations.fullNames[data[1]] = data[0];
      Constellations.abbreviations[data[0]] = data[1];
      Constellations.bitIDs[data[1]] = id++;
      Constellations.pictureBlendStates[data[1]] = BlendState.create(true, 1000);
      Constellations.constellationCentroids[data[1]] = Place.create(data[0], parseFloat(data[3]), parseFloat(data[2]), 128, data[1], 2, 360);
    }
    WWTControl.set_renderNeeded(true);
    ConstellationFilter.buildConstellationFilters();
  };
  Constellations.fullName = function(name) {
    if (ss.keyExists(Constellations.fullNames, name)) {
      return Constellations.fullNames[name];
    }
    return name;
  };
  Constellations.abbreviation = function(name) {
    if (Constellations.abbreviations != null && !ss.emptyString(name) && ss.keyExists(Constellations.abbreviations, name)) {
      return Constellations.abbreviations[name];
    }
    return name;
  };
  var Constellations$ = {
    get_name: function() {
      return this._name;
    },
    set_name: function(value) {
      this._name = value;
      return value;
    },
    getFile: function() {
      this._webFile = new WebFile(this._url);
      this._webFile.onStateChange = ss.bind('fileStateChange', this);
      this._webFile.send();
    },
    fileStateChange: function() {
      if (this._webFile.get_state() === 2) {
        alert(this._webFile.get_message());
      }
      else if (this._webFile.get_state() === 1) {
        this._loadConstellationData(this._webFile.getText());
      }
    },
    _loadConstellationData: function(data) {
      if (this._boundry && !this._noInterpollation) {
        Constellations.boundries = {};
      }
      this.lines = [];
      var lineSet = null;
      try {
        var rows = data.split('\r\n');
        var abrv;
        var abrvOld = '';
        var ra;
        var dec;
        var lastRa = 0;
        var type = 0;
        var $enum1 = ss.enumerate(rows);
        while ($enum1.moveNext()) {
          var row = $enum1.current;
          var line = row;
          if (line.substr(11, 2) === '- ') {
            line = line.substr(0, 11) + ' -' + line.substr(13, (line.length - 13));
          }
          if (line.substr(11, 2) === '+ ') {
            line = line.substr(0, 11) + ' +' + line.substr(13, (line.length - 13));
          }
          dec = parseFloat(line.substr(11, 10));
          if (this._noInterpollation) {
            ra = parseFloat(line.substr(0, 10));
          }
          else {
            ra = parseFloat(line.substr(0, 10));
          }
          abrv = ss.trim(line.substr(23, 4));
          if (!this._boundry) {
            if (!!ss.trim(line.substr(28, 1))) {
              type = parseInt(line.substr(28, 1));
            }
          }
          else {
            if (this._noInterpollation && line.substr(28, 1) !== 'O') {
              continue;
            }
          }
          if (abrv !== abrvOld) {
            type = 3;
            lineSet = new Lineset(abrv);
            this.lines.push(lineSet);
            if (this._boundry && !this._noInterpollation) {
              Constellations.boundries[abrv] = lineSet;
            }
            abrvOld = abrv;
            lastRa = 0;
          }
          if (this._noInterpollation) {
            if (Math.abs(ra - lastRa) > 12) {
              ra = ra - (24 * (((ra - lastRa) < 0) ? -1 : 1));
            }
            lastRa = ra;
          }
          var starName = null;
          if (line.length > 30) {
            starName = ss.trim(line.substr(30));
          }
          if (starName == null || starName !== 'Empty') {
            lineSet.add(ra, dec, type, starName);
          }
          this._pointCount++;
          type = 1;
        }
      }
      catch ($e2) {
        var i = 0;
      }
      WWTControl.set_renderNeeded(true);
    },
    draw: function(renderContext, showOnlySelected, focusConsteallation, clearExisting) {
      Constellations._maxSeperation = Math.max(0.6, Math.cos((renderContext.get_fovAngle() * 2) / 180 * Math.PI));
      this._drawCount = 0;
      var lsSelected = null;
      if (this.lines == null || Constellations.constellationCentroids == null) {
        return;
      }
      Constellations._constToDraw = focusConsteallation;
      var $enum1 = ss.enumerate(this.lines);
      while ($enum1.moveNext()) {
        var ls = $enum1.current;
        if (Constellations._constToDraw === ls.get_name() && this._boundry) {
          lsSelected = ls;
        }
        else if (!showOnlySelected || !this._boundry) {
          this._drawSingleConstellation(renderContext, ls, 1);
        }
      }
      if (lsSelected != null) {
        this._drawSingleConstellation(renderContext, lsSelected, 1);
      }
    },
    _drawSingleConstellation: function(renderContext, ls, opacity) {
      var reverse = false;
      var centroid = Constellations.constellationCentroids[ls.get_name()];
      if (centroid != null) {
        var pos = Coordinates.raDecTo3d((reverse) ? -centroid.get_RA() - 6 : centroid.get_RA(), (reverse) ? centroid.get_dec() : centroid.get_dec());
        if (Vector3d.dot(renderContext.get_viewPoint(), pos) < Constellations._maxSeperation) {
          return;
        }
      }
      if (!ss.keyExists(this._constellationVertexBuffers, ls.get_name())) {
        var count = ls.points.length;
        var linelist = new SimpleLineList();
        linelist.set_depthBuffered(false);
        this._constellationVertexBuffers[ls.get_name()] = linelist;
        var currentPoint = new Vector3d();
        var temp;
        for (var i = 0; i < count; i++) {
          if (!ls.points[i].pointType || !i) {
            currentPoint = Coordinates.raDecTo3d(ls.points[i].RA, ls.points[i].dec);
          }
          else {
            temp = Coordinates.raDecTo3d(ls.points[i].RA, ls.points[i].dec);
            linelist.addLine(currentPoint, temp);
            currentPoint = temp;
          }
        }
        if (this._boundry) {
          temp = Coordinates.raDecTo3d(ls.points[0].RA, ls.points[0].dec);
          linelist.addLine(currentPoint, temp);
        }
      }
      var col = 'red';
      if (this._boundry) {
        if (Constellations._constToDraw !== ls.get_name()) {
          col = Settings.get_globalSettings().get_constellationBoundryColor();
        }
        else {
          col = Settings.get_globalSettings().get_constellationSelectionColor();
        }
      }
      else {
        col = Settings.get_globalSettings().get_constellationFigureColor();
      }
      this._constellationVertexBuffers[ls.get_name()].drawLines(renderContext, opacity, Color.load(col));
    },
    _drawSingleConstellationOld: function(renderContext, ls) {
      var reverse = false;
      var centroid = Constellations.constellationCentroids[ls.get_name()];
      if (centroid != null) {
        var pos = Coordinates.raDecTo3d((reverse) ? -centroid.get_RA() - 6 : centroid.get_RA(), (reverse) ? centroid.get_dec() : centroid.get_dec());
        if (Vector3d.dot(renderContext.get_viewPoint(), pos) < Constellations._maxSeperation) {
          return;
        }
      }
      this._drawCount++;
      var col;
      if (this._boundry) {
        if (Constellations._constToDraw !== ls.get_name()) {
          col = Settings.get_globalSettings().get_constellationBoundryColor();
        }
        else {
          col = Settings.get_globalSettings().get_constellationSelectionColor();
        }
      }
      else {
        col = Settings.get_globalSettings().get_constellationFigureColor();
      }
      if (renderContext.gl == null) {
        var ctx = renderContext.device;
        var count = ls.points.length;
        var lastPoint = new Vector3d();
        ctx.save();
        var linePending = false;
        ctx.beginPath();
        ctx.strokeStyle = col;
        ctx.lineWidth = 2;
        ctx.globalAlpha = 0.25;
        for (var i = 0; i < count; i++) {
          if (!ls.points[i].pointType || !i) {
            if (linePending) {
              ctx.stroke();
            }
            lastPoint = renderContext.WVP.transform(Coordinates.raDecTo3d(ls.points[i].RA, ls.points[i].dec));
            ctx.moveTo(lastPoint.x, lastPoint.y);
          }
          else {
            var newPoint = renderContext.WVP.transform(Coordinates.raDecTo3d(ls.points[i].RA, ls.points[i].dec));
            ctx.lineTo(newPoint.x, newPoint.y);
            linePending = true;
          }
        }
        if (this._boundry) {
          ctx.closePath();
        }
        ctx.stroke();
        ctx.restore();
      }
      else {
      }
    },
    findConstellationForPoint: function(ra, dec) {
      if (dec > 88.402 || this.lines == null) {
        return 'UMI';
      }
      var $enum1 = ss.enumerate(this.lines);
      while ($enum1.moveNext()) {
        var ls = $enum1.current;
        var count = ls.points.length;
        var i;
        var j;
        var inside = false;
        for (i = 0, j = count - 1; i < count; j = i++) {
          if ((((ls.points[i].dec <= dec) && (dec < ls.points[j].dec)) || ((ls.points[j].dec <= dec) && (dec < ls.points[i].dec))) && (ra < (ls.points[j].RA - ls.points[i].RA) * (dec - ls.points[i].dec) / (ls.points[j].dec - ls.points[i].dec) + ls.points[i].RA)) {
            inside = !inside;
          }
        }
        if (inside) {
          return ls.get_name();
        }
      }
      if (ra > 0) {
        return this.findConstellationForPoint(ra - 24, dec);
      }
      if (dec > 65.5) {
        return 'UMI';
      }
      if (dec < -65.5) {
        return 'OCT';
      }
      return 'Error';
    }
  };


  // wwtlib.Lineset

  function Lineset(name) {
    this._name = name;
    this.points = [];
  }
  var Lineset$ = {
    get_name: function() {
      return this._name;
    },
    set_name: function(value) {
      this._name = value;
      return value;
    },
    add: function(ra, dec, pointType, name) {
      this.points.push(new Linepoint(ra, dec, pointType, name));
    }
  };


  // wwtlib.Linepoint

  function Linepoint(ra, dec, type, name) {
    this.RA = 0;
    this.dec = 0;
    this.pointType = 0;
    this.name = null;
    this.RA = ra;
    this.dec = dec;
    this.pointType = type;
    this.name = name;
  }
  var Linepoint$ = {
    toString: function() {
      if (ss.emptyString(this.name)) {
        return Coordinates.formatDMS((((this.RA / 360) * 24 + 12) % 24)) + ', ' + Coordinates.formatDMS(this.dec) + ', ' + this.pointType.toString();
      }
      else {
        return this.name + ', ' + this.pointType.toString();
      }
    }
  };


  // wwtlib.ConstellationFilter

  function ConstellationFilter() {
    this.bits = new Array(3);
    this.oldBits = new Array(3);
    this.blendState = BlendState.create(false, 1000);
    this.internal = false;
    this.settingsOwned = false;
    for (var i = 0; i < 3; i++) {
      this.bits[i] = ~this.bits[i];
      this.oldBits[i] = this.bits[i];
    }
  }
  ConstellationFilter.buildConstellationFilters = function() {
    var all = ConstellationFilter.get_allConstellation();
    all.internal = true;
    ConstellationFilter.families['AllConstellation'] = all;
    ConstellationFilter.families['Zodiacal'] = ConstellationFilter.get_zodiacal();
    ConstellationFilter.families['Ursa Major Family'] = ConstellationFilter.get_ursaMajorFamily();
    ConstellationFilter.families['Perseus Family'] = ConstellationFilter.get_perseusFamily();
    ConstellationFilter.families['Hercules Family'] = ConstellationFilter.get_herculesFamily();
    ConstellationFilter.families['Orion Family'] = ConstellationFilter.get_orionFamily();
    ConstellationFilter.families['Heavenly Waters'] = ConstellationFilter.get_heavenlyWaters();
    ConstellationFilter.families['Bayer Family'] = ConstellationFilter.get_bayerFamily();
    ConstellationFilter.families['La Caille Family'] = ConstellationFilter.get_laCaileFamily();
  };
  ConstellationFilter.saveCustomFilters = function() {
    var sb = new ss.StringBuilder();
    var $dict1 = ConstellationFilter.families;
    for (var $key2 in $dict1) {
      var kv = { key: $key2, value: $dict1[$key2] };
      if (!kv.value.internal) {
        sb.append(kv.key);
        sb.append(';');
        sb.appendLine(kv.value.toString());
      }
    }
  };
  ConstellationFilter.get_allConstellation = function() {
    var all = new ConstellationFilter();
    all.setAll(true);
    return all;
  };
  ConstellationFilter.get_zodiacal = function() {
    var zodiacal = new ConstellationFilter();
    zodiacal.set('ARI', true);
    zodiacal.set('TAU', true);
    zodiacal.set('GEM', true);
    zodiacal.set('CNC', true);
    zodiacal.set('LEO', true);
    zodiacal.set('VIR', true);
    zodiacal.set('LIB', true);
    zodiacal.set('SCO', true);
    zodiacal.set('SGR', true);
    zodiacal.set('CAP', true);
    zodiacal.set('AQR', true);
    zodiacal.set('PSC', true);
    zodiacal.internal = true;
    return zodiacal;
  };
  ConstellationFilter.get_ursaMajorFamily = function() {
    var uma = new ConstellationFilter();
    uma.set('UMA', true);
    uma.set('UMI', true);
    uma.set('DRA', true);
    uma.set('CVN', true);
    uma.set('BOO', true);
    uma.set('COM', true);
    uma.set('CRB', true);
    uma.set('CAM', true);
    uma.set('LYN', true);
    uma.set('LMI', true);
    uma.internal = true;
    return uma;
  };
  ConstellationFilter.get_perseusFamily = function() {
    var Perseus = new ConstellationFilter();
    Perseus.set('CAS', true);
    Perseus.set('CEP', true);
    Perseus.set('AND', true);
    Perseus.set('PER', true);
    Perseus.set('PEG', true);
    Perseus.set('CET', true);
    Perseus.set('AUR', true);
    Perseus.set('LAC', true);
    Perseus.set('TRI', true);
    Perseus.internal = true;
    return Perseus;
  };
  ConstellationFilter.get_herculesFamily = function() {
    var hercules = new ConstellationFilter();
    hercules.set('HER', true);
    hercules.set('SGE', true);
    hercules.set('AQL', true);
    hercules.set('LYR', true);
    hercules.set('CYG', true);
    hercules.set('VUL', true);
    hercules.set('HYA', true);
    hercules.set('SEX', true);
    hercules.set('CRT', true);
    hercules.set('CRV', true);
    hercules.set('OPH', true);
    hercules.set('SER1', true);
    hercules.set('SER2', true);
    hercules.set('SCT', true);
    hercules.set('CEN', true);
    hercules.set('LUP', true);
    hercules.set('CRA', true);
    hercules.set('ARA', true);
    hercules.set('TRA', true);
    hercules.set('CRU', true);
    hercules.internal = true;
    return hercules;
  };
  ConstellationFilter.get_orionFamily = function() {
    var orion = new ConstellationFilter();
    orion.set('ORI', true);
    orion.set('CMA', true);
    orion.set('CMI', true);
    orion.set('MON', true);
    orion.set('LEP', true);
    orion.internal = true;
    return orion;
  };
  ConstellationFilter.get_heavenlyWaters = function() {
    var waters = new ConstellationFilter();
    waters.set('DEL', true);
    waters.set('EQU', true);
    waters.set('ERI', true);
    waters.set('PSA', true);
    waters.set('CAR', true);
    waters.set('PUP', true);
    waters.set('VEL', true);
    waters.set('PYX', true);
    waters.set('COL', true);
    waters.internal = true;
    return waters;
  };
  ConstellationFilter.get_bayerFamily = function() {
    var bayer = new ConstellationFilter();
    bayer.set('HYA', true);
    bayer.set('DOR', true);
    bayer.set('VOL', true);
    bayer.set('APS', true);
    bayer.set('PAV', true);
    bayer.set('GRU', true);
    bayer.set('PHE', true);
    bayer.set('TUC', true);
    bayer.set('IND', true);
    bayer.set('CHA', true);
    bayer.set('MUS', true);
    bayer.internal = true;
    return bayer;
  };
  ConstellationFilter.get_laCaileFamily = function() {
    var LaCaile = new ConstellationFilter();
    LaCaile.set('NOR', true);
    LaCaile.set('CIR', true);
    LaCaile.set('TEL', true);
    LaCaile.set('MIC', true);
    LaCaile.set('SCL', true);
    LaCaile.set('FOR', true);
    LaCaile.set('CAE', true);
    LaCaile.set('HOR', true);
    LaCaile.set('OCT', true);
    LaCaile.set('MEN', true);
    LaCaile.set('RET', true);
    LaCaile.set('PIC', true);
    LaCaile.set('ANT', true);
    LaCaile.internal = true;
    return LaCaile;
  };
  ConstellationFilter.parse = function(val) {
    var parts = (val).split(',');
    var cf = new ConstellationFilter();
    try {
      for (var i = 0; i < 3; i++) {
        cf.bits[i] = parseInt(parts[i]);
      }
    }
    catch ($e1) {
    }
    return cf;
  };
  var ConstellationFilter$ = {
    _saveBits: function() {
      for (var i = 0; i < 3; i++) {
        this.oldBits[i] = this.bits[i];
      }
    },
    _isChanged: function() {
      for (var i = 0; i < 3; i++) {
        if (this.oldBits[i] !== this.bits[i]) {
          return true;
        }
      }
      return false;
    },
    _checkChanged: function() {
      if (this._isChanged()) {
        this._fireChanged();
      }
    },
    isEnabled: function(abbrev) {
      var bitID = Constellations.bitIDs[abbrev];
      var index = bitID / 32;
      bitID = bitID % 32;
      return this.blendState.get_state() && !!((1 << bitID) & this.bits[index]);
    },
    isSet: function(abbrev) {
      this._saveBits();
      var bitID = Constellations.bitIDs[abbrev];
      var index = ss.truncate((bitID / 32));
      bitID = bitID % 32;
      return !!((1 << bitID) & this.bits[index]);
    },
    set: function(abbrev, state) {
      this._saveBits();
      var bitID = Constellations.bitIDs[abbrev];
      var index = bitID / 32;
      bitID = bitID % 32;
      if (state) {
        this.bits[index] = this.bits[index] | (1 << bitID);
      }
      else {
        this.bits[index] = this.bits[index] ^ (1 << bitID);
      }
      this._checkChanged();
    },
    setAll: function(state) {
      this._saveBits();
      for (var bitID = 0; bitID < 89; bitID++) {
        var index = bitID / 32;
        var bit = bitID % 32;
        if (state) {
          this.bits[index] = this.bits[index] | (1 << bit);
        }
        else {
          this.bits[index] = this.bits[index] ^ (1 << bit);
        }
      }
      this._checkChanged();
    },
    setBits: function(bits) {
      this._saveBits();
      for (var i = 0; i < 3; i++) {
        this.bits[i] = (bits[i * 4]) + ((bits[i * 4 + 1]) << 8) + ((bits[i * 4 + 2]) << 16) + ((bits[i * 4 + 3]) << 24);
      }
      this._checkChanged();
    },
    getBits: function() {
      var bits = new Array(12);
      var index = 0;
      for (var i = 0; i < 3; i++) {
        bits[index++] = this.bits[i];
        bits[index++] = (this.bits[i] >> 8);
        bits[index++] = (this.bits[i] >> 16);
        bits[index++] = (this.bits[i] >> 24);
      }
      return bits;
    },
    cloneFilter: function(filter) {
      this._saveBits();
      for (var i = 0; i < 3; i++) {
        this.bits[i] = filter.bits[i];
      }
      this._checkChanged();
    },
    clone: function() {
      var newFilter = new ConstellationFilter();
      newFilter.cloneFilter(this);
      return newFilter;
    },
    combine: function(filter) {
      this._saveBits();
      for (var i = 0; i < 3; i++) {
        this.bits[i] = this.bits[i] | filter.bits[i];
      }
      this._checkChanged();
    },
    remove: function(filter) {
      this._saveBits();
      for (var i = 0; i < 3; i++) {
        this.bits[i] = this.bits[i] & ~filter.bits[i];
      }
      this._checkChanged();
    },
    _fireChanged: function() {
      if (this.settingsOwned) {
      }
    },
    toString: function() {
      return ss.format('{0},{1},{2}', this.bits[0], this.bits[1], this.bits[2]);
    }
  };


  // wwtlib.Coordinates

  function Coordinates(ascention, declination) {
    this._ascention = 0;
    this._declination = 0;
    this._ascention = ascention + (Math.PI * 80) % (Math.PI * 2);
    this._declination = declination;
  }
  Coordinates.geoTo3d = function(lat, lng) {
    return Vector3d.create((Math.cos(lng * Coordinates.RC) * Math.cos(lat * Coordinates.RC) * 1), (Math.sin(lat * Coordinates.RC) * 1), (Math.sin(lng * Coordinates.RC) * Math.cos(lat * Coordinates.RC) * 1));
  };
  Coordinates.geoTo3dDouble = function(lat, lng) {
    return Vector3d.create(Math.cos(lng * Coordinates.RC) * Math.cos(lat * Coordinates.RC) * 1, Math.sin(lat * Coordinates.RC) * 1, Math.sin(lng * Coordinates.RC) * Math.cos(lat * Coordinates.RC) * 1);
  };
  Coordinates.geoTo3dDoubleRad = function(lat, lng, radius) {
    lng -= 180;
    return Vector3d.create(Math.cos(lng * Coordinates.RC) * Math.cos(lat * Coordinates.RC) * radius, Math.sin(lat * Coordinates.RC) * radius, Math.sin(lng * Coordinates.RC) * Math.cos(lat * Coordinates.RC) * radius);
  };
  Coordinates.geoTo3dRad = function(lat, lng, radius) {
    return Vector3d.create((Math.cos(lng * Coordinates.RC) * Math.cos(lat * Coordinates.RC) * radius), (Math.sin(lat * Coordinates.RC) * radius), (Math.sin(lng * Coordinates.RC) * Math.cos(lat * Coordinates.RC) * radius));
  };
  Coordinates.raDecTo3d = function(ra, dec) {
    return Vector3d.create((Math.cos(ra * Coordinates.RCRA) * Math.cos(dec * Coordinates.RC) * 1), (Math.sin(dec * Coordinates.RC) * 1), (Math.sin(ra * Coordinates.RCRA) * Math.cos(dec * Coordinates.RC) * 1));
  };
  Coordinates.raDecTo3dAu = function(ra, dec, au) {
    return Vector3d.create((Math.cos(ra * Coordinates.RCRA) * Math.cos(dec * Coordinates.RC) * au), (Math.sin(dec * Coordinates.RC) * au), (Math.sin(ra * Coordinates.RCRA) * Math.cos(dec * Coordinates.RC) * au));
  };
  Coordinates.raDecTo3dMat = function(ra, dec, mat) {
    return Vector3d._transformCoordinate(Vector3d.create((Math.cos(ra * Coordinates.RCRA) * Math.cos(dec * Coordinates.RC) * 1), (Math.sin(dec * Coordinates.RC) * 1), (Math.sin(ra * Coordinates.RCRA) * Math.cos(dec * Coordinates.RC) * 1)), mat);
  };
  Coordinates.raDecTo3dPointRad = function(point, radius) {
    point.set_dec(-point.get_dec());
    return Vector3d.create((Math.cos(point.get_RA() * Coordinates.RCRA) * Math.cos(point.get_dec() * Coordinates.RC) * radius), (Math.sin(point.get_dec() * Coordinates.RC) * radius), (Math.sin(point.get_RA() * Coordinates.RCRA) * Math.cos(point.get_dec() * Coordinates.RC) * radius));
  };
  Coordinates.sterographicTo3d = function(x, y, radius, standardLat, meridean, falseEasting, falseNorthing, scale, north) {
    var lat = 90;
    var lng = 0;
    x -= falseEasting;
    y -= falseNorthing;
    if (!!x || !!y) {
      var re = (1 + Math.sin(Math.abs(standardLat) / 180 * Math.PI)) * 6371000 / scale;
      var rere = re * re;
      var c1 = 180 / Math.PI;
      if (!x) {
        lng = (90 * y < 0) ? -1 : 1;
      }
      else {
        lng = Math.atan2(y, x) * c1;
      }
      var len = (x * x) + (y * y);
      lat = (rere - len) / (rere + len);
      lat = Math.asin(lat) * c1;
      if (!north) {
        lat = -lat;
        lng = -lng;
        meridean = -meridean;
      }
    }
    return Coordinates.geoTo3dDoubleRad(lat, 90 + lng + meridean, radius);
  };
  Coordinates.equitorialToHorizon = function(equitorial, location, utc) {
    var hourAngle = Coordinates.mstFromUTC2(utc, location.get_lng()) - (equitorial.get_RA() * 15);
    if (hourAngle < 0) {
      hourAngle += 360;
    }
    var ha = hourAngle * Coordinates.RC;
    var dec = equitorial.get_dec() * Coordinates.RC;
    var lat = location.get_lat() * Coordinates.RC;
    var sinAlt = Math.sin(dec) * Math.sin(lat) + Math.cos(dec) * Math.cos(lat) * Math.cos(ha);
    var altitude = Math.asin(sinAlt);
    var cosAzimith = (Math.sin(dec) - Math.sin(altitude) * Math.sin(lat)) / (Math.cos(altitude) * Math.cos(lat));
    var azimuth = Math.acos(cosAzimith);
    var altAz = new Coordinates(azimuth, altitude);
    if (Math.sin(ha) > 0) {
      altAz.set_az((360 - altAz.get_az()));
    }
    return altAz;
  };
  Coordinates.horizonToEquitorial = function(altAz, location, utc) {
    var hourAngle = Coordinates.mstFromUTC2(utc, location.get_lng());
    var haLocal;
    var declination;
    var raDec = Coordinates._altAzToRaDec(altAz.get_alt() * Coordinates.RC, altAz.get_az() * Coordinates.RC, location.get_lat() * Coordinates.RC);
    haLocal = raDec.x;
    declination = raDec.y;
    var ha = (haLocal / Coordinates.RC);
    hourAngle += ha;
    if (hourAngle < 0) {
      hourAngle += 360;
    }
    if (hourAngle > 360) {
      hourAngle -= 360;
    }
    return Coordinates.fromRaDec(hourAngle / 15, declination / Coordinates.RC);
  };
  Coordinates._altAzToRaDec = function(Altitude, Azimuth, Latitude) {
    var hrAngle = 0;
    var dec = 0;
    Azimuth = Math.PI - Azimuth;
    if (Azimuth < 0) {
      Azimuth += Math.PI * 2;
    }
    hrAngle = Math.atan2(Math.sin(Azimuth), Math.cos(Azimuth) * Math.sin(Latitude) + Math.tan(Altitude) * Math.cos(Latitude));
    if (hrAngle < 0) {
      hrAngle += Math.PI * 2;
    }
    dec = Math.asin(Math.sin(Latitude) * Math.sin(Altitude) - Math.cos(Latitude) * Math.cos(Altitude) * Math.cos(Azimuth));
    return Vector2d.create(hrAngle, dec);
  };
  Coordinates.mstFromUTC2 = function(utc, lng) {
    var year = utc.getUTCFullYear();
    var month = utc.getUTCMonth() + 1;
    var day = utc.getUTCDate();
    var hour = utc.getUTCHours();
    var minute = utc.getUTCMinutes();
    var second = utc.getUTCSeconds() + utc.getUTCMilliseconds() / 1000;
    if (month === 1 || month === 2) {
      year -= 1;
      month += 12;
    }
    var a = ss.truncate((year / 100));
    var b = 2 - a + Math.floor((a / 4));
    var c = Math.floor(365.25 * year);
    var d = Math.floor(30.6001 * (month + 1));
    var julianDays;
    var jd2;
    var julianCenturies;
    var mst;
    julianDays = b + c + d - 730550.5 + day + (hour + minute / 60 + second / 3600) / 24;
    julianCenturies = julianDays / 36525;
    mst = 280.46061837 + 360.98564736629 * julianDays + 0.000387933 * julianCenturies * julianCenturies - julianCenturies * julianCenturies * julianCenturies / 38710000 + lng;
    if (mst > 0) {
      while (mst > 360) {
        mst = mst - 360;
      }
    }
    else {
      while (mst < 0) {
        mst = mst + 360;
      }
    }
    return mst;
  };
  Coordinates.cartesianToSpherical = function(vector) {
    var ascention;
    var declination;
    var radius = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);
    var XZ = Math.sqrt(vector.x * vector.x + vector.z * vector.z);
    declination = Math.asin(vector.y / radius);
    if (0 < vector.x) {
      ascention = Math.asin(vector.z / XZ);
    }
    else if (0 > vector.x) {
      ascention = Math.PI - Math.asin(vector.z / XZ);
    }
    else {
      ascention = 0;
    }
    return new Coordinates(ascention, declination);
  };
  Coordinates.cartesianToSpherical2 = function(vector) {
    var rho = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);
    var longitude = Math.atan2(vector.z, vector.x);
    var latitude = Math.asin(vector.y / rho);
    return new Coordinates(longitude, latitude);
  };
  Coordinates.cartesianToSphericalSky = function(vector) {
    var rho = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);
    var ra = Math.atan2(vector.z, vector.x);
    var dec = Math.asin(-vector.y / rho);
    return Vector2d.create(ra / Math.PI * 12, dec / Math.PI * 180);
  };
  Coordinates.cartesianToLatLng = function(vector) {
    var rho = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);
    var longitude = Math.atan2(vector.z, vector.x);
    var latitude = Math.asin(vector.y / rho);
    return Vector2d.create(longitude * 180 / Math.PI, latitude * 180 / Math.PI);
  };
  Coordinates.cartesianToSpherical3 = function(vector) {
    var rho = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);
    var longitude = Math.atan2(vector.z, vector.x);
    var latitude = Math.asin(vector.y / rho);
    return new Coordinates(longitude, latitude);
  };
  Coordinates.sign = function(target) {
    return (target < 0) ? -1 : 1;
  };
  Coordinates.formatDMSSign = function(angle, sign) {
    try {
      angle += (Coordinates.sign(angle) * 0.0001388888888889);
      var degrees = ss.truncate(angle);
      var minutes = ((angle - ss.truncate(angle)) * 60);
      var seconds = ((minutes - ss.truncate(minutes)) * 60);
      if (sign) {
        var signString = (angle > 0) ? '+' : '-';
        return ss.format('{3}{0:00;00}:{1:00}:{2:00}', degrees, Math.abs(ss.truncate(minutes)), Math.abs(ss.truncate(seconds)), signString);
      }
      else {
        return ss.format('{0:00}:{1:00}:{2:00}', degrees, Math.abs(ss.truncate(minutes)), Math.abs(ss.truncate(seconds)));
      }
    }
    catch ($e1) {
      return '';
    }
  };
  Coordinates.twoPlaces = function(val) {
    var num = val.toString();
    if (num.length < 2) {
      num = '0' + num;
    }
    return num;
  };
  Coordinates.formatDMS = function(angle) {
    try {
      angle += (((angle < 0) ? -1 : 1) * 0.0001388888888889);
      var degrees = Math.abs(ss.truncate(angle));
      var minutes = ((angle - ss.truncate(angle)) * 60);
      var seconds = ((minutes - ss.truncate(minutes)) * 60);
      var sign = (angle < 0) ? '-' : '';
      return ss.format('{3}{0}:{1}:{2}', Math.abs(degrees), Coordinates.twoPlaces(Math.abs(ss.truncate(minutes))), Coordinates.twoPlaces(Math.abs(ss.truncate(seconds))), sign);
    }
    catch ($e1) {
      return '';
    }
  };
  Coordinates.formatDMSWide = function(angle) {
    try {
      angle += (Coordinates.sign(angle) * 0.0001388888888889);
      var degrees = Math.abs(ss.truncate(angle));
      var minutes = ((angle - ss.truncate(angle)) * 60);
      var seconds = ((minutes - ss.truncate(minutes)) * 60);
      var sign = (angle < 0) ? '-' : '';
      return ss.format('{3}{0:00} : {1:00} : {2:00}', degrees, Math.abs(ss.truncate(minutes)), Math.abs(ss.truncate(seconds)), sign);
    }
    catch ($e1) {
      return '';
    }
  };
  Coordinates.formatHMS = function(angle) {
    try {
      angle += (Coordinates.sign(angle) * 0.0001388888888889);
      var degrees = ss.truncate(angle);
      var minutes = ((angle - ss.truncate(angle)) * 60);
      var seconds = ((minutes - ss.truncate(minutes)) * 60);
      return ss.format('{0:00}h{1:00}m{2:00}s', degrees, Math.abs(ss.truncate(minutes)), Math.abs(ss.truncate(seconds)));
    }
    catch ($e1) {
      return '';
    }
  };
  Coordinates.parseRA = function(data, degrees) {
    data = ss.trim(data).toLowerCase();
    if (data.indexOf('d') > -1 || data.indexOf('\u00b0') > -1) {
      degrees = true;
    }
    if (data.indexOf('h') > -1 || data.indexOf(':') > -1) {
      degrees = false;
    }
    var ra = Coordinates.parse(data) / ((degrees) ? 15 : 1);
    return Math.max(Math.min(ra, 24), 0);
  };
  Coordinates.parseDec = function(data) {
    var dec = Coordinates.parse(data);
    return Math.max(Math.min(dec, 90), -90);
  };
  Coordinates.parse = function(data) {
    try {
      data = ss.trim(data).toLowerCase();
      data = ss.replaceString(ss.replaceString(ss.replaceString(ss.replaceString(ss.replaceString(ss.replaceString(data, 'd ', 'd'), 'h ', 'h'), 'm ', 'm'), 's ', 's'), "' ", "'"), '" ', '"');
      if (Util.stringContains(data, [ ':', ' ', 'd', 'h', 'm', 's', "'", '"', '\u00b0' ])) {
        var hours = 0;
        var minutes = 0;
        var seconds = 0;
        var sign = 0;
        var parts = Util.splitString(data, [ ':', ' ', 'd', 'h', 'm', 's', "'", '"', '\u00b0' ]);
        if (parts.length > 0) {
          if (!ss.emptyString(parts[0])) {
            hours = Math.abs(parseFloat(parts[0]));
            sign = (parseFloat(parts[0]) < 0) ? -1 : 1;
            if (parts[0].indexOf('-') > -1) {
              sign = -1;
            }
          }
        }
        if (parts.length > 1) {
          if (!ss.emptyString(parts[1])) {
            minutes = parseFloat(parts[1]);
          }
        }
        if (parts.length > 2) {
          if (!ss.emptyString(parts[2])) {
            seconds = parseFloat(parts[2]);
          }
        }
        if (!sign) {
          sign = 1;
        }
        return sign * (hours + minutes / 60 + seconds / 3600);
      }
      else {
        var val = 0;
        try {
          val = parseFloat(data);
        }
        catch ($e1) {
          val = 0;
        }
        return val;
      }
    }
    catch ($e2) {
      return 0;
    }
  };
  Coordinates.fromRaDec = function(ra, dec) {
    return new Coordinates((ra - 12) * 15 * Coordinates.RC, dec * Coordinates.RC);
  };
  Coordinates.fromLatLng = function(lat, lng) {
    return new Coordinates(lng * Coordinates.RC, lat * Coordinates.RC);
  };
  Coordinates.dmsToDegrees = function(Degrees, Minutes, Seconds) {
    return Degrees + Minutes / 60 + Seconds / 3600;
  };
  Coordinates.degreesToRadians = function(Degrees) {
    return Degrees * 0.0174532925199433;
  };
  Coordinates.radiansToDegrees = function(Radians) {
    return Radians * 57.2957795130823;
  };
  Coordinates.radiansToHours = function(Radians) {
    return Radians * 3.81971863420549;
  };
  Coordinates.hoursToRadians = function(Hours) {
    return Hours * 0.261799387799149;
  };
  Coordinates.hoursToDegrees = function(Hours) {
    return Hours * 15;
  };
  Coordinates.degreesToHours = function(Degrees) {
    return Degrees / 15;
  };
  Coordinates.PI = function() {
    return 3.14159265358979;
  };
  Coordinates.mapTo0To360Range = function(Degrees) {
    var Value = Degrees;
    while (Value < 0) {
      Value += 360;
    }
    while (Value > 360) {
      Value -= 360;
    }
    return Value;
  };
  Coordinates.mapTo0To24Range = function(HourAngle) {
    var Value = HourAngle;
    while (Value < 0) {
      Value += 24;
    }
    while (Value > 24) {
      Value -= 24;
    }
    return Value;
  };
  Coordinates.meanObliquityOfEcliptic = function(JD) {
    var U = (JD - 2451545) / 3652500;
    var Usquared = U * U;
    var Ucubed = Usquared * U;
    var U4 = Ucubed * U;
    var U5 = U4 * U;
    var U6 = U5 * U;
    var U7 = U6 * U;
    var U8 = U7 * U;
    var U9 = U8 * U;
    var U10 = U9 * U;
    return Coordinates.dmsToDegrees(23, 26, 21.448) - Coordinates.dmsToDegrees(0, 0, 4680.93) * U - Coordinates.dmsToDegrees(0, 0, 1.55) * Usquared + Coordinates.dmsToDegrees(0, 0, 1999.25) * Ucubed - Coordinates.dmsToDegrees(0, 0, 51.38) * U4 - Coordinates.dmsToDegrees(0, 0, 249.67) * U5 - Coordinates.dmsToDegrees(0, 0, 39.05) * U6 + Coordinates.dmsToDegrees(0, 0, 7.12) * U7 + Coordinates.dmsToDegrees(0, 0, 27.87) * U8 + Coordinates.dmsToDegrees(0, 0, 5.79) * U9 + Coordinates.dmsToDegrees(0, 0, 2.45) * U10;
  };
  Coordinates.j2000toGalactic = function(J2000RA, J2000DEC) {
    var J2000pos = [ Math.cos(J2000RA / 180 * Math.PI) * Math.cos(J2000DEC / 180 * Math.PI), Math.sin(J2000RA / 180 * Math.PI) * Math.cos(J2000DEC / 180 * Math.PI), Math.sin(J2000DEC / 180 * Math.PI) ];
    if (Coordinates._rotationMatrix == null) {
      Coordinates._rotationMatrix = new Array(3);
      Coordinates._rotationMatrix[0] = [ -0.0548755604, -0.8734370902, -0.4838350155 ];
      Coordinates._rotationMatrix[1] = [ 0.4941094279, -0.44482963, 0.7469822445 ];
      Coordinates._rotationMatrix[2] = [ -0.867666149, -0.1980763734, 0.4559837762 ];
    }
    var Galacticpos = new Array(3);
    for (var i = 0; i < 3; i++) {
      Galacticpos[i] = J2000pos[0] * Coordinates._rotationMatrix[i][0] + J2000pos[1] * Coordinates._rotationMatrix[i][1] + J2000pos[2] * Coordinates._rotationMatrix[i][2];
    }
    var GalacticL2 = Math.atan2(Galacticpos[1], Galacticpos[0]);
    if (GalacticL2 < 0) {
      GalacticL2 = GalacticL2 + 2 * Math.PI;
    }
    if (GalacticL2 > 2 * Math.PI) {
      GalacticL2 = GalacticL2 - 2 * Math.PI;
    }
    var GalacticB2 = Math.atan2(Galacticpos[2], Math.sqrt(Galacticpos[0] * Galacticpos[0] + Galacticpos[1] * Galacticpos[1]));
    return [ GalacticL2 / Math.PI * 180, GalacticB2 / Math.PI * 180 ];
  };
  Coordinates.galacticTo3dDouble = function(l, b) {
    var result = Coordinates.galactictoJ2000(l, b);
    return Coordinates.raDecTo3dAu(result[0] / 15, result[1], 1);
  };
  Coordinates.galactictoJ2000 = function(GalacticL2, GalacticB2) {
    var Galacticpos = [ Math.cos(GalacticL2 / 180 * Math.PI) * Math.cos(GalacticB2 / 180 * Math.PI), Math.sin(GalacticL2 / 180 * Math.PI) * Math.cos(GalacticB2 / 180 * Math.PI), Math.sin(GalacticB2 / 180 * Math.PI) ];
    if (Coordinates._rotationMatrix == null) {
      Coordinates._rotationMatrix = new Array(3);
      Coordinates._rotationMatrix[0] = [ -0.0548755604, -0.8734370902, -0.4838350155 ];
      Coordinates._rotationMatrix[1] = [ 0.4941094279, -0.44482963, 0.7469822445 ];
      Coordinates._rotationMatrix[2] = [ -0.867666149, -0.1980763734, 0.4559837762 ];
    }
    var J2000pos = new Array(3);
    for (var i = 0; i < 3; i++) {
      J2000pos[i] = Galacticpos[0] * Coordinates._rotationMatrix[0][i] + Galacticpos[1] * Coordinates._rotationMatrix[1][i] + Galacticpos[2] * Coordinates._rotationMatrix[2][i];
    }
    var J2000RA = Math.atan2(J2000pos[1], J2000pos[0]);
    if (J2000RA < 0) {
      J2000RA = J2000RA + 2 * Math.PI;
    }
    if (J2000RA > 2 * Math.PI) {
      J2000RA = J2000RA - 2 * Math.PI;
    }
    var J2000DEC = Math.atan2(J2000pos[2], Math.sqrt(J2000pos[0] * J2000pos[0] + J2000pos[1] * J2000pos[1]));
    return [ J2000RA / Math.PI * 180, J2000DEC / Math.PI * 180 ];
  };
  var Coordinates$ = {
    distance: function(pointB) {
      var y = this.get_lat();
      var x = this.get_lng() * Math.cos(y * Coordinates.RC);
      var y1 = pointB.get_lat();
      var x1 = pointB.get_lng() * Math.cos(y1 * Coordinates.RC);
      return Math.sqrt((y - y1) * (y - y1) + (x - x1) * (x - x1));
    },
    distance3d: function(pointB) {
      var pnt1 = Coordinates.geoTo3dDouble(pointB.get_lat(), pointB.get_lng());
      var pnt2 = Coordinates.geoTo3dDouble(this.get_lat(), this.get_lng());
      var pntDiff = Vector3d.subtractVectors(pnt1, pnt2);
      return pntDiff.length() / Coordinates.RC;
    },
    angle: function(pointB) {
      var y = this.get_lat();
      var x = this.get_lng() * Math.cos(y * Coordinates.RC);
      var y1 = pointB.get_lat();
      var x1 = pointB.get_lng() * Math.cos(y1 * Coordinates.RC);
      return Math.atan2((y1 - y), (x1 - x));
    },
    get_RA: function() {
      return (((this._ascention / Math.PI) * 12) + 12) % 24;
    },
    set_RA: function(value) {
      this._ascention = (value / 12) * Math.PI;
      return value;
    },
    get_dec: function() {
      return this._declination / Coordinates.RC;
    },
    set_dec: function(value) {
      this._declination = value * Coordinates.RC;
      return value;
    },
    get_lat: function() {
      return this._declination / Coordinates.RC;
    },
    set_lat: function(value) {
      this._declination = value * Coordinates.RC;
      return value;
    },
    get_lng: function() {
      var lng = this._ascention / Coordinates.RC;
      if (lng <= 180) {
        return lng;
      }
      else {
        return (-180 + (180 - lng));
      }
    },
    set_lng: function(value) {
      this._ascention = ((value * Coordinates.RC) + (Math.PI * 2) % (Math.PI * 2));
      return value;
    },
    get_alt: function() {
      return this._declination / Coordinates.RC;
    },
    set_alt: function(value) {
      this._declination = value * Coordinates.RC;
      return value;
    },
    get_az: function() {
      return this._ascention / Coordinates.RC;
    },
    set_az: function(value) {
      this._ascention = value * Coordinates.RC;
      return value;
    },
    toString: function() {
      return ss.format('Lat: {0}, Lng: {1}', this.get_lat(), this.get_lng());
    }
  };


  // wwtlib.PositionTexture

  function PositionTexture() {
    this.tu = 0;
    this.tv = 0;
    this.position = new Vector3d();
  }
  PositionTexture.createPos = function(pos, u, v) {
    var temp = new PositionTexture();
    temp.tu = u * Tile.uvMultiple;
    temp.tv = v * Tile.uvMultiple;
    temp.position = pos;
    return temp;
  };
  PositionTexture.createPosRaw = function(pos, u, v) {
    var temp = new PositionTexture();
    temp.tu = u;
    temp.tv = v;
    temp.position = pos;
    return temp;
  };
  PositionTexture.createPosSize = function(pos, u, v, width, height) {
    var temp = new PositionTexture();
    temp.tu = u * width;
    temp.tv = v * height;
    temp.position = pos;
    return temp;
  };
  PositionTexture.create = function(xvalue, yvalue, zvalue, u, v) {
    var temp = new PositionTexture();
    temp.position = Vector3d.create(xvalue, yvalue, zvalue);
    temp.tu = u * Tile.uvMultiple;
    temp.tv = v * Tile.uvMultiple;
    return temp;
  };
  var PositionTexture$ = {
    copy: function() {
      var temp = new PositionTexture();
      temp.position = Vector3d.makeCopy(this.position);
      temp.tu = this.tu;
      temp.tv = this.tv;
      return temp;
    },
    toString: function() {
      return ss.format('{0}, {1}, {2}, {3}, {4}', this.position.x, this.position.y, this.position.z, this.tu, this.tv);
    }
  };


  // wwtlib.PositionColoredTextured

  function PositionColoredTextured() {
    this.tu = 0;
    this.tv = 0;
    this.color = new Color();
    this.position = new Vector3d();
  }
  PositionColoredTextured.createPos = function(pos, u, v) {
    var temp = new PositionColoredTextured();
    temp.tu = u * Tile.uvMultiple;
    temp.tv = v * Tile.uvMultiple;
    temp.position = pos;
    return temp;
  };
  PositionColoredTextured.createPosRaw = function(pos, u, v) {
    var temp = new PositionColoredTextured();
    temp.tu = u;
    temp.tv = v;
    temp.position = pos;
    return temp;
  };
  PositionColoredTextured.createPosSize = function(pos, u, v, width, height) {
    var temp = new PositionColoredTextured();
    temp.tu = u * width;
    temp.tv = v * height;
    temp.position = pos;
    return temp;
  };
  PositionColoredTextured.create = function(xvalue, yvalue, zvalue, u, v) {
    var temp = new PositionTexture();
    temp.position = Vector3d.create(xvalue, yvalue, zvalue);
    temp.tu = u * Tile.uvMultiple;
    temp.tv = v * Tile.uvMultiple;
    return temp;
  };
  var PositionColoredTextured$ = {
    copy: function() {
      var temp = new PositionTexture();
      temp.position = Vector3d.makeCopy(this.position);
      temp.tu = this.tu;
      temp.tv = this.tv;
      return temp;
    },
    toString: function() {
      return ss.format('{0}, {1}, {2}, {3}, {4}', this.position.x, this.position.y, this.position.z, this.tu, this.tv);
    }
  };


  // wwtlib.PositionColored

  function PositionColored(pos, color) {
    this.color = new Color();
    this.color = color._clone();
    this.position = pos.copy();
  }
  var PositionColored$ = {
    copy: function() {
      var temp = new PositionColored(this.position, this.color);
      return temp;
    },
    toString: function() {
      return ss.format('{0}, {1}, {2}, {3}', this.position.x, this.position.y, this.position.z, this.color.toString());
    }
  };


  // wwtlib.PositionNormalTexturedTangent

  function PositionNormalTexturedTangent(position, normal, texCoord, tangent) {
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.nx = 0;
    this.ny = 0;
    this.nz = 0;
    this.tu = 0;
    this.tv = 0;
    this.tanx = 0;
    this.tany = 0;
    this.tanz = 0;
    this.x = position.x;
    this.y = position.y;
    this.z = position.z;
    this.nx = normal.x;
    this.ny = normal.y;
    this.nz = normal.z;
    this.tu = texCoord.x;
    this.tv = texCoord.y;
    this.tanx = tangent.x;
    this.tany = tangent.y;
    this.tanz = tangent.z;
  }
  var PositionNormalTexturedTangent$ = {
    get_normal: function() {
      return Vector3d.create(this.nx, this.ny, this.nz);
    },
    set_normal: function(value) {
      this.nx = value.x;
      this.ny = value.y;
      this.nz = value.z;
      return value;
    },
    get_position: function() {
      return Vector3d.create(this.x, this.y, this.z);
    },
    set_position: function(value) {
      this.x = value.x;
      this.y = value.y;
      this.z = value.z;
      return value;
    },
    get_texCoord: function() {
      return Vector2d.create(this.tu, this.tv);
    },
    set_texCoord: function(value) {
      this.tu = value.x;
      this.tv = value.y;
      return value;
    },
    get_tangent: function() {
      return Vector3d.create(this.tanx, this.tany, this.tanz);
    },
    set_tangent: function(value) {
      this.tanx = value.x;
      this.tany = value.y;
      this.tanz = value.z;
      return value;
    },
    toString: function() {
      return ss.format('X={0}, Y={1}, Z={2}, Nx={3}, Ny={4}, Nz={5}, U={6}, V={7}, TanX={8}, TanY={9}, TanZ={10}', this.x, this.y, this.z, this.nx, this.ny, this.nz, this.tu, this.tv, this.tanx, this.tany, this.tanz);
    }
  };


  // wwtlib.Vector3d

  function Vector3d() {
    this.x = 0;
    this.y = 0;
    this.z = 0;
  }
  Vector3d.create = function(valueX, valueY, valueZ) {
    var temp = new Vector3d();
    temp.x = valueX;
    temp.y = valueY;
    temp.z = valueZ;
    return temp;
  };
  Vector3d.makeCopy = function(value) {
    var temp = new Vector3d();
    temp.x = value.x;
    temp.y = value.y;
    temp.z = value.z;
    return temp;
  };
  Vector3d.negate = function(vec) {
    return Vector3d.create(-vec.x, -vec.y, -vec.z);
  };
  Vector3d.midPoint = function(left, right) {
    var result = Vector3d.create((left.x + right.x) / 2, (left.y + right.y) / 2, (left.z + right.z) / 2);
    result.normalize();
    return result;
  };
  Vector3d.midPointByLength = function(left, right) {
    var result = Vector3d.create((left.x + right.x) / 2, (left.y + right.y) / 2, (left.z + right.z) / 2);
    result.normalize();
    result.multiply(left.length());
    return result;
  };
  Vector3d.get_empty = function() {
    return Vector3d.create(0, 0, 0);
  };
  Vector3d.addVectors = function(left, right) {
    return Vector3d.create(left.x + right.x, left.y + right.y, left.z + right.z);
  };
  Vector3d.cross = function(left, right) {
    return Vector3d.create(left.y * right.z - left.z * right.y, left.z * right.x - left.x * right.z, left.x * right.y - left.y * right.x);
  };
  Vector3d.dot = function(left, right) {
    return left.x * right.x + left.y * right.y + left.z * right.z;
  };
  Vector3d.getLength = function(source) {
    return Math.sqrt(source.x * source.x + source.y * source.y + source.z * source.z);
  };
  Vector3d.getLengthSq = function(source) {
    return source.x * source.x + source.y * source.y + source.z * source.z;
  };
  Vector3d.lerp = function(left, right, interpolater) {
    return Vector3d.create(left.x * (1 - interpolater) + right.x * interpolater, left.y * (1 - interpolater) + right.y * interpolater, left.z * (1 - interpolater) + right.z * interpolater);
  };
  Vector3d.midpoint = function(left, right) {
    var tmp = Vector3d.create(left.x * (0.5) + right.x * 0.5, left.y * (0.5) + right.y * 0.5, left.z * (0.5) + right.z * 0.5);
    tmp.normalize();
    return tmp;
  };
  Vector3d.slerp = function(left, right, interpolater) {
    var dot = Vector3d.dot(left, right);
    while (dot < 0.98) {
      var middle = Vector3d.midpoint(left, right);
      if (interpolater > 0.5) {
        left = middle;
        interpolater -= 0.5;
        interpolater *= 2;
      }
      else {
        right = middle;
        interpolater *= 2;
      }
      dot = Vector3d.dot(left, right);
    }
    var tmp = Vector3d.lerp(left, right, interpolater);
    tmp.normalize();
    return tmp;
  };
  Vector3d.multiplyScalar = function(source, f) {
    var result = source.copy();
    result.multiply(f);
    return result;
  };
  Vector3d.scale = function(source, scalingFactor) {
    var result = source;
    result.multiply(scalingFactor);
    return result;
  };
  Vector3d.subtractVectors = function(left, right) {
    var result = left.copy();
    result.subtract(right);
    return result;
  };
  Vector3d.parse = function(data) {
    var newVector = new Vector3d();
    var list = data.split(',');
    if (list.length === 3) {
      newVector.x = parseFloat(list[0]);
      newVector.y = parseFloat(list[1]);
      newVector.z = parseFloat(list[2]);
    }
    return newVector;
  };
  Vector3d._transformCoordinate = function(vector3d, mat) {
    return mat.transform(vector3d);
  };
  var Vector3d$ = {
    set: function(valueX, valueY, valueZ) {
      this.x = valueX;
      this.y = valueY;
      this.z = valueZ;
    },
    copy: function() {
      var temp = new Vector3d();
      temp.x = this.x;
      temp.y = this.y;
      temp.z = this.z;
      return temp;
    },
    round: function() {
      this.x = ss.truncate((this.x * 65536)) / 65536;
      this.y = ss.truncate((this.y * 65536)) / 65536;
      this.z = ss.truncate((this.z * 65536)) / 65536;
    },
    add: function(source) {
      this.x += source.x;
      this.y += source.y;
      this.z += source.z;
    },
    length: function() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    },
    lengthSq: function() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    },
    multiply: function(s) {
      this.x *= s;
      this.y *= s;
      this.z *= s;
    },
    normalize: function() {
      var length = this.length();
      if (!!length) {
        this.x /= length;
        this.y /= length;
        this.z /= length;
      }
    },
    rotateX: function(radians) {
      var zTemp;
      var yTemp;
      yTemp = this.y * Math.cos(radians) - this.z * Math.sin(radians);
      zTemp = this.y * Math.sin(radians) + this.z * Math.cos(radians);
      this.z = zTemp;
      this.y = yTemp;
    },
    rotateZ: function(radians) {
      var xTemp;
      var yTemp;
      xTemp = this.x * Math.cos(radians) - this.y * Math.sin(radians);
      yTemp = this.x * Math.sin(radians) + this.y * Math.cos(radians);
      this.y = yTemp;
      this.x = xTemp;
    },
    rotateY: function(radians) {
      var zTemp;
      var xTemp;
      zTemp = this.z * Math.cos(radians) - this.x * Math.sin(radians);
      xTemp = this.z * Math.sin(radians) + this.x * Math.cos(radians);
      this.x = xTemp;
      this.z = zTemp;
    },
    subtract: function(source) {
      this.x -= source.x;
      this.y -= source.y;
      this.z -= source.z;
    },
    toString: function() {
      return ss.format('{0}, {1}, {2}', this.x, this.y, this.z);
    },
    toSpherical: function() {
      var ascention;
      var declination;
      var radius = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
      var XZ = Math.sqrt(this.x * this.x + this.z * this.z);
      declination = Math.asin(this.y / radius);
      if (!XZ) {
        ascention = 0;
      }
      else if (0 <= this.x) {
        ascention = Math.asin(this.z / XZ);
      }
      else {
        ascention = Math.PI - Math.asin(this.z / XZ);
      }
      return Vector2d.create(((ascention + Math.PI) % (2 * Math.PI)), (declination + (Math.PI / 2)));
    },
    toRaDec: function() {
      var point = this.toSpherical();
      point.x = point.x / Math.PI * 12;
      point.y = (point.y / Math.PI * 180) - 90;
      return point;
    },
    distanceToLine: function(x1, x2) {
      var t1 = Vector3d.subtractVectors(x2, x1);
      var t2 = Vector3d.subtractVectors(x1, this);
      var t3 = Vector3d.cross(t1, t2);
      var d1 = t3.length();
      var t4 = Vector3d.subtractVectors(x2, x1);
      var d2 = t4.length();
      return d1 / d2;
    },
    _transformByMatrics: function(lookAtAdjust) {
      var temp = lookAtAdjust.transform(this);
      this.x = temp.x;
      this.y = temp.y;
      this.z = temp.z;
    }
  };


  // wwtlib.Vector2d

  function Vector2d() {
    this.x = 0;
    this.y = 0;
  }
  Vector2d.lerp = function(left, right, interpolater) {
    return Vector2d.create(left.x * (1 - interpolater) + right.x * interpolater, left.y * (1 - interpolater) + right.y * interpolater);
  };
  Vector2d.cartesianToSpherical2 = function(vector) {
    var rho = Math.sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);
    var longitude = Math.atan2(vector.z, vector.x);
    var latitude = Math.asin(vector.y / rho);
    return Vector2d.create(longitude / Math.PI * 180, latitude / Math.PI * 180);
  };
  Vector2d.average3d = function(left, right) {
    var pntLeft = Coordinates.geoTo3dDouble(left.y, left.x);
    var pntRight = Coordinates.geoTo3dDouble(right.y, right.x);
    var pntOut = Vector3d.addVectors(pntLeft, pntRight);
    pntOut.multiply(0.5);
    pntOut.normalize();
    return Vector2d.cartesianToSpherical2(pntOut);
  };
  Vector2d.create = function(x, y) {
    var temp = new Vector2d();
    temp.x = x;
    temp.y = y;
    return temp;
  };
  Vector2d.subtract = function(left, right) {
    return Vector2d.create(left.x - right.x, left.y - right.y);
  };
  var Vector2d$ = {
    distance3d: function(pointB) {
      var pnt1 = Coordinates.geoTo3dDouble(pointB.y, pointB.x);
      var pnt2 = Coordinates.geoTo3dDouble(this.y, this.x);
      var pntDiff = Vector3d.subtractVectors(pnt1, pnt2);
      return pntDiff.length() / Math.PI * 180;
    },
    get_length: function() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    },
    normalize: function() {
      var length = this.get_length();
      if (!!length) {
        this.x /= length;
        this.y /= length;
      }
    },
    extend: function(factor) {
      this.x = this.x * factor;
      this.y = this.y * factor;
    }
  };


  // wwtlib.Matrix3d

  function Matrix3d() {
    this._m11 = 0;
    this._m12 = 0;
    this._m13 = 0;
    this._m14 = 0;
    this._m21 = 0;
    this._m22 = 0;
    this._m23 = 0;
    this._m24 = 0;
    this._m31 = 0;
    this._m32 = 0;
    this._m33 = 0;
    this._m34 = 0;
    this._offsetX = 0;
    this._offsetY = 0;
    this._offsetZ = 0;
    this._m44 = 0;
    this._isNotKnownToBeIdentity = false;
  }
  Matrix3d.create = function(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, offsetX, offsetY, offsetZ, m44) {
    var temp = new Matrix3d();
    temp._m11 = m11;
    temp._m12 = m12;
    temp._m13 = m13;
    temp._m14 = m14;
    temp._m21 = m21;
    temp._m22 = m22;
    temp._m23 = m23;
    temp._m24 = m24;
    temp._m31 = m31;
    temp._m32 = m32;
    temp._m33 = m33;
    temp._m34 = m34;
    temp._offsetX = offsetX;
    temp._offsetY = offsetY;
    temp._offsetZ = offsetZ;
    temp._m44 = m44;
    temp._isNotKnownToBeIdentity = true;
    return temp;
  };
  Matrix3d.get_identity = function() {
    var temp = new Matrix3d();
    temp.set(Matrix3d._s_identity);
    return temp;
  };
  Matrix3d.multiplyMatrix = function(matrix1, matrix2) {
    if (matrix1.get__isDistinguishedIdentity()) {
      return matrix2;
    }
    if (matrix2.get__isDistinguishedIdentity()) {
      return matrix1;
    }
    return Matrix3d.create((((matrix1._m11 * matrix2._m11) + (matrix1._m12 * matrix2._m21)) + (matrix1._m13 * matrix2._m31)) + (matrix1._m14 * matrix2._offsetX), (((matrix1._m11 * matrix2._m12) + (matrix1._m12 * matrix2._m22)) + (matrix1._m13 * matrix2._m32)) + (matrix1._m14 * matrix2._offsetY), (((matrix1._m11 * matrix2._m13) + (matrix1._m12 * matrix2._m23)) + (matrix1._m13 * matrix2._m33)) + (matrix1._m14 * matrix2._offsetZ), (((matrix1._m11 * matrix2._m14) + (matrix1._m12 * matrix2._m24)) + (matrix1._m13 * matrix2._m34)) + (matrix1._m14 * matrix2._m44), (((matrix1._m21 * matrix2._m11) + (matrix1._m22 * matrix2._m21)) + (matrix1._m23 * matrix2._m31)) + (matrix1._m24 * matrix2._offsetX), (((matrix1._m21 * matrix2._m12) + (matrix1._m22 * matrix2._m22)) + (matrix1._m23 * matrix2._m32)) + (matrix1._m24 * matrix2._offsetY), (((matrix1._m21 * matrix2._m13) + (matrix1._m22 * matrix2._m23)) + (matrix1._m23 * matrix2._m33)) + (matrix1._m24 * matrix2._offsetZ), (((matrix1._m21 * matrix2._m14) + (matrix1._m22 * matrix2._m24)) + (matrix1._m23 * matrix2._m34)) + (matrix1._m24 * matrix2._m44), (((matrix1._m31 * matrix2._m11) + (matrix1._m32 * matrix2._m21)) + (matrix1._m33 * matrix2._m31)) + (matrix1._m34 * matrix2._offsetX), (((matrix1._m31 * matrix2._m12) + (matrix1._m32 * matrix2._m22)) + (matrix1._m33 * matrix2._m32)) + (matrix1._m34 * matrix2._offsetY), (((matrix1._m31 * matrix2._m13) + (matrix1._m32 * matrix2._m23)) + (matrix1._m33 * matrix2._m33)) + (matrix1._m34 * matrix2._offsetZ), (((matrix1._m31 * matrix2._m14) + (matrix1._m32 * matrix2._m24)) + (matrix1._m33 * matrix2._m34)) + (matrix1._m34 * matrix2._m44), (((matrix1._offsetX * matrix2._m11) + (matrix1._offsetY * matrix2._m21)) + (matrix1._offsetZ * matrix2._m31)) + (matrix1._m44 * matrix2._offsetX), (((matrix1._offsetX * matrix2._m12) + (matrix1._offsetY * matrix2._m22)) + (matrix1._offsetZ * matrix2._m32)) + (matrix1._m44 * matrix2._offsetY), (((matrix1._offsetX * matrix2._m13) + (matrix1._offsetY * matrix2._m23)) + (matrix1._offsetZ * matrix2._m33)) + (matrix1._m44 * matrix2._offsetZ), (((matrix1._offsetX * matrix2._m14) + (matrix1._offsetY * matrix2._m24)) + (matrix1._offsetZ * matrix2._m34)) + (matrix1._m44 * matrix2._m44));
  };
  Matrix3d.lookAtLH = function(cameraPosition, cameraTarget, cameraUpVector) {
    var zaxis = Vector3d.subtractVectors(cameraTarget, cameraPosition);
    zaxis.normalize();
    var xaxis = Vector3d.cross(cameraUpVector, zaxis);
    xaxis.normalize();
    var yaxis = Vector3d.cross(zaxis, xaxis);
    var mat = Matrix3d.create(xaxis.x, yaxis.x, zaxis.x, 0, xaxis.y, yaxis.y, zaxis.y, 0, xaxis.z, yaxis.z, zaxis.z, 0, -Vector3d.dot(xaxis, cameraPosition), -Vector3d.dot(yaxis, cameraPosition), -Vector3d.dot(zaxis, cameraPosition), 1);
    return mat;
  };
  Matrix3d._createIdentity = function() {
    var matrixd = Matrix3d.create(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
    matrixd.set__isDistinguishedIdentity(true);
    return matrixd;
  };
  Matrix3d.equals = function(matrix1, matrix2) {
    if (matrix1.get__isDistinguishedIdentity() || matrix2.get__isDistinguishedIdentity()) {
      return (matrix1.get_isIdentity() === matrix2.get_isIdentity());
    }
    if ((((matrix1.get_m11() === matrix2.get_m11() && matrix1.get_m12() === matrix2.get_m12()) && (matrix1.get_m13() === matrix2.get_m13() && matrix1.get_m14() === matrix2.get_m14())) && ((matrix1.get_m21() === matrix2.get_m21() && matrix1.get_m22() === matrix2.get_m22()) && (matrix1.get_m23() === matrix2.get_m23() && matrix1.get_m24() === matrix2.get_m24()))) && (((matrix1.get_m31() === matrix2.get_m31() && matrix1.get_m32() === matrix2.get_m32()) && (matrix1.get_m33() === matrix2.get_m33() && matrix1.get_m34() === matrix2.get_m34())) && ((matrix1.get_offsetX() === matrix2.get_offsetX() && matrix1.get_offsetY() === matrix2.get_offsetY()) && matrix1.get_offsetZ() === matrix2.get_offsetZ()))) {
      return matrix1.get_m44() === matrix2.get_m44();
    }
    return false;
  };
  Matrix3d.fromMatrix2d = function(mat) {
    var mat3d = Matrix3d._createIdentity();
    mat3d.set_m11(mat.m11);
    mat3d.set_m12(mat.m12);
    mat3d.set_m13(mat.m13);
    mat3d.set_m21(mat.m21);
    mat3d.set_m22(mat.m22);
    mat3d.set_m23(mat.m23);
    mat3d.set_m31(mat.m31);
    mat3d.set_m32(mat.m32);
    mat3d.set_m33(mat.m33);
    mat3d._isNotKnownToBeIdentity = true;
    return mat3d;
  };
  Matrix3d.rotationYawPitchRoll = function(heading, pitch, roll) {
    var matX = Matrix3d._rotationX(pitch);
    var matY = Matrix3d._rotationY(heading);
    var matZ = Matrix3d._rotationZ(roll);
    return Matrix3d.multiplyMatrix(Matrix3d.multiplyMatrix(matY, matX), matZ);
  };
  Matrix3d._rotationY = function(p) {
    var v = p;
    var matNew = Matrix3d.get_identity();
    matNew._m11 = Math.cos(v);
    matNew._m22 = 1;
    matNew._m31 = Math.sin(v);
    matNew._m13 = -Math.sin(v);
    matNew._m33 = Math.cos(v);
    matNew._isNotKnownToBeIdentity = true;
    return matNew;
  };
  Matrix3d._rotationX = function(p) {
    var v = p;
    var matNew = Matrix3d.get_identity();
    matNew._m11 = 1;
    matNew._m22 = Math.cos(v);
    matNew._m32 = -Math.sin(v);
    matNew._m23 = Math.sin(v);
    matNew._m33 = Math.cos(v);
    matNew._isNotKnownToBeIdentity = true;
    return matNew;
  };
  Matrix3d._rotationZ = function(p) {
    var v = p;
    var matNew = Matrix3d.get_identity();
    matNew._m11 = Math.cos(v);
    matNew._m21 = -Math.sin(v);
    matNew._m12 = Math.sin(v);
    matNew._m22 = Math.cos(v);
    matNew._m33 = 1;
    matNew._isNotKnownToBeIdentity = true;
    return matNew;
  };
  Matrix3d._scaling = function(x, y, z) {
    var matNew = Matrix3d.get_identity();
    matNew._m11 = x;
    matNew._m22 = y;
    matNew._m33 = z;
    matNew._isNotKnownToBeIdentity = true;
    return matNew;
  };
  Matrix3d._translationXYZ = function(x, y, z) {
    var matNew = Matrix3d.get_identity();
    matNew.set_offsetX(x);
    matNew.set_offsetY(y);
    matNew.set_offsetZ(z);
    matNew._isNotKnownToBeIdentity = true;
    return matNew;
  };
  Matrix3d.perspectiveFovLH = function(fieldOfViewY, aspectRatio, znearPlane, zfarPlane) {
    var h = 1 / Math.tan(fieldOfViewY / 2);
    var w = h / aspectRatio;
    return Matrix3d.create(w, 0, 0, 0, 0, h, 0, 0, 0, 0, zfarPlane / (zfarPlane - znearPlane), 1, 0, 0, -znearPlane * zfarPlane / (zfarPlane - znearPlane), 0);
  };
  Matrix3d.perspectiveOffCenterLH = function(left, right, bottom, top, znearPlane, zfarPlane) {
    return Matrix3d.create(2 * znearPlane / (right - left), 0, 0, 0, 0, 2 * znearPlane / (top - bottom), 0, 0, (left + right) / (left - right), (top + bottom) / (bottom - top), zfarPlane / (zfarPlane - znearPlane), 1, 0, 0, znearPlane * zfarPlane / (znearPlane - zfarPlane), 0);
  };
  Matrix3d.invertMatrix = function(matrix3d) {
    var mat = matrix3d.clone();
    mat.invert();
    return mat;
  };
  Matrix3d.translation = function(vector3d) {
    return Matrix3d._translationXYZ(vector3d.x, vector3d.y, vector3d.z);
  };
  Matrix3d.getMapMatrix = function(center, fieldWidth, fieldHeight, rotation) {
    var offsetX = 0;
    var offsetY = 0;
    offsetX = -((center.get_lng() + 180 - (fieldWidth / 2)) / 360);
    offsetY = -(1 - ((center.get_lat() + 90 + (fieldHeight / 2)) / 180));
    var mat = new Matrix2d();
    var scaleX = 0;
    var scaleY = 0;
    scaleX = 360 / fieldWidth;
    scaleY = 180 / fieldHeight;
    mat = Matrix2d.multiply(mat, Matrix2d.translation(offsetX, offsetY));
    mat = Matrix2d.multiply(mat, Matrix2d.scaling(scaleX, scaleY));
    if (!!rotation) {
      mat = Matrix2d.multiply(mat, Matrix2d.translation(-0.5, -0.5));
      mat = Matrix2d.multiply(mat, Matrix2d.rotation(rotation));
      mat = Matrix2d.multiply(mat, Matrix2d.translation(0.5, 0.5));
    }
    return Matrix3d.fromMatrix2d(mat);
  };
  var Matrix3d$ = {
    clone: function() {
      var tmp = new Matrix3d();
      tmp.set(this);
      return tmp;
    },
    setIdentity: function() {
      this.set(Matrix3d._s_identity);
    },
    set: function(mat) {
      this._m11 = mat._m11;
      this._m12 = mat._m12;
      this._m13 = mat._m13;
      this._m14 = mat._m14;
      this._m21 = mat._m21;
      this._m22 = mat._m22;
      this._m23 = mat._m23;
      this._m24 = mat._m24;
      this._m31 = mat._m31;
      this._m32 = mat._m32;
      this._m33 = mat._m33;
      this._m34 = mat._m34;
      this._offsetX = mat._offsetX;
      this._offsetY = mat._offsetY;
      this._offsetZ = mat._offsetZ;
      this._m44 = mat._m44;
      this._isNotKnownToBeIdentity = true;
    },
    floatArray: function() {
      var array = new Array(16);
      array[0] = this._m11;
      array[1] = this._m12;
      array[2] = this._m13;
      array[3] = this._m14;
      array[4] = this._m21;
      array[5] = this._m22;
      array[6] = this._m23;
      array[7] = this._m24;
      array[8] = this._m31;
      array[9] = this._m32;
      array[10] = this._m33;
      array[11] = this._m34;
      array[12] = this._offsetX;
      array[13] = this._offsetY;
      array[14] = this._offsetZ;
      array[15] = this._m44;
      return array;
    },
    get_isIdentity: function() {
      if (this.get__isDistinguishedIdentity()) {
        return true;
      }
      if (((((this._m11 === 1) && (!this._m12)) && ((!this._m13) && (!this._m14))) && (((!this._m21) && (this._m22 === 1)) && ((!this._m23) && (!this._m24)))) && ((((!this._m31) && (!this._m32)) && ((this._m33 === 1) && (!this._m34))) && (((!this._offsetX) && (!this._offsetY)) && ((!this._offsetZ) && (this._m44 === 1))))) {
        this.set__isDistinguishedIdentity(true);
        return true;
      }
      return false;
    },
    prepend: function(matrix) {
      this.set(Matrix3d.multiplyMatrix(matrix, this));
    },
    append: function(matrix) {
      this._multiply(matrix);
    },
    scale: function(scale) {
      if (this.get__isDistinguishedIdentity()) {
        this._setScaleMatrix(scale);
      }
      else {
        this._m11 *= scale.x;
        this._m12 *= scale.y;
        this._m13 *= scale.z;
        this._m21 *= scale.x;
        this._m22 *= scale.y;
        this._m23 *= scale.z;
        this._m31 *= scale.x;
        this._m32 *= scale.y;
        this._m33 *= scale.z;
        this._offsetX *= scale.x;
        this._offsetY *= scale.y;
        this._offsetZ *= scale.z;
      }
    },
    scalePrepend: function(scale) {
      if (this.get__isDistinguishedIdentity()) {
        this._setScaleMatrix(scale);
      }
      else {
        this._m11 *= scale.x;
        this._m12 *= scale.x;
        this._m13 *= scale.x;
        this._m14 *= scale.x;
        this._m21 *= scale.y;
        this._m22 *= scale.y;
        this._m23 *= scale.y;
        this._m24 *= scale.y;
        this._m31 *= scale.z;
        this._m32 *= scale.z;
        this._m33 *= scale.z;
        this._m34 *= scale.z;
      }
    },
    scaleAt: function(scale, center) {
      if (this.get__isDistinguishedIdentity()) {
        this._setScaleMatrixCenter(scale, center);
      }
      else {
        var num = this._m14 * center.x;
        this._m11 = num + (scale.x * (this._m11 - num));
        num = this._m14 * center.y;
        this._m12 = num + (scale.y * (this._m12 - num));
        num = this._m14 * center.z;
        this._m13 = num + (scale.z * (this._m13 - num));
        num = this._m24 * center.x;
        this._m21 = num + (scale.x * (this._m21 - num));
        num = this._m24 * center.y;
        this._m22 = num + (scale.y * (this._m22 - num));
        num = this._m24 * center.z;
        this._m23 = num + (scale.z * (this._m23 - num));
        num = this._m34 * center.x;
        this._m31 = num + (scale.x * (this._m31 - num));
        num = this._m34 * center.y;
        this._m32 = num + (scale.y * (this._m32 - num));
        num = this._m34 * center.z;
        this._m33 = num + (scale.z * (this._m33 - num));
        num = this._m44 * center.x;
        this._offsetX = num + (scale.x * (this._offsetX - num));
        num = this._m44 * center.y;
        this._offsetY = num + (scale.y * (this._offsetY - num));
        num = this._m44 * center.z;
        this._offsetZ = num + (scale.z * (this._offsetZ - num));
      }
    },
    scaleAtPrepend: function(scale, center) {
      if (this.get__isDistinguishedIdentity()) {
        this._setScaleMatrixCenter(scale, center);
      }
      else {
        var num3 = center.x - (center.x * scale.x);
        var num2 = center.y - (center.y * scale.y);
        var num = center.z - (center.z * scale.z);
        this._offsetX += ((this._m11 * num3) + (this._m21 * num2)) + (this._m31 * num);
        this._offsetY += ((this._m12 * num3) + (this._m22 * num2)) + (this._m32 * num);
        this._offsetZ += ((this._m13 * num3) + (this._m23 * num2)) + (this._m33 * num);
        this._m44 += ((this._m14 * num3) + (this._m24 * num2)) + (this._m34 * num);
        this._m11 *= scale.x;
        this._m12 *= scale.x;
        this._m13 *= scale.x;
        this._m14 *= scale.x;
        this._m21 *= scale.y;
        this._m22 *= scale.y;
        this._m23 *= scale.y;
        this._m24 *= scale.y;
        this._m31 *= scale.z;
        this._m32 *= scale.z;
        this._m33 *= scale.z;
        this._m34 *= scale.z;
      }
    },
    translate: function(offset) {
      if (this.get__isDistinguishedIdentity()) {
        this._setTranslationMatrix(offset);
      }
      else {
        this._m11 += this._m14 * offset.x;
        this._m12 += this._m14 * offset.y;
        this._m13 += this._m14 * offset.z;
        this._m21 += this._m24 * offset.x;
        this._m22 += this._m24 * offset.y;
        this._m23 += this._m24 * offset.z;
        this._m31 += this._m34 * offset.x;
        this._m32 += this._m34 * offset.y;
        this._m33 += this._m34 * offset.z;
        this._offsetX += this._m44 * offset.x;
        this._offsetY += this._m44 * offset.y;
        this._offsetZ += this._m44 * offset.z;
      }
    },
    translatePrepend: function(offset) {
      if (this.get__isDistinguishedIdentity()) {
        this._setTranslationMatrix(offset);
      }
      else {
        this._offsetX += ((this._m11 * offset.x) + (this._m21 * offset.y)) + (this._m31 * offset.z);
        this._offsetY += ((this._m12 * offset.x) + (this._m22 * offset.y)) + (this._m32 * offset.z);
        this._offsetZ += ((this._m13 * offset.x) + (this._m23 * offset.y)) + (this._m33 * offset.z);
        this._m44 += ((this._m14 * offset.x) + (this._m24 * offset.y)) + (this._m34 * offset.z);
      }
    },
    transform: function(point) {
      var temp = new Vector3d();
      if (!this.get__isDistinguishedIdentity()) {
        var x = point.x;
        var y = point.y;
        var z = point.z;
        temp.x = (((x * this._m11) + (y * this._m21)) + (z * this._m31)) + this._offsetX;
        temp.y = (((x * this._m12) + (y * this._m22)) + (z * this._m32)) + this._offsetY;
        temp.z = (((x * this._m13) + (y * this._m23)) + (z * this._m33)) + this._offsetZ;
        if (!this.get_isAffine()) {
          var num4 = (((x * this._m14) + (y * this._m24)) + (z * this._m34)) + this._m44;
          temp.x /= num4;
          temp.y /= num4;
          temp.z /= num4;
        }
      }
      return temp;
    },
    _transformTo: function(input, output) {
      output.x = (((input.x * this._m11) + (input.y * this._m21)) + (input.z * this._m31)) + this._offsetX;
      output.y = (((input.x * this._m12) + (input.y * this._m22)) + (input.z * this._m32)) + this._offsetY;
      output.z = (((input.x * this._m13) + (input.y * this._m23)) + (input.z * this._m33)) + this._offsetZ;
      var num4 = (((input.x * this._m14) + (input.y * this._m24)) + (input.z * this._m34)) + this._m44;
      output.x /= num4;
      output.y /= num4;
      output.z /= num4;
    },
    transformArray: function(points) {
      if (points != null) {
        for (var i = 0; i < points.length; i++) {
          this._multiplyPoint(points[i]);
        }
      }
    },
    projectArrayToScreen: function(input, output) {
      if (input != null && output != null) {
        var affine = this.get_isAffine();
        for (var i = 0; i < input.length; i++) {
          var x = input[i].x;
          var y = input[i].y;
          var z = input[i].z;
          if (affine) {
            output[i].x = ((((x * this._m11) + (y * this._m21)) + (z * this._m31)) + this._offsetX);
            output[i].y = ((((x * this._m12) + (y * this._m22)) + (z * this._m32)) + this._offsetY);
            output[i].z = (((x * this._m13) + (y * this._m23)) + (z * this._m33)) + this._offsetZ;
          }
          else {
            var num4 = (((x * this._m14) + (y * this._m24)) + (z * this._m34)) + this._m44;
            output[i].x = (((((x * this._m11) + (y * this._m21)) + (z * this._m31)) + this._offsetX) / num4);
            output[i].y = (((((x * this._m12) + (y * this._m22)) + (z * this._m32)) + this._offsetY) / num4);
            output[i].z = ((((x * this._m13) + (y * this._m23)) + (z * this._m33)) + this._offsetZ) / num4;
          }
        }
      }
    },
    projectToScreen: function(input, width, height) {
      var output = new Vector3d();
      var x = input.x;
      var y = input.y;
      var z = input.z;
      if (this.get_isAffine()) {
        output.x = (((((x * this._m11) + (y * this._m21)) + (z * this._m31)) + this._offsetX) + 0.5) * width;
        output.y = (-((((x * this._m12) + (y * this._m22)) + (z * this._m32)) + this._offsetY) + 0.5) * height;
        output.z = (((x * this._m13) + (y * this._m23)) + (z * this._m33)) + this._offsetZ;
      }
      else {
        var num4 = (((x * this._m14) + (y * this._m24)) + (z * this._m34)) + this._m44;
        output.x = ((((((x * this._m11) + (y * this._m21)) + (z * this._m31)) + this._offsetX) / num4) + 0.5) * width;
        output.y = (-(((((x * this._m12) + (y * this._m22)) + (z * this._m32)) + this._offsetY) / num4) + 0.5) * height;
        output.z = ((((x * this._m13) + (y * this._m23)) + (z * this._m33)) + this._offsetZ) / num4;
      }
      return output;
    },
    get_isAffine: function() {
      if (this.get__isDistinguishedIdentity()) {
        return true;
      }
      if (((!this._m14) && (!this._m24)) && (!this._m34)) {
        return (this._m44 === 1);
      }
      return false;
    },
    get_determinant: function() {
      if (this.get__isDistinguishedIdentity()) {
        return 1;
      }
      if (this.get_isAffine()) {
        return this._getNormalizedAffineDeterminant();
      }
      var num6 = (this._m13 * this._m24) - (this._m23 * this._m14);
      var num5 = (this._m13 * this._m34) - (this._m33 * this._m14);
      var num4 = (this._m13 * this._m44) - (this._offsetZ * this._m14);
      var num3 = (this._m23 * this._m34) - (this._m33 * this._m24);
      var num2 = (this._m23 * this._m44) - (this._offsetZ * this._m24);
      var num = (this._m33 * this._m44) - (this._offsetZ * this._m34);
      var num10 = ((this._m22 * num5) - (this._m32 * num6)) - (this._m12 * num3);
      var num9 = ((this._m12 * num2) - (this._m22 * num4)) + (this._offsetY * num6);
      var num8 = ((this._m32 * num4) - (this._offsetY * num5)) - (this._m12 * num);
      var num7 = ((this._m22 * num) - (this._m32 * num2)) + (this._offsetY * num3);
      return ((((this._offsetX * num10) + (this._m31 * num9)) + (this._m21 * num8)) + (this._m11 * num7));
    },
    get_hasInverse: function() {
      return !DoubleUtilities.isZero(this.get_determinant());
    },
    invert: function() {
      if (!this._invertCore()) {
        return;
      }
    },
    transpose: function() {
      var that = new Matrix3d();
      that.set(this);
      this._m12 = that._m21;
      this._m13 = that._m31;
      this._m14 = that._offsetX;
      this._m23 = that._m32;
      this._m24 = that._offsetY;
      this._m34 = that._offsetZ;
      this._m21 = that._m12;
      this._m31 = that._m13;
      this._offsetX = that._m14;
      this._m32 = that._m23;
      this._offsetY = that._m24;
      this._offsetZ = that._m34;
    },
    get_m11: function() {
      if (this.get__isDistinguishedIdentity()) {
        return 1;
      }
      return this._m11;
    },
    set_m11: function(value) {
      if (this.get__isDistinguishedIdentity()) {
        this.set(Matrix3d._s_identity);
        this.set__isDistinguishedIdentity(false);
      }
      this._m11 = value;
      return value;
    },
    get_m12: function() {
      return this._m12;
    },
    set_m12: function(value) {
      if (this.get__isDistinguishedIdentity()) {
        this.set(Matrix3d._s_identity);
        this.set__isDistinguishedIdentity(false);
      }
      this._m12 = value;
      return value;
    },
    get_m13: function() {
      return this._m13;
    },
    set_m13: function(value) {
      if (this.get__isDistinguishedIdentity()) {
        this.set(Matrix3d._s_identity);
        this.set__isDistinguishedIdentity(false);
      }
      this._m13 = value;
      return value;
    },
    get_m14: function() {
      return this._m14;
    },
    set_m14: function(value) {
      if (this.get__isDistinguishedIdentity()) {
        this.set(Matrix3d._s_identity);
        this.set__isDistinguishedIdentity(false);
      }
      this._m14 = value;
      return value;
    },
    get_m21: function() {
      return this._m21;
    },
    set_m21: function(value) {
      if (this.get__isDistinguishedIdentity()) {
        this.set(Matrix3d._s_identity);
        this.set__isDistinguishedIdentity(false);
      }
      this._m21 = value;
      return value;
    },
    get_m22: function() {
      if (this.get__isDistinguishedIdentity()) {
        return 1;
      }
      return this._m22;
    },
    set_m22: function(value) {
      if (this.get__isDistinguishedIdentity()) {
        this.set(Matrix3d._s_identity);
        this.set__isDistinguishedIdentity(false);
      }
      this._m22 = value;
      return value;
    },
    get_m23: function() {
      return this._m23;
    },
    set_m23: function(value) {
      if (this.get__isDistinguishedIdentity()) {
        this.set(Matrix3d._s_identity);
        this.set__isDistinguishedIdentity(false);
      }
      this._m23 = value;
      return value;
    },
    get_m24: function() {
      return this._m24;
    },
    set_m24: function(value) {
      if (this.get__isDistinguishedIdentity()) {
        this.set(Matrix3d._s_identity);
        this.set__isDistinguishedIdentity(false);
      }
      this._m24 = value;
      return value;
    },
    get_m31: function() {
      return this._m31;
    },
    set_m31: function(value) {
      if (this.get__isDistinguishedIdentity()) {
        this.set(Matrix3d._s_identity);
        this.set__isDistinguishedIdentity(false);
      }
      this._m31 = value;
      return value;
    },
    get_m32: function() {
      return this._m32;
    },
    set_m32: function(value) {
      if (this.get__isDistinguishedIdentity()) {
        this.set(Matrix3d._s_identity);
        this.set__isDistinguishedIdentity(false);
      }
      this._m32 = value;
      return value;
    },
    get_m33: function() {
      if (this.get__isDistinguishedIdentity()) {
        return 1;
      }
      return this._m33;
    },
    set_m33: function(value) {
      if (this.get__isDistinguishedIdentity()) {
        this.set(Matrix3d._s_identity);
        this.set__isDistinguishedIdentity(false);
      }
      this._m33 = value;
      return value;
    },
    get_m34: function() {
      return this._m34;
    },
    set_m34: function(value) {
      if (this.get__isDistinguishedIdentity()) {
        this.set(Matrix3d._s_identity);
        this.set__isDistinguishedIdentity(false);
      }
      this._m34 = value;
      return value;
    },
    get_m41: function() {
      return this.get_offsetX();
    },
    set_m41: function(value) {
      this.set_offsetX(value);
      return value;
    },
    get_m42: function() {
      return this.get_offsetY();
    },
    set_m42: function(value) {
      this.set_offsetY(value);
      return value;
    },
    get_m43: function() {
      return this.get_offsetZ();
    },
    set_m43: function(value) {
      this.set_offsetZ(value);
      return value;
    },
    get_offsetX: function() {
      return this._offsetX;
    },
    set_offsetX: function(value) {
      if (this.get__isDistinguishedIdentity()) {
        this.set(Matrix3d._s_identity);
        this.set__isDistinguishedIdentity(false);
      }
      this._offsetX = value;
      return value;
    },
    get_offsetY: function() {
      return this._offsetY;
    },
    set_offsetY: function(value) {
      if (this.get__isDistinguishedIdentity()) {
        this.set(Matrix3d._s_identity);
        this.set__isDistinguishedIdentity(false);
      }
      this._offsetY = value;
      return value;
    },
    get_offsetZ: function() {
      return this._offsetZ;
    },
    set_offsetZ: function(value) {
      if (this.get__isDistinguishedIdentity()) {
        this.set(Matrix3d._s_identity);
        this.set__isDistinguishedIdentity(false);
      }
      this._offsetZ = value;
      return value;
    },
    get_m44: function() {
      if (this.get__isDistinguishedIdentity()) {
        return 1;
      }
      return this._m44;
    },
    set_m44: function(value) {
      if (this.get__isDistinguishedIdentity()) {
        this.set(Matrix3d._s_identity);
        this.set__isDistinguishedIdentity(false);
      }
      this._m44 = value;
      return value;
    },
    _setScaleMatrix: function(scale) {
      this._m11 = scale.x;
      this._m22 = scale.y;
      this._m33 = scale.z;
      this._m44 = 1;
      this.set__isDistinguishedIdentity(false);
    },
    _setScaleMatrixCenter: function(scale, center) {
      this._m11 = scale.x;
      this._m22 = scale.y;
      this._m33 = scale.z;
      this._m44 = 1;
      this._offsetX = center.x - (center.x * scale.x);
      this._offsetY = center.y - (center.y * scale.y);
      this._offsetZ = center.z - (center.z * scale.z);
      this.set__isDistinguishedIdentity(false);
    },
    _setTranslationMatrix: function(offset) {
      this._m11 = this._m22 = this._m33 = this._m44 = 1;
      this._offsetX = offset.x;
      this._offsetY = offset.y;
      this._offsetZ = offset.z;
      this.set__isDistinguishedIdentity(false);
    },
    _multiplyPoint: function(point) {
      if (!this.get__isDistinguishedIdentity()) {
        var x = point.x;
        var y = point.y;
        var z = point.z;
        point.x = (((x * this._m11) + (y * this._m21)) + (z * this._m31)) + this._offsetX;
        point.y = (((x * this._m12) + (y * this._m22)) + (z * this._m32)) + this._offsetY;
        point.z = (((x * this._m13) + (y * this._m23)) + (z * this._m33)) + this._offsetZ;
        if (!this.get_isAffine()) {
          var num4 = (((x * this._m14) + (y * this._m24)) + (z * this._m34)) + this._m44;
          point.x /= num4;
          point.y /= num4;
          point.z /= num4;
        }
      }
    },
    multiplyVector: function(vector) {
      if (!this.get__isDistinguishedIdentity()) {
        var x = vector.x;
        var y = vector.y;
        var z = vector.z;
        vector.x = ((x * this._m11) + (y * this._m21)) + (z * this._m31);
        vector.y = ((x * this._m12) + (y * this._m22)) + (z * this._m32);
        vector.z = ((x * this._m13) + (y * this._m23)) + (z * this._m33);
      }
    },
    _getNormalizedAffineDeterminant: function() {
      var num3 = (this._m12 * this._m23) - (this._m22 * this._m13);
      var num2 = (this._m32 * this._m13) - (this._m12 * this._m33);
      var num = (this._m22 * this._m33) - (this._m32 * this._m23);
      return (((this._m31 * num3) + (this._m21 * num2)) + (this._m11 * num));
    },
    _normalizedAffineInvert: function() {
      var num11 = (this._m12 * this._m23) - (this._m22 * this._m13);
      var num10 = (this._m32 * this._m13) - (this._m12 * this._m33);
      var num9 = (this._m22 * this._m33) - (this._m32 * this._m23);
      var num8 = ((this._m31 * num11) + (this._m21 * num10)) + (this._m11 * num9);
      if (DoubleUtilities.isZero(num8)) {
        return false;
      }
      var num20 = (this._m21 * this._m13) - (this._m11 * this._m23);
      var num19 = (this._m11 * this._m33) - (this._m31 * this._m13);
      var num18 = (this._m31 * this._m23) - (this._m21 * this._m33);
      var num7 = (this._m11 * this._m22) - (this._m21 * this._m12);
      var num6 = (this._m11 * this._m32) - (this._m31 * this._m12);
      var num5 = (this._m11 * this._offsetY) - (this._offsetX * this._m12);
      var num4 = (this._m21 * this._m32) - (this._m31 * this._m22);
      var num3 = (this._m21 * this._offsetY) - (this._offsetX * this._m22);
      var num2 = (this._m31 * this._offsetY) - (this._offsetX * this._m32);
      var num17 = ((this._m23 * num5) - (this._offsetZ * num7)) - (this._m13 * num3);
      var num16 = ((this._m13 * num2) - (this._m33 * num5)) + (this._offsetZ * num6);
      var num15 = ((this._m33 * num3) - (this._offsetZ * num4)) - (this._m23 * num2);
      var num14 = num7;
      var num13 = -num6;
      var num12 = num4;
      var num = 1 / num8;
      this._m11 = num9 * num;
      this._m12 = num10 * num;
      this._m13 = num11 * num;
      this._m21 = num18 * num;
      this._m22 = num19 * num;
      this._m23 = num20 * num;
      this._m31 = num12 * num;
      this._m32 = num13 * num;
      this._m33 = num14 * num;
      this._offsetX = num15 * num;
      this._offsetY = num16 * num;
      this._offsetZ = num17 * num;
      return true;
    },
    _invertCore: function() {
      if (!this.get__isDistinguishedIdentity()) {
        if (this.get_isAffine()) {
          return this._normalizedAffineInvert();
        }
        var num7 = (this._m13 * this._m24) - (this._m23 * this._m14);
        var num6 = (this._m13 * this._m34) - (this._m33 * this._m14);
        var num5 = (this._m13 * this._m44) - (this._offsetZ * this._m14);
        var num4 = (this._m23 * this._m34) - (this._m33 * this._m24);
        var num3 = (this._m23 * this._m44) - (this._offsetZ * this._m24);
        var num2 = (this._m33 * this._m44) - (this._offsetZ * this._m34);
        var num12 = ((this._m22 * num6) - (this._m32 * num7)) - (this._m12 * num4);
        var num11 = ((this._m12 * num3) - (this._m22 * num5)) + (this._offsetY * num7);
        var num10 = ((this._m32 * num5) - (this._offsetY * num6)) - (this._m12 * num2);
        var num9 = ((this._m22 * num2) - (this._m32 * num3)) + (this._offsetY * num4);
        var num8 = (((this._offsetX * num12) + (this._m31 * num11)) + (this._m21 * num10)) + (this._m11 * num9);
        if (DoubleUtilities.isZero(num8)) {
          return false;
        }
        var num24 = ((this._m11 * num4) - (this._m21 * num6)) + (this._m31 * num7);
        var num23 = ((this._m21 * num5) - (this._offsetX * num7)) - (this._m11 * num3);
        var num22 = ((this._m11 * num2) - (this._m31 * num5)) + (this._offsetX * num6);
        var num21 = ((this._m31 * num3) - (this._offsetX * num4)) - (this._m21 * num2);
        num7 = (this._m11 * this._m22) - (this._m21 * this._m12);
        num6 = (this._m11 * this._m32) - (this._m31 * this._m12);
        num5 = (this._m11 * this._offsetY) - (this._offsetX * this._m12);
        num4 = (this._m21 * this._m32) - (this._m31 * this._m22);
        num3 = (this._m21 * this._offsetY) - (this._offsetX * this._m22);
        num2 = (this._m31 * this._offsetY) - (this._offsetX * this._m32);
        var num20 = ((this._m13 * num4) - (this._m23 * num6)) + (this._m33 * num7);
        var num19 = ((this._m23 * num5) - (this._offsetZ * num7)) - (this._m13 * num3);
        var num18 = ((this._m13 * num2) - (this._m33 * num5)) + (this._offsetZ * num6);
        var num17 = ((this._m33 * num3) - (this._offsetZ * num4)) - (this._m23 * num2);
        var num16 = ((this._m24 * num6) - (this._m34 * num7)) - (this._m14 * num4);
        var num15 = ((this._m14 * num3) - (this._m24 * num5)) + (this._m44 * num7);
        var num14 = ((this._m34 * num5) - (this._m44 * num6)) - (this._m14 * num2);
        var num13 = ((this._m24 * num2) - (this._m34 * num3)) + (this._m44 * num4);
        var num = 1 / num8;
        this._m11 = num9 * num;
        this._m12 = num10 * num;
        this._m13 = num11 * num;
        this._m14 = num12 * num;
        this._m21 = num21 * num;
        this._m22 = num22 * num;
        this._m23 = num23 * num;
        this._m24 = num24 * num;
        this._m31 = num13 * num;
        this._m32 = num14 * num;
        this._m33 = num15 * num;
        this._m34 = num16 * num;
        this._offsetX = num17 * num;
        this._offsetY = num18 * num;
        this._offsetZ = num19 * num;
        this._m44 = num20 * num;
      }
      return true;
    },
    get__isDistinguishedIdentity: function() {
      return !this._isNotKnownToBeIdentity;
    },
    set__isDistinguishedIdentity: function(value) {
      this._isNotKnownToBeIdentity = !value;
      return value;
    },
    _multiply: function(mat) {
      this.set(Matrix3d.multiplyMatrix(this, mat));
    }
  };


  // wwtlib.Matrix2d

  function Matrix2d() {
    this.m11 = 1;
    this.m12 = 0;
    this.m13 = 0;
    this.m21 = 0;
    this.m22 = 1;
    this.m23 = 0;
    this.m31 = 0;
    this.m32 = 0;
    this.m33 = 1;
  }
  Matrix2d.create = function(m11, m12, m13, m21, m22, m23, m31, m32, m33) {
    var mat = new Matrix2d();
    mat.m11 = m11;
    mat.m12 = m12;
    mat.m13 = m13;
    mat.m21 = m21;
    mat.m22 = m22;
    mat.m23 = m23;
    mat.m31 = m31;
    mat.m32 = m32;
    mat.m33 = m33;
    return mat;
  };
  Matrix2d.rotation = function(angle) {
    var mat = new Matrix2d();
    mat.m11 = Math.cos(angle);
    mat.m21 = -Math.sin(angle);
    mat.m12 = Math.sin(angle);
    mat.m22 = Math.cos(angle);
    return mat;
  };
  Matrix2d.translation = function(x, y) {
    var mat = new Matrix2d();
    mat.m31 = x;
    mat.m32 = y;
    return mat;
  };
  Matrix2d.scaling = function(x, y) {
    var mat = new Matrix2d();
    mat.m11 = x;
    mat.m22 = y;
    return mat;
  };
  Matrix2d.multiply = function(matrix1, matrix2) {
    return Matrix2d.create((((matrix1.m11 * matrix2.m11) + (matrix1.m12 * matrix2.m21)) + (matrix1.m13 * matrix2.m31)), (((matrix1.m11 * matrix2.m12) + (matrix1.m12 * matrix2.m22)) + (matrix1.m13 * matrix2.m32)), (((matrix1.m11 * matrix2.m13) + (matrix1.m12 * matrix2.m23)) + (matrix1.m13 * matrix2.m33)), (((matrix1.m21 * matrix2.m11) + (matrix1.m22 * matrix2.m21)) + (matrix1.m23 * matrix2.m31)), (((matrix1.m21 * matrix2.m12) + (matrix1.m22 * matrix2.m22)) + (matrix1.m23 * matrix2.m32)), (((matrix1.m21 * matrix2.m13) + (matrix1.m22 * matrix2.m23)) + (matrix1.m23 * matrix2.m33)), (((matrix1.m31 * matrix2.m11) + (matrix1.m32 * matrix2.m21)) + (matrix1.m33 * matrix2.m31)), (((matrix1.m31 * matrix2.m12) + (matrix1.m32 * matrix2.m22)) + (matrix1.m33 * matrix2.m32)), (((matrix1.m31 * matrix2.m13) + (matrix1.m32 * matrix2.m23)) + (matrix1.m33 * matrix2.m33)));
  };
  Matrix2d.rotateAt = function(angle, pnt) {
    var matT0 = Matrix2d.translation(-pnt.x, -pnt.y);
    var matR = Matrix2d.rotation(angle);
    var matT1 = Matrix2d.translation(pnt.x, pnt.y);
    return Matrix2d.multiply(Matrix2d.multiply(matT0, matR), matT1);
  };
  var Matrix2d$ = {
    _transformPoints: function(points) {
      var $enum1 = ss.enumerate(points);
      while ($enum1.moveNext()) {
        var pnt = $enum1.current;
        this.multiplyPoint(pnt);
      }
    },
    multiplyPoint: function(point) {
      var x = point.x;
      var y = point.y;
      point.x = (((x * this.m11) + (y * this.m21)) + this.m31);
      point.y = (((x * this.m12) + (y * this.m22)) + this.m32);
    }
  };


  // wwtlib.DoubleUtilities

  function DoubleUtilities() {
  }
  DoubleUtilities.isZero = function(value) {
    return (Math.abs(value) < 2.22044604925031E-50);
  };
  DoubleUtilities.isOne = function(value) {
    return (Math.abs(value - 1) < 2.22044604925031E-50);
  };
  DoubleUtilities.radiansToDegrees = function(radians) {
    return radians * 180 / Math.PI;
  };
  DoubleUtilities.degreesToRadians = function(degrees) {
    return degrees * Math.PI / 180;
  };
  DoubleUtilities.clamp = function(x, min, max) {
    return Math.max(min, Math.min(x, max));
  };


  // wwtlib.PlaneD

  function PlaneD(valuePointA, valuePointB, valuePointC, valuePointD) {
    this.a = 0;
    this.b = 0;
    this.c = 0;
    this.d = 0;
    this.a = valuePointA;
    this.b = valuePointB;
    this.c = valuePointC;
    this.d = valuePointD;
  }
  var PlaneD$ = {
    normalize: function() {
      var length = Math.sqrt(this.a * this.a + this.b * this.b + this.c * this.c);
      this.a /= length;
      this.b /= length;
      this.c /= length;
      this.d /= length;
    },
    dot: function(v) {
      return this.b * v.y + this.c * v.z + this.d * v.w + this.a * v.x;
    }
  };


  // wwtlib.Vector4d

  function Vector4d(valueX, valueY, valueZ, valueW) {
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.w = 0;
    this.x = valueX;
    this.y = valueY;
    this.z = valueZ;
    this.w = valueW;
  }
  var Vector4d$ = {

  };


  // wwtlib.PositionNormalTexturedX2

  function PositionNormalTexturedX2() {
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.nx = 0;
    this.ny = 0;
    this.nz = 0;
    this.tu = 0;
    this.tv = 0;
    this.tu1 = 0;
    this.tv1 = 0;
  }
  PositionNormalTexturedX2.create2UV = function(pos, nor, u, v, u1, v1) {
    var temp = new PositionNormalTexturedX2();
    temp.x = pos.x;
    temp.y = pos.y;
    temp.z = pos.z;
    temp.nx = nor.x;
    temp.ny = nor.y;
    temp.nz = nor.z;
    temp.tu = u;
    temp.tv = v;
    temp.tu1 = u1;
    temp.tv1 = v1;
    return temp;
  };
  PositionNormalTexturedX2.create = function(pos, nor, u, v) {
    var temp = new PositionNormalTexturedX2();
    temp.x = pos.x;
    temp.y = pos.y;
    temp.z = pos.z;
    temp.nx = nor.x;
    temp.ny = nor.y;
    temp.nz = nor.z;
    temp.tu = u;
    temp.tv = v;
    var result = Coordinates.cartesianToSpherical2(nor);
    temp.tu1 = ((result.get_lng() + 180) / 360);
    temp.tv1 = (1 - ((result.get_lat() + 90) / 180));
    return temp;
  };
  PositionNormalTexturedX2.createLong2UV = function(xvalue, yvalue, zvalue, nxvalue, nyvalue, nzvalue, u, v, u1, v1) {
    var temp = new PositionNormalTexturedX2();
    temp.x = xvalue;
    temp.y = yvalue;
    temp.z = zvalue;
    temp.nx = nxvalue;
    temp.ny = nyvalue;
    temp.nz = nzvalue;
    temp.tu = u;
    temp.tv = v;
    temp.tu1 = u1;
    temp.tv1 = v1;
    return temp;
  };
  PositionNormalTexturedX2.get_strideSize = function() {
    return 40;
  };
  var PositionNormalTexturedX2$ = {
    get_lat: function() {
      return (1 - this.tv1) * 180 - 90;
    },
    set_lat: function(value) {
      this.tv1 = (1 - ((value + 90) / 180));
      return value;
    },
    get_lng: function() {
      return this.tu1 * 360 - 180;
    },
    set_lng: function(value) {
      this.tu1 = ((value + 180) / 360);
      return value;
    },
    createLong: function(xvalue, yvalue, zvalue, nxvalue, nyvalue, nzvalue, u, v) {
      var temp = new PositionNormalTexturedX2();
      temp.x = xvalue;
      temp.y = yvalue;
      temp.z = zvalue;
      temp.nx = nxvalue;
      temp.ny = nyvalue;
      temp.nz = nzvalue;
      temp.tu = u;
      temp.tv = v;
      var result = Coordinates.cartesianToSpherical2(Vector3d.create(this.nx, this.ny, this.nz));
      temp.tu1 = ((result.get_lng() + 180) / 360);
      temp.tv1 = (1 - ((result.get_lat() + 90) / 180));
      return temp;
    },
    get_normal: function() {
      return Vector3d.create(this.nx, this.ny, this.nz);
    },
    set_normal: function(value) {
      this.nx = value.x;
      this.ny = value.y;
      this.nz = value.z;
      return value;
    },
    get_position: function() {
      return Vector3d.create(this.x, this.y, this.y);
    },
    set_position: function(value) {
      this.x = value.x;
      this.y = value.y;
      this.z = value.z;
      return value;
    },
    toString: function() {
      return ss.format('X={0}, Y={1}, Z={2}, Nx={3}, Ny={4}, Nz={5}, U={6}, V={7}, U1={8}, U2={9}', this.x, this.y, this.z, this.nx, this.ny, this.nz, this.tu, this.tv, this.tu1, this.tv1);
    }
  };


  // wwtlib.PositionNormalTextured

  function PositionNormalTextured() {
    this.x = 0;
    this.y = 0;
    this.z = 0;
    this.nx = 0;
    this.ny = 0;
    this.nz = 0;
    this.tu = 0;
    this.tv = 0;
  }
  PositionNormalTextured.createShort = function(pos, nor, u, v) {
    var temp = new PositionNormalTextured();
    temp.x = pos.x;
    temp.y = pos.y;
    temp.z = pos.z;
    temp.nx = nor.x;
    temp.ny = nor.y;
    temp.nz = nor.z;
    temp.tu = u;
    temp.tv = v;
    return temp;
  };
  PositionNormalTextured._create = function(x, y, z, nx, ny, nz, tu, tv) {
    var temp = new PositionNormalTextured();
    temp.x = x;
    temp.y = y;
    temp.z = z;
    temp.nx = nx;
    temp.ny = ny;
    temp.nz = nz;
    temp.tu = tu;
    temp.tv = tv;
    return temp;
  };
  PositionNormalTextured.createUV = function(pos, nor, uv) {
    var temp = new PositionNormalTextured();
    temp.x = pos.x;
    temp.y = pos.y;
    temp.z = pos.z;
    temp.nx = nor.x;
    temp.ny = nor.y;
    temp.nz = nor.z;
    temp.tu = uv.x;
    temp.tv = uv.y;
    return temp;
  };
  var PositionNormalTextured$ = {
    createLong: function(xvalue, yvalue, zvalue, nxvalue, nyvalue, nzvalue, u, v) {
      var temp = new PositionNormalTexturedX2();
      temp.x = xvalue;
      temp.y = yvalue;
      temp.z = zvalue;
      temp.nx = nxvalue;
      temp.ny = nyvalue;
      temp.nz = nzvalue;
      temp.tu = u;
      temp.tv = v;
      return temp;
    },
    get_normal: function() {
      return Vector3d.create(this.nx, this.ny, this.nz);
    },
    set_normal: function(value) {
      this.nx = value.x;
      this.ny = value.y;
      this.nz = value.z;
      return value;
    },
    get_position: function() {
      return Vector3d.create(this.x, this.y, this.z);
    },
    set_position: function(value) {
      this.x = value.x;
      this.y = value.y;
      this.z = value.z;
      return value;
    },
    toString: function() {
      return ss.format('X={0}, Y={1}, Z={2}, Nx={3}, Ny={4}, Nz={5}, U={6}, V={7}, U1={8}, U2={9}', this.x, this.y, this.z, this.nx, this.ny, this.nz, this.tu, this.tv);
    }
  };


  // wwtlib.SphereHull

  function SphereHull() {
    this.radius = 0;
  }
  SphereHull._create = function(Center, Radius) {
    var temp = new SphereHull();
    temp.center = Center;
    temp.radius = Radius;
    return temp;
  };
  var SphereHull$ = {

  };


  // wwtlib.ConvexHull

  function ConvexHull() {
  }
  ConvexHull.findEnclosingSphereFast = function(points) {
    var result = new SphereHull();
    var count = points.length;
    var center = Vector3d.zero;
    for (var i = 0; i < count; ++i) {
      center.add(points[i]);
    }
    center.multiply(1 / count);
    var radius = 0;
    for (var i = 0; i < count; ++i) {
      var distance = Vector3d.getLengthSq(Vector3d.subtractVectors(points[i], center));
      if (distance > radius) {
        radius = distance;
      }
    }
    radius = Math.sqrt(radius);
    result.center = center;
    result.radius = radius;
    return result;
  };
  ConvexHull.findEnclosingSphere = function(list) {
    var Center = new Vector3d();
    var Radius = 0;
    var count = list.length;
    var i;
    var dx;
    var dy;
    var dz;
    var rad_sq;
    var xspan;
    var yspan;
    var zspan;
    var maxspan;
    var old_to_p;
    var old_to_p_sq;
    var old_to_new;
    var xmin = new Vector3d();
    var xmax = new Vector3d();
    var ymin = new Vector3d();
    var ymax = new Vector3d();
    var zmin = new Vector3d();
    var zmax = new Vector3d();
    var dia1 = new Vector3d();
    var dia2 = new Vector3d();
    xmin.x = ymin.y = zmin.z = 100000000;
    xmax.x = ymax.y = zmax.z = -1000000000;
    for (i = 0; i < count; i++) {
      var current = list[i];
      if (current.x < xmin.x) {
        xmin = current;
      }
      if (current.x > xmax.x) {
        xmax = current;
      }
      if (current.y < ymin.y) {
        ymin = current;
      }
      if (current.y > ymax.y) {
        ymax = current;
      }
      if (current.z < zmin.z) {
        zmin = current;
      }
      if (current.z > zmax.z) {
        zmax = current;
      }
    }
    dx = xmax.x - xmin.x;
    dy = xmax.y - xmin.y;
    dz = xmax.z - xmin.z;
    xspan = dx * dx + dy * dy + dz * dz;
    dx = ymax.x - ymin.x;
    dy = ymax.y - ymin.y;
    dz = ymax.z - ymin.z;
    yspan = dx * dx + dy * dy + dz * dz;
    dx = zmax.x - zmin.x;
    dy = zmax.y - zmin.y;
    dz = zmax.z - zmin.z;
    zspan = dx * dx + dy * dy + dz * dz;
    dia1 = xmin;
    dia2 = xmax;
    maxspan = xspan;
    if (yspan > maxspan) {
      maxspan = yspan;
      dia1 = ymin;
      dia2 = ymax;
    }
    if (zspan > maxspan) {
      dia1 = zmin;
      dia2 = zmax;
    }
    Center.x = (dia1.x + dia2.x) / 2;
    Center.y = (dia1.y + dia2.y) / 2;
    Center.z = (dia1.z + dia2.z) / 2;
    dx = dia2.x - Center.x;
    dy = dia2.y - Center.y;
    dz = dia2.z - Center.z;
    rad_sq = dx * dx + dy * dy + dz * dz;
    Radius = Math.sqrt(rad_sq);
    for (i = 0; i < count; i++) {
      var current = list[i];
      dx = current.x - Center.x;
      dy = current.y - Center.y;
      dz = current.z - Center.z;
      old_to_p_sq = dx * dx + dy * dy + dz * dz;
      if (old_to_p_sq > rad_sq) {
        old_to_p = Math.sqrt(old_to_p_sq);
        Radius = (Radius + old_to_p) / 2;
        rad_sq = Radius * Radius;
        old_to_new = old_to_p - Radius;
        Center.x = (Radius * Center.x + old_to_new * current.x) / old_to_p;
        Center.y = (Radius * Center.y + old_to_new * current.y) / old_to_p;
        Center.z = (Radius * Center.z + old_to_new * current.z) / old_to_p;
      }
    }
    return SphereHull._create(Center, Radius);
  };
  var ConvexHull$ = {

  };


  // wwtlib.Folder

  function Folder() {
    this.parent = null;
    this.isProxy = false;
    this._versionDependent = false;
    this._readOnly = true;
    this._dirty = false;
    this._thumbnail = null;
    this._proxyFolder = null;
    this._lastUpdate = new Date();
    this._childList = [];
    this._itemsField = [];
    this._imagesets = [];
    this._tours = [];
    this._folders = [];
    this._places = [];
    this._groupField = 0;
    this._refreshTypeField = 0;
    this._refreshTypeFieldSpecified = false;
    this._browseableField = true;
    this._browseableFieldSpecified = false;
    this._searchableField = false;
    this._typeField = 0;
    this._communityIdField = 0;
    this._componentIdField = 0;
    this._permissionField = 0;
  }
  var Folder$ = {
    toString: function() {
      return this._nameField;
    },
    get_versionDependent: function() {
      return this._versionDependent;
    },
    set_versionDependent: function(value) {
      this._versionDependent = value;
      var $enum1 = ss.enumerate(this._folders);
      while ($enum1.moveNext()) {
        var folder = $enum1.current;
        folder.set_versionDependent(this._versionDependent);
      }
      return value;
    },
    get_readOnly: function() {
      return this._readOnly;
    },
    set_readOnly: function(value) {
      this._readOnly = value;
      return value;
    },
    get_dirty: function() {
      return this._dirty;
    },
    set_dirty: function(value) {
      this._dirty = value;
      return value;
    },
    loadFromUrl: function(url, complete) {
      this._onComplete = complete;
      this._webFile = new WebFile(Util.getProxiedUrl(url));
      this._webFile.onStateChange = ss.bind('_loadData', this);
      this._webFile.send();
    },
    _loadData: function() {
      if (this._webFile.get_state() === 2) {
        alert(this._webFile.get_message());
      }
      else if (this._webFile.get_state() === 1) {
        var node = Util.selectSingleNode(this._webFile.getXml(), 'Folder');
        if (node == null) {
          var doc = this._webFile.getXml();
          if (doc != null) {
            node = Util.selectSingleNode(doc, 'Folder');
          }
        }
        if (node != null) {
          this._clearChildren();
          this._parseXML(node);
        }
        if (this._onComplete != null) {
          this._onComplete();
        }
      }
    },
    _clearChildren: function() {
      this._folders.length = 0;
      this._tours.length = 0;
      this._places.length = 0;
      this.get_imagesets().length = 0;
    },
    _parseXML: function(node) {
      if (node.attributes.getNamedItem('Name') != null) {
        this._nameField = node.attributes.getNamedItem('Name').nodeValue;
      }
      else {
        this._nameField = '';
      }
      if (node.attributes.getNamedItem('Url') != null) {
        this._urlField = node.attributes.getNamedItem('Url').nodeValue;
      }
      if (node.attributes.getNamedItem('Thumbnail') != null) {
        this._thumbnailUrlField = node.attributes.getNamedItem('Thumbnail').nodeValue;
      }
      var $enum1 = ss.enumerate(node.childNodes);
      while ($enum1.moveNext()) {
        var child = $enum1.current;
        switch (child.nodeName) {
          case 'Folder':
            var temp = new Folder();
            temp.parent = this;
            temp._parseXML(child);
            this._folders.push(temp);
            break;
          case 'Place':
            this._places.push(Place._fromXml(child));
            break;
          case 'ImageSet':
            this.get_imagesets().push(Imageset.fromXMLNode(child));
            break;
          case 'Tour':
            this.get_tours().push(Tour._fromXml(child));
            break;
        }
      }
    },
    addChildFolder: function(child) {
      this._folders.push(child);
      this._dirty = true;
    },
    removeChildFolder: function(child) {
      ss.remove(this._folders, child);
      this._dirty = true;
    },
    addChildPlace: function(child) {
      this._places.push(child);
      this._dirty = true;
    },
    removeChildPlace: function(child) {
      ss.remove(this._places, child);
      this._dirty = true;
    },
    get_thumbnail: function() {
      return this._thumbnail;
    },
    set_thumbnail: function(value) {
      this._thumbnail = value;
      return value;
    },
    get_bounds: function() {
      return this._bounds;
    },
    set_bounds: function(value) {
      this._bounds = value;
      return value;
    },
    get_isImage: function() {
      return false;
    },
    get_isTour: function() {
      return false;
    },
    get_isFolder: function() {
      return true;
    },
    get_isCloudCommunityItem: function() {
      return !!this._communityIdField || this._permissionField > 0;
    },
    refresh: function() {
      if (this._proxyFolder == null) {
        this._proxyFolder = new Folder();
        this._proxyFolder.isProxy = true;
        this._proxyFolder.parent = this.parent;
      }
      this._proxyFolder.loadFromUrl(this._urlField, this._childReadyCallback);
      this._childReadyCallback = null;
    },
    childLoadCallback: function(callback) {
      this._childReadyCallback = callback;
      var temp = this.get_children();
      if (this._proxyFolder == null) {
        callback();
      }
    },
    get_children: function() {
      if (ss.emptyString(this._urlField)) {
        this._childList.length = 0;
        if (this.parent != null) {
          var folderUp = new FolderUp();
          folderUp.parent = this.parent;
          this._childList.push(folderUp);
        }
        if (this.get_folders() != null) {
          var $enum1 = ss.enumerate(this.get_folders());
          while ($enum1.moveNext()) {
            var folder = $enum1.current;
            this._childList.push(folder);
          }
        }
        if (this.get_imagesets() != null) {
          var $enum2 = ss.enumerate(this.get_imagesets());
          while ($enum2.moveNext()) {
            var imset = $enum2.current;
            this._childList.push(imset);
          }
        }
        if (this.get_places() != null) {
          var $enum3 = ss.enumerate(this.get_places());
          while ($enum3.moveNext()) {
            var place = $enum3.current;
            this._childList.push(place);
          }
        }
        if (this.get_tours() != null) {
          var $enum4 = ss.enumerate(this.get_tours());
          while ($enum4.moveNext()) {
            var tour = $enum4.current;
            this._childList.push(tour);
          }
        }
        return this._childList;
      }
      else {
        var ts = (this._lastUpdate - ss.now()) / 1000;
        if (true || this.get_refreshType() === 1 || this._proxyFolder == null || (!this.get_refreshType() && (parseInt(this._refreshIntervalField) < ts))) {
          this.refresh();
        }
        if (this._proxyFolder != null) {
          return this._proxyFolder.get_children();
        }
        else {
          return null;
        }
      }
    },
    get_msrCommunityId: function() {
      return this._communityIdField;
    },
    set_msrCommunityId: function(value) {
      this._communityIdField = value;
      return value;
    },
    get_msrComponentId: function() {
      return this._componentIdField;
    },
    set_msrComponentId: function(value) {
      this._componentIdField = value;
      return value;
    },
    get_permission: function() {
      return this._permissionField;
    },
    set_permission: function(value) {
      this._permissionField = value;
      return value;
    },
    get_folders: function() {
      return this._folders;
    },
    set_folders: function(value) {
      this._folders = value;
      return value;
    },
    get_places: function() {
      return this._places;
    },
    set_places: function(value) {
      this._places = value;
      return value;
    },
    get_imagesets: function() {
      return this._imagesets;
    },
    set_imagesets: function(value) {
      this._imagesets = value;
      return value;
    },
    get_tours: function() {
      return this._tours;
    },
    set_tours: function(value) {
      this._tours = value;
      return value;
    },
    get_name: function() {
      if (this._nameField == null) {
        return '';
      }
      else {
        return this._nameField;
      }
    },
    set_name: function(value) {
      this._nameField = value;
      return value;
    },
    get_group: function() {
      return this._groupField;
    },
    set_group: function(value) {
      this._groupField = value;
      return value;
    },
    get_url: function() {
      return this._urlField;
    },
    set_url: function(value) {
      this._urlField = value;
      return value;
    },
    get_thumbnailUrl: function() {
      if (ss.emptyString(this._thumbnailUrlField)) {
        return '//worldwidetelescope.org/wwtweb/thumbnail.aspx?name=folder';
      }
      return this._thumbnailUrlField;
    },
    set_thumbnailUrl: function(value) {
      this._thumbnailUrlField = value;
      return value;
    },
    get_refreshType: function() {
      return this._refreshTypeField;
    },
    set_refreshType: function(value) {
      this._refreshTypeField = value;
      this.set_refreshTypeSpecified(true);
      return value;
    },
    get_refreshTypeSpecified: function() {
      return this._refreshTypeFieldSpecified;
    },
    set_refreshTypeSpecified: function(value) {
      this._refreshTypeFieldSpecified = value;
      return value;
    },
    get_refreshInterval: function() {
      return this._refreshIntervalField;
    },
    set_refreshInterval: function(value) {
      this._refreshIntervalField = value;
      return value;
    },
    get_browseable: function() {
      return this._browseableField;
    },
    set_browseable: function(value) {
      this._browseableField = value;
      this._browseableFieldSpecified = true;
      return value;
    },
    get_browseableSpecified: function() {
      return this._browseableFieldSpecified;
    },
    set_browseableSpecified: function(value) {
      this._browseableFieldSpecified = value;
      return value;
    },
    get_searchable: function() {
      return this._searchableField;
    },
    set_searchable: function(value) {
      this._searchableField = value;
      return value;
    },
    get_type: function() {
      return this._typeField;
    },
    set_type: function(value) {
      this._typeField = value;
      return value;
    },
    get_subType: function() {
      return this._subTypeField;
    },
    set_subType: function(value) {
      this._subTypeField = value;
      return value;
    }
  };


  // wwtlib.FolderBrowser

  function FolderBrowser() {
    this._items = [];
    this.top = 10;
    this.left = 10;
    this._indexTouchDown = -1;
    this._mouseDown = false;
    this._lastX = 0;
    this._lastY = 0;
    this._ignoreClick = false;
    this._thumbnailSize = 0;
    this._horzSpacing = 110;
    this._vertSpacing = 75;
    this._thumbHeight = 65;
    this._thumbWidth = 110;
    this._horzMultiple = 110;
    this._rowCount = 1;
    this._colCount = 6;
    this._dragging = false;
    this._startIndex = 0;
    this._startOffset = 0;
    this._selectedItem = -1;
    this._hoverItem = -1;
    this.showAddButton = false;
    this.width = 0;
    this.height = 0;
    this._addButtonHover = false;
    this.imageClicked = false;
  }
  FolderBrowser.create = function() {
    var temp = new FolderBrowser();
    temp.height = 85;
    temp.width = 1920;
    temp.canvas = document.createElement('canvas');
    temp.canvas.width = temp.width;
    temp.canvas.height = temp.height;
    temp.setup();
    temp.loadImages();
    return temp;
  };
  var FolderBrowser$ = {
    setup: function() {
      this.canvas.addEventListener('click', ss.bind('onClick', this), false);
      this.canvas.addEventListener('dblclick', ss.bind('onDoubleClick', this), false);
      this.canvas.addEventListener('mousemove', ss.bind('onMouseMove', this), false);
      this.canvas.addEventListener('mouseup', ss.bind('onMouseUp', this), false);
      this.canvas.addEventListener('mousedown', ss.bind('onMouseDown', this), false);
      this.canvas.addEventListener('mousewheel', ss.bind('onMouseWheel', this), false);
      this.canvas.addEventListener('touchstart', ss.bind('onTouchStart', this), false);
      this.canvas.addEventListener('touchmove', ss.bind('onTouchMove', this), false);
      this.canvas.addEventListener('touchend', ss.bind('onTouchEnd', this), false);
      this.canvas.addEventListener('mouseout', ss.bind('onMouseUp', this), false);
    },
    onTouchStart: function(e) {
      var ev = e;
      ev.preventDefault();
      this._mouseDown = true;
      this._lastX = ev.targetTouches[0].pageX;
      this._lastY = ev.targetTouches[0].pageY;
      this._indexTouchDown = this._getItemIndexFromCursor(Vector2d.create(ev.targetTouches[0].pageX, ev.targetTouches[0].pageY));
    },
    onTouchMove: function(e) {
      var ev = e;
      ev.preventDefault();
      if (this._mouseDown) {
        var curX = ev.targetTouches[0].pageX - this._lastX;
        var curY = ev.targetTouches[0].pageY - this._lastY;
        if (this._mouseDown) {
          this._dragging = true;
        }
        if (!this._dragging) {
          var newHover = this._getItemIndexFromCursor(Vector2d.create(ev.targetTouches[0].pageX, ev.targetTouches[0].pageY));
          if (this._hoverItem !== newHover) {
            this._hoverItem = newHover;
          }
        }
        else {
          var tiles = Math.round(((ev.targetTouches[0].pageX - this._lastX) + this._startOffset) / this._horzSpacing);
          var offset = Math.round(((ev.targetTouches[0].pageX - this._lastX) + this._startOffset) - (tiles * this._horzSpacing));
          this._startOffset = offset;
          this._startIndex -= tiles;
          if (this._startIndex < 0) {
            this._startOffset -= (this._horzSpacing * this._startIndex);
            this._startIndex = 0;
          }
          this._lastX = ev.targetTouches[0].pageX;
          this._lastY = ev.targetTouches[0].pageY;
        }
        this.refresh();
      }
    },
    onTouchEnd: function(e) {
      var ev = e;
      ev.preventDefault();
      if (this._dragging) {
        this._dragging = false;
        this._ignoreClick = true;
      }
      else if (this._indexTouchDown > -1 && this._mouseDown) {
        this._handleClick(this._indexTouchDown);
      }
      this._startOffset = 0;
      this._mouseDown = false;
      this.refresh();
    },
    onClick: function(e) {
      if (!this._ignoreClick) {
        var index = this._getItemIndexFromCursor(Vector2d.create(e.offsetX, e.offsetY));
        this._handleClick(index);
      }
      else {
        this._ignoreClick = false;
      }
    },
    _handleClick: function(index) {
      var $this = this;

      if (index > -1) {
        if (ss.canCast(this._items[index], Place)) {
          var place = this._items[index];
          WWTControl.singleton.gotoTarget(place, false, false, true);
          return;
        }
        if (ss.canCast(this._items[index], Imageset)) {
          var imageset = this._items[index];
          WWTControl.singleton.renderContext.set_backgroundImageset(imageset);
          return;
        }
        if (ss.canCast(this._items[index], Tour)) {
          var tour = this._items[index];
          WWTControl.singleton.playTour(tour.get_tourUrl());
          return;
        }
        if (ss.canCast(this._items[index], Folder)) {
          var folder = this._items[index];
          this._startIndex = 0;
          folder.childLoadCallback(function() {
            $this._items = folder.get_children();
            $this.refresh();
          });
          return;
        }
        if (ss.canCast(this._items[index], FolderUp)) {
          var folderUp = this._items[index];
          if (folderUp.parent != null) {
            this._startIndex = 0;
            folderUp.parent.childLoadCallback(function() {
              $this._items = folderUp.parent.get_children();
              $this.refresh();
            });
          }
          return;
        }
      }
      return;
    },
    onDoubleClick: function(e) {
      RenderTriangle.renderingOn = !RenderTriangle.renderingOn;
    },
    onGestureChange: function(e) {
      var g = e;
      this._mouseDown = false;
      var delta = g.scale;
    },
    onMouseDown: function(e) {
      this._mouseDown = true;
      this._lastX = Mouse.offsetX(this.canvas, e);
      this._lastY = Mouse.offsetY(this.canvas, e);
    },
    onMouseMove: function(e) {
      if (this._mouseDown) {
        this._dragging = true;
      }
      if (!this._dragging) {
        var newHover = this._getItemIndexFromCursor(Vector2d.create(Mouse.offsetX(this.canvas, e), Mouse.offsetY(this.canvas, e)));
        if (this._hoverItem !== newHover) {
          this._hoverItem = newHover;
        }
      }
      else {
        var tiles = Math.round(((Mouse.offsetX(this.canvas, e) - this._lastX) + this._startOffset) / this._horzSpacing);
        var offset = Math.round(((Mouse.offsetX(this.canvas, e) - this._lastX) + this._startOffset) - (tiles * this._horzSpacing));
        this._startOffset = offset;
        this._startIndex -= tiles;
        if (this._startIndex < 0) {
          this._startOffset -= (this._horzSpacing * this._startIndex);
          this._startIndex = 0;
        }
        this._lastX = Mouse.offsetX(this.canvas, e);
        this._lastY = Mouse.offsetY(this.canvas, e);
      }
      this.refresh();
    },
    onMouseUp: function(e) {
      if (this._dragging) {
        this._startOffset = 0;
        this._dragging = false;
        this._ignoreClick = true;
      }
      this._mouseDown = false;
      this.refresh();
    },
    onMouseWheel: function(e) {
      var ev = e;
      var delta = ev.wheelDelta;
    },
    loadImages: function() {
      var $this = this;

      if (!FolderBrowser._imagesLoaded && !FolderBrowser._downloading) {
        FolderBrowser._imageLoadCount = 0;
        FolderBrowser._imagesLoaded = false;
        FolderBrowser._downloading = true;
        FolderBrowser._bmpBackground = document.createElement('img');
        FolderBrowser._bmpBackground.src = 'images/thumbBackground.png';
        FolderBrowser._bmpBackground.addEventListener('load', function(e) {
          FolderBrowser._imageLoadCount++;
          if (FolderBrowser._imageLoadCount === 5) {
            FolderBrowser._downloading = false;
            FolderBrowser._imagesLoaded = true;
            $this.refresh();
          }
        }, false);
        FolderBrowser._bmpBackgroundHover = document.createElement('img');
        FolderBrowser._bmpBackgroundHover.src = 'images/thumbBackgroundHover.png';
        FolderBrowser._bmpBackgroundHover.addEventListener('load', function(e) {
          FolderBrowser._imageLoadCount++;
          if (FolderBrowser._imageLoadCount === 5) {
            FolderBrowser._downloading = false;
            FolderBrowser._imagesLoaded = true;
            $this.refresh();
          }
        }, false);
        FolderBrowser._bmpBackgroundWide = document.createElement('img');
        FolderBrowser._bmpBackgroundWide.src = 'images/thumbBackgroundWide.png';
        FolderBrowser._bmpBackgroundWide.addEventListener('load', function(e) {
          FolderBrowser._imageLoadCount++;
          if (FolderBrowser._imageLoadCount === 5) {
            FolderBrowser._downloading = false;
            FolderBrowser._imagesLoaded = true;
            $this.refresh();
          }
        }, false);
        FolderBrowser._bmpBackgroundWideHover = document.createElement('img');
        FolderBrowser._bmpBackgroundWideHover.src = 'images/thumbBackgroundWideHover.png';
        FolderBrowser._bmpBackgroundWideHover.addEventListener('load', function(e) {
          FolderBrowser._imageLoadCount++;
          if (FolderBrowser._imageLoadCount === 5) {
            FolderBrowser._downloading = false;
            FolderBrowser._imagesLoaded = true;
            $this.refresh();
          }
        }, false);
        FolderBrowser._bmpDropInsertMarker = document.createElement('img');
        FolderBrowser._bmpDropInsertMarker.src = 'images/dragInsertMarker.png';
        FolderBrowser._bmpDropInsertMarker.addEventListener('load', function(e) {
          FolderBrowser._imageLoadCount++;
          if (FolderBrowser._imageLoadCount === 5) {
            FolderBrowser._downloading = false;
            FolderBrowser._imagesLoaded = true;
            $this.refresh();
          }
        }, false);
      }
    },
    get_thumbnailSize: function() {
      return this._thumbnailSize;
    },
    set_thumbnailSize: function(value) {
      this._thumbnailSize = value;
      switch (value) {
        case 1:
          this._horzSpacing = 180;
          this._vertSpacing = 75;
          this._thumbHeight = 65;
          this._thumbWidth = 180;
          break;
        case 0:
          this._horzSpacing = 110;
          this._vertSpacing = 75;
          this._thumbHeight = 65;
          this._thumbWidth = 110;
          break;
      }
      this._updatePaginator();
      this.refresh();
      return value;
    },
    refresh: function() {
      if (this.width !== window.innerWidth) {
        this.width = window.innerWidth;
        this.canvas.width = this.canvas.width;
      }
      this.paint();
    },
    get_rowCount: function() {
      return this._rowCount;
    },
    set_rowCount: function(value) {
      if (this._rowCount !== value) {
        this._rowCount = value;
        this._updatePaginator();
      }
      return value;
    },
    _updatePaginator: function() {
    },
    get_colCount: function() {
      return this._colCount;
    },
    set_colCount: function(value) {
      if (this._colCount !== value) {
        this._colCount = value;
        this._updatePaginator();
      }
      return value;
    },
    get_itemsPerPage: function() {
      return this._rowCount * this._colCount;
    },
    get_currentPage: function() {
      return this._startIndex / this.get_itemsPerPage();
    },
    get_pageCount: function() {
      return Math.max(1, ((this._items.length + this.get_itemsPerPage() - 1) + ((this.showAddButton) ? 1 : 0)) / this.get_itemsPerPage());
    },
    paint: function() {
      var $this = this;

      var g = this.canvas.getContext('2d');
      g.fillStyle = 'rgb(20, 22, 31)';
      g.fillRect(0, 0, this.width, this.height);
      if (!FolderBrowser._imagesLoaded) {
        return;
      }
      var netHeight = (this.height - 10 * 2);
      var netWidth = (this.width - 10 * 2);
      this.set_rowCount(Math.round(Math.max(netHeight / this._thumbHeight, 1)));
      this.set_colCount(Math.round(Math.max(netWidth / this._horzSpacing, 1)));
      this._horzMultiple = (netWidth + 13) / this.get_colCount();
      this._startIndex = Math.round((this._startIndex / this.get_itemsPerPage()) * this.get_itemsPerPage());
      var rectf;
      var index = this._startIndex;
      for (var y = 0; y < this._rowCount; y++) {
        for (var x = 0; x < this._colCount; x++) {
          if (index >= this._items.length) {
            if (!this._items.length || this.showAddButton) {
              rectf = Rectangle.create(this.left + x * this._horzMultiple + 3 + this._startOffset, this.top + y * this._vertSpacing, this._thumbWidth - 10, 60);
              g.drawImage((this._thumbnailSize === 1) ? FolderBrowser._bmpBackgroundWide : FolderBrowser._bmpBackground, ss.truncate((x * this._horzMultiple)) + this._startOffset, y * this._vertSpacing);
            }
            break;
          }
          rectf = Rectangle.create(this.left + x * this._horzMultiple + 3 + this._startOffset, this.top + y * this._vertSpacing, this._thumbWidth - 14, 60);
          var textBrush = 'white';
          if (index === this._hoverItem || (index === this._selectedItem && this._hoverItem === -1)) {
            g.drawImage((this._thumbnailSize === 1) ? FolderBrowser._bmpBackgroundWideHover : FolderBrowser._bmpBackgroundHover, this.left + ss.truncate((x * this._horzMultiple)) + this._startOffset, this.top + y * this._vertSpacing);
            textBrush = 'yellow';
          }
          else {
            g.drawImage((this._thumbnailSize === 1) ? FolderBrowser._bmpBackgroundWide : FolderBrowser._bmpBackground, this.left + ss.truncate((x * this._horzMultiple)) + this._startOffset, this.top + y * this._vertSpacing);
          }
          this._items[index].set_bounds(Rectangle.create((this.left + x * this._horzMultiple) + this._startOffset, this.top + (y * this._vertSpacing), ss.truncate(this._horzMultiple), this._vertSpacing));
          try {
            var bmpThumb = this._items[index].get_thumbnail();
            if (bmpThumb != null) {
              g.drawImage(bmpThumb, this.left + (x * this._horzMultiple) + 2 + this._startOffset, this.top + y * this._vertSpacing + 3);
              g.strokeStyle = 'rgb(0,0,0)';
              g.rect(this.left + ss.truncate((x * this._horzMultiple)) + 2 + this._startOffset, this.top + y * this._vertSpacing + 3, this._items[index].get_thumbnail().width, this._items[index].get_thumbnail().height);
            }
            else {
              this._items[index].set_thumbnail(document.createElement('img'));
              this._items[index].get_thumbnail().src = this._items[index].get_thumbnailUrl();
              this._items[index].get_thumbnail().addEventListener('load', function(e) {
                $this.refresh();
              }, false);
            }
          }
          catch ($e1) {
          }
          g.fillStyle = textBrush;
          g.strokeStyle = textBrush;
          g.lineWidth = 1;
          g.font = 'normal 8pt Arial';
          g.fillText(this._items[index].get_name(), rectf.x, rectf.y + rectf.height, rectf.width);
          index++;
        }
        if (index >= this._items.length) {
          break;
        }
      }
    },
    _getItemIndexFromCursor: function(testPointIn) {
      var testPoint = Vector2d.create(testPointIn.x + this.left, testPointIn.y + this.top);
      this.imageClicked = false;
      var index = -1;
      var xpos = ss.truncate((testPoint.x / this._horzMultiple));
      var xPart = ss.truncate((testPoint.x % this._horzMultiple));
      if (xpos >= this._colCount) {
        return -1;
      }
      if (xpos < 0) {
        return -1;
      }
      var ypos = ss.truncate((testPoint.y / this._vertSpacing));
      var yPart = ss.truncate((testPoint.y % this._vertSpacing));
      if (ypos >= this._rowCount) {
        return -1;
      }
      if (ypos < 0) {
        return -1;
      }
      index = this._startIndex + ypos * this._colCount + xpos;
      if (index === this._items.length) {
        this._addButtonHover = true;
      }
      else {
        this._addButtonHover = false;
      }
      if (index > this._items.length - 1) {
        return -1;
      }
      if ((this._items[index]).get_isImage() && yPart < 16 && xPart > 78) {
        this.imageClicked = true;
      }
      return index;
    },
    _addItems: function(list) {
      this._items = list;
    }
  };


  // wwtlib.FolderUp

  function FolderUp() {
    this.parent = null;
    this._bounds = new Rectangle();
  }
  var FolderUp$ = {
    get_name: function() {
      return 'Up Level';
    },
    get_thumbnail: function() {
      return this._thumbnail;
    },
    set_thumbnail: function(value) {
      this._thumbnail = value;
      return value;
    },
    get_thumbnailUrl: function() {
      return '//worldwidetelescope.org/wwtweb/thumbnail.aspx?Name=folderup';
    },
    set_thumbnailUrl: function(value) {
      return;
      return value;
    },
    get_bounds: function() {
      return this._bounds;
    },
    set_bounds: function(value) {
      this._bounds = value;
      return value;
    },
    get_isImage: function() {
      return false;
    },
    get_isTour: function() {
      return false;
    },
    get_isFolder: function() {
      return false;
    },
    get_isCloudCommunityItem: function() {
      return false;
    },
    get_readOnly: function() {
      return false;
    },
    get_children: function() {
      if (this.parent == null) {
        return [];
      }
      else {
        return this.parent.get_children();
      }
    }
  };


  // wwtlib.Imageset

  function Imageset() {
    this._projection = 0;
    this._imageSetID = 0;
    this._baseTileDegrees = 0;
    this._widthFactor = 1;
    this.demUrl = '';
    this._levels = 0;
    this._mercator = false;
    this._bottomsUp = false;
    this._baseLevel = 1;
    this._quadTreeTileMap = '0123';
    this._centerX = 0;
    this._centerY = 0;
    this._rotation = 0;
    this._meanRadius = 0;
    this._dataSetType = 0;
    this._bandPass = 3;
    this._altUrl = '';
    this._singleImage = false;
    this._matrixComputed = false;
    this._name = '';
    this._sparse = false;
    this._thumbnailUrl = '';
    this._generic = false;
    this._defaultSet = false;
    this._elevationModel = false;
    this._offsetX = 0;
    this._offsetY = 0;
  }
  Imageset.getTileKey = function(imageset, level, x, y) {
    return imageset.get_imageSetID().toString() + '\\' + level.toString() + '\\' + y.toString() + '_' + x.toString();
  };
  Imageset.getNewTile = function(imageset, level, x, y, parent) {
    switch (imageset.get_projection()) {
      case 0:
        var newTile = MercatorTile.create(level, x, y, imageset, parent);
        return newTile;
      case 1:
        return EquirectangularTile.create(level, x, y, imageset, parent);
      case 3:
      default:
        return ToastTile.create(level, x, y, imageset, parent);
      case 5:
        return SkyImageTile.create(level, x, y, imageset, parent);
      case 6:
        return PlotTile.create(level, x, y, imageset, parent);
      case 2:
        var newTile = TangentTile.create(level, x, y, imageset, parent);
        return newTile;
    }
  };
  Imageset.fromXMLNode = function(node) {
    try {
      var type = 2;
      var projection = 2;
      if (node.attributes.getNamedItem('DataSetType') != null) {
        type = Enums.parse('ImageSetType', node.attributes.getNamedItem('DataSetType').nodeValue);
      }
      var bandPass = 3;
      bandPass = Enums.parse('BandPass', node.attributes.getNamedItem('BandPass').nodeValue);
      var wf = 1;
      if (node.attributes.getNamedItem('WidthFactor') != null) {
        wf = parseInt(node.attributes.getNamedItem('WidthFactor').nodeValue);
      }
      if (node.attributes.getNamedItem('Generic') == null || !ss.boolean(node.attributes.getNamedItem('Generic').nodeValue)) {
        projection = Enums.parse('ProjectionType', node.attributes.getNamedItem('Projection').nodeValue);
        var fileType = node.attributes.getNamedItem('FileType').nodeValue;
        if (!ss.startsWith(fileType, '.')) {
          fileType = '.' + fileType;
        }
        var thumbnailUrl = '';
        var thumbUrl = Util.selectSingleNode(node, 'ThumbnailUrl');
        if (thumbUrl != null) {
          if (ss.emptyString(thumbUrl.text)) {
            var cn = thumbUrl;
            thumbnailUrl = cn.textContent;
          }
          else {
            thumbnailUrl = thumbUrl.text;
          }
        }
        var stockSet = false;
        var elevationModel = false;
        if (node.attributes.getNamedItem('StockSet') != null) {
          stockSet = ss.boolean(node.attributes.getNamedItem('StockSet').nodeValue);
        }
        if (node.attributes.getNamedItem('ElevationModel') != null) {
          elevationModel = ss.boolean(node.attributes.getNamedItem('ElevationModel').nodeValue);
        }
        var demUrl = '';
        if (node.attributes.getNamedItem('DemUrl') != null) {
          demUrl = node.attributes.getNamedItem('DemUrl').nodeValue;
        }
        var alturl = '';
        if (node.attributes.getNamedItem('AltUrl') != null) {
          alturl = node.attributes.getNamedItem('AltUrl').nodeValue;
        }
        var offsetX = 0;
        if (node.attributes.getNamedItem('OffsetX') != null) {
          offsetX = parseFloat(node.attributes.getNamedItem('OffsetX').nodeValue);
        }
        var offsetY = 0;
        if (node.attributes.getNamedItem('OffsetY') != null) {
          offsetY = parseFloat(node.attributes.getNamedItem('OffsetY').nodeValue);
        }
        var creditText = '';
        var credits = Util.selectSingleNode(node, 'Credits');
        if (credits != null) {
          creditText = Util.getInnerText(credits);
        }
        var creditsUrl = '';
        credits = Util.selectSingleNode(node, 'CreditsUrl');
        if (credits != null) {
          creditsUrl = Util.getInnerText(credits);
        }
        var meanRadius = 0;
        if (node.attributes.getNamedItem('MeanRadius') != null) {
          meanRadius = parseFloat(node.attributes.getNamedItem('MeanRadius').nodeValue);
        }
        var referenceFrame = null;
        if (node.attributes.getNamedItem('ReferenceFrame') != null) {
          referenceFrame = node.attributes.getNamedItem('ReferenceFrame').nodeValue;
        }
        var name = '';
        if (node.attributes.getNamedItem('Name') != null) {
          name = node.attributes.getNamedItem('Name').nodeValue;
        }
        var url = '';
        if (node.attributes.getNamedItem('Url') != null) {
          url = node.attributes.getNamedItem('Url').nodeValue;
        }
        var baseTileLevel = 0;
        if (node.attributes.getNamedItem('BaseTileLevel') != null) {
          baseTileLevel = parseInt(node.attributes.getNamedItem('BaseTileLevel').nodeValue);
        }
        var tileLevels = 0;
        if (node.attributes.getNamedItem('TileLevels') != null) {
          tileLevels = parseInt(node.attributes.getNamedItem('TileLevels').nodeValue);
        }
        var baseDegreesPerTile = 0;
        if (node.attributes.getNamedItem('BaseDegreesPerTile') != null) {
          baseDegreesPerTile = parseFloat(node.attributes.getNamedItem('BaseDegreesPerTile').nodeValue);
        }
        var bottomsUp = false;
        if (node.attributes.getNamedItem('BottomsUp') != null) {
          bottomsUp = ss.boolean(node.attributes.getNamedItem('BottomsUp').nodeValue);
        }
        var quadTreeMap = '';
        if (node.attributes.getNamedItem('QuadTreeMap') != null) {
          quadTreeMap = node.attributes.getNamedItem('QuadTreeMap').nodeValue;
        }
        var centerX = 0;
        if (node.attributes.getNamedItem('CenterX') != null) {
          centerX = parseFloat(node.attributes.getNamedItem('CenterX').nodeValue);
        }
        var centerY = 0;
        if (node.attributes.getNamedItem('CenterY') != null) {
          centerY = parseFloat(node.attributes.getNamedItem('CenterY').nodeValue);
        }
        var rotation = 0;
        if (node.attributes.getNamedItem('Rotation') != null) {
          rotation = parseFloat(node.attributes.getNamedItem('Rotation').nodeValue);
        }
        var sparse = false;
        if (node.attributes.getNamedItem('Sparse') != null) {
          sparse = ss.boolean(node.attributes.getNamedItem('Sparse').nodeValue);
        }
        return Imageset.create(name, url, type, bandPass, projection, Math.abs(Util.getHashCode(url)), baseTileLevel, tileLevels, 256, baseDegreesPerTile, fileType, bottomsUp, quadTreeMap, centerX, centerY, rotation, sparse, thumbnailUrl, stockSet, elevationModel, wf, offsetX, offsetY, creditText, creditsUrl, demUrl, alturl, meanRadius, referenceFrame);
      }
      else {
        return Imageset.createGeneric(type, bandPass);
      }
    }
    catch ($e1) {
      return null;
    }
  };
  Imageset.saveToXml = function(xmlWriter, imageset, alternateUrl) {
    xmlWriter._writeStartElement('ImageSet');
    xmlWriter._writeAttributeString('Generic', imageset.get_generic().toString());
    xmlWriter._writeAttributeString('DataSetType', Enums.toXml('ImageSetType', imageset.get_dataSetType()));
    xmlWriter._writeAttributeString('BandPass', Enums.toXml('BandPass', imageset.get_bandPass()));
    if (!imageset.get_generic()) {
      xmlWriter._writeAttributeString('Name', imageset.get_name());
      if (ss.emptyString(alternateUrl)) {
        xmlWriter._writeAttributeString('Url', imageset.get_url());
      }
      else {
        xmlWriter._writeAttributeString('Url', alternateUrl);
      }
      xmlWriter._writeAttributeString('DemUrl', imageset.get_demUrl());
      xmlWriter._writeAttributeString('BaseTileLevel', imageset.get_baseLevel().toString());
      xmlWriter._writeAttributeString('TileLevels', imageset.get_levels().toString());
      xmlWriter._writeAttributeString('BaseDegreesPerTile', imageset.get_baseTileDegrees().toString());
      xmlWriter._writeAttributeString('FileType', imageset.get_extension());
      xmlWriter._writeAttributeString('BottomsUp', imageset.get_bottomsUp().toString());
      xmlWriter._writeAttributeString('Projection', Enums.toXml('ProjectionType', imageset.get_projection()));
      xmlWriter._writeAttributeString('QuadTreeMap', imageset.get_quadTreeTileMap());
      xmlWriter._writeAttributeString('CenterX', imageset.get_centerX().toString());
      xmlWriter._writeAttributeString('CenterY', imageset.get_centerY().toString());
      xmlWriter._writeAttributeString('OffsetX', imageset.get_offsetX().toString());
      xmlWriter._writeAttributeString('OffsetY', imageset.get_offsetY().toString());
      xmlWriter._writeAttributeString('Rotation', imageset.get_rotation().toString());
      xmlWriter._writeAttributeString('Sparse', imageset.get_sparse().toString());
      xmlWriter._writeAttributeString('ElevationModel', imageset.get_elevationModel().toString());
      xmlWriter._writeAttributeString('StockSet', imageset.get_defaultSet().toString());
      xmlWriter._writeAttributeString('WidthFactor', imageset.get_widthFactor().toString());
      xmlWriter._writeAttributeString('MeanRadius', imageset.get_meanRadius().toString());
      xmlWriter._writeAttributeString('ReferenceFrame', imageset.get_referenceFrame());
      if (ss.emptyString(alternateUrl)) {
        xmlWriter._writeElementString('ThumbnailUrl', imageset.get_thumbnailUrl());
      }
      else {
        xmlWriter._writeElementString('ThumbnailUrl', imageset.get_url());
      }
    }
    xmlWriter._writeEndElement();
  };
  Imageset.createGeneric = function(dataSetType, bandPass) {
    var temp = new Imageset();
    temp._generic = true;
    temp._name = 'Generic';
    temp._sparse = false;
    temp._dataSetType = dataSetType;
    temp._bandPass = bandPass;
    temp._quadTreeTileMap = '';
    temp.url = '';
    temp._levels = 0;
    temp._baseTileDegrees = 0;
    temp._imageSetID = 0;
    temp._extension = '';
    temp._projection = 1;
    temp._bottomsUp = false;
    temp._baseLevel = 0;
    temp._mercator = (!temp._projection);
    temp._centerX = 0;
    temp._centerY = 0;
    temp._rotation = 0;
    temp._thumbnailUrl = '';
    temp._matrix = Matrix3d.get_identity();
    temp._matrix._multiply(Matrix3d._rotationX((temp.get_rotation() / 180 * Math.PI)));
    temp._matrix._multiply(Matrix3d._rotationZ((temp.get_centerY() / 180 * Math.PI)));
    temp._matrix._multiply(Matrix3d._rotationY((((360 - temp.get_centerX()) + 180) / 180 * Math.PI)));
    return temp;
  };
  Imageset.create = function(name, url, dataSetType, bandPass, projection, imageSetID, baseLevel, levels, tileSize, baseTileDegrees, extension, bottomsUp, quadTreeMap, centerX, centerY, rotation, sparse, thumbnailUrl, defaultSet, elevationModel, wf, offsetX, offsetY, credits, creditsUrl, demUrlIn, alturl, meanRadius, referenceFrame) {
    var temp = new Imageset();
    temp.set_referenceFrame(referenceFrame);
    temp.set_meanRadius(meanRadius);
    temp._altUrl = alturl;
    temp.demUrl = demUrlIn;
    temp._creditsText = credits;
    temp._creditsUrl = creditsUrl;
    temp._offsetY = offsetY;
    temp._offsetX = offsetX;
    temp._widthFactor = wf;
    temp._elevationModel = elevationModel;
    temp._defaultSet = defaultSet;
    temp._name = name;
    temp._sparse = sparse;
    temp._dataSetType = dataSetType;
    temp._bandPass = bandPass;
    temp._quadTreeTileMap = quadTreeMap;
    temp.url = url;
    temp._levels = levels;
    temp._baseTileDegrees = baseTileDegrees;
    temp._imageSetID = imageSetID;
    temp._extension = extension;
    temp._projection = projection;
    temp._bottomsUp = bottomsUp;
    temp._baseLevel = baseLevel;
    temp._mercator = (!projection);
    temp._centerX = centerX;
    temp._centerY = centerY;
    temp._rotation = rotation;
    temp._thumbnailUrl = thumbnailUrl;
    temp._computeMatrix();
    return temp;
  };
  var Imageset$ = {
    get_wcsImage: function() {
      return this._wcsImage;
    },
    set_wcsImage: function(value) {
      this._wcsImage = value;
      return value;
    },
    get_projection: function() {
      return this._projection;
    },
    set_projection: function(value) {
      this._projection = value;
      return value;
    },
    get_referenceFrame: function() {
      return this._referenceFrame;
    },
    set_referenceFrame: function(value) {
      this._referenceFrame = value;
      return value;
    },
    get_imageSetID: function() {
      return this._imageSetID;
    },
    set_imageSetID: function(value) {
      this._imageSetID = value;
      return value;
    },
    get_baseTileDegrees: function() {
      return this._baseTileDegrees;
    },
    set_baseTileDegrees: function(value) {
      this._baseTileDegrees = value;
      return value;
    },
    get_widthFactor: function() {
      return this._widthFactor;
    },
    set_widthFactor: function(value) {
      this._widthFactor = value;
      return value;
    },
    getHashCode: function() {
      return Util.getHashCode(this.get_url());
    },
    get_url: function() {
      return this.url;
    },
    set_url: function(value) {
      this.url = value;
      return value;
    },
    get_demUrl: function() {
      if (ss.emptyString(this.demUrl) && !this._projection) {
        return '//worldwidetelescope.org/wwtweb/BingDemTile.aspx?Q={0},{1},{2}';
      }
      return this.demUrl;
    },
    set_demUrl: function(value) {
      this.demUrl = value;
      return value;
    },
    get_extension: function() {
      return this._extension;
    },
    set_extension: function(value) {
      this._extension = value;
      return value;
    },
    get_levels: function() {
      return this._levels;
    },
    set_levels: function(value) {
      this._levels = value;
      return value;
    },
    get_bottomsUp: function() {
      return this._bottomsUp;
    },
    set_bottomsUp: function(value) {
      this._bottomsUp = value;
      return value;
    },
    get_mercator: function() {
      return this._mercator;
    },
    set_mercator: function(value) {
      this._mercator = value;
      return value;
    },
    get_baseLevel: function() {
      return this._baseLevel;
    },
    set_baseLevel: function(value) {
      this._baseLevel = value;
      return value;
    },
    get_quadTreeTileMap: function() {
      return this._quadTreeTileMap;
    },
    set_quadTreeTileMap: function(value) {
      this._quadTreeTileMap = value;
      return value;
    },
    get_centerX: function() {
      return this._centerX;
    },
    set_centerX: function(value) {
      if (this._centerX !== value) {
        this._centerX = value;
        this._computeMatrix();
      }
      return value;
    },
    get_centerY: function() {
      return this._centerY;
    },
    set_centerY: function(value) {
      if (this._centerY !== value) {
        this._centerY = value;
        this._computeMatrix();
      }
      return value;
    },
    get_rotation: function() {
      return this._rotation;
    },
    set_rotation: function(value) {
      if (this._rotation !== value) {
        this._rotation = value;
        this._computeMatrix();
      }
      return value;
    },
    get_meanRadius: function() {
      return this._meanRadius;
    },
    set_meanRadius: function(value) {
      this._meanRadius = value;
      return value;
    },
    get_bandPass: function() {
      return this._bandPass;
    },
    set_bandPass: function(value) {
      this._bandPass = value;
      return value;
    },
    get_dataSetType: function() {
      return this._dataSetType;
    },
    set_dataSetType: function(value) {
      this._dataSetType = value;
      return value;
    },
    get_altUrl: function() {
      return this._altUrl;
    },
    set_altUrl: function(value) {
      this._altUrl = value;
      return value;
    },
    get_singleImage: function() {
      return this._singleImage;
    },
    set_singleImage: function(value) {
      this._singleImage = value;
      return value;
    },
    toString: function() {
      if (this.get_defaultSet()) {
        return this._name + ' *';
      }
      else {
        return this._name;
      }
    },
    get_stockImageSet: function() {
      if (this._generic || !this._defaultSet) {
        return this;
      }
      else {
        return Imageset.createGeneric(this.get_dataSetType(), this.get_bandPass());
      }
    },
    equals: function(obj) {
      if (obj == null) {
        return false;
      }
      if (!(ss.canCast(obj, Imageset))) {
        return false;
      }
      var b = obj;
      return (Util.getHashCode(b.get_url()) === Util.getHashCode(this.get_url()) && b.get_dataSetType() === this.get_dataSetType() && b.get_bandPass() === this.get_bandPass() && b.get_generic() === this.get_generic());
    },
    get_matrix: function() {
      if (!this._matrixComputed) {
        this._computeMatrix();
      }
      return this._matrix;
    },
    set_matrix: function(value) {
      this._matrix = value;
      return value;
    },
    _computeMatrix: function() {
      this._matrixComputed = true;
      this._matrix = Matrix3d.get_identity();
      this._matrix._multiply(Matrix3d._rotationX((this.get_rotation() / 180 * Math.PI)));
      this._matrix._multiply(Matrix3d._rotationZ((this.get_centerY() / 180 * Math.PI)));
      this._matrix._multiply(Matrix3d._rotationY(((360 - this.get_centerX()) / 180 * Math.PI)));
    },
    get_name: function() {
      return this._name;
    },
    set_name: function(value) {
      this._name = value;
      return value;
    },
    get_sparse: function() {
      return this._sparse;
    },
    set_sparse: function(value) {
      this._sparse = value;
      return value;
    },
    get_thumbnailUrl: function() {
      return this._thumbnailUrl;
    },
    set_thumbnailUrl: function(value) {
      this._thumbnailUrl = value;
      return value;
    },
    get_generic: function() {
      return this._generic;
    },
    set_generic: function(value) {
      this._generic = value;
      return value;
    },
    get_elevationModel: function() {
      return this._elevationModel;
    },
    set_elevationModel: function(value) {
      this._elevationModel = value;
      return value;
    },
    get_defaultSet: function() {
      return this._defaultSet;
    },
    set_defaultSet: function(value) {
      this._defaultSet = value;
      return value;
    },
    get_offsetX: function() {
      return this._offsetX;
    },
    set_offsetX: function(value) {
      this._offsetX = value;
      return value;
    },
    get_offsetY: function() {
      return this._offsetY;
    },
    set_offsetY: function(value) {
      this._offsetY = value;
      return value;
    },
    get_creditsText: function() {
      return this._creditsText;
    },
    set_creditsText: function(value) {
      this._creditsText = value;
      return value;
    },
    get_creditsUrl: function() {
      return this._creditsUrl;
    },
    set_creditsUrl: function(value) {
      this._creditsUrl = value;
      return value;
    },
    get_isMandelbrot: function() {
      return false;
    },
    get_thumbnail: function() {
      return this._thumbnail;
    },
    set_thumbnail: function(value) {
      this._thumbnail = value;
      return value;
    },
    get_bounds: function() {
      return this._bounds;
    },
    set_bounds: function(value) {
      this._bounds = value;
      return value;
    },
    get_isImage: function() {
      return true;
    },
    get_isTour: function() {
      return false;
    },
    get_isFolder: function() {
      return false;
    },
    get_isCloudCommunityItem: function() {
      return false;
    },
    get_readOnly: function() {
      return false;
    },
    get_children: function() {
      return [];
    }
  };


  // wwtlib.ViewMoverKenBurnsStyle

  function ViewMoverKenBurnsStyle(from, to, time, fromDateTime, toDateTime, type) {
    this.interpolationType = 0;
    this.fastDirectionMove = false;
    this._toTargetTime = 0;
    this._dateTimeSpan = 0;
    this._complete = false;
    this._midpointFired = false;
    this.interpolationType = type;
    if (Math.abs(from.lng - to.lng) > 180) {
      if (from.lng > to.lng) {
        from.lng -= 360;
      }
      else {
        from.lng += 360;
      }
    }
    this._fromDateTime = fromDateTime;
    this._toDateTime = toDateTime;
    this._dateTimeSpan = toDateTime - fromDateTime;
    this._from = from.copy();
    this._to = to.copy();
    this._fromTime = ss.now();
    this._toTargetTime = time;
  }
  var ViewMoverKenBurnsStyle$ = {
    get_complete: function() {
      return this._complete;
    },
    get_currentPosition: function() {
      var elapsed = ss.now() - this._fromTime;
      var elapsedSeconds = (elapsed) / 1000;
      var alpha = elapsedSeconds / this._toTargetTime;
      if (!this._midpointFired && alpha >= 0.5) {
        this._midpointFired = true;
        if (this._midpoint != null) {
          this._midpoint();
        }
      }
      if (alpha >= 1) {
        alpha = 1;
        this._complete = true;
        return this._to.copy();
      }
      if (Settings.get_active().get_galacticMode() && WWTControl.singleton.renderContext.space) {
        return CameraParameters.interpolateGreatCircle(this._from, this._to, alpha, this.interpolationType, this.fastDirectionMove);
      }
      return CameraParameters.interpolate(this._from, this._to, alpha, this.interpolationType, this.fastDirectionMove);
    },
    get_currentDateTime: function() {
      var elapsed = ss.now() - this._fromTime;
      var elapsedSeconds = (elapsed) / 1000;
      var alpha = elapsedSeconds / this._toTargetTime;
      var delta = this._dateTimeSpan * alpha;
      var retDate = new Date(this._fromDateTime.getTime() + ss.truncate(delta));
      return retDate;
    },
    get_midpoint: function() {
      return this._midpoint;
    },
    set_midpoint: function(value) {
      this._midpoint = value;
      return value;
    },
    get_moveTime: function() {
      return this._toTargetTime;
    }
  };


  // wwtlib.ViewMoverSlew

  function ViewMoverSlew() {
    this._upTargetTime = 0;
    this._downTargetTime = 0;
    this._toTargetTime = 0;
    this._upTimeFactor = 0.6;
    this._downTimeFactor = 0.6;
    this._travelTimeFactor = 7;
    this._midpointFired = false;
    this._complete = false;
  }
  ViewMoverSlew.create = function(from, to) {
    var temp = new ViewMoverSlew();
    temp.init(from, to);
    return temp;
  };
  ViewMoverSlew.createUpDown = function(from, to, upDowFactor) {
    var temp = new ViewMoverSlew();
    temp._upTimeFactor = temp._downTimeFactor = upDowFactor;
    temp.init(from.copy(), to.copy());
    return temp;
  };
  var ViewMoverSlew$ = {
    init: function(from, to) {
      if (Math.abs(from.lng - to.lng) > 180) {
        if (from.lng > to.lng) {
          from.lng -= 360;
        }
        else {
          from.lng += 360;
        }
      }
      if (to.zoom <= 0) {
        to.zoom = 360;
      }
      if (from.zoom <= 0) {
        from.zoom = 360;
      }
      this._from = from;
      this._to = to;
      this._fromTime = ss.now();
      var zoomUpTarget = 360;
      var travelTime;
      var lngDist = Math.abs(from.lng - to.lng);
      var latDist = Math.abs(from.lat - to.lat);
      var distance = Math.sqrt(latDist * latDist + lngDist * lngDist);
      zoomUpTarget = (distance / 3) * 20;
      if (zoomUpTarget > 360) {
        zoomUpTarget = 360;
      }
      if (zoomUpTarget < from.zoom) {
        zoomUpTarget = from.zoom;
      }
      travelTime = (distance / 180) * (360 / zoomUpTarget) * this._travelTimeFactor;
      var rotateTime = Math.max(Math.abs(from.angle - to.angle), Math.abs(from.rotation - to.rotation));
      var logDistUp = Math.max(Math.abs(Util.logN(zoomUpTarget, 2) - Util.logN(from.zoom, 2)), rotateTime);
      this._upTargetTime = this._upTimeFactor * logDistUp;
      this._downTargetTime = this._upTargetTime + travelTime;
      var logDistDown = Math.abs(Util.logN(zoomUpTarget, 2) - Util.logN(to.zoom, 2));
      this._toTargetTime = this._downTargetTime + Math.max((this._downTimeFactor * logDistDown), rotateTime);
      this._fromTop = from.copy();
      this._fromTop.zoom = zoomUpTarget;
      this._fromTop.angle = (from.angle + to.angle) / 2;
      this._fromTop.rotation = (from.rotation + to.rotation) / 2;
      this._toTop = to.copy();
      this._toTop.zoom = this._fromTop.zoom;
      this._toTop.angle = this._fromTop.angle;
      this._toTop.rotation = this._fromTop.rotation;
    },
    get_complete: function() {
      return this._complete;
    },
    get_currentPosition: function() {
      var elapsed = ss.now() - this._fromTime;
      var elapsedSeconds = (elapsed) / 1000;
      if (elapsedSeconds < this._upTargetTime) {
        return CameraParameters.interpolate(this._from, this._fromTop, elapsedSeconds / this._upTargetTime, 3, false);
      }
      else if (elapsedSeconds < this._downTargetTime) {
        elapsedSeconds -= this._upTargetTime;
        if (Settings.get_active().get_galacticMode() && WWTControl.singleton.renderContext.space) {
          return CameraParameters.interpolateGreatCircle(this._fromTop, this._toTop, elapsedSeconds / (this._downTargetTime - this._upTargetTime), 3, false);
        }
        return CameraParameters.interpolate(this._fromTop, this._toTop, elapsedSeconds / (this._downTargetTime - this._upTargetTime), 3, false);
      }
      else {
        if (!this._midpointFired) {
          this._midpointFired = true;
          if (this._midpoint != null) {
            this._midpoint();
          }
        }
        elapsedSeconds -= this._downTargetTime;
        var alpha = elapsedSeconds / (this._toTargetTime - this._downTargetTime);
        if (alpha > 1) {
          alpha = 1;
          this._complete = true;
          return this._to.copy();
        }
        return CameraParameters.interpolate(this._toTop, this._to, alpha, 3, false);
      }
    },
    get_currentDateTime: function() {
      SpaceTimeController.updateClock();
      return SpaceTimeController.get_now();
    },
    get_midpoint: function() {
      return this._midpoint;
    },
    set_midpoint: function(value) {
      this._midpoint = value;
      return value;
    },
    get_moveTime: function() {
      return this._toTargetTime;
    }
  };


  // wwtlib.MainView

  function MainView() {
  }
  MainView._drawTest = function() {
    var canvas = document.getElementById('canvas');
    var ctx = canvas.getContext('2d');
    ctx.fillStyle = 'rgb(80,0,0)';
    ctx.fillRect(120, 120, 165, 160);
    ctx.fillStyle = 'rgba(0, 0, 160, 0.5)';
    ctx.fillRect(140, 140, 165, 160);
  };


  // wwtlib.Place

  function Place() {
    this._camParams = CameraParameters.create(0, 0, -1, 0, 0, 100);
    this._location3d = Vector3d.create(0, 0, 0);
    this.htmlDescription = '';
    this._constellation = '';
    this._classification = 1048576;
    this._type = 2;
    this._magnitude = 0;
    this._distnace = 0;
    this.angularSize = 60;
    this._thumbNail = null;
    this._studyImageset = null;
    this._backgroundImageSet = null;
    this._searchDistance = 0;
    this._elevation = 50;
  }
  Place.create = function(name, lat, lng, classification, constellation, type, zoomFactor) {
    var temp = new Place();
    temp.set_zoomLevel(zoomFactor);
    temp._constellation = constellation;
    temp._name = name;
    if (type === 2 || type === 4) {
      temp._camParams.set_RA(lng);
    }
    else {
      temp.set_lng(lng);
    }
    temp.set_lat(lat);
    temp.set_classification(classification);
    temp.set_type(type);
    return temp;
  };
  Place.createCameraParams = function(name, camParams, classification, constellation, type, target) {
    var temp = new Place();
    temp._constellation = constellation;
    temp._name = name;
    temp.set_classification(classification);
    temp._camParams = camParams;
    temp.set_type(type);
    temp.set_target(target);
    return temp;
  };
  Place._fromXml = function(place) {
    var newPlace = new Place();
    newPlace._name = place.attributes.getNamedItem('Name').nodeValue;
    if (place.attributes.getNamedItem('MSRComponentId') != null && place.attributes.getNamedItem('Permission') != null && place.attributes.getNamedItem('Url') != null) {
      newPlace.set_url(place.attributes.getNamedItem('Url').nodeValue);
      newPlace.set_thumbnailUrl(place.attributes.getNamedItem('Thumbnail').nodeValue);
      return newPlace;
    }
    if (place.attributes.getNamedItem('DataSetType') != null) {
      newPlace._type = Enums.parse('ImageSetType', place.attributes.getNamedItem('DataSetType').nodeValue);
    }
    if (newPlace.get_type() === 2) {
      newPlace._camParams.set_RA(parseFloat(place.attributes.getNamedItem('RA').nodeValue));
      newPlace._camParams.set_dec(parseFloat(place.attributes.getNamedItem('Dec').nodeValue));
    }
    else {
      newPlace.set_lat(parseFloat(place.attributes.getNamedItem('Lat').nodeValue));
      newPlace.set_lng(parseFloat(place.attributes.getNamedItem('Lng').nodeValue));
    }
    if (place.attributes.getNamedItem('Constellation') != null) {
      newPlace._constellation = place.attributes.getNamedItem('Constellation').nodeValue;
    }
    if (place.attributes.getNamedItem('Classification') != null) {
      newPlace._classification = Enums.parse('Classification', place.attributes.getNamedItem('Classification').nodeValue);
    }
    if (place.attributes.getNamedItem('Magnitude') != null) {
      newPlace._magnitude = parseFloat(place.attributes.getNamedItem('Magnitude').nodeValue);
    }
    if (place.attributes.getNamedItem('AngularSize') != null) {
      newPlace.angularSize = parseFloat(place.attributes.getNamedItem('AngularSize').nodeValue);
    }
    if (place.attributes.getNamedItem('ZoomLevel') != null) {
      newPlace.set_zoomLevel(parseFloat(place.attributes.getNamedItem('ZoomLevel').nodeValue));
    }
    if (place.attributes.getNamedItem('Rotation') != null) {
      newPlace._camParams.rotation = parseFloat(place.attributes.getNamedItem('Rotation').nodeValue);
    }
    if (place.attributes.getNamedItem('Angle') != null) {
      newPlace._camParams.angle = parseFloat(place.attributes.getNamedItem('Angle').nodeValue);
    }
    if (place.attributes.getNamedItem('Opacity') != null) {
      newPlace._camParams.opacity = parseFloat(place.attributes.getNamedItem('Opacity').nodeValue);
    }
    else {
      newPlace._camParams.opacity = 100;
    }
    newPlace.set_target(65536);
    if (place.attributes.getNamedItem('Target') != null) {
      newPlace.set_target(Enums.parse('SolarSystemObjects', place.attributes.getNamedItem('Target').nodeValue));
    }
    if (place.attributes.getNamedItem('ViewTarget') != null) {
      newPlace._camParams.viewTarget = Vector3d.parse(place.attributes.getNamedItem('ViewTarget').nodeValue);
    }
    if (place.attributes.getNamedItem('TargetReferenceFrame') != null) {
      newPlace._camParams.targetReferenceFrame = place.attributes.getNamedItem('TargetReferenceFrame').nodeValue;
    }
    var descriptionNode = Util.selectSingleNode(place, 'Description');
    if (descriptionNode != null) {
      newPlace.htmlDescription = descriptionNode.nodeValue;
    }
    var backgroundImageSet = Util.selectSingleNode(place, 'BackgroundImageSet');
    if (backgroundImageSet != null) {
      var imageSet = Util.selectSingleNode(backgroundImageSet, 'ImageSet');
      newPlace._backgroundImageSet = Imageset.fromXMLNode(imageSet);
    }
    var study = Util.selectSingleNode(place, 'ForegroundImageSet');
    if (study != null) {
      var imageSet = Util.selectSingleNode(study, 'ImageSet');
      newPlace._studyImageset = Imageset.fromXMLNode(imageSet);
    }
    study = Util.selectSingleNode(place, 'ImageSet');
    if (study != null) {
      newPlace._studyImageset = Imageset.fromXMLNode(study);
    }
    return newPlace;
  };
  Place._properCaps = function(name) {
    var list = name.split(' ');
    var ProperName = '';
    var $enum1 = ss.enumerate(list);
    while ($enum1.moveNext()) {
      var part = $enum1.current;
      ProperName = ProperName + part.substr(0, 1).toUpperCase() + ((part.length > 1) ? part.substr(1).toLowerCase() : '') + ' ';
    }
    return ss.trim(ProperName);
  };
  var Place$ = {
    get_tag: function() {
      return this._tag;
    },
    set_tag: function(value) {
      this._tag = value;
      return value;
    },
    get_url: function() {
      return this._url;
    },
    set_url: function(value) {
      this._url = value;
      return value;
    },
    get_thumbnail: function() {
      return this._thumbnail;
    },
    set_thumbnail: function(value) {
      this._thumbnail = value;
      return value;
    },
    get_name: function() {
      return this.get_names()[0];
    },
    get_names: function() {
      if (ss.emptyString(this._name)) {
        return ''.split(';');
      }
      return this._name.split(';');
    },
    set_names: function(value) {
      this._name = UiTools.getNamesStringFromArray(value);
      return value;
    },
    get_camParams: function() {
      if (this.get_classification() === 536870912 && this._camParams.target !== 20) {
        var raDec = Planets.getPlanetLocation(this.get_name());
        this._camParams.set_RA(raDec.RA);
        this._camParams.set_dec(raDec.dec);
        this._distnace = raDec.distance;
      }
      return this._camParams;
    },
    set_camParams: function(value) {
      this._camParams = value;
      return value;
    },
    updatePlanetLocation: function(jNow) {
      this._camParams.viewTarget = Planets.getPlanet3dLocationJD(this.get_target(), jNow);
      if (this.get_target() !== 65536 && this.get_target() !== 20) {
        this._camParams.viewTarget = Planets.getPlanetTargetPoint(this.get_target(), this.get_lat(), this.get_lng(), jNow);
      }
    },
    get_location3d: function() {
      if (this.get_classification() === 536870912 || (!this._location3d.x && !this._location3d.y && !this._location3d.z)) {
        this._location3d = Coordinates.raDecTo3d(this.get_RA(), this.get_dec());
      }
      return this._location3d;
    },
    get_lat: function() {
      return this.get_camParams().lat;
    },
    set_lat: function(value) {
      this._camParams.lat = value;
      return value;
    },
    get_lng: function() {
      return this.get_camParams().lng;
    },
    set_lng: function(value) {
      this._camParams.lng = value;
      return value;
    },
    get_opacity: function() {
      return this.get_camParams().opacity;
    },
    set_opacity: function(value) {
      this._camParams.opacity = value;
      return value;
    },
    get_constellation: function() {
      return this._constellation;
    },
    set_constellation: function(value) {
      this._constellation = value;
      return value;
    },
    get_classification: function() {
      return this._classification;
    },
    set_classification: function(value) {
      this._classification = value;
      return value;
    },
    get_type: function() {
      return this._type;
    },
    set_type: function(value) {
      this._type = value;
      return value;
    },
    get_magnitude: function() {
      return this._magnitude;
    },
    set_magnitude: function(value) {
      this._magnitude = value;
      return value;
    },
    get_distance: function() {
      return this._distnace;
    },
    set_distance: function(value) {
      this._distnace = value;
      return value;
    },
    get_zoomLevel: function() {
      return this.get_camParams().zoom;
    },
    set_zoomLevel: function(value) {
      this._camParams.zoom = value;
      return value;
    },
    get_studyImageset: function() {
      return this._studyImageset;
    },
    set_studyImageset: function(value) {
      this._studyImageset = value;
      return value;
    },
    get_backgroundImageset: function() {
      return this._backgroundImageSet;
    },
    set_backgroundImageset: function(value) {
      if (value != null) {
        this.set_type(value.get_dataSetType());
      }
      this._backgroundImageSet = value;
      return value;
    },
    get_searchDistance: function() {
      return this._searchDistance;
    },
    set_searchDistance: function(value) {
      this._searchDistance = value;
      return value;
    },
    get_elevation: function() {
      return this._elevation;
    },
    set_elevation: function(value) {
      this._elevation = value;
      return value;
    },
    get_thumbnailUrl: function() {
      if (ss.emptyString(this._thumbnailField)) {
        if (this._studyImageset != null && !ss.emptyString(this._studyImageset.get_thumbnailUrl())) {
          return this._studyImageset.get_thumbnailUrl();
        }
        if (this._backgroundImageSet != null && !ss.emptyString(this._backgroundImageSet.get_thumbnailUrl())) {
          return this._backgroundImageSet.get_thumbnailUrl();
        }
        var name = this.get_name();
        if (name.indexOf(';') > -1) {
          name = name.substr(0, name.indexOf(';'));
        }
        if (this.get_classification() === 1) {
          return '//worldwidetelescope.org/wwtweb/thumbnail.aspx?name=star';
        }
        return '//worldwidetelescope.org/wwtweb/thumbnail.aspx?name=' + name.toLowerCase();
      }
      return this._thumbnailField;
    },
    set_thumbnailUrl: function(value) {
      this._thumbnailField = value;
      return value;
    },
    get_RA: function() {
      return this.get_camParams().get_RA();
    },
    set_RA: function(value) {
      this._camParams.set_RA(value);
      return value;
    },
    get_dec: function() {
      return this.get_camParams().get_dec();
    },
    set_dec: function(value) {
      this._camParams.set_dec(value);
      return value;
    },
    toString: function() {
      return this._name;
    },
    _saveToXml: function(xmlWriter, elementName) {
      xmlWriter._writeStartElement(elementName);
      xmlWriter._writeAttributeString('Name', this._name);
      xmlWriter._writeAttributeString('DataSetType', Enums.toXml('ImageSetType', this._type));
      if (this.get_type() === 2) {
        xmlWriter._writeAttributeString('RA', this._camParams.get_RA().toString());
        xmlWriter._writeAttributeString('Dec', this._camParams.get_dec().toString());
      }
      else {
        xmlWriter._writeAttributeString('Lat', this.get_lat().toString());
        xmlWriter._writeAttributeString('Lng', this.get_lng().toString());
      }
      xmlWriter._writeAttributeString('Constellation', this._constellation);
      xmlWriter._writeAttributeString('Classification', Enums.toXml('Classification', this._classification));
      xmlWriter._writeAttributeString('Magnitude', this._magnitude.toString());
      xmlWriter._writeAttributeString('Distance', this._distnace.toString());
      xmlWriter._writeAttributeString('AngularSize', this.angularSize.toString());
      xmlWriter._writeAttributeString('ZoomLevel', this.get_zoomLevel().toString());
      xmlWriter._writeAttributeString('Rotation', this._camParams.rotation.toString());
      xmlWriter._writeAttributeString('Angle', this._camParams.angle.toString());
      xmlWriter._writeAttributeString('Opacity', this._camParams.opacity.toString());
      xmlWriter._writeAttributeString('Target', Enums.toXml('SolarSystemObjects', this.get_target()));
      xmlWriter._writeAttributeString('ViewTarget', this._camParams.viewTarget.toString());
      xmlWriter._writeAttributeString('TargetReferenceFrame', this._camParams.targetReferenceFrame);
      xmlWriter._writeStartElement('Description');
      xmlWriter._writeCData(this.htmlDescription);
      xmlWriter._writeEndElement();
      if (this._backgroundImageSet != null) {
        xmlWriter._writeStartElement('BackgroundImageSet');
        Imageset.saveToXml(xmlWriter, this._backgroundImageSet, '');
        xmlWriter._writeEndElement();
      }
      if (this._studyImageset != null) {
        Imageset.saveToXml(xmlWriter, this._studyImageset, '');
      }
      xmlWriter._writeEndElement();
    },
    get_bounds: function() {
      return this._bounds;
    },
    set_bounds: function(value) {
      this._bounds = value;
      return value;
    },
    get_isImage: function() {
      return this._studyImageset != null || this._backgroundImageSet != null;
    },
    get_isTour: function() {
      return false;
    },
    get_isFolder: function() {
      return false;
    },
    get_children: function() {
      return [];
    },
    get_readOnly: function() {
      return true;
    },
    get_target: function() {
      return this._camParams.target;
    },
    set_target: function(value) {
      this._camParams.target = value;
      return value;
    },
    get_isCloudCommunityItem: function() {
      return false;
    }
  };


  // wwtlib.Class1

  function Class1() {
  }
  var Class1$ = {

  };


  // wwtlib.PositionVertexBuffer

  function PositionVertexBuffer(count) {
    this.count = 0;
    this._verts$1 = null;
    VertexBufferBase.call(this);
    this.count = count;
  }
  var PositionVertexBuffer$ = {
    lock: function() {
      this._verts$1 = new Array(this.count);
      return this._verts$1;
    },
    unlock: function() {
      this.vertexBuffer = Tile.prepDevice.createBuffer();
      Tile.prepDevice.bindBuffer(34962, this.vertexBuffer);
      var f32array = new Float32Array(this.count * 3);
      var buffer = f32array;
      var index = 0;
      var $enum1 = ss.enumerate(this._verts$1);
      while ($enum1.moveNext()) {
        var pt = $enum1.current;
        buffer[index++] = pt.x;
        buffer[index++] = pt.y;
        buffer[index++] = pt.z;
      }
      Tile.prepDevice.bufferData(34962, f32array, 35044);
    }
  };


  // wwtlib.PositionTextureVertexBuffer

  function PositionTextureVertexBuffer(count) {
    this.count = 0;
    this._verts$1 = null;
    VertexBufferBase.call(this);
    this.count = count;
  }
  PositionTextureVertexBuffer.create = function(data) {
    var buffer = new PositionTextureVertexBuffer(data.length);
    buffer._verts$1 = data;
    buffer.unlock();
    return buffer;
  };
  var PositionTextureVertexBuffer$ = {
    lock: function() {
      this._verts$1 = new Array(this.count);
      return this._verts$1;
    },
    unlock: function() {
      this.vertexBuffer = Tile.prepDevice.createBuffer();
      Tile.prepDevice.bindBuffer(34962, this.vertexBuffer);
      var f32array = new Float32Array(this.count * 5);
      var buffer = f32array;
      var index = 0;
      var $enum1 = ss.enumerate(this._verts$1);
      while ($enum1.moveNext()) {
        var pt = $enum1.current;
        buffer[index++] = pt.position.x;
        buffer[index++] = pt.position.y;
        buffer[index++] = pt.position.z;
        buffer[index++] = pt.tu;
        buffer[index++] = pt.tv;
      }
      Tile.prepDevice.bufferData(34962, f32array, 35044);
    }
  };


  // wwtlib.PositionNormalTexturedVertexBuffer

  function PositionNormalTexturedVertexBuffer(count) {
    this.count = 0;
    this._verts$1 = null;
    VertexBufferBase.call(this);
    this.count = count;
  }
  PositionNormalTexturedVertexBuffer.create = function(data) {
    var buffer = new PositionNormalTexturedVertexBuffer(data.length);
    buffer._verts$1 = data;
    buffer.unlock();
    return buffer;
  };
  var PositionNormalTexturedVertexBuffer$ = {
    lock: function() {
      this._verts$1 = new Array(this.count);
      return this._verts$1;
    },
    unlock: function() {
      this.vertexBuffer = Tile.prepDevice.createBuffer();
      Tile.prepDevice.bindBuffer(34962, this.vertexBuffer);
      var f32array = new Float32Array(this.count * 8);
      var buffer = f32array;
      var index = 0;
      var $enum1 = ss.enumerate(this._verts$1);
      while ($enum1.moveNext()) {
        var pt = $enum1.current;
        buffer[index++] = pt.x;
        buffer[index++] = pt.y;
        buffer[index++] = pt.z;
        buffer[index++] = pt.nx;
        buffer[index++] = pt.ny;
        buffer[index++] = pt.nz;
        buffer[index++] = pt.tu;
        buffer[index++] = pt.tv;
      }
      Tile.prepDevice.bufferData(34962, f32array, 35044);
    }
  };


  // wwtlib.PositionNormalTexturedTangentVertexBuffer

  function PositionNormalTexturedTangentVertexBuffer(count) {
    this.count = 0;
    this._verts$1 = null;
    VertexBufferBase.call(this);
    this.count = count;
  }
  PositionNormalTexturedTangentVertexBuffer.create = function(data) {
    var buffer = new PositionNormalTexturedTangentVertexBuffer(data.length);
    buffer._verts$1 = data;
    buffer.unlock();
    return buffer;
  };
  var PositionNormalTexturedTangentVertexBuffer$ = {
    lock: function() {
      this._verts$1 = new Array(this.count);
      return this._verts$1;
    },
    unlock: function() {
      this.vertexBuffer = Tile.prepDevice.createBuffer();
      Tile.prepDevice.bindBuffer(34962, this.vertexBuffer);
      var f32array = new Float32Array(this.count * 11);
      var buffer = f32array;
      var index = 0;
      var $enum1 = ss.enumerate(this._verts$1);
      while ($enum1.moveNext()) {
        var pt = $enum1.current;
        buffer[index++] = pt.x;
        buffer[index++] = pt.y;
        buffer[index++] = pt.z;
        buffer[index++] = pt.nx;
        buffer[index++] = pt.ny;
        buffer[index++] = pt.nz;
        buffer[index++] = pt.tanx;
        buffer[index++] = pt.tany;
        buffer[index++] = pt.tanz;
        buffer[index++] = pt.tu;
        buffer[index++] = pt.tv;
      }
      Tile.prepDevice.bufferData(34962, f32array, 35044);
    }
  };


  // wwtlib.KeplerVertexBuffer

  function KeplerVertexBuffer(count) {
    this.count = 0;
    this._verts$1 = null;
    VertexBufferBase.call(this);
    this.count = count;
  }
  KeplerVertexBuffer.create = function(items) {
    var tmp = new KeplerVertexBuffer(items.length);
    tmp._verts$1 = items;
    return tmp;
  };
  var KeplerVertexBuffer$ = {
    lock: function() {
      this._verts$1 = new Array(this.count);
      return this._verts$1;
    },
    unlock: function() {
      this.vertexBuffer = Tile.prepDevice.createBuffer();
      Tile.prepDevice.bindBuffer(34962, this.vertexBuffer);
      var f32array = new Float32Array(this.count * 19);
      var buffer = f32array;
      var index = 0;
      var $enum1 = ss.enumerate(this._verts$1);
      while ($enum1.moveNext()) {
        var pt = $enum1.current;
        buffer[index++] = pt.ABC.x;
        buffer[index++] = pt.ABC.y;
        buffer[index++] = pt.ABC.z;
        buffer[index++] = pt.abc1.x;
        buffer[index++] = pt.abc1.y;
        buffer[index++] = pt.abc1.z;
        buffer[index++] = pt.pointSize;
        buffer[index++] = pt.color.r / 255;
        buffer[index++] = pt.color.g / 255;
        buffer[index++] = pt.color.b / 255;
        buffer[index++] = pt.color.a / 255;
        buffer[index++] = pt.w;
        buffer[index++] = pt.e;
        buffer[index++] = pt.n;
        buffer[index++] = pt.t;
        buffer[index++] = pt.a;
        buffer[index++] = pt.z;
        buffer[index++] = pt.orbitPos;
        buffer[index++] = pt.orbits;
      }
      Tile.prepDevice.bufferData(34962, f32array, 35044);
    }
  };


  // wwtlib.TimeSeriesLineVertexBuffer

  function TimeSeriesLineVertexBuffer(count) {
    this.count = 0;
    this._verts$1 = null;
    VertexBufferBase.call(this);
    this.count = count;
  }
  var TimeSeriesLineVertexBuffer$ = {
    lock: function() {
      this._verts$1 = new Array(this.count);
      return this._verts$1;
    },
    unlock: function() {
      this.vertexBuffer = Tile.prepDevice.createBuffer();
      Tile.prepDevice.bindBuffer(34962, this.vertexBuffer);
      var f32array = new Float32Array(this.count * 9);
      var buffer = f32array;
      var index = 0;
      var $enum1 = ss.enumerate(this._verts$1);
      while ($enum1.moveNext()) {
        var pt = $enum1.current;
        buffer[index++] = pt.position.x;
        buffer[index++] = pt.position.y;
        buffer[index++] = pt.position.z;
        buffer[index++] = pt.get_color().r / 255;
        buffer[index++] = pt.get_color().g / 255;
        buffer[index++] = pt.get_color().b / 255;
        buffer[index++] = pt.get_color().a / 255;
        buffer[index++] = pt.tu;
        buffer[index++] = pt.tv;
      }
      Tile.prepDevice.bufferData(34962, f32array, 35044);
    }
  };


  // wwtlib.TimeSeriesPointVertexBuffer

  function TimeSeriesPointVertexBuffer(count) {
    this.count = 0;
    this._verts$1 = null;
    VertexBufferBase.call(this);
    this.count = count;
  }
  var TimeSeriesPointVertexBuffer$ = {
    lock: function() {
      this._verts$1 = new Array(this.count);
      return this._verts$1;
    },
    unlock: function() {
      this.vertexBuffer = Tile.prepDevice.createBuffer();
      Tile.prepDevice.bindBuffer(34962, this.vertexBuffer);
      var f32array = new Float32Array(this.count * 10);
      var buffer = f32array;
      var index = 0;
      var $enum1 = ss.enumerate(this._verts$1);
      while ($enum1.moveNext()) {
        var pt = $enum1.current;
        buffer[index++] = pt.position.x;
        buffer[index++] = pt.position.y;
        buffer[index++] = pt.position.z;
        buffer[index++] = pt.get_color().r / 255;
        buffer[index++] = pt.get_color().g / 255;
        buffer[index++] = pt.get_color().b / 255;
        buffer[index++] = pt.get_color().a / 255;
        buffer[index++] = pt.tu;
        buffer[index++] = pt.tv;
        buffer[index++] = pt.pointSize;
      }
      Tile.prepDevice.bufferData(34962, f32array, 35044);
    },
    dispose: function() {
      Tile.prepDevice.bindBuffer(34962, null);
      Tile.prepDevice.deleteBuffer(this.vertexBuffer);
      this.vertexBuffer = null;
    }
  };


  // wwtlib.PositionColoredVertexBuffer

  function PositionColoredVertexBuffer(count) {
    this.count = 0;
    this._verts$1 = null;
    VertexBufferBase.call(this);
    this.count = count;
  }
  var PositionColoredVertexBuffer$ = {
    lock: function() {
      this._verts$1 = new Array(this.count);
      return this._verts$1;
    },
    unlock: function() {
      this.vertexBuffer = Tile.prepDevice.createBuffer();
      Tile.prepDevice.bindBuffer(34962, this.vertexBuffer);
      var f32array = new Float32Array(this.count * 7);
      var buffer = f32array;
      var index = 0;
      var $enum1 = ss.enumerate(this._verts$1);
      while ($enum1.moveNext()) {
        var pt = $enum1.current;
        buffer[index++] = pt.position.x;
        buffer[index++] = pt.position.y;
        buffer[index++] = pt.position.z;
        buffer[index++] = pt.color.r / 255;
        buffer[index++] = pt.color.g / 255;
        buffer[index++] = pt.color.b / 255;
        buffer[index++] = pt.color.a / 255;
      }
      Tile.prepDevice.bufferData(34962, f32array, 35044);
    }
  };


  // wwtlib.PositionColoredTexturedVertexBuffer

  function PositionColoredTexturedVertexBuffer(count) {
    this.count = 0;
    this._verts$1 = null;
    VertexBufferBase.call(this);
    this.count = count;
  }
  var PositionColoredTexturedVertexBuffer$ = {
    lock: function() {
      this._verts$1 = new Array(this.count);
      return this._verts$1;
    },
    unlock: function() {
      this.vertexBuffer = Tile.prepDevice.createBuffer();
      Tile.prepDevice.bindBuffer(34962, this.vertexBuffer);
      var f32array = new Float32Array(this.count * 9);
      var buffer = f32array;
      var index = 0;
      var $enum1 = ss.enumerate(this._verts$1);
      while ($enum1.moveNext()) {
        var pt = $enum1.current;
        buffer[index++] = pt.position.x;
        buffer[index++] = pt.position.y;
        buffer[index++] = pt.position.z;
        buffer[index++] = pt.color.r / 255;
        buffer[index++] = pt.color.g / 255;
        buffer[index++] = pt.color.b / 255;
        buffer[index++] = pt.color.a / 255;
        buffer[index++] = pt.tu;
        buffer[index++] = pt.tv;
      }
      Tile.prepDevice.bufferData(34962, f32array, 35044);
    }
  };


  // wwtlib.FitsImage

  function FitsImage(file, blob, callMeBack) {
    this._header$1 = {};
    this.sourceBlob = null;
    this.histogramMaxCount = 0;
    this.width = 0;
    this.height = 0;
    this.numAxis = 0;
    this.bZero = 0;
    this.dataType = 5;
    this.containsBlanks = false;
    this.blankValue = Number.MIN_VALUE;
    this.maxVal = Number.MIN_VALUE;
    this.minVal = Number.MAX_VALUE;
    this.transparentBlack = true;
    this.lastMin = 0;
    this.lastMax = 255;
    this._color$1 = false;
    this._sizeZ$1 = 1;
    this.depth = 1;
    this._bufferSize$1 = 1;
    this.lastScale = 0;
    this.lastBitmapMin = 0;
    this.lastBitmapMax = 0;
    this.lastBitmapZ = 0;
    WcsImage.call(this);
    FitsImage.last = this;
    this._callBack$1 = callMeBack;
    this.filename = file;
    if (blob != null) {
      this._readFromBlob$1(blob);
    }
    else {
      this.getFile(file);
    }
  }
  FitsImage.isGzip = function(br) {
    var line = br.readBytes(2);
    br.seek(0);
    if (line[0] === 31 && line[1] === 139) {
      return true;
    }
    else {
      return false;
    }
  };
  var FitsImage$ = {
    getFile: function(url) {
      this._webFile$1 = new WebFile(url);
      this._webFile$1.responseType = 'blob';
      this._webFile$1.onStateChange = ss.bind('fileStateChange', this);
      this._webFile$1.send();
    },
    fileStateChange: function() {
      if (this._webFile$1.get_state() === 2) {
        alert(this._webFile$1.get_message());
      }
      else if (this._webFile$1.get_state() === 1) {
        var mainBlob = this._webFile$1.getBlob();
        this._readFromBlob$1(mainBlob);
      }
    },
    _readFromBlob$1: function(blob) {
      var $this = this;

      this.sourceBlob = blob;
      var chunck = new FileReader();
      chunck.onloadend = function(e) {
        $this._readFromBin$1(new BinaryReader(new Uint8Array(chunck.result)));
        if ($this._callBack$1 != null) {
          $this._callBack$1($this);
        }
      };
      chunck.readAsArrayBuffer(blob);
    },
    _readFromBin$1: function(br) {
      this.parseHeader(br);
    },
    parseHeader: function(br) {
      var foundEnd = false;
      while (!foundEnd) {
        for (var i = 0; i < 36; i++) {
          var data = br.readByteString(80);
          if (!foundEnd) {
            var keyword = ss.trimEnd(data.substring(0, 8));
            var values = data.substring(10).split('/');
            if (keyword.toUpperCase() === 'END') {
              foundEnd = true;
              i++;
              data = br.readByteString(80);
              while (ss.whitespace(data)) {
                i++;
                data = br.readByteString(80);
              }
              keyword = ss.trimEnd(data.substring(0, 8));
              values = data.substring(10).split('/');
              if (keyword.toUpperCase() === 'XTENSION') {
                foundEnd = false;
              }
              else {
                br.seekRelative(-80);
              }
            }
            else {
              this._addKeyword$1(keyword, values);
            }
          }
        }
      }
      this.numAxis = parseInt(this._header$1['NAXIS']);
      this.containsBlanks = ss.keyExists(this._header$1, 'BLANK');
      if (this.containsBlanks) {
        this.blankValue = parseFloat(this._header$1['BLANK']);
      }
      if (ss.keyExists(this._header$1, 'BZERO')) {
        this.bZero = parseFloat(this._header$1['BZERO']);
      }
      this.axisSize = new Array(this.numAxis);
      for (var axis = 0; axis < this.numAxis; axis++) {
        this.axisSize[axis] = parseInt(this._header$1[ss.format('NAXIS{0}', axis + 1)]);
        this._bufferSize$1 *= this.axisSize[axis];
      }
      var bitsPix = parseInt(this._header$1['BITPIX']);
      switch (bitsPix) {
        case 8:
          this.dataType = 0;
          this._initDataBytes$1(br);
          break;
        case 16:
          this.dataType = 1;
          this._initDataShort$1(br);
          break;
        case 32:
          this.dataType = 2;
          this._initDataInt$1(br);
          break;
        case -32:
          this.dataType = 3;
          this._initDataFloat$1(br);
          break;
        case -64:
          this.dataType = 4;
          this._initDataDouble$1(br);
          break;
        default:
          this.dataType = 5;
          break;
      }
      if (this.numAxis > 1) {
        if (this.numAxis === 3) {
          if (this.axisSize[2] === 3) {
            this._color$1 = true;
          }
        }
        if (this.numAxis > 2) {
          this._sizeZ$1 = this.depth = this.axisSize[2];
          this.lastBitmapZ = ss.truncate((this._sizeZ$1 / 2));
        }
        this.sizeX = this.width = this.axisSize[0];
        this.sizeY = this.height = this.axisSize[1];
        this._computeWcs$1();
        this.histogram = this.computeHistogram(256);
        this.histogramMaxCount = this.histogram[256];
      }
    },
    getZDescription: function() {
      var description = '';
      if (this._header$1['RESTFREQ'] != null && this._header$1['CRPIX3'] != null && this._header$1['CDELT3'] != null && this._header$1['CRVAL3'] != null) {
        var c = 299792.458;
        var f0 = parseFloat(this._header$1['RESTFREQ']);
        var crpix3 = parseFloat(this._header$1['CRPIX3']);
        var cdelt3 = parseFloat(this._header$1['CDELT3']);
        var crval3 = parseFloat(this._header$1['CRVAL3']);
        var f = ((this.lastBitmapZ + 1) - crpix3) * cdelt3 + crval3;
        var fval = ((f0 - f) / f0) * c;
        description = ss.format('Velocity {0} km/s', ss.truncate(fval));
      }
      return description;
    },
    _addKeyword$1: function(keyword, values) {
      if (keyword !== 'CONTINUE' && keyword !== 'COMMENT' && keyword !== 'HISTORY' && !ss.emptyString(keyword)) {
        try {
          if (ss.keyExists(this._header$1, keyword)) {
            this._header$1[keyword] = ss.trim(values[0]);
          }
          else {
            this._header$1[keyword.toUpperCase()] = ss.trim(values[0]);
          }
        }
        catch ($e1) {
        }
      }
    },
    _computeWcs$1: function() {
      if (ss.keyExists(this._header$1, 'CROTA2')) {
        this.rotation = parseFloat(ss.trim(this._header$1['CROTA2']));
        this.hasRotation = true;
      }
      if (ss.keyExists(this._header$1, 'CDELT1')) {
        this.scaleX = parseFloat(ss.trim(this._header$1['CDELT1']));
        if (ss.keyExists(this._header$1, 'CDELT2')) {
          this.scaleY = parseFloat(ss.trim(this._header$1['CDELT2']));
          this.hasScale = true;
        }
      }
      if (ss.keyExists(this._header$1, 'CRPIX1')) {
        this.referenceX = parseFloat(ss.trim(this._header$1['CRPIX1'])) - 1;
        if (ss.keyExists(this._header$1, 'CRPIX2')) {
          this.referenceY = parseFloat(ss.trim(this._header$1['CRPIX2'])) - 1;
          this.hasPixel = true;
        }
      }
      var galactic = false;
      var tan = false;
      if (ss.keyExists(this._header$1, 'CTYPE1')) {
        if (this._header$1['CTYPE1'].indexOf('GLON-') > -1) {
          galactic = true;
          tan = true;
        }
        if (this._header$1['CTYPE2'].indexOf('GLAT-') > -1) {
          galactic = true;
          tan = true;
        }
        if (this._header$1['CTYPE1'].indexOf('-TAN') > -1) {
          tan = true;
        }
        if (this._header$1['CTYPE1'].indexOf('-SIN') > -1) {
          tan = true;
        }
      }
      if (!tan) {
        throw new Error('Only TAN projected images are supported: ');
      }
      this.hasSize = true;
      if (ss.keyExists(this._header$1, 'CRVAL1')) {
        this.centerX = parseFloat(ss.trim(this._header$1['CRVAL1']));
        if (ss.keyExists(this._header$1, 'CRVAL2')) {
          this.centerY = parseFloat(ss.trim(this._header$1['CRVAL2']));
          this.hasLocation = true;
        }
      }
      if (galactic) {
        var result = Coordinates.galactictoJ2000(this.centerX, this.centerY);
        this.centerX = result[0];
        this.centerY = result[1];
      }
      if (ss.keyExists(this._header$1, 'CD1_1') && ss.keyExists(this._header$1, 'CD1_2') && ss.keyExists(this._header$1, 'CD2_1') && ss.keyExists(this._header$1, 'CD2_2')) {
        this.cd1_1 = parseFloat(ss.trim(this._header$1['CD1_1']));
        this.cd1_2 = parseFloat(ss.trim(this._header$1['CD1_2']));
        this.cd2_1 = parseFloat(ss.trim(this._header$1['CD2_1']));
        this.cd2_2 = parseFloat(ss.trim(this._header$1['CD2_2']));
        if (!this.hasRotation) {
          this.calculateRotationFromCD();
        }
        if (!this.hasScale) {
          this.calculateScaleFromCD();
        }
        this.hasScale = true;
        this.hasRotation = true;
      }
      this.set_validWcs(this.hasScale && this.hasRotation && this.hasPixel && this.hasLocation);
    },
    getHistogramBitmap: function(max) {
      var bmp = Bitmap.create(this.histogram.length, 150);
      return bmp;
    },
    drawHistogram: function(ctx) {
      ctx.clearRect(0, 0, 255, 150);
      ctx.beginPath();
      ctx.strokeStyle = 'rgba(255,255,255,255)';
      var logMax = Math.log(this.histogramMaxCount);
      for (var i = 0; i < this.histogram.length; i++) {
        var height = Math.log(this.histogram[i]) / logMax;
        if (height < 0) {
          height = 0;
        }
        ctx.moveTo(i, 150);
        ctx.lineTo(i, 150 - (height * 150));
        ctx.stroke();
      }
    },
    computeHistogram: function(count) {
      var histogram = new Array(count + 1);
      for (var i = 0; i < count + 1; i++) {
        histogram[i] = 0;
      }
      switch (this.dataType) {
        case 0:
          this._computeHistogramByte$1(histogram);
          break;
        case 1:
          this._computeHistogramInt16$1(histogram);
          break;
        case 2:
          this._computeHistogramInt32$1(histogram);
          break;
        case 3:
          this._computeHistogramFloat$1(histogram);
          break;
        case 4:
          this._computeHistogramDouble$1(histogram);
          break;
        case 5:
        default:
          break;
      }
      var maxCounter = 1;
      var $enum1 = ss.enumerate(histogram);
      while ($enum1.moveNext()) {
        var val = $enum1.current;
        if (val > maxCounter) {
          maxCounter = val;
        }
      }
      histogram[count] = maxCounter;
      return histogram;
    },
    _computeHistogramDouble$1: function(histogram) {
      var buckets = histogram.length;
      var buf = this.dataBuffer;
      var factor = (this.maxVal - this.minVal) / buckets;
      var $enum1 = ss.enumerate(buf);
      while ($enum1.moveNext()) {
        var val = $enum1.current;
        if (!(val === Number.NaN)) {
          histogram[Math.min(buckets - 1, ss.truncate(((val - this.minVal) / factor)))]++;
        }
      }
    },
    _computeHistogramFloat$1: function(histogram) {
      var buckets = histogram.length;
      var buf = this.dataBuffer;
      var factor = (this.maxVal - this.minVal) / buckets;
      var $enum1 = ss.enumerate(buf);
      while ($enum1.moveNext()) {
        var val = $enum1.current;
        if (!(val === FitsImage._naN$1)) {
          histogram[Math.min(buckets - 1, ss.truncate(((val - this.minVal) / factor)))]++;
        }
      }
    },
    _computeHistogramInt32$1: function(histogram) {
      var buckets = histogram.length;
      var buf = this.dataBuffer;
      var factor = (this.maxVal - this.minVal) / buckets;
      var $enum1 = ss.enumerate(buf);
      while ($enum1.moveNext()) {
        var val = $enum1.current;
        histogram[Math.min(buckets - 1, ss.truncate(((val - this.minVal) / factor)))]++;
      }
    },
    _computeHistogramInt16$1: function(histogram) {
      var buckets = histogram.length;
      var buf = this.dataBuffer;
      var factor = (this.maxVal - this.minVal) / buckets;
      var $enum1 = ss.enumerate(buf);
      while ($enum1.moveNext()) {
        var val = $enum1.current;
        histogram[Math.min(buckets - 1, ss.truncate(((val - this.minVal) / factor)))]++;
      }
    },
    _computeHistogramByte$1: function(histogram) {
      var buckets = histogram.length;
      var buf = this.dataBuffer;
      var factor = (this.maxVal - this.minVal) / buckets;
      var $enum1 = ss.enumerate(buf);
      while ($enum1.moveNext()) {
        var val = $enum1.current;
        histogram[Math.min(buckets - 1, ss.truncate(((val - this.minVal) / factor)))]++;
      }
    },
    _initDataBytes$1: function(br) {
      var buffer = new Array(this._bufferSize$1);
      this.dataBuffer = buffer;
      for (var i = 0; i < this._bufferSize$1; i++) {
        buffer[i] = br.readByte();
        if (this.minVal > buffer[i]) {
          this.minVal = buffer[i];
        }
        if (this.maxVal < buffer[i]) {
          this.maxVal = buffer[i];
        }
      }
    },
    _initDataShort$1: function(br) {
      var buffer = new Array(this._bufferSize$1);
      this.dataBuffer = buffer;
      for (var i = 0; i < this._bufferSize$1; i++) {
        buffer[i] = ((br.readSByte() * 256) + br.readByte());
        if (this.minVal > buffer[i]) {
          this.minVal = buffer[i];
        }
        if (this.maxVal < buffer[i]) {
          this.maxVal = buffer[i];
        }
      }
    },
    _initDataUnsignedShort$1: function(br) {
      var buffer = new Array(this._bufferSize$1);
      this.dataBuffer = buffer;
      for (var i = 0; i < this._bufferSize$1; i++) {
        buffer[i] = (((br.readSByte() * 256) + br.readByte()) + 32768);
        if (this.minVal > buffer[i]) {
          this.minVal = buffer[i];
        }
        if (this.maxVal < buffer[i]) {
          this.maxVal = buffer[i];
        }
      }
    },
    _initDataInt$1: function(br) {
      var buffer = new Array(this._bufferSize$1);
      this.dataBuffer = buffer;
      for (var i = 0; i < this._bufferSize$1; i++) {
        buffer[i] = (br.readSByte() << 24) + (br.readSByte() << 16) + (br.readSByte() << 8) + br.readByte();
        if (this.minVal > buffer[i]) {
          this.minVal = buffer[i];
        }
        if (this.maxVal < buffer[i]) {
          this.maxVal = buffer[i];
        }
      }
    },
    _initDataFloat$1: function(br) {
      var buffer = new Array(this._bufferSize$1);
      this.dataBuffer = buffer;
      var part = new Uint8Array(4);
      for (var i = 0; i < this._bufferSize$1; i++) {
        part[3] = br.readByte();
        part[2] = br.readByte();
        part[1] = br.readByte();
        part[0] = br.readByte();
        buffer[i] = new Float32Array(part.buffer, 0, 1)[0];
        if (this.minVal > buffer[i]) {
          this.minVal = buffer[i];
        }
        if (this.maxVal < buffer[i]) {
          this.maxVal = buffer[i];
        }
      }
    },
    _initDataDouble$1: function(br) {
    },
    getBitmap: function() {
      if (!this.lastBitmapMax && !this.lastBitmapMin) {
        this.lastBitmapMin = this.minVal;
        this.lastBitmapMax = this.maxVal;
      }
      return this.getScaledBitmap(this.lastBitmapMin, this.lastBitmapMax, this.lastScale, this.lastBitmapZ);
    },
    getScaledBitmap: function(min, max, scaleType, z) {
      z = Math.min(z, this._sizeZ$1);
      var scale;
      this.lastScale = scaleType;
      this.lastBitmapMin = min;
      this.lastBitmapMax = max;
      this.lastBitmapZ = z;
      switch (scaleType) {
        case 0:
        default:
          scale = new ScaleLinear(min, max);
          break;
        case 1:
          scale = new ScaleLog(min, max);
          break;
        case 2:
          scale = new ScalePow(min, max);
          break;
        case 3:
          scale = new ScaleSqrt(min, max);
          break;
        case 4:
          scale = new HistogramEqualization(this, min, max);
          break;
      }
      try {
        switch (this.dataType) {
          case 0:
            return this._getBitmapByte$1(min, max, scale, this.lastBitmapZ);
          case 1:
            return this.getBitmapShort(min, max, scale, this.lastBitmapZ);
          case 2:
            return this._getBitmapInt$1(min, max, scale, this.lastBitmapZ);
          case 3:
            return this._getBitmapFloat$1(min, max, scale, this.lastBitmapZ);
          case 4:
            return this._getBitmapDouble$1(min, max, scale, this.lastBitmapZ);
          case 5:
          default:
            return Bitmap.create(100, 100);
        }
      }
      catch ($e1) {
        return Bitmap.create(10, 10);
      }
    },
    _getBitmapByte$1: function(min, max, scale, z) {
      var buf = this.dataBuffer;
      var factor = max - min;
      var stride = this.axisSize[0];
      var page = this.axisSize[0] * this.axisSize[1] * z;
      var bmp = Bitmap.create(this.axisSize[0], this.axisSize[1]);
      for (var y = 0; y < this.axisSize[1]; y++) {
        var indexY = ((this.axisSize[1] - 1) - y);
        for (var x = 0; x < this.axisSize[0]; x++) {
          if (this._color$1) {
            var datR = buf[(x + indexY * stride)];
            var datG = buf[(x + indexY * stride) + page];
            var datB = buf[(x + indexY * stride) + page * 2];
            if (this.containsBlanks && datR === this.blankValue) {
              bmp.setPixel(x, y, 0, 0, 0, 0);
            }
            else {
              var r = scale.map(datR);
              var g = scale.map(datG);
              var b = scale.map(datB);
              bmp.setPixel(x, y, r, g, b, 255);
            }
          }
          else {
            var dataValue = buf[x + indexY * stride + page];
            if (this.containsBlanks && dataValue === this.blankValue) {
              bmp.setPixel(x, y, 0, 0, 0, 0);
            }
            else {
              var val = scale.map(dataValue);
              bmp.setPixel(x, y, val, val, val, (this.transparentBlack && !val) ? 0 : 255);
            }
          }
        }
      }
      return bmp;
    },
    _getBitmapDouble$1: function(min, max, scale, z) {
      var buf = this.dataBuffer;
      var factor = max - min;
      var stride = this.axisSize[0];
      var page = this.axisSize[0] * this.axisSize[1] * z;
      var bmp = Bitmap.create(this.axisSize[0], this.axisSize[1]);
      for (var y = 0; y < this.axisSize[1]; y++) {
        var indexY = ((this.axisSize[1] - 1) - y);
        for (var x = 0; x < this.axisSize[0]; x++) {
          if (this._color$1) {
            var datR = buf[(x + indexY * stride)];
            var datG = buf[(x + indexY * stride) + page];
            var datB = buf[(x + indexY * stride) + page * 2];
            if (this.containsBlanks && datR === this.blankValue) {
              bmp.setPixel(x, y, 0, 0, 0, 0);
            }
            else {
              var r = scale.map(datR);
              var g = scale.map(datG);
              var b = scale.map(datB);
              bmp.setPixel(x, y, r, g, b, 255);
            }
          }
          else {
            var dataValue = buf[x + indexY * stride + page];
            if (this.containsBlanks && dataValue === this.blankValue) {
              bmp.setPixel(x, y, 0, 0, 0, 0);
            }
            else {
              var val = scale.map(dataValue);
              bmp.setPixel(x, y, val, val, val, (this.transparentBlack && !val) ? 0 : 255);
            }
          }
        }
      }
      return bmp;
    },
    _getBitmapFloat$1: function(min, max, scale, z) {
      var buf = this.dataBuffer;
      var factor = max - min;
      var stride = this.axisSize[0];
      var page = this.axisSize[0] * this.axisSize[1] * z;
      var bmp = Bitmap.create(this.axisSize[0], this.axisSize[1]);
      for (var y = 0; y < this.axisSize[1]; y++) {
        var indexY = ((this.axisSize[1] - 1) - y);
        for (var x = 0; x < this.axisSize[0]; x++) {
          if (this._color$1) {
            var datR = buf[(x + indexY * stride)];
            var datG = buf[(x + indexY * stride) + page];
            var datB = buf[(x + indexY * stride) + page * 2];
            if (this.containsBlanks && datR === this.blankValue) {
              bmp.setPixel(x, y, 0, 0, 0, 0);
            }
            else {
              var r = scale.map(datR);
              var g = scale.map(datG);
              var b = scale.map(datB);
              bmp.setPixel(x, y, r, g, b, 255);
            }
          }
          else {
            var dataValue = buf[x + indexY * stride + page];
            if (this.containsBlanks && dataValue === this.blankValue) {
              bmp.setPixel(x, y, 0, 0, 0, 0);
            }
            else {
              var val = scale.map(dataValue);
              bmp.setPixel(x, y, val, val, val, (this.transparentBlack && !val) ? 0 : 255);
            }
          }
        }
      }
      return bmp;
    },
    _getBitmapInt$1: function(min, max, scale, z) {
      var buf = this.dataBuffer;
      var factor = max - min;
      var stride = this.axisSize[0];
      var page = this.axisSize[0] * this.axisSize[1] * z;
      var bmp = Bitmap.create(this.axisSize[0], this.axisSize[1]);
      for (var y = 0; y < this.axisSize[1]; y++) {
        var indexY = ((this.axisSize[1] - 1) - y);
        for (var x = 0; x < this.axisSize[0]; x++) {
          if (this._color$1) {
            var datR = buf[(x + indexY * stride)];
            var datG = buf[(x + indexY * stride) + page];
            var datB = buf[(x + indexY * stride) + page * 2];
            if (this.containsBlanks && datR === this.blankValue) {
              bmp.setPixel(x, y, 0, 0, 0, 0);
            }
            else {
              var r = scale.map(datR);
              var g = scale.map(datG);
              var b = scale.map(datB);
              bmp.setPixel(x, y, r, g, b, 255);
            }
          }
          else {
            var dataValue = buf[x + indexY * stride + page];
            if (this.containsBlanks && dataValue === this.blankValue) {
              bmp.setPixel(x, y, 0, 0, 0, 0);
            }
            else {
              var val = scale.map(dataValue);
              bmp.setPixel(x, y, val, val, val, (this.transparentBlack && !val) ? 0 : 255);
            }
          }
        }
      }
      return bmp;
    },
    getBitmapShort: function(min, max, scale, z) {
      var buf = this.dataBuffer;
      var factor = max - min;
      var stride = this.axisSize[0];
      var page = this.axisSize[0] * this.axisSize[1] * z;
      var bmp = Bitmap.create(this.axisSize[0], this.axisSize[1]);
      for (var y = 0; y < this.axisSize[1]; y++) {
        var indexY = ((this.axisSize[1] - 1) - y);
        for (var x = 0; x < this.axisSize[0]; x++) {
          if (this._color$1) {
            var datR = buf[(x + indexY * stride)];
            var datG = buf[(x + indexY * stride) + page];
            var datB = buf[(x + indexY * stride) + page * 2];
            if (this.containsBlanks && datR === this.blankValue) {
              bmp.setPixel(x, y, 0, 0, 0, 0);
            }
            else {
              var r = scale.map(datR);
              var g = scale.map(datG);
              var b = scale.map(datB);
              bmp.setPixel(x, y, r, g, b, 255);
            }
          }
          else {
            var dataValue = buf[x + indexY * stride + page];
            if (this.containsBlanks && dataValue === this.blankValue) {
              bmp.setPixel(x, y, 0, 0, 0, 0);
            }
            else {
              var val = scale.map(dataValue);
              bmp.setPixel(x, y, val, val, val, (this.transparentBlack && !val) ? 0 : 255);
            }
          }
        }
      }
      return bmp;
    }
  };


  // wwtlib.ScaleLinear

  function ScaleLinear(min, max) {
    this._min$1 = 0;
    this._max$1 = 0;
    this._factor$1 = 0;
    this._logFactor$1 = 0;
    ScaleMap.call(this);
    this._min$1 = min;
    this._max$1 = max;
    this._factor$1 = max - min;
  }
  var ScaleLinear$ = {
    map: function(val) {
      return Math.min(255, Math.max(0, ss.truncate(((val - this._min$1) / this._factor$1 * 255))));
    }
  };


  // wwtlib.ScaleLog

  function ScaleLog(min, max) {
    this._min$1 = 0;
    this._max$1 = 0;
    this._factor$1 = 0;
    this._logFactor$1 = 0;
    ScaleMap.call(this);
    this._min$1 = min;
    this._max$1 = max;
    this._factor$1 = max - min;
    this._logFactor$1 = 255 / Math.log(255);
  }
  var ScaleLog$ = {
    map: function(val) {
      return Math.min(255, Math.max(0, ss.truncate((Math.log((val - this._min$1) / this._factor$1 * 255) * this._logFactor$1))));
    }
  };


  // wwtlib.ScalePow

  function ScalePow(min, max) {
    this._min$1 = 0;
    this._max$1 = 0;
    this._factor$1 = 0;
    this._powFactor$1 = 0;
    ScaleMap.call(this);
    this._min$1 = min;
    this._max$1 = max;
    this._factor$1 = max - min;
    this._powFactor$1 = 255 / Math.pow(255, 2);
  }
  var ScalePow$ = {
    map: function(val) {
      return Math.min(255, Math.max(0, ss.truncate((Math.pow((val - this._min$1) / this._factor$1 * 255, 2) * this._powFactor$1))));
    }
  };


  // wwtlib.ScaleSqrt

  function ScaleSqrt(min, max) {
    this._min$1 = 0;
    this._max$1 = 0;
    this._factor$1 = 0;
    this._sqrtFactor$1 = 0;
    ScaleMap.call(this);
    this._min$1 = min;
    this._max$1 = max;
    this._factor$1 = max - min;
    this._sqrtFactor$1 = 255 / Math.sqrt(255);
  }
  var ScaleSqrt$ = {
    map: function(val) {
      return Math.min(255, Math.max(0, ss.truncate((Math.sqrt((val - this._min$1) / this._factor$1 * 255) * this._sqrtFactor$1))));
    }
  };


  // wwtlib.HistogramEqualization

  function HistogramEqualization(image, min, max) {
    this._min$1 = 0;
    this._max$1 = 0;
    this._factor$1 = 0;
    this._maxHistogramValue$1 = 1;
    ScaleMap.call(this);
    this._min$1 = min;
    this._max$1 = max;
    this._factor$1 = max - min;
    this._histogram$1 = image.computeHistogram(10000);
    this._maxHistogramValue$1 = this._histogram$1[10000];
    this._lookup$1 = new Array(10000);
    var totalCounts = image.width * image.height;
    var sum = 0;
    for (var i = 0; i < 10000; i++) {
      sum += this._histogram$1[i];
      this._lookup$1[i] = (Math.min(255, (sum * 255) / totalCounts) + 0.5);
    }
  }
  var HistogramEqualization$ = {
    map: function(val) {
      return this._lookup$1[Math.min(10000 - 1, Math.max(0, ss.truncate(((val - this._min$1) / this._factor$1 * (10000 - 1)))))];
    }
  };


  // wwtlib.GreatCirlceRouteLayer

  function GreatCirlceRouteLayer() {
    this._triangleList$1 = null;
    this._latStart$1 = 0;
    this._lngStart$1 = 0;
    this._latEnd$1 = 0;
    this._lngEnd$1 = 0;
    this._width$1 = 4;
    this._percentComplete$1 = 100;
    Layer.call(this);
  }
  var GreatCirlceRouteLayer$ = {
    getTypeName: function() {
      return 'TerraViewer.GreatCirlceRouteLayer';
    },
    cleanUp: function() {
      if (this._triangleList$1 != null) {
        this._triangleList$1.clear();
      }
      this._triangleList$1 = null;
      Layer.prototype.cleanUp.call(this);
    },
    draw: function(renderContext, opacity, flat) {
      if (this._triangleList$1 == null) {
        this._initializeRoute$1(renderContext);
      }
      this._triangleList$1.jNow = this._percentComplete$1 / 100;
      this._triangleList$1.draw(renderContext, opacity * this.get_opacity(), 2);
      return true;
    },
    _initializeRoute$1: function(renderContext) {
      this._triangleList$1 = new TriangleList();
      this._triangleList$1.decay = 1000;
      this._triangleList$1.sky = this.get_astronomical();
      this._triangleList$1.timeSeries = true;
      this._triangleList$1.depthBuffered = false;
      this._triangleList$1.autoTime = false;
      var steps = 500;
      var start = Coordinates.geoTo3dDouble(this._latStart$1, this._lngStart$1);
      var end = Coordinates.geoTo3dDouble(this._latEnd$1, this._lngEnd$1);
      var dir = Vector3d.subtractVectors(end, start);
      dir.normalize();
      var startNormal = start;
      startNormal.normalize();
      var left = Vector3d.cross(startNormal, dir);
      var right = Vector3d.cross(dir, startNormal);
      left.normalize();
      right.normalize();
      left.multiply(0.001 * this._width$1);
      right.multiply(0.001 * this._width$1);
      var lastLeft = new Vector3d();
      var lastRight = new Vector3d();
      var firstTime = true;
      for (var i = 0; i <= steps; i++) {
        var v = Vector3d.lerp(start, end, i / steps);
        v.normalize();
        var cl = v;
        var cr = v;
        cl.add(left);
        cr.add(right);
        if (!firstTime) {
          this._triangleList$1.addQuad(lastRight, lastLeft, cr, cl, this.get_color(), new Dates(i / steps, 2));
        }
        else {
          firstTime = false;
        }
        lastLeft = cl;
        lastRight = cr;
      }
    },
    getParams: function() {
      return [ this._percentComplete$1 ];
    },
    getParamNames: function() {
      return [ 'Percentage' ];
    },
    setParams: function(paramList) {
      if (paramList.length > 0) {
        this._percentComplete$1 = paramList[0];
      }
    },
    get_latStart: function() {
      return this._latStart$1;
    },
    set_latStart: function(value) {
      if (this._latStart$1 !== value) {
        this._latStart$1 = value;
        this.version++;
      }
      return value;
    },
    get_lngStart: function() {
      return this._lngStart$1;
    },
    set_lngStart: function(value) {
      if (this._lngStart$1 !== value) {
        this._lngStart$1 = value;
        this.version++;
      }
      return value;
    },
    get_latEnd: function() {
      return this._latEnd$1;
    },
    set_latEnd: function(value) {
      if (this._latEnd$1 !== value) {
        this._latEnd$1 = value;
        this.version++;
      }
      return value;
    },
    get_lngEnd: function() {
      return this._lngEnd$1;
    },
    set_lngEnd: function(value) {
      if (this._lngEnd$1 !== value) {
        this._lngEnd$1 = value;
        this.version++;
      }
      return value;
    },
    get_width: function() {
      return this._width$1;
    },
    set_width: function(value) {
      if (this._width$1 !== value) {
        this._width$1 = value;
        this.version++;
      }
      return value;
    },
    get_percentComplete: function() {
      return this._percentComplete$1;
    },
    set_percentComplete: function(value) {
      if (this._percentComplete$1 !== value) {
        this._percentComplete$1 = value;
        this.version++;
      }
      return value;
    },
    writeLayerProperties: function(xmlWriter) {
      xmlWriter._writeAttributeString('LatStart', this.get_latStart().toString());
      xmlWriter._writeAttributeString('LngStart', this.get_lngStart().toString());
      xmlWriter._writeAttributeString('LatEnd', this.get_latEnd().toString());
      xmlWriter._writeAttributeString('LngEnd', this.get_lngEnd().toString());
      xmlWriter._writeAttributeString('Width', this.get_width().toString());
      xmlWriter._writeAttributeString('PercentComplete', this.get_percentComplete().toString());
    },
    initializeFromXml: function(node) {
      this._latStart$1 = parseFloat(node.attributes.getNamedItem('LatStart').nodeValue);
      this._lngStart$1 = parseFloat(node.attributes.getNamedItem('LngStart').nodeValue);
      this._latEnd$1 = parseFloat(node.attributes.getNamedItem('LatEnd').nodeValue);
      this._lngEnd$1 = parseFloat(node.attributes.getNamedItem('LngEnd').nodeValue);
      this._width$1 = parseFloat(node.attributes.getNamedItem('Width').nodeValue);
      this._percentComplete$1 = parseFloat(node.attributes.getNamedItem('PercentComplete').nodeValue);
    }
  };


  // wwtlib.GridLayer

  function GridLayer() {
    Layer.call(this);
  }
  var GridLayer$ = {
    draw: function(renderContext, opacity, flat) {
      Grids.drawPlanetGrid(renderContext, opacity * this.get_opacity(), this.get_color());
      Grids.drawPlanetGridText(renderContext, opacity * this.get_opacity(), this.get_color());
      return true;
    }
  };


  // wwtlib.ImageSetLayer

  function ImageSetLayer() {
    this._imageSet$1 = null;
    this._lastScale$1 = 0;
    this._min$1 = 0;
    this._max$1 = 0;
    this._extension$1 = '.txt';
    this._overrideDefaultLayer$1 = false;
    this._loaded$1 = false;
    Layer.call(this);
  }
  ImageSetLayer.create = function(set) {
    var isl = new ImageSetLayer();
    isl._imageSet$1 = set;
    return isl;
  };
  var ImageSetLayer$ = {
    get_imageSet: function() {
      return this._imageSet$1;
    },
    set_imageSet: function(value) {
      this._imageSet$1 = value;
      return value;
    },
    get_overrideDefaultLayer: function() {
      return this._overrideDefaultLayer$1;
    },
    set_overrideDefaultLayer: function(value) {
      this._overrideDefaultLayer$1 = value;
      return value;
    },
    getFitsImage: function() {
      return ss.safeCast(this._imageSet$1.get_wcsImage(), FitsImage);
    },
    initializeFromXml: function(node) {
      var imageSetNode = Util.selectSingleNode(node, 'ImageSet');
      this._imageSet$1 = Imageset.fromXMLNode(imageSetNode);
      if (node.attributes.getNamedItem('Extension') != null) {
        this._extension$1 = node.attributes.getNamedItem('Extension').nodeValue;
      }
      if (node.attributes.getNamedItem('ScaleType') != null) {
        this._lastScale$1 = Enums.parse('ScaleTypes', node.attributes.getNamedItem('ScaleType').nodeValue);
      }
      if (node.attributes.getNamedItem('MinValue') != null) {
        this._min$1 = parseFloat(node.attributes.getNamedItem('MinValue').nodeValue);
      }
      if (node.attributes.getNamedItem('MaxValue') != null) {
        this._max$1 = parseFloat(node.attributes.getNamedItem('MaxValue').nodeValue);
      }
      if (node.attributes.getNamedItem('OverrideDefault') != null) {
        this._overrideDefaultLayer$1 = ss.boolean(node.attributes.getNamedItem('OverrideDefault').nodeValue);
      }
    },
    draw: function(renderContext, opacity, flat) {
      if (!this._loaded$1) {
        return false;
      }
      renderContext.set_worldBase(renderContext.get_world());
      renderContext.set_viewBase(renderContext.get_view());
      renderContext.makeFrustum();
      renderContext.drawImageSet(this._imageSet$1, this.get_opacity() * opacity * 100);
      return true;
    },
    writeLayerProperties: function(xmlWriter) {
      if (this._imageSet$1.get_wcsImage() != null) {
        if (ss.canCast(this._imageSet$1.get_wcsImage(), FitsImage)) {
          this._extension$1 = '.fit';
        }
        else {
          this._extension$1 = '.png';
        }
        xmlWriter._writeAttributeString('Extension', this._extension$1);
      }
      if (ss.canCast(this._imageSet$1.get_wcsImage(), FitsImage)) {
        var fi = ss.safeCast(this._imageSet$1.get_wcsImage(), FitsImage);
        xmlWriter._writeAttributeString('ScaleType', fi.lastScale.toString());
        xmlWriter._writeAttributeString('MinValue', fi.lastBitmapMin.toString());
        xmlWriter._writeAttributeString('MaxValue', fi.lastBitmapMax.toString());
      }
      xmlWriter._writeAttributeString('OverrideDefault', this._overrideDefaultLayer$1.toString());
      Imageset.saveToXml(xmlWriter, this._imageSet$1, '');
      Layer.prototype.writeLayerProperties.call(this, xmlWriter);
    },
    getTypeName: function() {
      return 'TerraViewer.ImageSetLayer';
    },
    cleanUp: function() {
      Layer.prototype.cleanUp.call(this);
    },
    addFilesToCabinet: function(fc) {
      if (ss.canCast(this._imageSet$1.get_wcsImage(), FitsImage)) {
        var fName = (this._imageSet$1.get_wcsImage()).get_filename();
        var fileName = fc.tempDirectory + ss.format('{0}\\{1}{2}', fc.get_packageID(), this.id.toString(), this._extension$1);
        fc.addFile(fileName, (this._imageSet$1.get_wcsImage()).sourceBlob);
      }
    },
    getParamNames: function() {
      return Layer.prototype.getParamNames.call(this);
    },
    getParams: function() {
      return Layer.prototype.getParams.call(this);
    },
    setParams: function(paramList) {
      Layer.prototype.setParams.call(this, paramList);
    },
    setImageScale: function(scaleType, min, max) {
      this._min$1 = min;
      this._max$1 = max;
      this._lastScale$1 = scaleType;
      if (ss.canCast(this._imageSet$1.get_wcsImage(), FitsImage)) {
        Histogram.updateScale(this, scaleType, min, max);
      }
    },
    setImageZ: function(z) {
      if (ss.canCast(this._imageSet$1.get_wcsImage(), FitsImage)) {
        Histogram.updateImage(this, z);
      }
    },
    loadData: function(tourDoc, filename) {
      if (ss.startsWith(this._extension$1.toLowerCase(), '.fit')) {
        var blob = tourDoc.getFileBlob(ss.replaceString(filename, '.txt', this._extension$1));
        var fi = new FitsImage('image.fit', blob, ss.bind('doneLoading', this));
        this._imageSet$1.set_wcsImage(fi);
        if (this._max$1 > 0 || this._min$1 > 0) {
          fi.lastBitmapMax = this._max$1;
          fi.lastBitmapMin = this._min$1;
          fi.lastScale = this._lastScale$1;
        }
      }
      else {
        this._loaded$1 = true;
      }
    },
    doneLoading: function(wcsImage) {
      this._loaded$1 = true;
    }
  };


  // wwtlib.LayerCollection

  function LayerCollection() {
    Layer.call(this);
  }
  var LayerCollection$ = {
    draw: function(renderContext, opacity, flat) {
      return Layer.prototype.draw.call(this, renderContext, opacity, false);
    }
  };


  // wwtlib.Object3dLayer

  function Object3dLayer() {
    this._primaryUI$1 = null;
    this._heading$1 = 0;
    this._flipV$1 = true;
    this._flipHandedness$1 = false;
    this._smooth$1 = true;
    this._twoSidedGeometry$1 = false;
    this._pitch$1 = 0;
    this._roll$1 = 0;
    this._scale$1 = Vector3d.create(1, 1, 1);
    this._translate$1 = Vector3d.create(0, 0, 0);
    this._lightID$1 = 0;
    this._dirty$1 = false;
    this.objType = false;
    this._xHandle$1 = new Vector2d();
    this._yHandle$1 = new Vector2d();
    this._zHandle$1 = new Vector2d();
    this._hprHandles$1 = new Array(6);
    this._uiScale$1 = 1;
    this._showEditUi$1 = false;
    this._dragMode$1 = 0;
    this._pntDown$1 = new Vector2d();
    this._valueOnDown$1 = 0;
    this._valueOnDown2$1 = 0;
    this._hitDist$1 = 20;
    this._lockPreferedAxis$1 = false;
    this._preferY$1 = false;
    Layer.call(this);
  }
  Object3dLayer._initTranslateUI$1 = function() {
    Object3dLayer._translateUILines$1 = new LineList();
    Object3dLayer._translateUILines$1.timeSeries = false;
    Object3dLayer._translateUILines$1.set_depthBuffered(false);
    Object3dLayer._translateUILines$1.showFarSide = true;
    Object3dLayer._translateUI$1 = new TriangleList();
    Object3dLayer._translateUI$1.depthBuffered = false;
    Object3dLayer._translateUI$1.timeSeries = false;
    Object3dLayer._translateUI$1.writeZbuffer = false;
    var twoPi = Math.PI * 2;
    var step = twoPi / 45;
    var rad = 0.05;
    for (var a = 0; a < twoPi; a += step) {
      var pnt1 = Vector3d.create(1 - rad * 4, 0, 0);
      var pnt2 = Vector3d.create(1 - rad * 4, Math.cos(a) * rad, Math.sin(a) * rad);
      var pnt3 = Vector3d.create(1 - rad * 4, Math.cos(a + step) * rad, Math.sin(a + step) * rad);
      Object3dLayer._translateUI$1.addTriangle(pnt1, pnt2, pnt3, Colors.get_red(), Dates.empty());
    }
    for (var a = 0; a < twoPi; a += step) {
      var pnt1 = Vector3d.create(1, 0, 0);
      var pnt3 = Vector3d.create(1 - rad * 4, Math.cos(a) * rad, Math.sin(a) * rad);
      var pnt2 = Vector3d.create(1 - rad * 4, Math.cos(a + step) * rad, Math.sin(a + step) * rad);
      Object3dLayer._translateUI$1.addTriangle(pnt1, pnt2, pnt3, Color.fromArgb(255, 255, Math.max(0, (Math.sin(a) * 128)), Math.max(0, (Math.sin(a) * 128))), Dates.empty());
    }
    Object3dLayer._translateUILines$1.addLine(Vector3d.create(0, 0, 0), Vector3d.create(1, 0, 0), Colors.get_red(), Dates.empty());
    for (var a = 0; a < twoPi; a += step) {
      var pnt1 = Vector3d.create(0, 1 - rad * 4, 0);
      var pnt3 = Vector3d.create(Math.cos(a) * rad, 1 - rad * 4, Math.sin(a) * rad);
      var pnt2 = Vector3d.create(Math.cos(a + step) * rad, 1 - rad * 4, Math.sin(a + step) * rad);
      Object3dLayer._translateUI$1.addTriangle(pnt1, pnt2, pnt3, Colors.get_green(), Dates.empty());
    }
    for (var a = 0; a < twoPi; a += step) {
      var pnt1 = Vector3d.create(0, 1, 0);
      var pnt2 = Vector3d.create(Math.cos(a) * rad, 1 - rad * 4, Math.sin(a) * rad);
      var pnt3 = Vector3d.create(Math.cos(a + step) * rad, 1 - rad * 4, Math.sin(a + step) * rad);
      Object3dLayer._translateUI$1.addTriangle(pnt1, pnt2, pnt3, Color.fromArgb(255, Math.max(0, (Math.sin(a) * 128)), 255, Math.max(0, (Math.sin(a) * 128))), Dates.empty());
    }
    Object3dLayer._translateUILines$1.addLine(Vector3d.create(0, 0, 0), Vector3d.create(0, 1, 0), Colors.get_green(), Dates.empty());
    for (var a = 0; a < twoPi; a += step) {
      var pnt1 = Vector3d.create(0, 0, 1 - rad * 4);
      var pnt2 = Vector3d.create(Math.cos(a) * rad, Math.sin(a) * rad, 1 - rad * 4);
      var pnt3 = Vector3d.create(Math.cos(a + step) * rad, Math.sin(a + step) * rad, 1 - rad * 4);
      Object3dLayer._translateUI$1.addTriangle(pnt1, pnt2, pnt3, Colors.get_blue(), Dates.empty());
    }
    for (var a = 0; a < twoPi; a += step) {
      var pnt1 = Vector3d.create(0, 0, 1);
      var pnt3 = Vector3d.create(Math.cos(a) * rad, Math.sin(a) * rad, 1 - rad * 4);
      var pnt2 = Vector3d.create(Math.cos(a + step) * rad, Math.sin(a + step) * rad, 1 - rad * 4);
      Object3dLayer._translateUI$1.addTriangle(pnt1, pnt2, pnt3, Color.fromArgb(255, Math.max(0, (Math.sin(a) * 128)), Math.max(0, (Math.sin(a) * 128)), 255), Dates.empty());
    }
    Object3dLayer._translateUILines$1.addLine(Vector3d.create(0, 0, 0), Vector3d.create(0, 0, 1), Colors.get_blue(), Dates.empty());
    Object3dLayer._initRotateUI$1();
    Object3dLayer._initScaleUI$1();
  };
  Object3dLayer._initScaleUI$1 = function() {
    Object3dLayer._scaleUI$1 = new TriangleList();
    Object3dLayer._scaleUI$1.depthBuffered = false;
    Object3dLayer._scaleUI$1.timeSeries = false;
    Object3dLayer._scaleUI$1.writeZbuffer = false;
    var twoPi = Math.PI * 2;
    var step = twoPi / 45;
    var rad = 0.05;
    Object3dLayer._makeCube$1(Object3dLayer._scaleUI$1, Vector3d.create(1 - rad * 2, 0, 0), rad * 2, Colors.get_red());
    Object3dLayer._makeCube$1(Object3dLayer._scaleUI$1, Vector3d.create(0, 1 - rad * 2, 0), rad * 2, Colors.get_green());
    Object3dLayer._makeCube$1(Object3dLayer._scaleUI$1, Vector3d.create(0, 0, 1 - rad * 2), rad * 2, Colors.get_blue());
  };
  Object3dLayer._makeCube$1 = function(tl, center, size, color) {
    var dark = Color.fromArgb(255, ss.truncate((color.r * 0.6)), color.g, ss.truncate((color.b * 0.6)));
    var med = Color.fromArgb(255, ss.truncate((color.r * 0.8)), ss.truncate((color.g * 0.8)), ss.truncate((color.b * 0.8)));
    tl.addQuad(Vector3d.create(center.x + size, center.y + size, center.z + size), Vector3d.create(center.x + size, center.y + size, center.z - size), Vector3d.create(center.x - size, center.y + size, center.z + size), Vector3d.create(center.x - size, center.y + size, center.z - size), color, Dates.empty());
    tl.addQuad(Vector3d.create(center.x + size, center.y - size, center.z + size), Vector3d.create(center.x - size, center.y - size, center.z + size), Vector3d.create(center.x + size, center.y - size, center.z - size), Vector3d.create(center.x - size, center.y - size, center.z - size), color, Dates.empty());
    tl.addQuad(Vector3d.create(center.x - size, center.y + size, center.z + size), Vector3d.create(center.x - size, center.y + size, center.z - size), Vector3d.create(center.x - size, center.y - size, center.z + size), Vector3d.create(center.x - size, center.y - size, center.z - size), dark, Dates.empty());
    tl.addQuad(Vector3d.create(center.x + size, center.y + size, center.z + size), Vector3d.create(center.x + size, center.y - size, center.z + size), Vector3d.create(center.x + size, center.y + size, center.z - size), Vector3d.create(center.x + size, center.y - size, center.z - size), dark, Dates.empty());
    tl.addQuad(Vector3d.create(center.x + size, center.y + size, center.z + size), Vector3d.create(center.x - size, center.y + size, center.z + size), Vector3d.create(center.x + size, center.y - size, center.z + size), Vector3d.create(center.x - size, center.y - size, center.z + size), med, Dates.empty());
    tl.addQuad(Vector3d.create(center.x + size, center.y + size, center.z - size), Vector3d.create(center.x + size, center.y - size, center.z - size), Vector3d.create(center.x - size, center.y + size, center.z - size), Vector3d.create(center.x - size, center.y - size, center.z - size), med, Dates.empty());
  };
  Object3dLayer._initRotateUI$1 = function() {
    Object3dLayer._rotateUi$1 = new TriangleList();
    Object3dLayer._rotateUi$1.depthBuffered = false;
    Object3dLayer._rotateUi$1.timeSeries = false;
    Object3dLayer._rotateUi$1.writeZbuffer = false;
    var twoPi = Math.PI * 2;
    var step = twoPi / 40;
    var rad = 0.05;
    var index = 0;
    for (var a = 0; a < twoPi; a += step) {
      var start = !(index % 10);
      var end = !((index + 1) % 10);
      var pnt1 = Vector3d.create(rad * ((start) ? 0 : ((end) ? 1.5 : 1)), Math.cos(a), Math.sin(a));
      var pnt2 = Vector3d.create(-rad * ((start) ? 0 : ((end) ? 1.5 : 1)), Math.cos(a), Math.sin(a));
      var pnt3 = Vector3d.create(rad * ((start) ? 1.5 : ((end) ? 0 : 1)), Math.cos(a + step), Math.sin(a + step));
      var pnt4 = Vector3d.create(-rad * ((start) ? 1.5 : ((end) ? 0 : 1)), Math.cos(a + step), Math.sin(a + step));
      Object3dLayer._rotateUi$1.addQuad(pnt1, pnt3, pnt2, pnt4, Color._fromArgbColor(192, Colors.get_red()), Dates.empty());
      index++;
    }
    index = 0;
    for (var a = 0; a < twoPi; a += step) {
      var start = !(index % 10);
      var end = !((index + 1) % 10);
      var pnt1 = Vector3d.create(Math.cos(a), Math.sin(a), rad * ((start) ? 0 : ((end) ? 1.5 : 1)));
      var pnt2 = Vector3d.create(Math.cos(a), Math.sin(a), -rad * ((start) ? 0 : ((end) ? 1.5 : 1)));
      var pnt3 = Vector3d.create(Math.cos(a + step), Math.sin(a + step), rad * ((start) ? 1.5 : ((end) ? 0 : 1)));
      var pnt4 = Vector3d.create(Math.cos(a + step), Math.sin(a + step), -rad * ((start) ? 1.5 : ((end) ? 0 : 1)));
      Object3dLayer._rotateUi$1.addQuad(pnt1, pnt3, pnt2, pnt4, Color._fromArgbColor(192, Colors.get_blue()), Dates.empty());
      index++;
    }
    index = 0;
    for (var a = 0; a < twoPi; a += step) {
      var start = !(index % 10);
      var end = !((index + 1) % 10);
      var pnt1 = Vector3d.create(Math.cos(a), rad * ((start) ? 0 : ((end) ? 1.5 : 1)), Math.sin(a));
      var pnt2 = Vector3d.create(Math.cos(a), -rad * ((start) ? 0 : ((end) ? 1.5 : 1)), Math.sin(a));
      var pnt3 = Vector3d.create(Math.cos(a + step), rad * ((start) ? 1.5 : ((end) ? 0 : 1)), Math.sin(a + step));
      var pnt4 = Vector3d.create(Math.cos(a + step), -rad * ((start) ? 1.5 : ((end) ? 0 : 1)), Math.sin(a + step));
      Object3dLayer._rotateUi$1.addQuad(pnt1, pnt2, pnt3, pnt4, Color._fromArgbColor(192, Colors.get_green()), Dates.empty());
      index++;
    }
    index = 0;
    for (var a = 0; a < twoPi; a += step) {
      var start = !(index % 10);
      var end = !((index + 1) % 10);
      var pnt1 = Vector3d.create(-rad * ((start) ? 0 : ((end) ? 1.5 : 1)), Math.cos(a), Math.sin(a));
      var pnt2 = Vector3d.create(rad * ((start) ? 0 : ((end) ? 1.5 : 1)), Math.cos(a), Math.sin(a));
      var pnt3 = Vector3d.create(-rad * ((start) ? 1.5 : ((end) ? 0 : 1)), Math.cos(a + step), Math.sin(a + step));
      var pnt4 = Vector3d.create(rad * ((start) ? 1.5 : ((end) ? 0 : 1)), Math.cos(a + step), Math.sin(a + step));
      Object3dLayer._rotateUi$1.addQuad(pnt1, pnt3, pnt2, pnt4, Colors.get_red(), Dates.empty());
      index++;
    }
    index = 0;
    for (var a = 0; a < twoPi; a += step) {
      var start = !(index % 10);
      var end = !((index + 1) % 10);
      var pnt1 = Vector3d.create(Math.cos(a), Math.sin(a), -rad * ((start) ? 0 : ((end) ? 1.5 : 1)));
      var pnt2 = Vector3d.create(Math.cos(a), Math.sin(a), rad * ((start) ? 0 : ((end) ? 1.5 : 1)));
      var pnt3 = Vector3d.create(Math.cos(a + step), Math.sin(a + step), -rad * ((start) ? 1.5 : ((end) ? 0 : 1)));
      var pnt4 = Vector3d.create(Math.cos(a + step), Math.sin(a + step), rad * ((start) ? 1.5 : ((end) ? 0 : 1)));
      Object3dLayer._rotateUi$1.addQuad(pnt1, pnt3, pnt2, pnt4, Colors.get_blue(), Dates.empty());
      index++;
    }
    index = 0;
    for (var a = 0; a < twoPi; a += step) {
      var start = !(index % 10);
      var end = !((index + 1) % 10);
      var pnt1 = Vector3d.create(Math.cos(a), -rad * ((start) ? 0 : ((end) ? 1.5 : 1)), Math.sin(a));
      var pnt2 = Vector3d.create(Math.cos(a), rad * ((start) ? 0 : ((end) ? 1.5 : 1)), Math.sin(a));
      var pnt3 = Vector3d.create(Math.cos(a + step), -rad * ((start) ? 1.5 : ((end) ? 0 : 1)), Math.sin(a + step));
      var pnt4 = Vector3d.create(Math.cos(a + step), rad * ((start) ? 1.5 : ((end) ? 0 : 1)), Math.sin(a + step));
      Object3dLayer._rotateUi$1.addQuad(pnt1, pnt2, pnt3, pnt4, Colors.get_green(), Dates.empty());
      index++;
    }
  };
  var Object3dLayer$ = {
    getPrimaryUI: function() {
      if (this._primaryUI$1 == null) {
        this._primaryUI$1 = new Object3dLayerUI(this);
      }
      return this._primaryUI$1;
    },
    get_flipV: function() {
      return this._flipV$1;
    },
    set_flipV: function(value) {
      if (this._flipV$1 !== value) {
        this._flipV$1 = value;
        if (this.object3d != null) {
          this.object3d.flipV = this._flipV$1;
          this.object3d._reload();
        }
        this.version++;
      }
      return value;
    },
    get_flipHandedness: function() {
      return this._flipHandedness$1;
    },
    set_flipHandedness: function(value) {
      if (this._flipHandedness$1 !== value) {
        this._flipHandedness$1 = value;
        if (this.object3d != null) {
          this.object3d.flipHandedness = this._flipHandedness$1;
          this.object3d._reload();
        }
        this.version++;
      }
      return value;
    },
    get_smooth: function() {
      return this._smooth$1;
    },
    set_smooth: function(value) {
      if (this._smooth$1 !== value) {
        this._smooth$1 = value;
        if (this.object3d != null) {
          this.object3d.smooth = this._smooth$1;
          this.object3d._reload();
        }
        this.version++;
      }
      return value;
    },
    get_twoSidedGeometry: function() {
      return this._twoSidedGeometry$1;
    },
    set_twoSidedGeometry: function(value) {
      if (this._twoSidedGeometry$1 !== value) {
        this._twoSidedGeometry$1 = value;
        this.version++;
      }
      return value;
    },
    get_heading: function() {
      return this._heading$1;
    },
    set_heading: function(value) {
      if (this._heading$1 !== value) {
        this.version++;
        this._heading$1 = value;
      }
      return value;
    },
    get_pitch: function() {
      return this._pitch$1;
    },
    set_pitch: function(value) {
      if (this._pitch$1 !== value) {
        this.version++;
        this._pitch$1 = value;
      }
      return value;
    },
    get_roll: function() {
      return this._roll$1;
    },
    set_roll: function(value) {
      if (this._roll$1 !== value) {
        this.version++;
        this._roll$1 = value;
      }
      return value;
    },
    get_scale: function() {
      return this._scale$1;
    },
    set_scale: function(value) {
      if (this._scale$1 !== value) {
        this.version++;
        this._scale$1 = value;
      }
      return value;
    },
    get_translate: function() {
      return this._translate$1;
    },
    set_translate: function(value) {
      if (this._translate$1 !== value) {
        this.version++;
        this._translate$1 = value;
      }
      return value;
    },
    get_lightID: function() {
      return this._lightID$1;
    },
    set_lightID: function(value) {
      this._lightID$1 = value;
      return value;
    },
    cleanUp: function() {
      this._dirty$1 = true;
    },
    colorChanged: function() {
      if (this.object3d != null) {
        this.object3d.color = this.get_color();
      }
    },
    writeLayerProperties: function(xmlWriter) {
      xmlWriter._writeAttributeString('FlipV', this.get_flipV().toString());
      xmlWriter._writeAttributeString('FlipHandedness', this.get_flipHandedness().toString());
      xmlWriter._writeAttributeString('Smooth', this.get_smooth().toString());
      xmlWriter._writeAttributeString('TwoSidedGeometry', this.get_twoSidedGeometry().toString());
      xmlWriter._writeAttributeString('Heading', this.get_heading().toString());
      xmlWriter._writeAttributeString('Pitch', this.get_pitch().toString());
      xmlWriter._writeAttributeString('Roll', this.get_roll().toString());
      xmlWriter._writeAttributeString('Scale', this.get_scale().toString());
      xmlWriter._writeAttributeString('Translate', this.get_translate().toString());
      xmlWriter._writeAttributeString('LightID', this.get_lightID().toString());
      xmlWriter._writeAttributeString('Obj', this.objType.toString());
    },
    getParams: function() {
      var paramList = new Array(14);
      paramList[0] = this._heading$1;
      paramList[1] = this._pitch$1;
      paramList[2] = this._roll$1;
      paramList[3] = this._scale$1.x;
      paramList[4] = this._scale$1.y;
      paramList[5] = this._scale$1.z;
      paramList[6] = this._translate$1.x;
      paramList[7] = this._translate$1.y;
      paramList[8] = this._translate$1.z;
      paramList[9] = this.get_color().r / 255;
      paramList[10] = this.get_color().g / 255;
      paramList[11] = this.get_color().b / 255;
      paramList[12] = this.get_color().a / 255;
      paramList[13] = this.get_opacity();
      return paramList;
    },
    getParamNames: function() {
      return [ 'Heading', 'Pitch', 'Roll', 'Scale.X', 'Scale.Y', 'Scale.Z', 'Translate.X', 'Translate.Y', 'Translate.Z', 'Colors.Red', 'Colors.Green', 'Colors.Blue', 'Colors.Alpha', 'Opacity' ];
    },
    setParams: function(paramList) {
      if (paramList.length === 14) {
        this._heading$1 = paramList[0];
        this._pitch$1 = paramList[1];
        this._roll$1 = paramList[2];
        this._scale$1.x = paramList[3];
        this._scale$1.y = paramList[4];
        this._scale$1.z = paramList[5];
        this._translate$1.x = paramList[6];
        this._translate$1.y = paramList[7];
        this._translate$1.z = paramList[8];
        this.set_opacity(paramList[13]);
        var color = Color.fromArgb(ss.truncate((paramList[12] * 255)), ss.truncate((paramList[9] * 255)), ss.truncate((paramList[10] * 255)), ss.truncate((paramList[11] * 255)));
        this.set_color(color);
      }
    },
    add_propertiesChanged: function(value) {
      this.__propertiesChanged$1 = ss.bindAdd(this.__propertiesChanged$1, value);
    },
    remove_propertiesChanged: function(value) {
      this.__propertiesChanged$1 = ss.bindSub(this.__propertiesChanged$1, value);
    },
    fireChanged: function() {
      if (this.__propertiesChanged$1 != null) {
        this.__propertiesChanged$1(this, new ss.EventArgs());
      }
    },
    getEditUI: function() {
      return ss.safeCast(this, IUiController);
    },
    initializeFromXml: function(node) {
      this.set_flipV(ss.boolean(node.attributes.getNamedItem('FlipV').nodeValue));
      if (node.attributes.getNamedItem('FlipHandedness') != null) {
        this.set_flipHandedness(ss.boolean(node.attributes.getNamedItem('FlipHandedness').nodeValue));
      }
      else {
        this.set_flipHandedness(false);
      }
      if (node.attributes.getNamedItem('Smooth') != null) {
        this.set_smooth(ss.boolean(node.attributes.getNamedItem('Smooth').nodeValue));
      }
      else {
        this.set_smooth(true);
      }
      if (node.attributes.getNamedItem('TwoSidedGeometry') != null) {
        this.set_twoSidedGeometry(ss.boolean(node.attributes.getNamedItem('TwoSidedGeometry').nodeValue));
      }
      else {
        this.set_twoSidedGeometry(false);
      }
      if (node.attributes.getNamedItem('Obj') != null) {
        this.objType = ss.boolean(node.attributes.getNamedItem('Obj').nodeValue);
      }
      else {
        this.objType = false;
      }
      this.set_heading(parseFloat(node.attributes.getNamedItem('Heading').nodeValue));
      this.set_pitch(parseFloat(node.attributes.getNamedItem('Pitch').nodeValue));
      this.set_roll(parseFloat(node.attributes.getNamedItem('Roll').nodeValue));
      this.set_scale(Vector3d.parse(node.attributes.getNamedItem('Scale').nodeValue));
      this.set_translate(Vector3d.parse(node.attributes.getNamedItem('Translate').nodeValue));
      if (node.attributes.getNamedItem('LightID') != null) {
        this.set_lightID(parseInt(node.attributes.getNamedItem('LightID').nodeValue));
      }
    },
    draw: function(renderContext, opacity, flat) {
      var oldWorld = renderContext.get_world();
      var rotation = Matrix3d.multiplyMatrix(Matrix3d.multiplyMatrix(Matrix3d._rotationZ(-this._roll$1 / 180 * Math.PI), Matrix3d._rotationX(-this._pitch$1 / 180 * Math.PI)), Matrix3d._rotationY(this._heading$1 / 180 * Math.PI));
      renderContext.set_world(Matrix3d.multiplyMatrix(Matrix3d.multiplyMatrix(Matrix3d.multiplyMatrix(rotation, Matrix3d._scaling(this._scale$1.x, this._scale$1.y, this._scale$1.z)), Matrix3d.translation(this._translate$1)), oldWorld));
      renderContext.set_twoSidedLighting(this.get_twoSidedGeometry());
      Planets.drawPointPlanet(renderContext, new Vector3d(), 1, Colors.get_red(), false);
      if (this._lightID$1 > 0) {
      }
      else {
        if (this.object3d != null) {
          this.object3d.color = this.get_color();
          this.object3d.render(renderContext, opacity * this.get_opacity());
        }
      }
      renderContext.set_twoSidedLighting(false);
      renderContext.set_world(oldWorld);
      return true;
    },
    addFilesToCabinet: function(fc) {
    },
    loadData: function(doc, filename) {
      if (ss.endsWith(filename.toLowerCase(), '.obj')) {
        this.objType = true;
      }
      if (!this._lightID$1) {
        if (this.objType) {
          this.object3d = new Object3d(doc, ss.replaceString(filename, '.txt', '.obj'), this.get_flipV(), this._flipHandedness$1, true, this.get_color());
        }
        else {
          this.object3d = new Object3d(doc, ss.replaceString(filename, '.txt', '.3ds'), this.get_flipV(), this._flipHandedness$1, true, this.get_color());
        }
      }
    },
    pointToView: function(pnt) {
      var clientHeight = WWTControl.singleton.renderContext.height;
      var clientWidth = WWTControl.singleton.renderContext.width;
      var viewWidth = (WWTControl.singleton.renderContext.width / WWTControl.singleton.renderContext.height) * 1116;
      var x = ((pnt.x) / (clientWidth) * viewWidth) - ((viewWidth - 1920) / 2);
      var y = (pnt.y) / clientHeight * 1116;
      return Vector2d.create(x, y);
    },
    render: function(renderEngine) {
      this._showEditUi$1 = true;
      return;
    },
    preRender: function(renderEngine) {
      this._showEditUi$1 = true;
      return;
    },
    mouseDown: function(sender, e) {
      var location = this.pointToView(Vector2d.create(e.offsetX, e.offsetY));
      this._pntDown$1 = location;
      var pnt = location;
      if (e.shiftKey) {
        if (Vector2d.subtract(pnt, this._xHandle$1).get_length() < this._hitDist$1) {
          this._dragMode$1 = 10;
          this._valueOnDown$1 = this._scale$1.x;
          return true;
        }
        if (Vector2d.subtract(pnt, this._yHandle$1).get_length() < this._hitDist$1) {
          this._dragMode$1 = 10;
          this._valueOnDown$1 = this._scale$1.y;
          return true;
        }
        if (Vector2d.subtract(pnt, this._zHandle$1).get_length() < this._hitDist$1) {
          this._dragMode$1 = 10;
          this._valueOnDown$1 = this._scale$1.z;
          return true;
        }
      }
      else {
        if (Vector2d.subtract(pnt, this._xHandle$1).get_length() < this._hitDist$1) {
          this._dragMode$1 = 1;
          this._valueOnDown$1 = this._translate$1.x;
          return true;
        }
        if (Vector2d.subtract(pnt, this._yHandle$1).get_length() < this._hitDist$1) {
          this._dragMode$1 = 2;
          this._valueOnDown$1 = this._translate$1.y;
          return true;
        }
        if (Vector2d.subtract(pnt, this._zHandle$1).get_length() < this._hitDist$1) {
          this._dragMode$1 = 3;
          this._valueOnDown$1 = this._translate$1.z;
          return true;
        }
      }
      for (var i = 0; i < this._hprHandles$1.length; i++) {
        if (Vector2d.subtract(pnt, this._hprHandles$1[i]).get_length() < this._hitDist$1) {
          switch (i) {
            case 0:
              this._dragMode$1 = 4;
              this._valueOnDown$1 = this._heading$1;
              this._valueOnDown2$1 = this._pitch$1;
              return true;
            case 1:
              this._dragMode$1 = 7;
              this._valueOnDown$1 = this._heading$1;
              this._valueOnDown2$1 = this._pitch$1;
              return true;
            case 2:
              this._dragMode$1 = 5;
              this._valueOnDown$1 = this._pitch$1;
              this._valueOnDown2$1 = this._roll$1;
              return true;
            case 3:
              this._dragMode$1 = 8;
              this._valueOnDown$1 = this._pitch$1;
              this._valueOnDown2$1 = this._roll$1;
              return true;
            case 4:
              this._dragMode$1 = 6;
              this._valueOnDown$1 = this._roll$1;
              this._valueOnDown2$1 = this._heading$1;
              return true;
            case 5:
              this._dragMode$1 = 9;
              this._valueOnDown$1 = this._roll$1;
              this._valueOnDown2$1 = this._heading$1;
              return true;
            default:
              break;
          }
        }
      }
      return false;
    },
    mouseUp: function(sender, e) {
      if (!!this._dragMode$1) {
        this._dragMode$1 = 0;
        this._lockPreferedAxis$1 = false;
        return true;
      }
      return false;
    },
    mouseMove: function(sender, e) {
      var location = this.pointToView(Vector2d.create(e.offsetX, e.offsetY));
      if (!!this._dragMode$1) {
        var dist = 0;
        var distX = location.x - this._pntDown$1.x;
        var distY = -(location.y - this._pntDown$1.y);
        if (this._lockPreferedAxis$1) {
          if (this._preferY$1) {
            dist = distY;
            this._preferY$1 = true;
            Cursor.set_current(Cursors.get_sizeNS());
          }
          else {
            dist = distX;
            this._preferY$1 = false;
            Cursor.set_current(Cursors.get_sizeWE());
          }
        }
        else {
          if (Math.abs(distX) > Math.abs(distY)) {
            dist = distX;
            this._preferY$1 = false;
          }
          else {
            dist = distY;
            this._preferY$1 = true;
          }
          if (dist > 5) {
            this._lockPreferedAxis$1 = true;
          }
        }
        switch (this._dragMode$1) {
          case 0:
            break;
          case 1:
            this._translate$1.x = this._valueOnDown$1 + (12 * this._uiScale$1 * (dist / WWTControl.singleton.renderContext.width));
            break;
          case 2:
            this._translate$1.y = this._valueOnDown$1 + (12 * this._uiScale$1 * (dist / WWTControl.singleton.renderContext.width));
            break;
          case 3:
            this._translate$1.z = this._valueOnDown$1 + (12 * this._uiScale$1 * (dist / WWTControl.singleton.renderContext.width));
            break;
          case 4:
            this._heading$1 = this._valueOnDown$1 - distX / 4;
            this._pitch$1 = this._valueOnDown2$1 + distY / 4;
            break;
          case 5:
            this._pitch$1 = this._valueOnDown$1 + distY / 4;
            this._roll$1 = this._valueOnDown2$1 - distX / 4;
            break;
          case 6:
            this._roll$1 = this._valueOnDown$1 + distY / 4;
            this._heading$1 = this._valueOnDown2$1 - distX / 4;
            break;
          case 7:
            this._heading$1 = this._valueOnDown$1 - distX / 4;
            this._pitch$1 = this._valueOnDown2$1 - distY / 4;
            break;
          case 8:
            this._pitch$1 = this._valueOnDown$1 + distY / 4;
            this._roll$1 = this._valueOnDown2$1 + distX / 4;
            break;
          case 9:
            this._roll$1 = this._valueOnDown$1 - distY / 4;
            this._heading$1 = this._valueOnDown2$1 - distX / 4;
            break;
          case 10:
            this._scale$1.x = this._scale$1.y = this._scale$1.z = this._valueOnDown$1 * Math.pow(2, (dist / 100));
            break;
          default:
            break;
        }
        this.fireChanged();
        return true;
      }
      else {
        var pnt = location;
        if (Vector2d.subtract(pnt, this._xHandle$1).get_length() < this._hitDist$1) {
          Cursor.set_current(Cursors.get_sizeAll());
          return true;
        }
        if (Vector2d.subtract(pnt, this._yHandle$1).get_length() < this._hitDist$1) {
          Cursor.set_current(Cursors.get_sizeAll());
          return true;
        }
        if (Vector2d.subtract(pnt, this._zHandle$1).get_length() < this._hitDist$1) {
          Cursor.set_current(Cursors.get_sizeAll());
          return true;
        }
        for (var i = 0; i < this._hprHandles$1.length; i++) {
          if (Vector2d.subtract(pnt, this._hprHandles$1[i]).get_length() < this._hitDist$1) {
            Cursor.set_current(Cursors.get_sizeAll());
            return true;
          }
        }
      }
      return false;
    },
    mouseClick: function(sender, e) {
      return false;
    },
    click: function(sender, e) {
      return false;
    },
    mouseDoubleClick: function(sender, e) {
      return false;
    },
    keyDown: function(sender, e) {
      return false;
    },
    keyUp: function(sender, e) {
      return false;
    },
    hover: function(pnt) {
      return false;
    }
  };


  // wwtlib.Object3dLayerUI

  function Object3dLayerUI(layer) {
    this._layer$1 = null;
    this._opened$1 = true;
    this._callbacks$1 = null;
    LayerUI.call(this);
    this._layer$1 = layer;
  }
  var Object3dLayerUI$ = {
    setUICallbacks: function(callbacks) {
      this._callbacks$1 = callbacks;
    },
    get_hasTreeViewNodes: function() {
      return true;
    },
    getTreeNodes: function() {
      var nodes = [];
      if (this._layer$1.object3d.objects.length > 0 && this._layer$1.object3d.objects[0].children != null) {
        this._loadTree$1(nodes, this._layer$1.object3d.objects[0].children);
      }
      return nodes;
    },
    _loadTree$1: function(nodes, children) {
      var $enum1 = ss.enumerate(children);
      while ($enum1.moveNext()) {
        var child = $enum1.current;
        var node = new LayerUITreeNode();
        node.set_name(child.name);
        node.set_tag(child);
        node.set_checked(child.enabled);
        node.add_nodeSelected(ss.bind('_node_NodeSelected$1', this));
        node.add_nodeChecked(ss.bind('_node_NodeChecked$1', this));
        nodes.push(node);
        this._loadTree$1(node.get_nodes(), child.children);
      }
    },
    _node_NodeChecked$1: function(node, newState) {
      var child = node.get_tag();
      if (child != null) {
        child.enabled = newState;
      }
    },
    _node_NodeSelected$1: function(node) {
      if (this._callbacks$1 != null) {
        var child = node.get_tag();
        var rowData = {};
        rowData['Name'] = child.name;
        rowData['Pivot.X'] = child.pivotPoint.x.toString();
        rowData['Pivot.Y'] = child.pivotPoint.y.toString();
        rowData['Pivot.Z'] = child.pivotPoint.z.toString();
        this._callbacks$1.showRowData(rowData);
      }
    },
    getNodeContextMenu: function(node) {
      return LayerUI.prototype.getNodeContextMenu.call(this, node);
    }
  };


  // wwtlib.OrbitLayer

  function OrbitLayer() {
    this._frames$1 = [];
    this._primaryUI$1 = null;
    this._pointOpacity$1 = 1;
    this._pointColor$1 = Colors.get_yellow();
    this._filename$1 = '';
    this._dataFile$1 = '';
    Layer.call(this);
  }
  var OrbitLayer$ = {
    get_frames: function() {
      return this._frames$1;
    },
    set_frames: function(value) {
      this._frames$1 = value;
      return value;
    },
    getPrimaryUI: function() {
      if (this._primaryUI$1 == null) {
        this._primaryUI$1 = new OrbitLayerUI(this);
      }
      return this._primaryUI$1;
    },
    cleanUp: function() {
      var $enum1 = ss.enumerate(this._frames$1);
      while ($enum1.moveNext()) {
        var frame = $enum1.current;
        if (frame.get_orbit() != null) {
          frame.get_orbit().cleanUp();
          frame.set_orbit(null);
        }
      }
    },
    writeLayerProperties: function(xmlWriter) {
      xmlWriter._writeAttributeString('PointOpacity', this.get_pointOpacity().toString());
      xmlWriter._writeAttributeString('PointColor', this._pointColor$1.save());
    },
    get_pointOpacity: function() {
      return this._pointOpacity$1;
    },
    set_pointOpacity: function(value) {
      if (this._pointOpacity$1 !== value) {
        this.version++;
        this._pointOpacity$1 = value;
      }
      return value;
    },
    get_pointColor: function() {
      return this._pointColor$1;
    },
    set_pointColor: function(value) {
      if (this._pointColor$1 !== value) {
        this.version++;
        this._pointColor$1 = value;
      }
      return value;
    },
    getParams: function() {
      var paramList = new Array(6);
      paramList[0] = this._pointOpacity$1;
      paramList[1] = this.get_color().r / 255;
      paramList[2] = this.get_color().g / 255;
      paramList[3] = this.get_color().b / 255;
      paramList[4] = this.get_color().a / 255;
      paramList[5] = this.get_opacity();
      return paramList;
    },
    getParamNames: function() {
      return [ 'PointOpacity', 'Color.Red', 'Color.Green', 'Color.Blue', 'Color.Alpha', 'Opacity' ];
    },
    setParams: function(paramList) {
      if (paramList.length === 6) {
        this._pointOpacity$1 = paramList[0];
        this.set_opacity(paramList[5]);
        var color = Color.fromArgb(ss.truncate((paramList[4] * 255)), ss.truncate((paramList[1] * 255)), ss.truncate((paramList[2] * 255)), ss.truncate((paramList[3] * 255)));
        this.set_color(color);
      }
    },
    initializeFromXml: function(node) {
      this.set_pointOpacity(parseFloat(node.attributes.getNamedItem('PointOpacity').nodeValue));
      this.set_pointColor(Color.load(node.attributes.getNamedItem('PointColor').nodeValue));
    },
    draw: function(renderContext, opacity, flat) {
      var matSaved = renderContext.get_world();
      renderContext.set_world(renderContext.get_worldBaseNonRotating());
      var $enum1 = ss.enumerate(this._frames$1);
      while ($enum1.moveNext()) {
        var frame = $enum1.current;
        if (frame.showOrbitPath) {
          if (frame.get_orbit() == null) {
            frame.set_orbit(new Orbit(frame.get_elements(), 360, this.get_color(), 1, renderContext.get_nominalRadius()));
          }
          frame.get_orbit().draw3D(renderContext, opacity * this.get_opacity(), new Vector3d());
        }
      }
      renderContext.set_world(matSaved);
      return true;
    },
    addFilesToCabinet: function(fc) {
      this._filename$1 = fc.tempDirectory + ss.format('{0}\\{1}.txt', fc.get_packageID(), this.id.toString());
      var dir = this._filename$1.substring(0, this._filename$1.lastIndexOf('\\'));
      var blob = new Blob([ this._dataFile$1 ]);
      fc.addFile(this._filename$1, blob);
      Layer.prototype.addFilesToCabinet.call(this, fc);
    },
    loadData: function(tourDoc, filename) {
      var $this = this;

      var blob = tourDoc.getFileBlob(filename);
      var doc = new FileReader();
      doc.onloadend = function(ee) {
        $this._dataFile$1 = ss.safeCast(doc.result, String);
        $this.loadString($this._dataFile$1);
      };
      doc.readAsText(blob);
    },
    loadString: function(dataFile) {
      var data = dataFile.split('\n');
      this._frames$1.length = 0;
      for (var i = 0; i < data.length; i += 2) {
        var line1 = i;
        var line2 = i + 1;
        if (data[i].length > 0) {
          var frame = new ReferenceFrame();
          if (data[i].substring(0, 1) !== '1') {
            line1++;
            line2++;
            frame.name = ss.trim(data[i]);
            i++;
          }
          else if (data[i].substring(0, 1) === '1') {
            frame.name = data[i].substring(2, 5);
          }
          else {
            i -= 2;
            continue;
          }
          frame.reference = 18;
          frame.oblateness = 0;
          frame.showOrbitPath = true;
          frame.showAsPoint = true;
          frame.referenceFrameType = 1;
          frame.scale = 1;
          frame.semiMajorAxisUnits = 1;
          frame.meanRadius = 10;
          frame.oblateness = 0;
          frame.fromTLE(data[line1], data[line2], 398600441800000);
          this._frames$1.push(frame);
        }
        else {
          i -= 1;
        }
      }
    }
  };


  // wwtlib.OrbitLayerUI

  function OrbitLayerUI(layer) {
    this._layer$1 = null;
    this._opened$1 = true;
    this._callbacks$1 = null;
    LayerUI.call(this);
    this._layer$1 = layer;
  }
  var OrbitLayerUI$ = {
    setUICallbacks: function(callbacks) {
      this._callbacks$1 = callbacks;
    },
    get_hasTreeViewNodes: function() {
      return true;
    },
    getTreeNodes: function() {
      var nodes = [];
      var $enum1 = ss.enumerate(this._layer$1.get_frames());
      while ($enum1.moveNext()) {
        var frame = $enum1.current;
        var node = new LayerUITreeNode();
        node.set_name(frame.name);
        node.set_tag(frame);
        node.set_checked(frame.showOrbitPath);
        node.add_nodeSelected(ss.bind('_node_NodeSelected$1', this));
        node.add_nodeChecked(ss.bind('_node_NodeChecked$1', this));
        nodes.push(node);
      }
      return nodes;
    },
    _node_NodeChecked$1: function(node, newState) {
      var frame = node.get_tag();
      if (frame != null) {
        frame.showOrbitPath = newState;
      }
    },
    _node_NodeSelected$1: function(node) {
      if (this._callbacks$1 != null) {
        var frame = node.get_tag();
        var rowData = {};
        rowData['Name'] = frame.name;
        rowData['SemiMajor Axis'] = frame.semiMajorAxis.toString();
        rowData['SMA Units'] = frame.semiMajorAxisUnits.toString();
        rowData['Inclination'] = frame.inclination.toString();
        rowData['Eccentricity'] = frame.eccentricity.toString();
        rowData['Long of Asc. Node'] = frame.longitudeOfAscendingNode.toString();
        rowData['Argument Of Periapsis'] = frame.argumentOfPeriapsis.toString();
        rowData['Epoch'] = frame.epoch.toString();
        rowData['Mean Daily Motion'] = frame.meanDailyMotion.toString();
        rowData['Mean Anomoly at Epoch'] = frame.meanAnomolyAtEpoch.toString();
        this._callbacks$1.showRowData(rowData);
      }
    },
    getNodeContextMenu: function(node) {
      return LayerUI.prototype.getNodeContextMenu.call(this, node);
    }
  };


  // wwtlib.SpreadSheetLayer

  function SpreadSheetLayer() {
    this._dataDirty$1 = false;
    this._barChartBitmask$1 = 0;
    this._barScaleFactor$1 = 20;
    this._meanRadius$1 = 6371000;
    this._table$1 = new Table();
    this.isLongIndex = false;
    this.shapeVertexCount = 0;
    this.lines = false;
    this.latColumn = -1;
    this.fixedSize = 1;
    this.decay = 16;
    this.timeSeries = false;
    this._dynamicData$1 = false;
    this._autoUpdate$1 = false;
    this._dataSourceUrl$1 = '';
    this._beginRange$1 = new Date('1/1/2100');
    this._endRange$1 = new Date('01/01/1800');
    this.markerDomainValues = {};
    this.colorDomainValues = {};
    this._coordinatesType$1 = 0;
    this.lngColumn = -1;
    this.geometryColumn = -1;
    this._xAxisColumn$1 = -1;
    this._yAxisColumn$1 = -1;
    this._zAxisColumn$1 = -1;
    this._xAxisReverse$1 = false;
    this._yAxisReverse$1 = false;
    this._zAxisReverse$1 = false;
    this._altType$1 = 3;
    this._markerMix$1 = 0;
    this._raUnits$1 = 0;
    this._colorMap$1 = 3;
    this._markerColumn$1 = -1;
    this._colorMapColumn$1 = -1;
    this._plotType$1 = 0;
    this._markerIndex$1 = 0;
    this._showFarSide$1 = false;
    this._markerScale$1 = 1;
    this._altUnit$1 = 1;
    this._cartesianScale$1 = 1;
    this._cartesianCustomScale$1 = 1;
    this.altColumn = -1;
    this.startDateColumn = -1;
    this.endDateColumn = -1;
    this.sizeColumn = -1;
    this.nameColumn = 0;
    this._hyperlinkFormat$1 = '';
    this._hyperlinkColumn$1 = -1;
    this.scaleFactor = 1;
    this.pointScaleType = 1;
    this.positions = [];
    this.bufferIsFlat = false;
    this.baseDate = new Date(2010, 0, 1, 12, 0, 0);
    this.dirty = true;
    this.lastVersion = 0;
    Layer.call(this);
  }
  SpreadSheetLayer._getDatafromFeed$1 = function(url) {
    return '';
  };
  SpreadSheetLayer._executeQuery$1 = function(url) {
    return '';
  };
  SpreadSheetLayer.parseDate = function(date) {
    var dt = ss.now();
    try {
      dt = new Date(date);
    }
    catch ($e1) {
      try {
        return SpreadSheetLayer.execlToDateTime(parseFloat(date));
      }
      catch ($e2) {
      }
    }
    return dt;
  };
  SpreadSheetLayer.execlToDateTime = function(excelDate) {
    if (excelDate > 59) {
      excelDate -= 1;
    }
    if (excelDate > 730000) {
      excelDate = 730000;
    }
    var es = new Date(1899, 12, 31);
    return new Date(es.getDate() + ss.truncate((excelDate * 24 * 60 * 60 * 1000)));
  };
  SpreadSheetLayer.get__circleTexture$1 = function() {
    return SpreadSheetLayer._circleTexture$1;
  };
  var SpreadSheetLayer$ = {
    getTypeName: function() {
      return 'TerraViewer.SpreadSheetLayer';
    },
    get_header: function() {
      return this._table$1.header;
    },
    canCopyToClipboard: function() {
      return true;
    },
    copyToClipboard: function() {
    },
    dynamicUpdate: function() {
      var data = SpreadSheetLayer._getDatafromFeed$1(this.get_dataSourceUrl());
      if (data != null) {
        this.upadteData(data, false, true, true);
        this.guessHeaderAssignments();
        return true;
      }
      return false;
    },
    upadteData: function(data, purgeOld, purgeAll, hasHeader) {
      this.loadFromString(ss.safeCast(data, String), true, purgeOld, purgeAll, hasHeader);
      this.computeDateDomainRange(-1, -1);
      this._dataDirty$1 = true;
      return true;
    },
    loadData: function(tourDoc, filename) {
      var $this = this;

      this._table$1 = new Table();
      var blob = tourDoc.getFileBlob(filename);
      this.getStringFromGzipBlob(blob, function(data) {
        $this._table$1.loadFromString(data, false, true, true);
        $this.computeDateDomainRange(-1, -1);
        if ($this.get_dynamicData() && $this.get_autoUpdate()) {
          $this.dynamicUpdate();
        }
        $this._dataDirty$1 = true;
        $this.dirty = true;
      });
    },
    addFilesToCabinet: function(fc) {
      this._fileName$1 = fc.tempDirectory + ss.format('{0}\\{1}.txt', fc.get_packageID(), this.id.toString());
      var dir = this._fileName$1.substring(0, this._fileName$1.lastIndexOf('\\'));
      var data = this._table$1.save();
      var blob = new Blob([ data ]);
      fc.addFile(this._fileName$1, blob);
      Layer.prototype.addFilesToCabinet.call(this, fc);
    },
    guessHeaderAssignments: function() {
      var index = 0;
      var $enum1 = ss.enumerate(this._table$1.header);
      while ($enum1.moveNext()) {
        var headerName = $enum1.current;
        var name = headerName.toLowerCase();
        if (name.indexOf('lat') > -1 && this.latColumn === -1) {
          this.latColumn = index;
        }
        if ((name.indexOf('lon') > -1 || name.indexOf('lng') > -1) && this.lngColumn === -1) {
          this.lngColumn = index;
        }
        if (name.indexOf('dec') > -1 && this.latColumn === -1) {
          this.latColumn = index;
          this.astronomical = true;
        }
        if ((name.indexOf('ra') > -1 || name.indexOf('ascen') > -1) && this.lngColumn === -1) {
          this.lngColumn = index;
          this.astronomical = true;
          this.pointScaleType = 4;
        }
        if ((name.indexOf('mag') > -1 || name.indexOf('size') > -1) && this.sizeColumn === -1) {
          this.sizeColumn = index;
        }
        if ((name.indexOf('date') > -1 || name.indexOf('time') > -1 || name.indexOf('dt') > -1 || name.indexOf('tm') > -1)) {
          if (name.indexOf('end') > -1 && this.endDateColumn === -1) {
            this.endDateColumn = index;
          }
          else if (this.startDateColumn === -1) {
            this.startDateColumn = index;
          }
        }
        if ((name.indexOf('altitude') > -1 || name.indexOf('alt') > -1) && this.altColumn === -1) {
          this.altColumn = index;
          this.set_altType(1);
          this.set_altUnit(1);
        }
        if (name.indexOf('depth') > -1 && this.altColumn === -1) {
          this.altColumn = index;
          this.set_altType(0);
          this.set_altUnit(5);
        }
        if (ss.startsWith(name, 'x') && this.get_xAxisColumn() === -1) {
          this.set_xAxisColumn(index);
        }
        if (ss.startsWith(name, 'y') && this.get_yAxisColumn() === -1) {
          this.set_yAxisColumn(index);
        }
        if (ss.startsWith(name, 'z') && this.get_zAxisColumn() === -1) {
          this.set_zAxisColumn(index);
        }
        if (name.indexOf('color') > -1 && this.get_colorMapColumn() === -1) {
          this.set_colorMapColumn(index);
        }
        if ((name.indexOf('geometry') > -1 || name.indexOf('geography') > -1) && this.geometryColumn === -1) {
          this.geometryColumn = index;
        }
        index++;
      }
      if (this._table$1.header.length > 0) {
        this.nameColumn = 0;
      }
    },
    computeDateDomainRange: function(columnStart, columnEnd) {
      if (columnStart === -1) {
        columnStart = this.startDateColumn;
      }
      if (columnEnd === -1) {
        columnEnd = this.endDateColumn;
      }
      if (columnEnd === -1) {
        columnEnd = columnStart;
      }
      this.set_beginRange(new Date('12/31/2100'));
      this.set_endRange(new Date('12/31/1890'));
      var $enum1 = ss.enumerate(this._table$1.rows);
      while ($enum1.moveNext()) {
        var row = $enum1.current;
        try {
          if (columnStart > -1) {
            var sucsess = false;
            var dateTimeStart = new Date('12/31/2100');
            try {
              dateTimeStart = new Date(row[columnStart]);
              if (dateTimeStart < this.get_beginRange()) {
                this.set_beginRange(dateTimeStart);
              }
            }
            catch ($e2) {
            }
            try {
              var dateTimeEnd = new Date('12/31/1890');
              if (columnEnd > -1) {
                dateTimeEnd = new Date(row[columnEnd]);
                if (sucsess && dateTimeEnd > this.get_endRange()) {
                  this.set_endRange(dateTimeEnd);
                }
              }
            }
            catch ($e3) {
            }
          }
        }
        catch ($e4) {
        }
      }
    },
    checkState: function() {
    },
    getMaxValue: function(column) {
      var max = 0;
      this._table$1.lock();
      var $enum1 = ss.enumerate(this._table$1.rows);
      while ($enum1.moveNext()) {
        var row = $enum1.current;
        try {
          if (column > -1) {
            var sucsess = false;
            try {
              var val = parseFloat(row[column]);
              if (sucsess && val > max) {
                max = val;
              }
            }
            catch ($e2) {
            }
          }
        }
        catch ($e3) {
        }
      }
      this._table$1.unlock();
      return max;
    },
    getDomainValues: function(column) {
      var domainValues = [];
      this._table$1.lock();
      var $enum1 = ss.enumerate(this._table$1.rows);
      while ($enum1.moveNext()) {
        var row = $enum1.current;
        try {
          if (column > -1) {
            if (!(domainValues.indexOf(row[column]) >= 0)) {
              domainValues.push(row[column]);
            }
          }
        }
        catch ($e2) {
        }
      }
      domainValues.sort();
      this._table$1.unlock();
      return domainValues;
    },
    get_barChartBitmask: function() {
      return this._barChartBitmask$1;
    },
    set_barChartBitmask: function(value) {
      this._barChartBitmask$1 = value;
      return value;
    },
    prepVertexBuffer: function(renderContext, opacity) {
      this._table$1.lock();
      if (this.lineList != null) {
        this.lineList.clear();
      }
      if (this.lineList2d != null) {
        this.lineList2d.clear();
      }
      if (this.triangleList != null) {
        this.triangleList.clear();
      }
      if (this.pointList != null) {
        this.pointList.clear();
      }
      if (this.triangleList2d != null) {
        this.triangleList2d.clear();
      }
      if (this.lineList == null) {
        this.lineList = new LineList();
      }
      if (this.pointList == null) {
        this.pointList = new PointList(renderContext);
      }
      this.lineList.timeSeries = this.timeSeries;
      if (this.lineList2d == null) {
        this.lineList2d = new LineList();
        this.lineList2d.set_depthBuffered(false);
      }
      this.lineList.timeSeries = this.timeSeries;
      if (this.triangleList == null) {
        this.triangleList = new TriangleList();
      }
      if (this.triangleList2d == null) {
        this.triangleList2d = new TriangleList();
        this.triangleList2d.depthBuffered = false;
      }
      this.positions.length = 0;
      var currentIndex = 0;
      var colorLocal = this.get_color();
      var ecliptic = Coordinates.meanObliquityOfEcliptic(SpaceTimeController.get_jNow()) / 180 * Math.PI;
      var selectDomain = {};
      var mr = 0;
      if (!!mr) {
        this._meanRadius$1 = mr;
      }
      var position = new Vector3d();
      var pointSize = 0.0002;
      var pointColor = Colors.get_white();
      var pointStartTime = 0;
      var pointEndTime = 0;
      var $enum1 = ss.enumerate(this._table$1.rows);
      while ($enum1.moveNext()) {
        var row = $enum1.current;
        try {
          var selected = false;
          if (this.geometryColumn > -1 || (!this.get_coordinatesType() && (this.lngColumn > -1 && this.latColumn > -1)) || ((this.get_coordinatesType() === 1) && (this.get_xAxisColumn() > -1 && this.get_yAxisColumn() > -1))) {
            var Xcoord = 0;
            var Ycoord = 0;
            var Zcoord = 0;
            var alt = 1;
            var altitude = 0;
            var distParces = 0;
            var factor = this.getScaleFactor(this.get_altUnit(), 1);
            if (this.altColumn === -1 || this.get_altType() === 3 || this.bufferIsFlat) {
              alt = 1;
              if ((this.astronomical & !this.bufferIsFlat) === 1) {
                alt = 63239.6717 * 100;
              }
            }
            else {
              if (!this.get_altType()) {
                factor = -factor;
              }
              alt = 0;
              try {
                alt = parseFloat(row[this.altColumn]);
              }
              catch ($e2) {
              }
              if (this.astronomical) {
                factor = factor / (1000 * 149598000);
                distParces = (alt * factor) / 206264.806;
                altitude = (factor * alt);
                alt = (factor * alt);
              }
              else if (this.get_altType() === 2) {
                altitude = (factor * alt);
                alt = (factor * alt / this._meanRadius$1);
              }
              else {
                altitude = (factor * alt);
                alt = 1 + (factor * alt / this._meanRadius$1);
              }
            }
            if (!this.get_coordinatesType() && this.lngColumn > -1 && this.latColumn > -1) {
              Xcoord = parseFloat(row[this.lngColumn]);
              Ycoord = parseFloat(row[this.latColumn]);
              if (this.astronomical) {
                if (!this.get_raUnits()) {
                  Xcoord *= 15;
                }
                if (this.bufferIsFlat) {
                  Xcoord += 180;
                }
              }
              var offset = 0;
              var pos = Coordinates.geoTo3dDoubleRad(Ycoord, Xcoord, alt);
              if (this.astronomical && !this.bufferIsFlat) {
                pos.rotateX(ecliptic);
              }
              position = pos;
              this.positions.push(position);
            }
            else if (this.get_coordinatesType() === 1) {
              var xyzScale = this.getScaleFactor(this.get_cartesianScale(), this.get_cartesianCustomScale()) / this._meanRadius$1;
              if (this.get_zAxisColumn() > -1) {
                Zcoord = parseFloat(row[this.get_zAxisColumn()]);
              }
              Xcoord = parseFloat(row[this.get_xAxisColumn()]);
              Ycoord = parseFloat(row[this.get_yAxisColumn()]);
              if (this.get_xAxisReverse()) {
                Xcoord = -Xcoord;
              }
              if (this.get_yAxisReverse()) {
                Ycoord = -Ycoord;
              }
              if (this.get_zAxisReverse()) {
                Zcoord = -Zcoord;
              }
              position = Vector3d.create((Xcoord * xyzScale), (Zcoord * xyzScale), (Ycoord * xyzScale));
              this.positions.push(position);
            }
            switch (this.get__colorMap()) {
              case 0:
                pointColor = colorLocal;
                break;
              case 3:
                if (this.get_colorMapColumn() > -1) {
                  pointColor = this._parseColor$1(row[this.get_colorMapColumn()], colorLocal);
                }
                else {
                  pointColor = colorLocal;
                }
                break;
              default:
                break;
            }
            if (this.sizeColumn > -1) {
              switch (this.pointScaleType) {
                case 0:
                  pointSize = parseFloat(row[this.sizeColumn]);
                  break;
                case 2:
                  pointSize = Math.log(parseFloat(row[this.sizeColumn]));
                  break;
                case 1:
                  var size = 0;
                  try {
                    pointSize = parseFloat(row[this.sizeColumn]);
                    pointSize = Math.pow(2, pointSize);
                  }
                  catch ($e3) {
                    pointSize = 0;
                  }
                  break;
                case 4:
                  var size = 0;
                  try {
                    size = parseFloat(row[this.sizeColumn]);
                    if (!this.bufferIsFlat) {
                      size = size - 5 * (Util.logN(distParces, 10) - 1);
                      pointSize = (120000000 / Math.pow(1.6, size));
                    }
                    else {
                      pointSize = (40 / Math.pow(1.6, size));
                    }
                  }
                  catch ($e4) {
                    pointSize = 0;
                  }
                  break;
                case 3:
                  pointSize = 1;
                  break;
                default:
                  break;
              }
            }
            else {
              pointSize = 0.2;
            }
            if (this.get_plotType() === 1) {
              pointSize = 1;
            }
            if ((this.astronomical & !this.bufferIsFlat) === 1) {
            }
            if (this.startDateColumn > -1) {
              var dateTime = new Date(row[this.startDateColumn]);
              pointStartTime = (SpaceTimeController.utcToJulian(dateTime) - SpaceTimeController.utcToJulian(this.baseDate));
              if (this.endDateColumn > -1) {
                dateTime = new Date(row[this.endDateColumn]);
                pointEndTime = (SpaceTimeController.utcToJulian(dateTime) - SpaceTimeController.utcToJulian(this.baseDate));
              }
              else {
                pointEndTime = pointStartTime;
              }
            }
            this.pointList.addPoint(position, pointColor, new Dates(pointStartTime, pointEndTime), pointSize);
            if (this.geometryColumn > -1) {
              this._parseGeometry$1(row[this.geometryColumn], pointColor, pointColor, altitude, new Dates(pointStartTime, pointEndTime));
            }
            currentIndex++;
          }
        }
        catch ($e5) {
        }
        this.lines = false;
      }
      this._table$1.unlock();
      this._dataDirty$1 = false;
      this.dirty = false;
      return false;
    },
    _parseGeometry$1: function(gs, lineColor, polyColor, alt, date) {
      gs = ss.trim(gs).toLowerCase();
      var index = gs.indexOf('(');
      if (index < 0) {
        return;
      }
      if (!ss.endsWith(gs, ')')) {
        return;
      }
      var commandPart = ss.trim(gs.substring(0, index));
      var parens = gs.substr(index);
      var parts = commandPart.split(' ');
      var command = null;
      var mods = null;
      if (parts.length > 0) {
        var $enum1 = ss.enumerate(parts);
        while ($enum1.moveNext()) {
          var item = $enum1.current;
          if (ss.emptyString(command)) {
            command = item;
          }
          else if (ss.emptyString(mods)) {
            mods = item;
          }
        }
      }
      switch (command) {
        case 'multipolygon':
        case 'polygon':
          this._parsePolygon$1(parens, mods, lineColor, polyColor, alt, date);
          break;
        case 'multilinestring':
          this._parseLineString$1(parens, mods, lineColor, alt, false, date);
          break;
        case 'linestring':
          this._parseLineString$1(parens, mods, lineColor, alt, true, date);
          break;
        case 'geometrycollection':
          parens = parens.substring(1, parens.length - 2);
          var shapes = UiTools.splitString(parens, ',');
          var $enum2 = ss.enumerate(shapes);
          while ($enum2.moveNext()) {
            var shape = $enum2.current;
            this._parseGeometry$1(shape, lineColor, polyColor, alt, date);
          }
          break;
        default:
          break;
      }
    },
    _parsePolygon$1: function(parens, mods, lineColor, polyColor, alt, date) {
      if (!ss.startsWith(parens, '(') && ss.endsWith(parens, ')')) {
        return;
      }
      parens = parens.substring(1, parens.length - 2);
      var shapes = UiTools.splitString(parens, ',');
      var $enum1 = ss.enumerate(shapes);
      while ($enum1.moveNext()) {
        var shape = $enum1.current;
        var lineList = new KmlLineList();
        lineList.astronomical = this.astronomical;
        lineList.meanRadius = this._meanRadius$1;
        lineList.parseWkt(shape, mods, alt, date);
        if (!alt) {
          this._addPolygonFlat$1(false, lineList, 1, polyColor, lineColor, true, true, date);
        }
        else {
          this._addPolygon$1(false, lineList, 1, polyColor, lineColor, true, true, date);
        }
      }
    },
    _parseLineString$1: function(parens, mods, lineColor, alt, single, date) {
      if (!ss.startsWith(parens, '(') && ss.endsWith(parens, ')')) {
        return;
      }
      if (!single) {
        parens = parens.substring(1, parens.length - 2);
      }
      var shapes = UiTools.splitString(parens, ',');
      var $enum1 = ss.enumerate(shapes);
      while ($enum1.moveNext()) {
        var shape = $enum1.current;
        var lineList = new KmlLineList();
        lineList.astronomical = this.astronomical;
        lineList.meanRadius = this._meanRadius$1;
        lineList.parseWkt(shape, mods, alt, date);
        this._addPolygon$1(false, lineList, 1, Colors.get_white(), lineColor, false, false, date);
      }
    },
    _splitShapes$1: function(shapes) {
      var shapeList = [];
      var nesting = 0;
      var current = 0;
      while (current < shapes.length) {
        if (shapes.substr(current, 1) === '(') {
          nesting++;
        }
      }
      return shapeList;
    },
    _addPolygon$1: function(sky, geo, lineWidth, polyColor, lineColor, extrude, fill, date) {
      var vertexList = [];
      var vertexListGround = [];
      for (var i = 0; i < geo.pointList.length; i++) {
        vertexList.push(Coordinates.geoTo3dDoubleRad(geo.pointList[i].lat, geo.pointList[i].lng, 1 + (geo.pointList[i].alt / this._meanRadius$1)));
        vertexListGround.push(Coordinates.geoTo3dDoubleRad(geo.pointList[i].lat, geo.pointList[i].lng, 1));
      }
      for (var i = 0; i < (geo.pointList.length - 1); i++) {
        if (sky) {
        }
        else {
          if (extrude) {
            this.triangleList.addQuad(vertexList[i], vertexList[i + 1], vertexListGround[i], vertexListGround[i + 1], polyColor, date);
          }
          if (lineWidth > 0) {
            if (extrude) {
              this.lineList.addLine(vertexList[i], vertexList[i + 1], lineColor, date);
            }
            else {
              this.lineList2d.addLine(vertexList[i], vertexList[i + 1], lineColor, date);
            }
            if (extrude) {
              this.lineList.addLine(vertexListGround[i], vertexListGround[i + 1], lineColor, date);
              this.lineList.addLine(vertexList[i], vertexListGround[i], lineColor, date);
              this.lineList.addLine(vertexList[i + 1], vertexListGround[i + 1], lineColor, date);
            }
          }
        }
      }
      if (fill) {
        var indexes = Tessellator.tesselateSimplePoly(vertexList);
        for (var i = 0; i < indexes.length; i += 3) {
          this.triangleList.addTriangle(vertexList[indexes[i]], vertexList[indexes[i + 1]], vertexList[indexes[i + 2]], polyColor, date);
        }
      }
    },
    _addPolygonFlat$1: function(sky, geo, lineWidth, polyColor, lineColor, extrude, fill, date) {
      var vertexList = [];
      for (var i = 0; i < geo.pointList.length; i++) {
        vertexList.push(Coordinates.geoTo3dDoubleRad(geo.pointList[i].lat, geo.pointList[i].lng, 1 + (geo.pointList[i].alt / this._meanRadius$1)));
      }
      for (var i = 0; i < (geo.pointList.length - 1); i++) {
        if (sky) {
        }
        else {
          if (lineWidth > 0) {
            this.lineList2d.addLine(vertexList[i], vertexList[i + 1], lineColor, date);
          }
        }
      }
      if (fill) {
        var indexes = Tessellator.tesselateSimplePoly(vertexList);
        for (var i = 0; i < indexes.length; i += 3) {
          this.triangleList2d.addSubdividedTriangles(vertexList[indexes[i]], vertexList[indexes[i + 1]], vertexList[indexes[i + 2]], polyColor, date, 2);
        }
      }
    },
    _parseColor$1: function(colorText, defaultColor) {
      return Color.load(colorText);
    },
    getScaleFactor: function(AltUnit, custom) {
      var factor = 1;
      switch (AltUnit) {
        case 1:
          factor = 1;
          break;
        case 2:
          factor = 1 * 0.3048;
          break;
        case 3:
          factor = (1 / 12) * 0.3048;
          break;
        case 4:
          factor = 5280 * 0.3048;
          break;
        case 5:
          factor = 1000;
          break;
        case 6:
          factor = 1000 * 149598000;
          break;
        case 7:
          factor = 1000 * 149598000 * 63239.6717;
          break;
        case 8:
          factor = 1000 * 149598000 * 206264.806;
          break;
        case 9:
          factor = 1000 * 149598000 * 206264.806 * 1000000;
          break;
        case 10:
          factor = custom;
          break;
        default:
          break;
      }
      return factor;
    },
    get__table: function() {
      return this._table$1;
    },
    set__table: function(value) {
      this._table$1 = value;
      return value;
    },
    loadFromString: function(data, isUpdate, purgeOld, purgeAll, hasHeader) {
      if (!isUpdate) {
        this._table$1 = new Table();
      }
      this._table$1.lock();
      this._table$1.loadFromString(data, isUpdate, purgeAll, hasHeader);
      if (!isUpdate) {
        this.guessHeaderAssignments();
        if (this.astronomical && this.lngColumn > -1) {
          var max = this.getMaxValue(this.lngColumn);
          if (max > 24) {
            this.set_raUnits(1);
          }
        }
      }
      if (purgeOld) {
        this.purgeByTime();
      }
      this._table$1.unlock();
    },
    purgeByTime: function() {
      if (this.startDateColumn < 0) {
        return;
      }
      var columnToUse = this.startDateColumn;
      if (this.endDateColumn > -1) {
        columnToUse = this.endDateColumn;
      }
      var threasholdTime = SpaceTimeController.get_now();
      var ts = ss.truncate(this.decay) * 24 * 60 * 60 * 1000;
      threasholdTime = new Date(threasholdTime.getDate() - ts);
      var count = this._table$1.rows.length;
      for (var i = 0; i < count; i++) {
        try {
          var row = this._table$1.rows[i];
          var colDate = new Date(row[columnToUse]);
          if (colDate < threasholdTime) {
            this._table$1.rows.splice(i, 1);
            count--;
            i--;
          }
        }
        catch ($e1) {
        }
      }
    },
    cleanUp: function() {
      this.cleanUpBase();
      this._table$1.lock();
      Layer.prototype.cleanUp.call(this);
      this._table$1.unlock();
      this.dirty = true;
    },
    writeLayerProperties: function(xmlWriter) {
      xmlWriter._writeAttributeString('TimeSeries', this.get_timeSeries().toString());
      xmlWriter._writeAttributeString('BeginRange', Util.xmlDate(this.get_beginRange()));
      xmlWriter._writeAttributeString('EndRange', Util.xmlDate(this.get_endRange()));
      xmlWriter._writeAttributeString('Decay', this.get_decay().toString());
      xmlWriter._writeAttributeString('CoordinatesType', Enums.toXml('CoordinatesTypes', this.get_coordinatesType()));
      xmlWriter._writeAttributeString('LatColumn', this.get_latColumn().toString());
      xmlWriter._writeAttributeString('LngColumn', this.get_lngColumn().toString());
      xmlWriter._writeAttributeString('GeometryColumn', this.get_geometryColumn().toString());
      xmlWriter._writeAttributeString('AltType', Enums.toXml('AltTypes', this.get_altType()));
      xmlWriter._writeAttributeString('MarkerMix', Enums.toXml('MarkerMixes', this.get_markerMix()));
      xmlWriter._writeAttributeString('ColorMap', Enums.toXml('ColorMaps', this.get__colorMap()));
      xmlWriter._writeAttributeString('MarkerColumn', this.get_markerColumn().toString());
      xmlWriter._writeAttributeString('ColorMapColumn', this.get_colorMapColumn().toString());
      xmlWriter._writeAttributeString('PlotType', Enums.toXml('PlotTypes', this.get_plotType()));
      xmlWriter._writeAttributeString('MarkerIndex', this.get_markerIndex().toString());
      xmlWriter._writeAttributeString('MarkerScale', Enums.toXml('MarkerScales', this.get_markerScale()));
      xmlWriter._writeAttributeString('AltUnit', this.get_altUnit().toString());
      xmlWriter._writeAttributeString('AltColumn', this.get_altColumn().toString());
      xmlWriter._writeAttributeString('StartDateColumn', this.get_startDateColumn().toString());
      xmlWriter._writeAttributeString('EndDateColumn', this.get_endDateColumn().toString());
      xmlWriter._writeAttributeString('SizeColumn', this.get_sizeColumn().toString());
      xmlWriter._writeAttributeString('HyperlinkFormat', this.get_hyperlinkFormat());
      xmlWriter._writeAttributeString('HyperlinkColumn', this.get_hyperlinkColumn().toString());
      xmlWriter._writeAttributeString('ScaleFactor', this.get_scaleFactor().toString());
      xmlWriter._writeAttributeString('PointScaleType', Enums.toXml('PointScaleTypes', this.get_pointScaleType()));
      xmlWriter._writeAttributeString('ShowFarSide', this.get_showFarSide().toString());
      xmlWriter._writeAttributeString('RaUnits', Enums.toXml('RAUnits', this.get_raUnits()));
      xmlWriter._writeAttributeString('HoverTextColumn', this.get_nameColumn().toString());
      xmlWriter._writeAttributeString('XAxisColumn', this.get_xAxisColumn().toString());
      xmlWriter._writeAttributeString('XAxisReverse', this.get_xAxisReverse().toString());
      xmlWriter._writeAttributeString('YAxisColumn', this.get_yAxisColumn().toString());
      xmlWriter._writeAttributeString('YAxisReverse', this.get_yAxisReverse().toString());
      xmlWriter._writeAttributeString('ZAxisColumn', this.get_zAxisColumn().toString());
      xmlWriter._writeAttributeString('ZAxisReverse', this.get_zAxisReverse().toString());
      xmlWriter._writeAttributeString('CartesianScale', Enums.toXml('AltUnits', this.get_cartesianScale()));
      xmlWriter._writeAttributeString('CartesianCustomScale', this.get_cartesianCustomScale().toString());
      xmlWriter._writeAttributeString('DynamicData', this.get_dynamicData().toString());
      xmlWriter._writeAttributeString('AutoUpdate', this.get_autoUpdate().toString());
      xmlWriter._writeAttributeString('DataSourceUrl', this.get_dataSourceUrl());
    },
    get_dynamicData: function() {
      return this._dynamicData$1;
    },
    set_dynamicData: function(value) {
      this._dynamicData$1 = value;
      return value;
    },
    get_autoUpdate: function() {
      return this._autoUpdate$1;
    },
    set_autoUpdate: function(value) {
      this._autoUpdate$1 = value;
      return value;
    },
    get_dataSourceUrl: function() {
      return this._dataSourceUrl$1;
    },
    set_dataSourceUrl: function(value) {
      this._dataSourceUrl$1 = value;
      return value;
    },
    get_timeSeries: function() {
      return this.timeSeries;
    },
    set_timeSeries: function(value) {
      if (this.timeSeries !== value) {
        this.version++;
        this.timeSeries = value;
      }
      return value;
    },
    get_beginRange: function() {
      return this._beginRange$1;
    },
    set_beginRange: function(value) {
      if (!ss.compareDates(this._beginRange$1, value)) {
        this.version++;
        this._beginRange$1 = value;
      }
      return value;
    },
    get_endRange: function() {
      return this._endRange$1;
    },
    set_endRange: function(value) {
      if (!ss.compareDates(this._endRange$1, value)) {
        this.version++;
        this._endRange$1 = value;
      }
      return value;
    },
    initializeFromXml: function(node) {
      this.set_timeSeries(ss.boolean(node.attributes.getNamedItem('TimeSeries').nodeValue));
      this.set_beginRange(new Date(node.attributes.getNamedItem('BeginRange').nodeValue));
      this.set_endRange(new Date(node.attributes.getNamedItem('EndRange').nodeValue));
      this.set_decay(parseFloat(node.attributes.getNamedItem('Decay').nodeValue));
      this.set_coordinatesType(Enums.parse('CoordinatesTypes', node.attributes.getNamedItem('CoordinatesType').nodeValue));
      if (this.get_coordinatesType() < 0) {
        this.set_coordinatesType(0);
      }
      this.set_latColumn(parseInt(node.attributes.getNamedItem('LatColumn').nodeValue));
      this.set_lngColumn(parseInt(node.attributes.getNamedItem('LngColumn').nodeValue));
      if (node.attributes.getNamedItem('GeometryColumn') != null) {
        this.set_geometryColumn(parseInt(node.attributes.getNamedItem('GeometryColumn').nodeValue));
      }
      this.set_altType(Enums.parse('AltTypes', node.attributes.getNamedItem('AltType').nodeValue));
      this.set_markerMix(0);
      this.set__colorMap(Enums.parse('ColorMaps', node.attributes.getNamedItem('ColorMap').nodeValue));
      this.set_markerColumn(parseInt(node.attributes.getNamedItem('MarkerColumn').nodeValue));
      this.set_colorMapColumn(parseInt(node.attributes.getNamedItem('ColorMapColumn').nodeValue));
      this.set_plotType(Enums.parse('PlotTypes', node.attributes.getNamedItem('PlotType').nodeValue));
      this.set_markerIndex(parseInt(node.attributes.getNamedItem('MarkerIndex').nodeValue));
      this.set_markerScale(Enums.parse('MarkerScales', node.attributes.getNamedItem('MarkerScale').nodeValue));
      this.set_altUnit(Enums.parse('AltUnits', node.attributes.getNamedItem('AltUnit').nodeValue));
      this.set_altColumn(parseInt(node.attributes.getNamedItem('AltColumn').nodeValue));
      this.set_startDateColumn(parseInt(node.attributes.getNamedItem('StartDateColumn').nodeValue));
      this.set_endDateColumn(parseInt(node.attributes.getNamedItem('EndDateColumn').nodeValue));
      this.set_sizeColumn(parseInt(node.attributes.getNamedItem('SizeColumn').nodeValue));
      this.set_hyperlinkFormat(node.attributes.getNamedItem('HyperlinkFormat').nodeValue);
      this.set_hyperlinkColumn(parseInt(node.attributes.getNamedItem('HyperlinkColumn').nodeValue));
      this.set_scaleFactor(parseFloat(node.attributes.getNamedItem('ScaleFactor').nodeValue));
      this.set_pointScaleType(Enums.parse('PointScaleTypes', node.attributes.getNamedItem('PointScaleType').nodeValue));
      if (node.attributes.getNamedItem('ShowFarSide') != null) {
        this.set_showFarSide(ss.boolean(node.attributes.getNamedItem('ShowFarSide').nodeValue));
      }
      if (node.attributes.getNamedItem('RaUnits') != null) {
        this.set_raUnits(Enums.parse('RAUnits', node.attributes.getNamedItem('RaUnits').nodeValue));
      }
      if (node.attributes.getNamedItem('HoverTextColumn') != null) {
        this.set_nameColumn(parseInt(node.attributes.getNamedItem('HoverTextColumn').nodeValue));
      }
      if (node.attributes.getNamedItem('XAxisColumn') != null) {
        this.set_xAxisColumn(parseInt(node.attributes.getNamedItem('XAxisColumn').nodeValue));
        this.set_xAxisReverse(ss.boolean(node.attributes.getNamedItem('XAxisReverse').nodeValue));
        this.set_yAxisColumn(parseInt(node.attributes.getNamedItem('YAxisColumn').nodeValue));
        this.set_yAxisReverse(ss.boolean(node.attributes.getNamedItem('YAxisReverse').nodeValue));
        this.set_zAxisColumn(parseInt(node.attributes.getNamedItem('ZAxisColumn').nodeValue));
        this.set_zAxisReverse(ss.boolean(node.attributes.getNamedItem('ZAxisReverse').nodeValue));
        this.set_cartesianScale(Enums.parse('AltUnits', node.attributes.getNamedItem('CartesianScale').nodeValue));
        this.set_cartesianCustomScale(parseFloat(node.attributes.getNamedItem('CartesianCustomScale').nodeValue));
      }
      if (node.attributes.getNamedItem('DynamicData') != null) {
        this.set_dynamicData(ss.boolean(node.attributes.getNamedItem('DynamicData').nodeValue));
        this.set_autoUpdate(ss.boolean(node.attributes.getNamedItem('AutoUpdate').nodeValue));
        this.set_dataSourceUrl(node.attributes.getNamedItem('DataSourceUrl').nodeValue);
      }
    },
    get_decay: function() {
      return this.decay;
    },
    set_decay: function(value) {
      if (this.decay !== value) {
        this.version++;
        this.decay = value;
      }
      return value;
    },
    get_coordinatesType: function() {
      return this._coordinatesType$1;
    },
    set_coordinatesType: function(value) {
      if (this._coordinatesType$1 !== value) {
        this.version++;
        this._coordinatesType$1 = value;
      }
      return value;
    },
    get_latColumn: function() {
      return this.latColumn;
    },
    set_latColumn: function(value) {
      if (this.latColumn !== value) {
        this.version++;
        this.latColumn = value;
      }
      return value;
    },
    get_lngColumn: function() {
      return this.lngColumn;
    },
    set_lngColumn: function(value) {
      if (this.lngColumn !== value) {
        this.version++;
        this.lngColumn = value;
      }
      return value;
    },
    get_geometryColumn: function() {
      return this.geometryColumn;
    },
    set_geometryColumn: function(value) {
      if (this.geometryColumn !== value) {
        this.version++;
        this.geometryColumn = value;
      }
      return value;
    },
    get_xAxisColumn: function() {
      return this._xAxisColumn$1;
    },
    set_xAxisColumn: function(value) {
      if (this._xAxisColumn$1 !== value) {
        this.version++;
        this._xAxisColumn$1 = value;
      }
      return value;
    },
    get_yAxisColumn: function() {
      return this._yAxisColumn$1;
    },
    set_yAxisColumn: function(value) {
      if (this._yAxisColumn$1 !== value) {
        this.version++;
        this._yAxisColumn$1 = value;
      }
      return value;
    },
    get_zAxisColumn: function() {
      return this._zAxisColumn$1;
    },
    set_zAxisColumn: function(value) {
      if (this._zAxisColumn$1 !== value) {
        this.version++;
        this._zAxisColumn$1 = value;
      }
      return value;
    },
    get_xAxisReverse: function() {
      return this._xAxisReverse$1;
    },
    set_xAxisReverse: function(value) {
      if (this._xAxisReverse$1 !== value) {
        this.version++;
        this._xAxisReverse$1 = value;
      }
      return value;
    },
    get_yAxisReverse: function() {
      return this._yAxisReverse$1;
    },
    set_yAxisReverse: function(value) {
      if (this._yAxisReverse$1 !== value) {
        this.version++;
        this._yAxisReverse$1 = value;
      }
      return value;
    },
    get_zAxisReverse: function() {
      return this._zAxisReverse$1;
    },
    set_zAxisReverse: function(value) {
      if (this._zAxisReverse$1 !== value) {
        this.version++;
        this._zAxisReverse$1 = value;
      }
      return value;
    },
    get_altType: function() {
      return this._altType$1;
    },
    set_altType: function(value) {
      if (this._altType$1 !== value) {
        this.version++;
        this._altType$1 = value;
      }
      return value;
    },
    get_markerMix: function() {
      return this._markerMix$1;
    },
    set_markerMix: function(value) {
      if (this._markerMix$1 !== value) {
        this.version++;
        this._markerMix$1 = value;
      }
      return value;
    },
    get_raUnits: function() {
      return this._raUnits$1;
    },
    set_raUnits: function(value) {
      if (this._raUnits$1 !== value) {
        this.version++;
        this._raUnits$1 = value;
      }
      return value;
    },
    get__colorMap: function() {
      return this._colorMap$1;
    },
    set__colorMap: function(value) {
      if (this._colorMap$1 !== value) {
        this.version++;
        this._colorMap$1 = value;
      }
      return value;
    },
    get_markerColumn: function() {
      return this._markerColumn$1;
    },
    set_markerColumn: function(value) {
      if (this._markerColumn$1 !== value) {
        this.version++;
        this._markerColumn$1 = value;
      }
      return value;
    },
    get_colorMapColumn: function() {
      return this._colorMapColumn$1;
    },
    set_colorMapColumn: function(value) {
      if (this._colorMapColumn$1 !== value) {
        this.version++;
        this._colorMapColumn$1 = value;
      }
      return value;
    },
    get_plotType: function() {
      return this._plotType$1;
    },
    set_plotType: function(value) {
      if (this._plotType$1 !== value) {
        this.version++;
        this._plotType$1 = value;
      }
      return value;
    },
    get_markerIndex: function() {
      return this._markerIndex$1;
    },
    set_markerIndex: function(value) {
      if (this._markerIndex$1 !== value) {
        this.version++;
        this._markerIndex$1 = value;
      }
      return value;
    },
    get_showFarSide: function() {
      return this._showFarSide$1;
    },
    set_showFarSide: function(value) {
      if (this._showFarSide$1 !== value) {
        this.version++;
        this._showFarSide$1 = value;
      }
      return value;
    },
    get_markerScale: function() {
      return this._markerScale$1;
    },
    set_markerScale: function(value) {
      if (this._markerScale$1 !== value) {
        this.version++;
        this._markerScale$1 = value;
      }
      return value;
    },
    get_altUnit: function() {
      return this._altUnit$1;
    },
    set_altUnit: function(value) {
      if (this._altUnit$1 !== value) {
        this.version++;
        this._altUnit$1 = value;
      }
      return value;
    },
    get_cartesianScale: function() {
      return this._cartesianScale$1;
    },
    set_cartesianScale: function(value) {
      if (this._cartesianScale$1 !== value) {
        this.version++;
        this._cartesianScale$1 = value;
      }
      return value;
    },
    get_cartesianCustomScale: function() {
      return this._cartesianCustomScale$1;
    },
    set_cartesianCustomScale: function(value) {
      if (this._cartesianCustomScale$1 !== value) {
        this.version++;
        this._cartesianCustomScale$1 = value;
      }
      return value;
    },
    get_altColumn: function() {
      return this.altColumn;
    },
    set_altColumn: function(value) {
      if (this.altColumn !== value) {
        this.version++;
        this.altColumn = value;
      }
      return value;
    },
    get_startDateColumn: function() {
      return this.startDateColumn;
    },
    set_startDateColumn: function(value) {
      if (this.startDateColumn !== value) {
        this.version++;
        this.startDateColumn = value;
      }
      return value;
    },
    get_endDateColumn: function() {
      return this.endDateColumn;
    },
    set_endDateColumn: function(value) {
      if (this.endDateColumn !== value) {
        this.version++;
        this.endDateColumn = value;
      }
      return value;
    },
    get_sizeColumn: function() {
      return this.sizeColumn;
    },
    set_sizeColumn: function(value) {
      if (this.sizeColumn !== value) {
        this.version++;
        this.sizeColumn = value;
      }
      return value;
    },
    get_nameColumn: function() {
      return this.nameColumn;
    },
    set_nameColumn: function(value) {
      if (this.nameColumn !== value) {
        this.version++;
        this.nameColumn = value;
      }
      return value;
    },
    get_hyperlinkFormat: function() {
      return this._hyperlinkFormat$1;
    },
    set_hyperlinkFormat: function(value) {
      if (this._hyperlinkFormat$1 !== value) {
        this.version++;
        this._hyperlinkFormat$1 = value;
      }
      return value;
    },
    get_hyperlinkColumn: function() {
      return this._hyperlinkColumn$1;
    },
    set_hyperlinkColumn: function(value) {
      if (this._hyperlinkColumn$1 !== value) {
        this.version++;
        this._hyperlinkColumn$1 = value;
      }
      return value;
    },
    get_scaleFactor: function() {
      return this.scaleFactor;
    },
    set_scaleFactor: function(value) {
      if (this.scaleFactor !== value) {
        this.version++;
        this.scaleFactor = value;
      }
      return value;
    },
    get_pointScaleType: function() {
      return this.pointScaleType;
    },
    set_pointScaleType: function(value) {
      if (this.pointScaleType !== value) {
        this.version++;
        this.pointScaleType = value;
      }
      return value;
    },
    draw: function(renderContext, opacity, flat) {
      var device = renderContext;
      if (this.version !== this.lastVersion) {
        this.cleanUp();
      }
      this.lastVersion = this.version;
      if (this.bufferIsFlat !== flat) {
        this.cleanUp();
        this.bufferIsFlat = flat;
      }
      if (this.dirty) {
        this.prepVertexBuffer(device, opacity);
      }
      var jNow = SpaceTimeController.get_jNow() - SpaceTimeController.utcToJulian(this.baseDate);
      var adjustedScale = this.scaleFactor * 3;
      if (flat && this.astronomical && (this._markerScale$1 === 1)) {
        adjustedScale = (this.scaleFactor / (renderContext.viewCamera.zoom / 360));
      }
      if (this.triangleList2d != null) {
        this.triangleList2d.decay = this.decay;
        this.triangleList2d.sky = this.get_astronomical();
        this.triangleList2d.timeSeries = this.timeSeries;
        this.triangleList2d.jNow = jNow;
        this.triangleList2d.draw(renderContext, opacity * this.get_opacity(), 1);
      }
      if (this.triangleList != null) {
        this.triangleList.decay = this.decay;
        this.triangleList.sky = this.get_astronomical();
        this.triangleList.timeSeries = this.timeSeries;
        this.triangleList.jNow = jNow;
        this.triangleList.draw(renderContext, opacity * this.get_opacity(), 1);
      }
      if (this.pointList != null) {
        this.pointList.depthBuffered = false;
        this.pointList.showFarSide = this.get_showFarSide();
        this.pointList.decay = (this.timeSeries) ? this.decay : 0;
        this.pointList.sky = this.get_astronomical();
        this.pointList.timeSeries = this.timeSeries;
        this.pointList.jNow = jNow;
        this.pointList.scale = (this._markerScale$1 === 1) ? adjustedScale : -adjustedScale;
        switch (this._plotType$1) {
          case 0:
            this.pointList.draw(renderContext, opacity * this.get_opacity(), false);
            break;
          case 2:
          case 1:
            this.pointList.drawTextured(renderContext, PushPin.getPushPinTexture(35), opacity * this.get_opacity());
            break;
          case 3:
            this.pointList.drawTextured(renderContext, PushPin.getPushPinTexture(67), opacity * this.get_opacity());
            break;
          case 5:
          case 4:
            this.pointList.drawTextured(renderContext, PushPin.getPushPinTexture(this._markerIndex$1), opacity * this.get_opacity());
            break;
          default:
            break;
        }
        this.pointList.draw(renderContext, opacity * this.get_opacity(), false);
      }
      if (this.lineList != null) {
        this.lineList.sky = this.get_astronomical();
        this.lineList.decay = this.decay;
        this.lineList.timeSeries = this.timeSeries;
        this.lineList.jNow = jNow;
        this.lineList.drawLines(renderContext, opacity * this.get_opacity());
      }
      if (this.lineList2d != null) {
        this.lineList2d.sky = this.get_astronomical();
        this.lineList2d.decay = this.decay;
        this.lineList2d.timeSeries = this.timeSeries;
        this.lineList2d.showFarSide = this.get_showFarSide();
        this.lineList2d.jNow = jNow;
        this.lineList2d.drawLines(renderContext, opacity * this.get_opacity());
      }
      return true;
    },
    cleanUpBase: function() {
      if (this.lineList != null) {
        this.lineList.clear();
      }
      if (this.lineList2d != null) {
        this.lineList2d.clear();
      }
      if (this.triangleList2d != null) {
        this.triangleList2d.clear();
      }
      if (this.pointList != null) {
        this.pointList.clear();
      }
      if (this.triangleList != null) {
        this.triangleList.clear();
      }
    }
  };


  // wwtlib.TimeSeriesLayer

  function TimeSeriesLayer() {
    this.isLongIndex = false;
    this.shapeVertexCount = 0;
    this.lines = false;
    this.latColumn = -1;
    this.fixedSize = 1;
    this.decay = 16;
    this.timeSeries = false;
    this._dynamicData$1 = false;
    this._autoUpdate$1 = false;
    this._dataSourceUrl$1 = '';
    this._beginRange$1 = new Date('1/1/2100');
    this._endRange$1 = new Date('01/01/1800');
    this.markerDomainValues = {};
    this.colorDomainValues = {};
    this._coordinatesType$1 = 0;
    this.lngColumn = -1;
    this.geometryColumn = -1;
    this._xAxisColumn$1 = -1;
    this._yAxisColumn$1 = -1;
    this._zAxisColumn$1 = -1;
    this._xAxisReverse$1 = false;
    this._yAxisReverse$1 = false;
    this._zAxisReverse$1 = false;
    this._altType$1 = 3;
    this._markerMix$1 = 0;
    this._raUnits$1 = 0;
    this._colorMap$1 = 3;
    this._markerColumn$1 = -1;
    this._colorMapColumn$1 = -1;
    this._plotType$1 = 0;
    this._markerIndex$1 = 0;
    this._showFarSide$1 = false;
    this._markerScale$1 = 1;
    this._altUnit$1 = 1;
    this._cartesianScale$1 = 1;
    this._cartesianCustomScale$1 = 1;
    this.altColumn = -1;
    this.startDateColumn = -1;
    this.endDateColumn = -1;
    this.sizeColumn = -1;
    this.nameColumn = 0;
    this._hyperlinkFormat$1 = '';
    this._hyperlinkColumn$1 = -1;
    this.scaleFactor = 1;
    this.pointScaleType = 1;
    this.positions = [];
    this.bufferIsFlat = false;
    this.baseDate = new Date(2010, 0, 1, 12, 0, 0);
    this.dirty = true;
    this.lastVersion = 0;
    Layer.call(this);
  }
  TimeSeriesLayer.get__circleTexture$1 = function() {
    return TimeSeriesLayer._circleTexture$1;
  };
  var TimeSeriesLayer$ = {
    get_dynamicData: function() {
      return this._dynamicData$1;
    },
    set_dynamicData: function(value) {
      this._dynamicData$1 = value;
      return value;
    },
    get_autoUpdate: function() {
      return this._autoUpdate$1;
    },
    set_autoUpdate: function(value) {
      this._autoUpdate$1 = value;
      return value;
    },
    get_dataSourceUrl: function() {
      return this._dataSourceUrl$1;
    },
    set_dataSourceUrl: function(value) {
      this._dataSourceUrl$1 = value;
      return value;
    },
    get_timeSeries: function() {
      return this.timeSeries;
    },
    set_timeSeries: function(value) {
      if (this.timeSeries !== value) {
        this.version++;
        this.timeSeries = value;
      }
      return value;
    },
    get_header: function() {
      return null;
    },
    get_beginRange: function() {
      return this._beginRange$1;
    },
    set_beginRange: function(value) {
      if (!ss.compareDates(this._beginRange$1, value)) {
        this.version++;
        this._beginRange$1 = value;
      }
      return value;
    },
    get_endRange: function() {
      return this._endRange$1;
    },
    set_endRange: function(value) {
      if (!ss.compareDates(this._endRange$1, value)) {
        this.version++;
        this._endRange$1 = value;
      }
      return value;
    },
    initializeFromXml: function(node) {
      this.set_timeSeries(ss.boolean(node.attributes.getNamedItem('TimeSeries').nodeValue));
      this.set_beginRange(new Date(node.attributes.getNamedItem('BeginRange').nodeValue));
      this.set_endRange(new Date(node.attributes.getNamedItem('EndRange').nodeValue));
      this.set_decay(parseFloat(node.attributes.getNamedItem('Decay').nodeValue));
      this.set_coordinatesType(Enums.parse('CoordinatesTypes', node.attributes.getNamedItem('CoordinatesType').nodeValue));
      if (this.get_coordinatesType() < 0) {
        this.set_coordinatesType(0);
      }
      this.set_latColumn(parseInt(node.attributes.getNamedItem('LatColumn').nodeValue));
      this.set_lngColumn(parseInt(node.attributes.getNamedItem('LngColumn').nodeValue));
      if (node.attributes.getNamedItem('GeometryColumn') != null) {
        this.set_geometryColumn(parseInt(node.attributes.getNamedItem('GeometryColumn').nodeValue));
      }
      switch (node.attributes.getNamedItem('AltType').nodeValue) {
        case 'Depth':
          this.set_altType(0);
          break;
        case 'Altitude':
          this.set_altType(1);
          break;
        case 'Distance':
          this.set_altType(2);
          break;
        case 'SeaLevel':
          this.set_altType(3);
          break;
        case 'Terrain':
          this.set_altType(4);
          break;
        default:
          break;
      }
      this.set_markerMix(0);
      switch (node.attributes.getNamedItem('ColorMap').nodeValue) {
        case 'Same_For_All':
          this.set__colorMap(0);
          break;
        case 'Group_by_Values':
          this.set__colorMap(2);
          break;
        case 'Per_Column_Literal':
          this.set__colorMap(3);
          break;
        default:
          break;
      }
      this.set_markerColumn(parseInt(node.attributes.getNamedItem('MarkerColumn').nodeValue));
      this.set_colorMapColumn(parseInt(node.attributes.getNamedItem('ColorMapColumn').nodeValue));
      switch (node.attributes.getNamedItem('PlotType').nodeValue) {
        case 'Gaussian':
          this.set_plotType(0);
          break;
        case 'Point':
          this.set_plotType(1);
          break;
        case 'Circle':
          this.set_plotType(2);
          break;
        case 'PushPin':
          this.set_plotType(4);
          break;
        default:
          break;
      }
      this.set_markerIndex(parseInt(node.attributes.getNamedItem('MarkerIndex').nodeValue));
      switch (node.attributes.getNamedItem('MarkerScale').nodeValue) {
        case 'Screen':
          this.set_markerScale(0);
          break;
        case 'World':
          this.set_markerScale(1);
          break;
        default:
          break;
      }
      switch (node.attributes.getNamedItem('AltUnit').nodeValue) {
        case 'Meters':
          this.set_altUnit(1);
          break;
        case 'Feet':
          this.set_altUnit(2);
          break;
        case 'Inches':
          this.set_altUnit(3);
          break;
        case 'Miles':
          this.set_altUnit(4);
          break;
        case 'Kilometers':
          this.set_altUnit(5);
          break;
        case 'AstronomicalUnits':
          this.set_altUnit(6);
          break;
        case 'LightYears':
          this.set_altUnit(7);
          break;
        case 'Parsecs':
          this.set_altUnit(8);
          break;
        case 'MegaParsecs':
          this.set_altUnit(9);
          break;
        case 'Custom':
          this.set_altUnit(10);
          break;
        default:
          break;
      }
      this.set_altColumn(parseInt(node.attributes.getNamedItem('AltColumn').nodeValue));
      this.set_startDateColumn(parseInt(node.attributes.getNamedItem('StartDateColumn').nodeValue));
      this.set_endDateColumn(parseInt(node.attributes.getNamedItem('EndDateColumn').nodeValue));
      this.set_sizeColumn(parseInt(node.attributes.getNamedItem('SizeColumn').nodeValue));
      this.set_hyperlinkFormat(node.attributes.getNamedItem('HyperlinkFormat').nodeValue);
      this.set_hyperlinkColumn(parseInt(node.attributes.getNamedItem('HyperlinkColumn').nodeValue));
      this.set_scaleFactor(parseFloat(node.attributes.getNamedItem('ScaleFactor').nodeValue));
      switch (node.attributes.getNamedItem('PointScaleType').nodeValue) {
        case 'Linear':
          this.set_pointScaleType(0);
          break;
        case 'Power':
          this.set_pointScaleType(1);
          break;
        case 'Log':
          this.set_pointScaleType(2);
          break;
        case 'Constant':
          this.set_pointScaleType(3);
          break;
        case 'StellarMagnitude':
          this.set_pointScaleType(4);
          break;
        default:
          break;
      }
      if (node.attributes.getNamedItem('ShowFarSide') != null) {
        this.set_showFarSide(ss.boolean(node.attributes.getNamedItem('ShowFarSide').nodeValue));
      }
      if (node.attributes.getNamedItem('RaUnits') != null) {
        switch (node.attributes.getNamedItem('RaUnits').nodeValue) {
          case 'Hours':
            this.set_raUnits(0);
            break;
          case 'Degrees':
            this.set_raUnits(1);
            break;
        }
      }
      if (node.attributes.getNamedItem('HoverTextColumn') != null) {
        this.set_nameColumn(parseInt(node.attributes.getNamedItem('HoverTextColumn').nodeValue));
      }
      if (node.attributes.getNamedItem('XAxisColumn') != null) {
        this.set_xAxisColumn(parseInt(node.attributes.getNamedItem('XAxisColumn').nodeValue));
        this.set_xAxisReverse(ss.boolean(node.attributes.getNamedItem('XAxisReverse').nodeValue));
        this.set_yAxisColumn(parseInt(node.attributes.getNamedItem('YAxisColumn').nodeValue));
        this.set_yAxisReverse(ss.boolean(node.attributes.getNamedItem('YAxisReverse').nodeValue));
        this.set_zAxisColumn(parseInt(node.attributes.getNamedItem('ZAxisColumn').nodeValue));
        this.set_zAxisReverse(ss.boolean(node.attributes.getNamedItem('ZAxisReverse').nodeValue));
        switch (node.attributes.getNamedItem('CartesianScale').nodeValue) {
          case 'Meters':
            this.set_cartesianScale(1);
            break;
          case 'Feet':
            this.set_cartesianScale(2);
            break;
          case 'Inches':
            this.set_cartesianScale(3);
            break;
          case 'Miles':
            this.set_cartesianScale(4);
            break;
          case 'Kilometers':
            this.set_cartesianScale(5);
            break;
          case 'AstronomicalUnits':
            this.set_cartesianScale(6);
            break;
          case 'LightYears':
            this.set_cartesianScale(7);
            break;
          case 'Parsecs':
            this.set_cartesianScale(8);
            break;
          case 'MegaParsecs':
            this.set_cartesianScale(9);
            break;
          case 'Custom':
            this.set_cartesianScale(10);
            break;
          default:
            break;
        }
        this.set_cartesianCustomScale(parseFloat(node.attributes.getNamedItem('CartesianCustomScale').nodeValue));
      }
      if (node.attributes.getNamedItem('DynamicData') != null) {
        this.set_dynamicData(ss.boolean(node.attributes.getNamedItem('DynamicData').nodeValue));
        this.set_autoUpdate(ss.boolean(node.attributes.getNamedItem('AutoUpdate').nodeValue));
        this.set_dataSourceUrl(node.attributes.getNamedItem('DataSourceUrl').nodeValue);
      }
    },
    computeDateDomainRange: function(columnStart, columnEnd) {
    },
    getDomainValues: function(column) {
      return [];
    },
    get_decay: function() {
      return this.decay;
    },
    set_decay: function(value) {
      if (this.decay !== value) {
        this.version++;
        this.decay = value;
      }
      return value;
    },
    get_coordinatesType: function() {
      return this._coordinatesType$1;
    },
    set_coordinatesType: function(value) {
      if (this._coordinatesType$1 !== value) {
        this.version++;
        this._coordinatesType$1 = value;
      }
      return value;
    },
    get_latColumn: function() {
      return this.latColumn;
    },
    set_latColumn: function(value) {
      if (this.latColumn !== value) {
        this.version++;
        this.latColumn = value;
      }
      return value;
    },
    get_lngColumn: function() {
      return this.lngColumn;
    },
    set_lngColumn: function(value) {
      if (this.lngColumn !== value) {
        this.version++;
        this.lngColumn = value;
      }
      return value;
    },
    get_geometryColumn: function() {
      return this.geometryColumn;
    },
    set_geometryColumn: function(value) {
      if (this.geometryColumn !== value) {
        this.version++;
        this.geometryColumn = value;
      }
      return value;
    },
    get_xAxisColumn: function() {
      return this._xAxisColumn$1;
    },
    set_xAxisColumn: function(value) {
      if (this._xAxisColumn$1 !== value) {
        this.version++;
        this._xAxisColumn$1 = value;
      }
      return value;
    },
    get_yAxisColumn: function() {
      return this._yAxisColumn$1;
    },
    set_yAxisColumn: function(value) {
      if (this._yAxisColumn$1 !== value) {
        this.version++;
        this._yAxisColumn$1 = value;
      }
      return value;
    },
    get_zAxisColumn: function() {
      return this._zAxisColumn$1;
    },
    set_zAxisColumn: function(value) {
      if (this._zAxisColumn$1 !== value) {
        this.version++;
        this._zAxisColumn$1 = value;
      }
      return value;
    },
    get_xAxisReverse: function() {
      return this._xAxisReverse$1;
    },
    set_xAxisReverse: function(value) {
      if (this._xAxisReverse$1 !== value) {
        this.version++;
        this._xAxisReverse$1 = value;
      }
      return value;
    },
    get_yAxisReverse: function() {
      return this._yAxisReverse$1;
    },
    set_yAxisReverse: function(value) {
      if (this._yAxisReverse$1 !== value) {
        this.version++;
        this._yAxisReverse$1 = value;
      }
      return value;
    },
    get_zAxisReverse: function() {
      return this._zAxisReverse$1;
    },
    set_zAxisReverse: function(value) {
      if (this._zAxisReverse$1 !== value) {
        this.version++;
        this._zAxisReverse$1 = value;
      }
      return value;
    },
    get_altType: function() {
      return this._altType$1;
    },
    set_altType: function(value) {
      if (this._altType$1 !== value) {
        this.version++;
        this._altType$1 = value;
      }
      return value;
    },
    get_markerMix: function() {
      return this._markerMix$1;
    },
    set_markerMix: function(value) {
      if (this._markerMix$1 !== value) {
        this.version++;
        this._markerMix$1 = value;
      }
      return value;
    },
    get_raUnits: function() {
      return this._raUnits$1;
    },
    set_raUnits: function(value) {
      if (this._raUnits$1 !== value) {
        this.version++;
        this._raUnits$1 = value;
      }
      return value;
    },
    get__colorMap: function() {
      return this._colorMap$1;
    },
    set__colorMap: function(value) {
      if (this._colorMap$1 !== value) {
        this.version++;
        this._colorMap$1 = value;
      }
      return value;
    },
    get_markerColumn: function() {
      return this._markerColumn$1;
    },
    set_markerColumn: function(value) {
      if (this._markerColumn$1 !== value) {
        this.version++;
        this._markerColumn$1 = value;
      }
      return value;
    },
    get_colorMapColumn: function() {
      return this._colorMapColumn$1;
    },
    set_colorMapColumn: function(value) {
      if (this._colorMapColumn$1 !== value) {
        this.version++;
        this._colorMapColumn$1 = value;
      }
      return value;
    },
    get_plotType: function() {
      return this._plotType$1;
    },
    set_plotType: function(value) {
      if (this._plotType$1 !== value) {
        this.version++;
        this._plotType$1 = value;
      }
      return value;
    },
    get_markerIndex: function() {
      return this._markerIndex$1;
    },
    set_markerIndex: function(value) {
      if (this._markerIndex$1 !== value) {
        this.version++;
        this._markerIndex$1 = value;
      }
      return value;
    },
    get_showFarSide: function() {
      return this._showFarSide$1;
    },
    set_showFarSide: function(value) {
      if (this._showFarSide$1 !== value) {
        this.version++;
        this._showFarSide$1 = value;
      }
      return value;
    },
    get_markerScale: function() {
      return this._markerScale$1;
    },
    set_markerScale: function(value) {
      if (this._markerScale$1 !== value) {
        this.version++;
        this._markerScale$1 = value;
      }
      return value;
    },
    get_altUnit: function() {
      return this._altUnit$1;
    },
    set_altUnit: function(value) {
      if (this._altUnit$1 !== value) {
        this.version++;
        this._altUnit$1 = value;
      }
      return value;
    },
    get_cartesianScale: function() {
      return this._cartesianScale$1;
    },
    set_cartesianScale: function(value) {
      if (this._cartesianScale$1 !== value) {
        this.version++;
        this._cartesianScale$1 = value;
      }
      return value;
    },
    get_cartesianCustomScale: function() {
      return this._cartesianCustomScale$1;
    },
    set_cartesianCustomScale: function(value) {
      if (this._cartesianCustomScale$1 !== value) {
        this.version++;
        this._cartesianCustomScale$1 = value;
      }
      return value;
    },
    get_altColumn: function() {
      return this.altColumn;
    },
    set_altColumn: function(value) {
      if (this.altColumn !== value) {
        this.version++;
        this.altColumn = value;
      }
      return value;
    },
    get_startDateColumn: function() {
      return this.startDateColumn;
    },
    set_startDateColumn: function(value) {
      if (this.startDateColumn !== value) {
        this.version++;
        this.startDateColumn = value;
      }
      return value;
    },
    get_endDateColumn: function() {
      return this.endDateColumn;
    },
    set_endDateColumn: function(value) {
      if (this.endDateColumn !== value) {
        this.version++;
        this.endDateColumn = value;
      }
      return value;
    },
    get_sizeColumn: function() {
      return this.sizeColumn;
    },
    set_sizeColumn: function(value) {
      if (this.sizeColumn !== value) {
        this.version++;
        this.sizeColumn = value;
      }
      return value;
    },
    get_nameColumn: function() {
      return this.nameColumn;
    },
    set_nameColumn: function(value) {
      if (this.nameColumn !== value) {
        this.version++;
        this.nameColumn = value;
      }
      return value;
    },
    get_hyperlinkFormat: function() {
      return this._hyperlinkFormat$1;
    },
    set_hyperlinkFormat: function(value) {
      if (this._hyperlinkFormat$1 !== value) {
        this.version++;
        this._hyperlinkFormat$1 = value;
      }
      return value;
    },
    get_hyperlinkColumn: function() {
      return this._hyperlinkColumn$1;
    },
    set_hyperlinkColumn: function(value) {
      if (this._hyperlinkColumn$1 !== value) {
        this.version++;
        this._hyperlinkColumn$1 = value;
      }
      return value;
    },
    get_scaleFactor: function() {
      return this.scaleFactor;
    },
    set_scaleFactor: function(value) {
      if (this.scaleFactor !== value) {
        this.version++;
        this.scaleFactor = value;
      }
      return value;
    },
    get_pointScaleType: function() {
      return this.pointScaleType;
    },
    set_pointScaleType: function(value) {
      if (this.pointScaleType !== value) {
        this.version++;
        this.pointScaleType = value;
      }
      return value;
    },
    prepVertexBuffer: function(renderContext, opacity) {
      return true;
    },
    draw: function(renderContext, opacity, flat) {
      var device = renderContext;
      if (this.version !== this.lastVersion) {
        this.cleanUp();
      }
      if (this.bufferIsFlat !== flat) {
        this.cleanUp();
        this.bufferIsFlat = flat;
      }
      if (this.dirty) {
        this.prepVertexBuffer(device, opacity);
      }
      var jNow = SpaceTimeController.get_jNow() - SpaceTimeController.utcToJulian(this.baseDate);
      var adjustedScale = this.scaleFactor;
      if (flat && this.astronomical && (this._markerScale$1 === 1)) {
        adjustedScale = (this.scaleFactor / (renderContext.viewCamera.zoom / 360));
      }
      if (this.triangleList2d != null) {
        this.triangleList2d.decay = this.decay;
        this.triangleList2d.sky = this.get_astronomical();
        this.triangleList2d.timeSeries = this.timeSeries;
        this.triangleList2d.jNow = jNow;
        this.triangleList2d.draw(renderContext, opacity * this.get_opacity(), 1);
      }
      if (this.triangleList != null) {
        this.triangleList.decay = this.decay;
        this.triangleList.sky = this.get_astronomical();
        this.triangleList.timeSeries = this.timeSeries;
        this.triangleList.jNow = jNow;
        this.triangleList.draw(renderContext, opacity * this.get_opacity(), 1);
      }
      if (this.pointList != null) {
        this.pointList.depthBuffered = false;
        this.pointList.decay = this.decay;
        this.pointList.sky = this.get_astronomical();
        this.pointList.timeSeries = this.timeSeries;
        this.pointList.jNow = jNow;
        this.pointList.scale = (this._markerScale$1 === 1) ? adjustedScale : -adjustedScale;
        this.pointList.draw(renderContext, opacity * this.get_opacity(), false);
      }
      if (this.lineList != null) {
        this.lineList.sky = this.get_astronomical();
        this.lineList.decay = this.decay;
        this.lineList.timeSeries = this.timeSeries;
        this.lineList.jNow = jNow;
        this.lineList.drawLines(renderContext, opacity * this.get_opacity());
      }
      if (this.lineList2d != null) {
        this.lineList2d.sky = this.get_astronomical();
        this.lineList2d.decay = this.decay;
        this.lineList2d.timeSeries = this.timeSeries;
        this.lineList2d.showFarSide = this.get_showFarSide();
        this.lineList2d.jNow = jNow;
        this.lineList2d.drawLines(renderContext, opacity * this.get_opacity());
      }
      return true;
    },
    initFromXml: function(node) {
      Layer.prototype.initFromXml.call(this, node);
    },
    cleanUp: function() {
      if (this.lineList != null) {
        this.lineList.clear();
      }
      if (this.lineList2d != null) {
        this.lineList2d.clear();
      }
      if (this.triangleList2d != null) {
        this.triangleList2d.clear();
      }
      if (this.pointList != null) {
        this.pointList.clear();
      }
      if (this.triangleList != null) {
        this.triangleList.clear();
      }
    },
    dynamicUpdate: function() {
      return false;
    }
  };


  // wwtlib.VoTableLayer

  function VoTableLayer() {
    this.isLongIndex = false;
    this.shapeVertexCount = 0;
    this.lines = false;
    this.latColumn = -1;
    this.fixedSize = 1;
    this.decay = 0;
    this.timeSeries = false;
    this._dynamicData$1 = false;
    this._autoUpdate$1 = false;
    this._dataSourceUrl$1 = '';
    this._beginRange$1 = new Date('1/1/2100');
    this._endRange$1 = new Date('01/01/1800');
    this.markerDomainValues = {};
    this.colorDomainValues = {};
    this._coordinatesType$1 = 0;
    this.lngColumn = -1;
    this.geometryColumn = -1;
    this._xAxisColumn$1 = -1;
    this._yAxisColumn$1 = -1;
    this._zAxisColumn$1 = -1;
    this._xAxisReverse$1 = false;
    this._yAxisReverse$1 = false;
    this._zAxisReverse$1 = false;
    this._altType$1 = 3;
    this._markerMix$1 = 0;
    this._raUnits$1 = 0;
    this._colorMap$1 = 3;
    this._markerColumn$1 = -1;
    this._colorMapColumn$1 = -1;
    this._plotType$1 = 0;
    this._markerIndex$1 = 0;
    this._showFarSide$1 = false;
    this._markerScale$1 = 1;
    this._altUnit$1 = 1;
    this._cartesianScale$1 = 1;
    this._cartesianCustomScale$1 = 1;
    this.altColumn = -1;
    this.startDateColumn = -1;
    this.endDateColumn = -1;
    this.sizeColumn = -1;
    this.nameColumn = 0;
    this._hyperlinkFormat$1 = '';
    this._hyperlinkColumn$1 = -1;
    this.scaleFactor = 1;
    this.pointScaleType = 1;
    this.positions = [];
    this.bufferIsFlat = false;
    this.baseDate = new Date(2010, 0, 1, 12, 0, 0);
    this.dirty = true;
    this._filename$1 = '';
    Layer.call(this);
    this._table$1 = null;
    this._filename$1 = '';
    this.set_plotType(2);
  }
  VoTableLayer.get__circleTexture$1 = function() {
    return VoTableLayer._circleTexture$1;
  };
  VoTableLayer.create = function(table) {
    var layer = new VoTableLayer();
    layer._table$1 = table;
    layer._filename$1 = table.loadFilename;
    layer.set_lngColumn(table.getRAColumn().index);
    layer.set_latColumn(table.getDecColumn().index);
    layer.set_plotType(2);
    return layer;
  };
  var VoTableLayer$ = {
    get_dynamicData: function() {
      return this._dynamicData$1;
    },
    set_dynamicData: function(value) {
      this._dynamicData$1 = value;
      return value;
    },
    get_autoUpdate: function() {
      return this._autoUpdate$1;
    },
    set_autoUpdate: function(value) {
      this._autoUpdate$1 = value;
      return value;
    },
    get_dataSourceUrl: function() {
      return this._dataSourceUrl$1;
    },
    set_dataSourceUrl: function(value) {
      this._dataSourceUrl$1 = value;
      return value;
    },
    get_timeSeries: function() {
      return this.timeSeries;
    },
    set_timeSeries: function(value) {
      if (this.timeSeries !== value) {
        this.version++;
        this.timeSeries = value;
      }
      return value;
    },
    get_beginRange: function() {
      return this._beginRange$1;
    },
    set_beginRange: function(value) {
      if (!ss.compareDates(this._beginRange$1, value)) {
        this.version++;
        this._beginRange$1 = value;
      }
      return value;
    },
    get_endRange: function() {
      return this._endRange$1;
    },
    set_endRange: function(value) {
      if (!ss.compareDates(this._endRange$1, value)) {
        this.version++;
        this._endRange$1 = value;
      }
      return value;
    },
    initializeFromXml: function(node) {
      this.set_timeSeries(ss.boolean(node.attributes.getNamedItem('TimeSeries').nodeValue));
      this.set_beginRange(new Date(node.attributes.getNamedItem('BeginRange').nodeValue));
      this.set_endRange(new Date(node.attributes.getNamedItem('EndRange').nodeValue));
      this.set_decay(parseFloat(node.attributes.getNamedItem('Decay').nodeValue));
      this.set_coordinatesType(Enums.parse('CoordinatesTypes', node.attributes.getNamedItem('CoordinatesType').nodeValue));
      if (this.get_coordinatesType() < 0) {
        this.set_coordinatesType(0);
      }
      this.set_latColumn(parseInt(node.attributes.getNamedItem('LatColumn').nodeValue));
      this.set_lngColumn(parseInt(node.attributes.getNamedItem('LngColumn').nodeValue));
      if (node.attributes.getNamedItem('GeometryColumn') != null) {
        this.set_geometryColumn(parseInt(node.attributes.getNamedItem('GeometryColumn').nodeValue));
      }
      switch (node.attributes.getNamedItem('AltType').nodeValue) {
        case 'Depth':
          this.set_altType(0);
          break;
        case 'Altitude':
          this.set_altType(1);
          break;
        case 'Distance':
          this.set_altType(2);
          break;
        case 'SeaLevel':
          this.set_altType(3);
          break;
        case 'Terrain':
          this.set_altType(4);
          break;
        default:
          break;
      }
      this.set_markerMix(0);
      switch (node.attributes.getNamedItem('ColorMap').nodeValue) {
        case 'Same_For_All':
          this.set__colorMap(0);
          break;
        case 'Group_by_Values':
          this.set__colorMap(2);
          break;
        case 'Per_Column_Literal':
          this.set__colorMap(3);
          break;
        default:
          break;
      }
      this.set_markerColumn(parseInt(node.attributes.getNamedItem('MarkerColumn').nodeValue));
      this.set_colorMapColumn(parseInt(node.attributes.getNamedItem('ColorMapColumn').nodeValue));
      switch (node.attributes.getNamedItem('PlotType').nodeValue) {
        case 'Gaussian':
          this.set_plotType(0);
          break;
        case 'Point':
          this.set_plotType(1);
          break;
        case 'Circle':
          this.set_plotType(2);
          break;
        case 'PushPin':
          this.set_plotType(4);
          break;
        default:
          break;
      }
      this.set_markerIndex(parseInt(node.attributes.getNamedItem('MarkerIndex').nodeValue));
      switch (node.attributes.getNamedItem('MarkerScale').nodeValue) {
        case 'Screen':
          this.set_markerScale(0);
          break;
        case 'World':
          this.set_markerScale(1);
          break;
        default:
          break;
      }
      switch (node.attributes.getNamedItem('AltUnit').nodeValue) {
        case 'Meters':
          this.set_altUnit(1);
          break;
        case 'Feet':
          this.set_altUnit(2);
          break;
        case 'Inches':
          this.set_altUnit(3);
          break;
        case 'Miles':
          this.set_altUnit(4);
          break;
        case 'Kilometers':
          this.set_altUnit(5);
          break;
        case 'AstronomicalUnits':
          this.set_altUnit(6);
          break;
        case 'LightYears':
          this.set_altUnit(7);
          break;
        case 'Parsecs':
          this.set_altUnit(8);
          break;
        case 'MegaParsecs':
          this.set_altUnit(9);
          break;
        case 'Custom':
          this.set_altUnit(10);
          break;
        default:
          break;
      }
      this.set_altColumn(parseInt(node.attributes.getNamedItem('AltColumn').nodeValue));
      this.set_startDateColumn(parseInt(node.attributes.getNamedItem('StartDateColumn').nodeValue));
      this.set_endDateColumn(parseInt(node.attributes.getNamedItem('EndDateColumn').nodeValue));
      this.set_sizeColumn(parseInt(node.attributes.getNamedItem('SizeColumn').nodeValue));
      this.set_hyperlinkFormat(node.attributes.getNamedItem('HyperlinkFormat').nodeValue);
      this.set_hyperlinkColumn(parseInt(node.attributes.getNamedItem('HyperlinkColumn').nodeValue));
      this.set_scaleFactor(parseFloat(node.attributes.getNamedItem('ScaleFactor').nodeValue));
      switch (node.attributes.getNamedItem('PointScaleType').nodeValue) {
        case 'Linear':
          this.set_pointScaleType(0);
          break;
        case 'Power':
          this.set_pointScaleType(1);
          break;
        case 'Log':
          this.set_pointScaleType(2);
          break;
        case 'Constant':
          this.set_pointScaleType(3);
          break;
        case 'StellarMagnitude':
          this.set_pointScaleType(4);
          break;
        default:
          break;
      }
      if (node.attributes.getNamedItem('ShowFarSide') != null) {
        this.set_showFarSide(ss.boolean(node.attributes.getNamedItem('ShowFarSide').nodeValue));
      }
      if (node.attributes.getNamedItem('RaUnits') != null) {
        switch (node.attributes.getNamedItem('RaUnits').nodeValue) {
          case 'Hours':
            this.set_raUnits(0);
            break;
          case 'Degrees':
            this.set_raUnits(1);
            break;
        }
      }
      if (node.attributes.getNamedItem('HoverTextColumn') != null) {
        this.set_nameColumn(parseInt(node.attributes.getNamedItem('HoverTextColumn').nodeValue));
      }
      if (node.attributes.getNamedItem('XAxisColumn') != null) {
        this.set_xAxisColumn(parseInt(node.attributes.getNamedItem('XAxisColumn').nodeValue));
        this.set_xAxisReverse(ss.boolean(node.attributes.getNamedItem('XAxisReverse').nodeValue));
        this.set_yAxisColumn(parseInt(node.attributes.getNamedItem('YAxisColumn').nodeValue));
        this.set_yAxisReverse(ss.boolean(node.attributes.getNamedItem('YAxisReverse').nodeValue));
        this.set_zAxisColumn(parseInt(node.attributes.getNamedItem('ZAxisColumn').nodeValue));
        this.set_zAxisReverse(ss.boolean(node.attributes.getNamedItem('ZAxisReverse').nodeValue));
        switch (node.attributes.getNamedItem('CartesianScale').nodeValue) {
          case 'Meters':
            this.set_cartesianScale(1);
            break;
          case 'Feet':
            this.set_cartesianScale(2);
            break;
          case 'Inches':
            this.set_cartesianScale(3);
            break;
          case 'Miles':
            this.set_cartesianScale(4);
            break;
          case 'Kilometers':
            this.set_cartesianScale(5);
            break;
          case 'AstronomicalUnits':
            this.set_cartesianScale(6);
            break;
          case 'LightYears':
            this.set_cartesianScale(7);
            break;
          case 'Parsecs':
            this.set_cartesianScale(8);
            break;
          case 'MegaParsecs':
            this.set_cartesianScale(9);
            break;
          case 'Custom':
            this.set_cartesianScale(10);
            break;
          default:
            break;
        }
        this.set_cartesianCustomScale(parseFloat(node.attributes.getNamedItem('CartesianCustomScale').nodeValue));
      }
      if (node.attributes.getNamedItem('DynamicData') != null) {
        this.set_dynamicData(ss.boolean(node.attributes.getNamedItem('DynamicData').nodeValue));
        this.set_autoUpdate(ss.boolean(node.attributes.getNamedItem('AutoUpdate').nodeValue));
        this.set_dataSourceUrl(node.attributes.getNamedItem('DataSourceUrl').nodeValue);
      }
    },
    get_decay: function() {
      return this.decay;
    },
    set_decay: function(value) {
      if (this.decay !== value) {
        this.version++;
        this.decay = value;
      }
      return value;
    },
    get_coordinatesType: function() {
      return this._coordinatesType$1;
    },
    set_coordinatesType: function(value) {
      if (this._coordinatesType$1 !== value) {
        this.version++;
        this._coordinatesType$1 = value;
      }
      return value;
    },
    get_latColumn: function() {
      return this.latColumn;
    },
    set_latColumn: function(value) {
      if (this.latColumn !== value) {
        this.version++;
        this.latColumn = value;
      }
      return value;
    },
    get_lngColumn: function() {
      return this.lngColumn;
    },
    set_lngColumn: function(value) {
      if (this.lngColumn !== value) {
        this.version++;
        this.lngColumn = value;
      }
      return value;
    },
    get_geometryColumn: function() {
      return this.geometryColumn;
    },
    set_geometryColumn: function(value) {
      if (this.geometryColumn !== value) {
        this.version++;
        this.geometryColumn = value;
      }
      return value;
    },
    get_xAxisColumn: function() {
      return this._xAxisColumn$1;
    },
    set_xAxisColumn: function(value) {
      if (this._xAxisColumn$1 !== value) {
        this.version++;
        this._xAxisColumn$1 = value;
      }
      return value;
    },
    get_yAxisColumn: function() {
      return this._yAxisColumn$1;
    },
    set_yAxisColumn: function(value) {
      if (this._yAxisColumn$1 !== value) {
        this.version++;
        this._yAxisColumn$1 = value;
      }
      return value;
    },
    get_zAxisColumn: function() {
      return this._zAxisColumn$1;
    },
    set_zAxisColumn: function(value) {
      if (this._zAxisColumn$1 !== value) {
        this.version++;
        this._zAxisColumn$1 = value;
      }
      return value;
    },
    get_xAxisReverse: function() {
      return this._xAxisReverse$1;
    },
    set_xAxisReverse: function(value) {
      if (this._xAxisReverse$1 !== value) {
        this.version++;
        this._xAxisReverse$1 = value;
      }
      return value;
    },
    get_yAxisReverse: function() {
      return this._yAxisReverse$1;
    },
    set_yAxisReverse: function(value) {
      if (this._yAxisReverse$1 !== value) {
        this.version++;
        this._yAxisReverse$1 = value;
      }
      return value;
    },
    get_zAxisReverse: function() {
      return this._zAxisReverse$1;
    },
    set_zAxisReverse: function(value) {
      if (this._zAxisReverse$1 !== value) {
        this.version++;
        this._zAxisReverse$1 = value;
      }
      return value;
    },
    get_altType: function() {
      return this._altType$1;
    },
    set_altType: function(value) {
      if (this._altType$1 !== value) {
        this.version++;
        this._altType$1 = value;
      }
      return value;
    },
    get_markerMix: function() {
      return this._markerMix$1;
    },
    set_markerMix: function(value) {
      if (this._markerMix$1 !== value) {
        this.version++;
        this._markerMix$1 = value;
      }
      return value;
    },
    get_raUnits: function() {
      return this._raUnits$1;
    },
    set_raUnits: function(value) {
      if (this._raUnits$1 !== value) {
        this.version++;
        this._raUnits$1 = value;
      }
      return value;
    },
    get__colorMap: function() {
      return this._colorMap$1;
    },
    set__colorMap: function(value) {
      if (this._colorMap$1 !== value) {
        this.version++;
        this._colorMap$1 = value;
      }
      return value;
    },
    get_markerColumn: function() {
      return this._markerColumn$1;
    },
    set_markerColumn: function(value) {
      if (this._markerColumn$1 !== value) {
        this.version++;
        this._markerColumn$1 = value;
      }
      return value;
    },
    get_colorMapColumn: function() {
      return this._colorMapColumn$1;
    },
    set_colorMapColumn: function(value) {
      if (this._colorMapColumn$1 !== value) {
        this.version++;
        this._colorMapColumn$1 = value;
      }
      return value;
    },
    get_plotType: function() {
      return this._plotType$1;
    },
    set_plotType: function(value) {
      if (this._plotType$1 !== value) {
        this.version++;
        this._plotType$1 = value;
      }
      return value;
    },
    get_markerIndex: function() {
      return this._markerIndex$1;
    },
    set_markerIndex: function(value) {
      if (this._markerIndex$1 !== value) {
        this.version++;
        this._markerIndex$1 = value;
      }
      return value;
    },
    get_showFarSide: function() {
      return this._showFarSide$1;
    },
    set_showFarSide: function(value) {
      if (this._showFarSide$1 !== value) {
        this.version++;
        this._showFarSide$1 = value;
      }
      return value;
    },
    get_markerScale: function() {
      return this._markerScale$1;
    },
    set_markerScale: function(value) {
      if (this._markerScale$1 !== value) {
        this.version++;
        this._markerScale$1 = value;
      }
      return value;
    },
    get_altUnit: function() {
      return this._altUnit$1;
    },
    set_altUnit: function(value) {
      if (this._altUnit$1 !== value) {
        this.version++;
        this._altUnit$1 = value;
      }
      return value;
    },
    get_cartesianScale: function() {
      return this._cartesianScale$1;
    },
    set_cartesianScale: function(value) {
      if (this._cartesianScale$1 !== value) {
        this.version++;
        this._cartesianScale$1 = value;
      }
      return value;
    },
    get_cartesianCustomScale: function() {
      return this._cartesianCustomScale$1;
    },
    set_cartesianCustomScale: function(value) {
      if (this._cartesianCustomScale$1 !== value) {
        this.version++;
        this._cartesianCustomScale$1 = value;
      }
      return value;
    },
    get_altColumn: function() {
      return this.altColumn;
    },
    set_altColumn: function(value) {
      if (this.altColumn !== value) {
        this.version++;
        this.altColumn = value;
      }
      return value;
    },
    get_startDateColumn: function() {
      return this.startDateColumn;
    },
    set_startDateColumn: function(value) {
      if (this.startDateColumn !== value) {
        this.version++;
        this.startDateColumn = value;
      }
      return value;
    },
    get_endDateColumn: function() {
      return this.endDateColumn;
    },
    set_endDateColumn: function(value) {
      if (this.endDateColumn !== value) {
        this.version++;
        this.endDateColumn = value;
      }
      return value;
    },
    get_sizeColumn: function() {
      return this.sizeColumn;
    },
    set_sizeColumn: function(value) {
      if (this.sizeColumn !== value) {
        this.version++;
        this.sizeColumn = value;
      }
      return value;
    },
    get_nameColumn: function() {
      return this.nameColumn;
    },
    set_nameColumn: function(value) {
      if (this.nameColumn !== value) {
        this.version++;
        this.nameColumn = value;
      }
      return value;
    },
    get_hyperlinkFormat: function() {
      return this._hyperlinkFormat$1;
    },
    set_hyperlinkFormat: function(value) {
      if (this._hyperlinkFormat$1 !== value) {
        this.version++;
        this._hyperlinkFormat$1 = value;
      }
      return value;
    },
    get_hyperlinkColumn: function() {
      return this._hyperlinkColumn$1;
    },
    set_hyperlinkColumn: function(value) {
      if (this._hyperlinkColumn$1 !== value) {
        this.version++;
        this._hyperlinkColumn$1 = value;
      }
      return value;
    },
    get_scaleFactor: function() {
      return this.scaleFactor;
    },
    set_scaleFactor: function(value) {
      if (this.scaleFactor !== value) {
        this.version++;
        this.scaleFactor = value;
      }
      return value;
    },
    get_pointScaleType: function() {
      return this.pointScaleType;
    },
    set_pointScaleType: function(value) {
      if (this.pointScaleType !== value) {
        this.version++;
        this.pointScaleType = value;
      }
      return value;
    },
    draw: function(renderContext, opacity, flat) {
      var device = renderContext;
      if (this.bufferIsFlat !== flat) {
        this.cleanUp();
        this.bufferIsFlat = flat;
      }
      if (this.dirty) {
        this.prepVertexBuffer(renderContext, opacity);
        this.dirty = false;
      }
      var jNow = SpaceTimeController.get_jNow() - SpaceTimeController.utcToJulian(this.baseDate);
      var adjustedScale = this.scaleFactor;
      if (flat && this.astronomical && (this._markerScale$1 === 1)) {
        adjustedScale = (this.scaleFactor / (renderContext.viewCamera.zoom / 360));
      }
      if (this.triangleList2d != null) {
        this.triangleList2d.decay = this.decay;
        this.triangleList2d.sky = this.get_astronomical();
        this.triangleList2d.timeSeries = this.timeSeries;
        this.triangleList2d.jNow = jNow;
        this.triangleList2d.draw(renderContext, opacity * this.get_opacity(), 1);
      }
      if (this.triangleList != null) {
        this.triangleList.decay = this.decay;
        this.triangleList.sky = this.get_astronomical();
        this.triangleList.timeSeries = this.timeSeries;
        this.triangleList.jNow = jNow;
        this.triangleList.draw(renderContext, opacity * this.get_opacity(), 1);
      }
      if (this.pointList != null) {
        this.pointList.depthBuffered = false;
        this.pointList.decay = this.decay;
        this.pointList.sky = this.get_astronomical();
        this.pointList.timeSeries = this.timeSeries;
        this.pointList.jNow = jNow;
        this.pointList.scale = (this._markerScale$1 === 1) ? adjustedScale : -adjustedScale;
        this.pointList.draw(renderContext, opacity * this.get_opacity(), false);
      }
      if (this.lineList != null) {
        this.lineList.sky = this.get_astronomical();
        this.lineList.decay = this.decay;
        this.lineList.timeSeries = this.timeSeries;
        this.lineList.jNow = jNow;
        this.lineList.drawLines(renderContext, opacity * this.get_opacity());
      }
      if (this.lineList2d != null) {
        this.lineList2d.sky = this.get_astronomical();
        this.lineList2d.decay = this.decay;
        this.lineList2d.timeSeries = this.timeSeries;
        this.lineList2d.showFarSide = this.get_showFarSide();
        this.lineList2d.jNow = jNow;
        this.lineList2d.drawLines(renderContext, opacity * this.get_opacity());
      }
      return true;
    },
    initFromXml: function(node) {
      Layer.prototype.initFromXml.call(this, node);
    },
    cleanUp: function() {
      this.dirty = true;
      if (this.lineList != null) {
        this.lineList.clear();
      }
      if (this.lineList2d != null) {
        this.lineList2d.clear();
      }
      if (this.triangleList2d != null) {
        this.triangleList2d.clear();
      }
      if (this.pointList != null) {
        this.pointList.clear();
      }
      if (this.triangleList != null) {
        this.triangleList.clear();
      }
    },
    dynamicUpdate: function() {
      return false;
    },
    addFilesToCabinet: function(fc) {
      var fName = this._filename$1;
      var copy = true;
      var fileName = fc.tempDirectory + ss.format('{0}\\{1}.txt', fc.get_packageID(), this.id.toString());
      var path = fName.substring(0, fName.lastIndexOf('\\') + 1);
      var path2 = fileName.substring(0, fileName.lastIndexOf('\\') + 1);
    },
    loadData: function(tourDoc, filename) {
      var $this = this;

      var blob = tourDoc.getFileBlob(filename);
      var doc = new FileReader();
      doc.onloadend = function(ee) {
        var data = ss.safeCast(doc.result, String);
        $this._table$1 = VoTable.loadFromString(data);
        $this.set_lngColumn($this._table$1.getRAColumn().index);
        $this.set_latColumn($this._table$1.getDecColumn().index);
      };
      doc.readAsText(blob);
    },
    canCopyToClipboard: function() {
      return true;
    },
    copyToClipboard: function() {
    },
    findClosest: function(target, distance, defaultPlace, astronomical) {
      var searchPoint = Coordinates.geoTo3dDouble(target.get_lat(), target.get_lng());
      var dist;
      if (defaultPlace != null) {
        var testPoint = Coordinates.raDecTo3dAu(defaultPlace.get_RA(), -defaultPlace.get_dec(), -1);
        dist = Vector3d.subtractVectors(searchPoint, testPoint);
        distance = dist.length();
      }
      var closestItem = -1;
      var index = 0;
      var $enum1 = ss.enumerate(this.positions);
      while ($enum1.moveNext()) {
        var point = $enum1.current;
        dist = Vector3d.subtractVectors(searchPoint, point);
        if (dist.length() < distance) {
          distance = dist.length();
          closestItem = index;
        }
        index++;
      }
      if (closestItem === -1) {
        return defaultPlace;
      }
      var pnt = Coordinates.cartesianToSpherical2(this.positions[closestItem]);
      var name = this._table$1.rows[closestItem].columnData[this.nameColumn].toString();
      if (this.nameColumn === this.startDateColumn || this.nameColumn === this.endDateColumn) {
        name = SpreadSheetLayer.parseDate(name).toString();
      }
      if (ss.emptyString(name)) {
        name = ss.format('RA={0}, Dec={1}', Coordinates.formatHMS(pnt.get_RA()), Coordinates.formatDMS(pnt.get_dec()));
      }
      var place = Place.create(name, pnt.get_lat(), pnt.get_RA(), 268435456, '', 2, -1);
      var rowData = {};
      for (var i = 0; i < ss.keyCount(this._table$1.columns); i++) {
        var colValue = this._table$1.rows[closestItem].get_item(i).toString();
        if (i === this.startDateColumn || i === this.endDateColumn) {
          colValue = SpreadSheetLayer.parseDate(colValue).toString();
        }
        if (!ss.keyExists(rowData, this._table$1.column[i].name) && !ss.emptyString(this._table$1.column[i].name)) {
          rowData[this._table$1.column[i].name] = colValue;
        }
        else {
          rowData['Column' + i.toString()] = colValue;
        }
      }
      place.set_tag(rowData);
      return place;
    },
    prepVertexBuffer: function(renderContext, opacity) {
      var col = this._table$1.getColumnByUcd('meta.id');
      if (col == null) {
        col = this._table$1.column[0];
      }
      var siapSet = this.isSiapResultSet();
      if (this.pointList == null) {
        this.pointList = new PointList(renderContext);
      }
      if (this.lineList2d == null) {
        this.lineList2d = new LineList();
      }
      this.lineList2d.clear();
      var stcsCol = this._table$1.getColumnByUcd('phys.area;obs.field');
      if (stcsCol == null && ss.keyExists(this._table$1.columns, 'regionSTCS')) {
        stcsCol = this._table$1.columns['regionSTCS'];
      }
      if (!this.get_plotType()) {
        this.set_markerScale(1);
      }
      else {
        this.set_markerScale(0);
      }
      var vertList = [];
      var indexList = [];
      var lastItem = new TimeSeriesPointVertex();
      this.positions.length = 0;
      var currentIndex = 0;
      var color = Color.fromArgb(ss.truncate((opacity * this.get_color().a)), this.get_color().r, this.get_color().g, this.get_color().b);
      this.pointScaleType = 4;
      var $enum1 = ss.enumerate(this._table$1.rows);
      while ($enum1.moveNext()) {
        var row = $enum1.current;
        try {
          if (this.lngColumn > -1 && this.latColumn > -1) {
            var Xcoord = Coordinates.parseRA(row.get_item(this.get_lngColumn()).toString(), true) * 15;
            var Ycoord = Coordinates.parseDec(row.get_item(this.get_latColumn()).toString());
            lastItem.position = Coordinates.geoTo3dDouble(Ycoord, Xcoord);
            this.positions.push(lastItem.position);
            lastItem.set_color(color);
            if (this.sizeColumn > -1) {
              try {
                if (!this.get_markerScale()) {
                  lastItem.pointSize = 20;
                }
                else {
                  switch (this.pointScaleType) {
                    case 0:
                      lastItem.pointSize = parseFloat(row.get_item(this.sizeColumn).toString());
                      break;
                    case 2:
                      lastItem.pointSize = Math.log(parseFloat(row.get_item(this.sizeColumn).toString()));
                      break;
                    case 1:
                      lastItem.pointSize = Math.pow(2, parseFloat(row.get_item(this.sizeColumn).toString()));
                      break;
                    case 4:
                      var size = parseFloat(row.get_item(this.sizeColumn).toString());
                      lastItem.pointSize = (40 / Math.pow(1.6, size)) * 10;
                      break;
                    case 3:
                      lastItem.pointSize = 1;
                      break;
                    default:
                      break;
                  }
                }
              }
              catch ($e2) {
                lastItem.pointSize = 0.01;
              }
            }
            else {
              if (!this.get_markerScale()) {
                lastItem.pointSize = 20;
              }
              else {
                lastItem.pointSize = Math.pow(2, 1) * 100;
              }
            }
            if (this.startDateColumn > -1) {
              var dateTime = ss.date(row.get_item(this.startDateColumn).toString());
              lastItem.tu = SpaceTimeController.utcToJulian(dateTime);
              lastItem.tv = 0;
            }
            vertList.push(lastItem);
            this.pointList.addPoint(lastItem.position, lastItem.color, new Dates(lastItem.tu, lastItem.tv), lastItem.pointSize);
            currentIndex++;
          }
          if (siapSet && stcsCol != null) {
            this._addSiapStcRow$1(stcsCol.name, row, row === this._table$1.selectedRow);
          }
        }
        catch ($e3) {
        }
        this.lines = false;
      }
      if (siapSet && stcsCol != null) {
        this._addSiapStcRow$1(stcsCol.name, this._table$1.selectedRow, true);
      }
      return true;
    },
    _addSiapStcRow$1: function(stcsColName, row, selected) {
      var stcs = ss.replaceString(row.getColumnData(stcsColName).toString(), '  ', ' ');
      var col = Color.fromArgb(120, 255, 255, 255);
      if (selected) {
        col = Colors.get_yellow();
      }
      if (ss.startsWith(stcs, 'Polygon J2000')) {
        var parts = stcs.split(' ');
        var len = parts.length;
        var index = 0;
        while (index < len) {
          if (parts[index] === 'Polygon') {
            index += 2;
            var lastPoint = new Vector3d();
            var firstPoint = new Vector3d();
            var start = true;
            for (var i = index; i < len; i += 2) {
              if (parts[i] === 'Polygon') {
                start = true;
                break;
              }
              else {
                var Xcoord = Coordinates.parseRA(parts[i], true) * 15 + 180;
                var Ycoord = Coordinates.parseDec(parts[i + 1]);
                var pnt = Coordinates.geoTo3dDouble(Ycoord, Xcoord);
                if (!start) {
                  this.lineList2d.addLine(lastPoint, pnt, col, new Dates(0, 0));
                }
                else {
                  firstPoint = pnt;
                  start = false;
                }
                lastPoint = pnt;
              }
              index += 2;
            }
            if (len > 4) {
              this.lineList2d.addLine(firstPoint, lastPoint, col, new Dates(0, 0));
            }
          }
        }
      }
    },
    isSiapResultSet: function() {
      return this._table$1.getColumnByUcd('vox:image.title') != null && this._table$1.getColumnByUcd('VOX:Image.AccessReference') != null;
    },
    get_header: function() {
      var header = new Array(ss.keyCount(this._table$1.columns));
      var index = 0;
      var $enum1 = ss.enumerate(this._table$1.column);
      while ($enum1.moveNext()) {
        var col = $enum1.current;
        header[index++] = col.name;
      }
      return header;
    },
    get_table: function() {
      return this._table$1;
    },
    set_table: function(value) {
      this._table$1 = value;
      return value;
    }
  };


  // wwtlib.PlotTile

  function PlotTile() {
    this._topDown$1 = true;
    this.backslash = false;
    this._vertexList$1 = null;
    this._childTriangleList$1 = null;
    this._stars$1 = [];
    this._subDivisionLevel$1 = 4;
    this._subDivided$1 = false;
    Tile.call(this);
  }
  PlotTile.create = function(level, xc, yc, dataset, parent) {
    var temp = new PlotTile();
    temp.parent = parent;
    temp.level = level;
    temp.tileX = xc;
    temp.tileY = yc;
    temp.dataset = dataset;
    temp._topDown$1 = !dataset.get_bottomsUp();
    if (temp.tileX !== xc) {
      alert('bad');
    }
    if (!!dataset.get_meanRadius()) {
      temp.set__demScaleFactor(dataset.get_meanRadius());
    }
    else {
      if (!dataset.get_dataSetType()) {
        temp.set__demScaleFactor(6371000);
      }
      else {
        temp.set__demScaleFactor(3396010);
      }
    }
    temp.computeBoundingSphere();
    return temp;
  };
  var PlotTile$ = {
    computeBoundingSphere: function() {
      this._initializeGrids$1();
      this.topLeft = this.bounds[0 + 3 * 0].position.copy();
      this.bottomRight = this.bounds[2 + 3 * 2].position.copy();
      this.topRight = this.bounds[2 + 3 * 0].position.copy();
      this.bottomLeft = this.bounds[0 + 3 * 2].position.copy();
      this.calcSphere();
    },
    renderPart: function(renderContext, part, opacity, combine) {
      if (renderContext.gl != null) {
      }
      else {
        if (!part) {
          var $enum1 = ss.enumerate(this._stars$1);
          while ($enum1.moveNext()) {
            var star = $enum1.current;
            var radDec = 25 / Math.pow(1.6, star.magnitude);
            Planets.drawPointPlanet(renderContext, star.position, radDec, star.col, false);
          }
        }
      }
    },
    requestImage: function() {
      if (!this.downloading && !this.readyToRender) {
        this.downloading = true;
        this._webFile$1 = new WebFile(Util.getProxiedUrl(this.get_URL()));
        this._webFile$1.onStateChange = ss.bind('fileStateChange', this);
        this._webFile$1.send();
      }
    },
    fileStateChange: function() {
      if (this._webFile$1.get_state() === 2) {
        this.downloading = false;
        this.readyToRender = false;
        this.errored = true;
        this.requestPending = false;
        TileCache.removeFromQueue(this.get_key(), true);
      }
      else if (this._webFile$1.get_state() === 1) {
        this.texReady = true;
        this.downloading = false;
        this.errored = false;
        this.readyToRender = this.texReady && (this.demReady || !this.demTile);
        this.requestPending = false;
        TileCache.removeFromQueue(this.get_key(), true);
        this._loadData$1(this._webFile$1.getText());
      }
    },
    _loadData$1: function(data) {
      var rows = ss.replaceString(data, '\r\n', '\n').split('\n');
      var firstRow = true;
      var type = 0;
      var star = null;
      var $enum1 = ss.enumerate(rows);
      while ($enum1.moveNext()) {
        var row = $enum1.current;
        if (firstRow) {
          firstRow = false;
          continue;
        }
        if (ss.trim(row).length > 5) {
          star = new Star(row);
          star.position = Coordinates.raDecTo3dAu(star.RA, star.dec, 1);
          this._stars$1.push(star);
        }
      }
    },
    isPointInTile: function(lat, lng) {
      if (!this.level) {
        return true;
      }
      if (this.level === 1) {
        if ((lng >= 0 && lng <= 90) && (!this.tileX && this.tileY === 1)) {
          return true;
        }
        if ((lng > 90 && lng <= 180) && (this.tileX === 1 && this.tileY === 1)) {
          return true;
        }
        if ((lng < 0 && lng >= -90) && (!this.tileX && !this.tileY)) {
          return true;
        }
        if ((lng < -90 && lng >= -180) && (this.tileX === 1 && !this.tileY)) {
          return true;
        }
        return false;
      }
      if (!this.demReady || this.demData == null) {
        return false;
      }
      var testPoint = Coordinates.geoTo3dDouble(-lat, lng);
      var top = this._isLeftOfHalfSpace$1(this.topLeft.copy(), this.topRight.copy(), testPoint);
      var right = this._isLeftOfHalfSpace$1(this.topRight.copy(), this.bottomRight.copy(), testPoint);
      var bottom = this._isLeftOfHalfSpace$1(this.bottomRight.copy(), this.bottomLeft.copy(), testPoint);
      var left = this._isLeftOfHalfSpace$1(this.bottomLeft.copy(), this.topLeft.copy(), testPoint);
      if (top && right && bottom && left) {
        return true;
      }
      return false;
    },
    _isLeftOfHalfSpace$1: function(pntA, pntB, pntTest) {
      pntA.normalize();
      pntB.normalize();
      var cross = Vector3d.cross(pntA, pntB);
      var dot = Vector3d.dot(cross, pntTest);
      return dot < 0;
    },
    _initializeGrids$1: function() {
      this._vertexList$1 = [];
      this._childTriangleList$1 = new Array(4);
      this._childTriangleList$1[0] = [];
      this._childTriangleList$1[1] = [];
      this._childTriangleList$1[2] = [];
      this._childTriangleList$1[3] = [];
      this.bounds = new Array(9);
      if (this.level > 0) {
        if (this.parent == null) {
          this.parent = TileCache.getTile(this.level - 1, this.tileX / 2, this.tileY / 2, this.dataset, null);
        }
        var parent = this.parent;
        var xIndex = this.tileX % 2;
        var yIndex = this.tileY % 2;
        if (this.level > 1) {
          this.backslash = parent.backslash;
        }
        else {
          this.backslash = (xIndex === 1 ^ yIndex === 1) === 1;
        }
        this.bounds[0 + 3 * 0] = parent.bounds[xIndex + 3 * yIndex].copy();
        this.bounds[1 + 3 * 0] = this._midpoint$1(parent.bounds[xIndex + 3 * yIndex], parent.bounds[xIndex + 1 + 3 * yIndex]);
        this.bounds[2 + 3 * 0] = parent.bounds[xIndex + 1 + 3 * yIndex].copy();
        this.bounds[0 + 3 * 1] = this._midpoint$1(parent.bounds[xIndex + 3 * yIndex], parent.bounds[xIndex + 3 * (yIndex + 1)]);
        if (this.backslash) {
          this.bounds[1 + 3 * 1] = this._midpoint$1(parent.bounds[xIndex + 3 * yIndex], parent.bounds[xIndex + 1 + 3 * (yIndex + 1)]);
        }
        else {
          this.bounds[1 + 3 * 1] = this._midpoint$1(parent.bounds[xIndex + 1 + 3 * yIndex], parent.bounds[xIndex + 3 * (yIndex + 1)]);
        }
        this.bounds[2 + 3 * 1] = this._midpoint$1(parent.bounds[xIndex + 1 + 3 * yIndex], parent.bounds[xIndex + 1 + 3 * (yIndex + 1)]);
        this.bounds[0 + 3 * 2] = parent.bounds[xIndex + 3 * (yIndex + 1)].copy();
        this.bounds[1 + 3 * 2] = this._midpoint$1(parent.bounds[xIndex + 3 * (yIndex + 1)], parent.bounds[xIndex + 1 + 3 * (yIndex + 1)]);
        this.bounds[2 + 3 * 2] = parent.bounds[xIndex + 1 + 3 * (yIndex + 1)].copy();
        this.bounds[0 + 3 * 0].tu = 0 * Tile.uvMultiple;
        this.bounds[0 + 3 * 0].tv = 0 * Tile.uvMultiple;
        this.bounds[1 + 3 * 0].tu = 0.5 * Tile.uvMultiple;
        this.bounds[1 + 3 * 0].tv = 0 * Tile.uvMultiple;
        this.bounds[2 + 3 * 0].tu = 1 * Tile.uvMultiple;
        this.bounds[2 + 3 * 0].tv = 0 * Tile.uvMultiple;
        this.bounds[0 + 3 * 1].tu = 0 * Tile.uvMultiple;
        this.bounds[0 + 3 * 1].tv = 0.5 * Tile.uvMultiple;
        this.bounds[1 + 3 * 1].tu = 0.5 * Tile.uvMultiple;
        this.bounds[1 + 3 * 1].tv = 0.5 * Tile.uvMultiple;
        this.bounds[2 + 3 * 1].tu = 1 * Tile.uvMultiple;
        this.bounds[2 + 3 * 1].tv = 0.5 * Tile.uvMultiple;
        this.bounds[0 + 3 * 2].tu = 0 * Tile.uvMultiple;
        this.bounds[0 + 3 * 2].tv = 1 * Tile.uvMultiple;
        this.bounds[1 + 3 * 2].tu = 0.5 * Tile.uvMultiple;
        this.bounds[1 + 3 * 2].tv = 1 * Tile.uvMultiple;
        this.bounds[2 + 3 * 2].tu = 1 * Tile.uvMultiple;
        this.bounds[2 + 3 * 2].tv = 1 * Tile.uvMultiple;
      }
      else {
        this.bounds[0 + 3 * 0] = PositionTexture.create(0, -1, 0, 0, 0);
        this.bounds[1 + 3 * 0] = PositionTexture.create(0, 0, 1, 0.5, 0);
        this.bounds[2 + 3 * 0] = PositionTexture.create(0, -1, 0, 1, 0);
        this.bounds[0 + 3 * 1] = PositionTexture.create(-1, 0, 0, 0, 0.5);
        this.bounds[1 + 3 * 1] = PositionTexture.create(0, 1, 0, 0.5, 0.5);
        this.bounds[2 + 3 * 1] = PositionTexture.create(1, 0, 0, 1, 0.5);
        this.bounds[0 + 3 * 2] = PositionTexture.create(0, -1, 0, 0, 1);
        this.bounds[1 + 3 * 2] = PositionTexture.create(0, 0, -1, 0.5, 1);
        this.bounds[2 + 3 * 2] = PositionTexture.create(0, -1, 0, 1, 1);
      }
    },
    _midpoint$1: function(positionNormalTextured, positionNormalTextured_2) {
      var a1 = Vector3d.lerp(positionNormalTextured.position, positionNormalTextured_2.position, 0.5);
      var a1uv = Vector2d.lerp(Vector2d.create(positionNormalTextured.tu, positionNormalTextured.tv), Vector2d.create(positionNormalTextured_2.tu, positionNormalTextured_2.tv), 0.5);
      a1.normalize();
      return PositionTexture.createPos(a1, a1uv.x, a1uv.y);
    },
    createGeometry: function(renderContext) {
      if (this.geometryCreated) {
        return true;
      }
      this.geometryCreated = true;
      Tile.prototype.createGeometry.call(this, renderContext);
      return true;
    },
    cleanUp: function(removeFromParent) {
      Tile.prototype.cleanUp.call(this, removeFromParent);
      if (this._vertexList$1 != null) {
        this._vertexList$1 = null;
      }
      if (this._childTriangleList$1 != null) {
        this._childTriangleList$1 = null;
      }
      this._subDivided$1 = false;
      this.demArray = null;
    }
  };


  // wwtlib.SkyImageTile

  function SkyImageTile() {
    this.pixelCenterX = 0;
    this.pixelCenterY = 0;
    this.latCenter = 0;
    this.lngCenter = 0;
    this.rotation = 0;
    this.scaleX = 0.01;
    this.scaleY = 0.01;
    this.height = 0;
    this.width = 0;
    this._vertexList$1 = null;
    this._childTriangleList$1 = null;
    Tile.call(this);
  }
  SkyImageTile.create = function(level, x, y, dataset, parent) {
    var temp = new SkyImageTile();
    temp.parent = parent;
    temp.level = level;
    temp.tileX = x;
    temp.tileY = y;
    temp.dataset = dataset;
    temp._getParameters$1();
    temp.computeMatrix();
    temp.sphereCenter = temp.geoTo3dTan(0, 0);
    temp.radius = 1.25;
    return temp;
  };
  var SkyImageTile$ = {
    computeMatrix: function() {
      this.matrix = Matrix3d.get_identity();
      this.matrix._multiply(Matrix3d._rotationX((this.rotation / 180 * Math.PI)));
      this.matrix._multiply(Matrix3d._rotationZ((this.latCenter / 180 * Math.PI)));
      this.matrix._multiply(Matrix3d._rotationY(((360 - this.lngCenter) / 180 * Math.PI)));
    },
    _getParameters$1: function() {
      this.pixelCenterX = this.dataset.get_offsetX();
      this.pixelCenterY = this.dataset.get_offsetY();
      this.latCenter = this.dataset.get_centerY();
      this.lngCenter = this.dataset.get_centerX();
      this.rotation = this.dataset.get_rotation();
      this.scaleX = -(this.scaleY = this.dataset.get_baseTileDegrees());
      if (this.dataset.get_bottomsUp()) {
        this.scaleX = -this.scaleX;
        this.rotation = 360 - this.rotation;
      }
    },
    geoTo3dTan: function(lat, lng) {
      lng = -lng;
      var fac1 = this.dataset.get_baseTileDegrees();
      var factor = Math.tan(fac1 * Tile.RC);
      return this.matrix.transform(Vector3d.create(1, (lat / fac1 * factor), (lng / fac1 * factor)));
    },
    createGeometry: function(renderContext) {
      Tile.prototype.createGeometry.call(this, renderContext);
      if (this.geometryCreated) {
        return true;
      }
      var bmp = null;
      if (this.dataset.get_wcsImage() != null) {
        var wcsImage = ss.safeCast(this.dataset.get_wcsImage(), WcsImage);
        bmp = wcsImage.getBitmap();
        this.texture2d = bmp.getTexture();
        if (bmp.height !== wcsImage.get_sizeY()) {
          this.pixelCenterY += bmp.height - wcsImage.get_sizeY();
        }
      }
      this.geometryCreated = true;
      for (var i = 0; i < 4; i++) {
        this._renderTriangleLists[i] = [];
      }
      this.computeMatrix();
      if (bmp != null && renderContext.gl != null) {
        this.height = bmp.height;
        this.width = bmp.width;
      }
      else {
        this.height = this.texture.naturalHeight;
        this.width = this.texture.naturalWidth;
      }
      var latMin = 0 + (this.scaleY * (this.height - this.pixelCenterY));
      var latMax = 0 - (this.scaleY * this.pixelCenterY);
      var lngMin = 0 + (this.scaleX * this.pixelCenterX);
      var lngMax = 0 - (this.scaleX * (this.width - this.pixelCenterX));
      this.topLeft = this.geoTo3dTan(latMin, lngMin);
      this.bottomRight = this.geoTo3dTan(latMax, lngMax);
      this.topRight = this.geoTo3dTan(latMin, lngMax);
      this.bottomLeft = this.geoTo3dTan(latMax, lngMin);
      var topCenter = Vector3d.lerp(this.topLeft, this.topRight, 0.5);
      var bottomCenter = Vector3d.lerp(this.bottomLeft, this.bottomRight, 0.5);
      var center = Vector3d.lerp(topCenter, bottomCenter, 0.5);
      var rightCenter = Vector3d.lerp(this.topRight, this.bottomRight, 0.5);
      var leftCenter = Vector3d.lerp(this.topLeft, this.bottomLeft, 0.5);
      if (renderContext.gl == null) {
        this._vertexList$1 = [];
        this._vertexList$1.push(PositionTexture.createPosSize(this.topLeft, 0, 0, this.width, this.height));
        this._vertexList$1.push(PositionTexture.createPosSize(this.topRight, 1, 0, this.width, this.height));
        this._vertexList$1.push(PositionTexture.createPosSize(this.bottomLeft, 0, 1, this.width, this.height));
        this._vertexList$1.push(PositionTexture.createPosSize(this.bottomRight, 1, 1, this.width, this.height));
        this._childTriangleList$1 = [];
        if (this.dataset.get_bottomsUp()) {
          this._childTriangleList$1.push(Triangle.create(0, 1, 2));
          this._childTriangleList$1.push(Triangle.create(2, 1, 3));
        }
        else {
          this._childTriangleList$1.push(Triangle.create(0, 2, 1));
          this._childTriangleList$1.push(Triangle.create(2, 3, 1));
        }
        var count = 3;
        while (count-- > 1) {
          var newList = [];
          var $enum1 = ss.enumerate(this._childTriangleList$1);
          while ($enum1.moveNext()) {
            var tri = $enum1.current;
            tri.subDivide(newList, this._vertexList$1);
          }
          this._childTriangleList$1 = newList;
        }
        var miter = 0.6 / (this.width / 256);
        var $enum2 = ss.enumerate(this._childTriangleList$1);
        while ($enum2.moveNext()) {
          var tri = $enum2.current;
          var p1 = this._vertexList$1[tri.a];
          var p2 = this._vertexList$1[tri.b];
          var p3 = this._vertexList$1[tri.c];
          this._renderTriangleLists[0].push(RenderTriangle.createWithMiter(p1, p2, p3, this.texture, this.level, miter));
        }
      }
      else {
        this._vertexBuffer = Tile.prepDevice.createBuffer();
        Tile.prepDevice.bindBuffer(34962, this._vertexBuffer);
        var f32array = new Float32Array(9 * 5);
        var buffer = f32array;
        var index = 0;
        index = this.addVertex(buffer, index, PositionTexture.createPos(bottomCenter, 0.5, 1));
        index = this.addVertex(buffer, index, PositionTexture.createPos(this.bottomLeft, 0, 1));
        index = this.addVertex(buffer, index, PositionTexture.createPos(this.bottomRight, 1, 1));
        index = this.addVertex(buffer, index, PositionTexture.createPos(center, 0.5, 0.5));
        index = this.addVertex(buffer, index, PositionTexture.createPos(leftCenter, 0, 0.5));
        index = this.addVertex(buffer, index, PositionTexture.createPos(rightCenter, 1, 0.5));
        index = this.addVertex(buffer, index, PositionTexture.createPos(topCenter, 0.5, 0));
        index = this.addVertex(buffer, index, PositionTexture.createPos(this.topLeft, 0, 0));
        index = this.addVertex(buffer, index, PositionTexture.createPos(this.topRight, 1, 0));
        Tile.prepDevice.bufferData(34962, f32array, 35044);
        for (var i = 0; i < 4; i++) {
          index = 0;
          this.triangleCount = 2;
          var ui16array = new Uint16Array(this.triangleCount * 3);
          var indexArray = ui16array;
          switch (i) {
            case 0:
              indexArray[index++] = 7;
              indexArray[index++] = 4;
              indexArray[index++] = 6;
              indexArray[index++] = 4;
              indexArray[index++] = 3;
              indexArray[index++] = 6;
              break;
            case 1:
              indexArray[index++] = 6;
              indexArray[index++] = 5;
              indexArray[index++] = 8;
              indexArray[index++] = 6;
              indexArray[index++] = 3;
              indexArray[index++] = 5;
              break;
            case 2:
              indexArray[index++] = 4;
              indexArray[index++] = 0;
              indexArray[index++] = 3;
              indexArray[index++] = 4;
              indexArray[index++] = 1;
              indexArray[index++] = 0;
              break;
            case 3:
              indexArray[index++] = 3;
              indexArray[index++] = 2;
              indexArray[index++] = 5;
              indexArray[index++] = 3;
              indexArray[index++] = 0;
              indexArray[index++] = 2;
              break;
          }
          this._indexBuffers[i] = Tile.prepDevice.createBuffer();
          Tile.prepDevice.bindBuffer(34963, this._indexBuffers[i]);
          Tile.prepDevice.bufferData(34963, ui16array, 35044);
        }
      }
      return true;
    }
  };


  // wwtlib.TangentTile

  function TangentTile() {
    this._topDown$1 = true;
    Tile.call(this);
  }
  TangentTile.create = function(level, x, y, dataset, parent) {
    var temp = new TangentTile();
    temp.parent = parent;
    temp.level = level;
    temp.tileX = x;
    temp.tileY = y;
    temp.dataset = dataset;
    temp._topDown$1 = !dataset.get_bottomsUp();
    temp.computeBoundingSphere();
    return temp;
  };
  var TangentTile$ = {
    computeBoundingSphere: function() {
      if (!this._topDown$1) {
        this.computeBoundingSphereBottomsUp();
        return;
      }
      var tileDegrees = this.dataset.get_baseTileDegrees() / Math.pow(2, this.level);
      var latMin = ((this.dataset.get_baseTileDegrees() / 2 - ((this.tileY) * tileDegrees)) + this.dataset.get_offsetY());
      var latMax = ((this.dataset.get_baseTileDegrees() / 2 - (((this.tileY + 1)) * tileDegrees)) + this.dataset.get_offsetY());
      var lngMin = (((this.tileX * tileDegrees) - this.dataset.get_baseTileDegrees() / this.dataset.get_widthFactor()) + this.dataset.get_offsetX());
      var lngMax = (((((this.tileX + 1)) * tileDegrees) - this.dataset.get_baseTileDegrees() / this.dataset.get_widthFactor()) + this.dataset.get_offsetX());
      var latCenter = (latMin + latMax) / 2;
      var lngCenter = (lngMin + lngMax) / 2;
      this.sphereCenter = this.geoTo3dTan(latCenter, lngCenter);
      this.topLeft = this.geoTo3dTan(latMin, lngMin);
      this.bottomRight = this.geoTo3dTan(latMax, lngMax);
      this.topRight = this.geoTo3dTan(latMin, lngMax);
      this.bottomLeft = this.geoTo3dTan(latMax, lngMin);
      var distVect = this.geoTo3dTan(latMin, lngMin);
      tileDegrees = lngMax - lngMin;
      distVect.subtract(this.sphereCenter);
      this.sphereRadius = distVect.length();
    },
    geoTo3dTan: function(lat, lng) {
      lng = -lng;
      var fac1 = this.dataset.get_baseTileDegrees() / 2;
      var factor = Math.tan(fac1 * Tile.RC);
      return this.dataset.get_matrix().transform(Vector3d.create(1, (lat / fac1 * factor), (lng / fac1 * factor)));
    },
    computeBoundingSphereBottomsUp: function() {
      var tileDegrees = this.dataset.get_baseTileDegrees() / (Math.pow(2, this.level));
      var latMin = (this.dataset.get_baseTileDegrees() / 2 + (((this.tileY + 1)) * tileDegrees)) + this.dataset.get_offsetY();
      var latMax = (this.dataset.get_baseTileDegrees() / 2 + ((this.tileY) * tileDegrees)) + this.dataset.get_offsetY();
      var lngMin = ((this.tileX * tileDegrees) - this.dataset.get_baseTileDegrees() / this.dataset.get_widthFactor()) + this.dataset.get_offsetX();
      var lngMax = ((((this.tileX + 1)) * tileDegrees) - this.dataset.get_baseTileDegrees() / this.dataset.get_widthFactor()) + this.dataset.get_offsetX();
      var latCenter = (latMin + latMax) / 2;
      var lngCenter = (lngMin + lngMax) / 2;
      this.topLeft = this.geoTo3dTan(latMin, lngMin);
      this.bottomRight = this.geoTo3dTan(latMax, lngMax);
      this.topRight = this.geoTo3dTan(latMin, lngMax);
      this.bottomLeft = this.geoTo3dTan(latMax, lngMin);
      var distVect = this.topLeft;
      tileDegrees = lngMax - lngMin;
    },
    createGeometry: function(renderContext) {
      Tile.prototype.createGeometry.call(this, renderContext);
      if (this.geometryCreated) {
        return true;
      }
      this.geometryCreated = true;
      for (var i = 0; i < 4; i++) {
        this._renderTriangleLists[i] = [];
      }
      var tileDegrees = this.dataset.get_baseTileDegrees() / Math.pow(2, this.level);
      var latMin = ((this.dataset.get_baseTileDegrees() / 2 - ((this.tileY) * tileDegrees)) + this.dataset.get_offsetY());
      var latMax = ((this.dataset.get_baseTileDegrees() / 2 - (((this.tileY + 1)) * tileDegrees)) + this.dataset.get_offsetY());
      var lngMin = (((this.tileX * tileDegrees) - this.dataset.get_baseTileDegrees() / this.dataset.get_widthFactor()) + this.dataset.get_offsetX());
      var lngMax = (((((this.tileX + 1)) * tileDegrees) - this.dataset.get_baseTileDegrees() / this.dataset.get_widthFactor()) + this.dataset.get_offsetX());
      var tileDegreesX = lngMax - lngMin;
      var tileDegreesY = latMax - latMin;
      this.topLeft = this.geoTo3dTan(latMin, lngMin);
      this.bottomRight = this.geoTo3dTan(latMax, lngMax);
      this.topRight = this.geoTo3dTan(latMin, lngMax);
      this.bottomLeft = this.geoTo3dTan(latMax, lngMin);
      var latCenter = (latMin + latMax) / 2;
      var lngCenter = (lngMin + lngMax) / 2;
      var center = Vector3d.midPoint(this.topLeft, this.bottomRight);
      var leftCenter = Vector3d.midPoint(this.topLeft, this.bottomLeft);
      var rightCenter = Vector3d.midPoint(this.topRight, this.bottomRight);
      var topCenter = Vector3d.midPoint(this.topLeft, this.topRight);
      var bottomCenter = Vector3d.midPoint(this.bottomLeft, this.bottomRight);
      if (renderContext.gl == null) {
        this._renderTriangleLists[0].push(RenderTriangle.create(PositionTexture.createPos(this.topLeft, 0, 0), PositionTexture.createPos(leftCenter, 0, 0.5), PositionTexture.createPos(topCenter, 0.5, 0), this.texture, this.level));
        this._renderTriangleLists[0].push(RenderTriangle.create(PositionTexture.createPos(leftCenter, 0, 0.5), PositionTexture.createPos(center, 0.5, 0.5), PositionTexture.createPos(topCenter, 0.5, 0), this.texture, this.level));
        this._renderTriangleLists[1].push(RenderTriangle.create(PositionTexture.createPos(topCenter, 0.5, 0), PositionTexture.createPos(rightCenter, 1, 0.5), PositionTexture.createPos(this.topRight, 1, 0), this.texture, this.level));
        this._renderTriangleLists[1].push(RenderTriangle.create(PositionTexture.createPos(topCenter, 0.5, 0), PositionTexture.createPos(center, 0.5, 0.5), PositionTexture.createPos(rightCenter, 1, 0.5), this.texture, this.level));
        this._renderTriangleLists[2].push(RenderTriangle.create(PositionTexture.createPos(leftCenter, 0, 0.5), PositionTexture.createPos(bottomCenter, 0.5, 1), PositionTexture.createPos(center, 0.5, 0.5), this.texture, this.level));
        this._renderTriangleLists[2].push(RenderTriangle.create(PositionTexture.createPos(leftCenter, 0, 0.5), PositionTexture.createPos(this.bottomLeft, 0, 1), PositionTexture.createPos(bottomCenter, 0.5, 1), this.texture, this.level));
        this._renderTriangleLists[3].push(RenderTriangle.create(PositionTexture.createPos(center, 0.5, 0.5), PositionTexture.createPos(this.bottomRight, 1, 1), PositionTexture.createPos(rightCenter, 1, 0.5), this.texture, this.level));
        this._renderTriangleLists[3].push(RenderTriangle.create(PositionTexture.createPos(center, 0.5, 0.5), PositionTexture.createPos(bottomCenter, 0.5, 1), PositionTexture.createPos(this.bottomRight, 1, 1), this.texture, this.level));
      }
      else {
        this._vertexBuffer = Tile.prepDevice.createBuffer();
        Tile.prepDevice.bindBuffer(34962, this._vertexBuffer);
        var f32array = new Float32Array(9 * 5);
        var buffer = f32array;
        var index = 0;
        index = this.addVertex(buffer, index, PositionTexture.createPos(bottomCenter, 0.5, 1));
        index = this.addVertex(buffer, index, PositionTexture.createPos(this.bottomLeft, 0, 1));
        index = this.addVertex(buffer, index, PositionTexture.createPos(this.bottomRight, 1, 1));
        index = this.addVertex(buffer, index, PositionTexture.createPos(center, 0.5, 0.5));
        index = this.addVertex(buffer, index, PositionTexture.createPos(leftCenter, 0, 0.5));
        index = this.addVertex(buffer, index, PositionTexture.createPos(rightCenter, 1, 0.5));
        index = this.addVertex(buffer, index, PositionTexture.createPos(topCenter, 0.5, 0));
        index = this.addVertex(buffer, index, PositionTexture.createPos(this.topLeft, 0, 0));
        index = this.addVertex(buffer, index, PositionTexture.createPos(this.topRight, 1, 0));
        Tile.prepDevice.bufferData(34962, f32array, 35044);
        for (var i = 0; i < 4; i++) {
          index = 0;
          this.triangleCount = 2;
          var ui16array = new Uint16Array(this.triangleCount * 3);
          var indexArray = ui16array;
          switch (i) {
            case 0:
              indexArray[index++] = 7;
              indexArray[index++] = 4;
              indexArray[index++] = 6;
              indexArray[index++] = 4;
              indexArray[index++] = 3;
              indexArray[index++] = 6;
              break;
            case 1:
              indexArray[index++] = 6;
              indexArray[index++] = 5;
              indexArray[index++] = 8;
              indexArray[index++] = 6;
              indexArray[index++] = 3;
              indexArray[index++] = 5;
              break;
            case 2:
              indexArray[index++] = 4;
              indexArray[index++] = 0;
              indexArray[index++] = 3;
              indexArray[index++] = 4;
              indexArray[index++] = 1;
              indexArray[index++] = 0;
              break;
            case 3:
              indexArray[index++] = 3;
              indexArray[index++] = 2;
              indexArray[index++] = 5;
              indexArray[index++] = 3;
              indexArray[index++] = 0;
              indexArray[index++] = 2;
              break;
          }
          this._indexBuffers[i] = Tile.prepDevice.createBuffer();
          Tile.prepDevice.bindBuffer(34963, this._indexBuffers[i]);
          Tile.prepDevice.bufferData(34963, ui16array, 35044);
        }
      }
      return true;
    }
  };


  // wwtlib.ToastTile

  function ToastTile() {
    this._topDown$1 = true;
    this.backslash = false;
    this._vertexList$1 = null;
    this._childTriangleList$1 = null;
    this._subDivisionLevel$1 = 4;
    this._subDivided$1 = false;
    Tile.call(this);
  }
  ToastTile._cloneArray$1 = function(indexArray) {
    var count = indexArray.length;
    var ui16array = new Uint16Array(count);
    var indexArrayNew = ui16array;
    for (var i = 0; i < count; i++) {
      indexArrayNew[i] = indexArray[i];
    }
    return indexArrayNew;
  };
  ToastTile.create = function(level, xc, yc, dataset, parent) {
    var temp = new ToastTile();
    temp.parent = parent;
    temp.level = level;
    temp.tileX = xc;
    temp.tileY = yc;
    temp.dataset = dataset;
    temp._topDown$1 = !dataset.get_bottomsUp();
    if (temp.tileX !== xc) {
      alert('bad');
    }
    if (!!dataset.get_meanRadius()) {
      temp.set__demScaleFactor(dataset.get_meanRadius());
    }
    else {
      if (!dataset.get_dataSetType()) {
        temp.set__demScaleFactor(6371000);
      }
      else {
        temp.set__demScaleFactor(3396010);
      }
    }
    temp.computeBoundingSphere();
    return temp;
  };
  var ToastTile$ = {
    computeBoundingSphere: function() {
      this._initializeGrids$1();
      this.topLeft = this.bounds[0 + 3 * 0].position.copy();
      this.bottomRight = this.bounds[2 + 3 * 2].position.copy();
      this.topRight = this.bounds[2 + 3 * 0].position.copy();
      this.bottomLeft = this.bounds[0 + 3 * 2].position.copy();
      this.calcSphere();
    },
    getIndexBuffer: function(index, accomidation) {
      if (!this.level) {
        return ToastTile.rootIndexBuffer[index];
      }
      if (this.backslash) {
        return ToastTile.backSlashIndexBuffer[index * 16 + accomidation];
      }
      else {
        return ToastTile.slashIndexBuffer[index * 16 + accomidation];
      }
    },
    _processIndexBuffer$1: function(indexArray, part) {
      if (!this.level) {
        ToastTile.rootIndexBuffer[part] = Tile.prepDevice.createBuffer();
        Tile.prepDevice.bindBuffer(34963, ToastTile.rootIndexBuffer[part]);
        Tile.prepDevice.bufferData(34963, indexArray, 35044);
        return;
      }
      for (var a = 0; a < 16; a++) {
        var partArray = ToastTile._cloneArray$1(indexArray);
        this._processAccomindations$1(partArray, a);
        if (this.backslash) {
          ToastTile.backSlashIndexBuffer[part * 16 + a] = Tile.prepDevice.createBuffer();
          Tile.prepDevice.bindBuffer(34963, ToastTile.backSlashIndexBuffer[part * 16 + a]);
          Tile.prepDevice.bufferData(34963, partArray, 35044);
        }
        else {
          ToastTile.slashIndexBuffer[part * 16 + a] = Tile.prepDevice.createBuffer();
          Tile.prepDevice.bindBuffer(34963, ToastTile.slashIndexBuffer[part * 16 + a]);
          Tile.prepDevice.bufferData(34963, partArray, 35044);
        }
      }
    },
    _processAccomindations$1: function(indexArray, a) {
      var map = {};
      var gridMap = {};
      var $enum1 = ss.enumerate(indexArray);
      while ($enum1.moveNext()) {
        var index = $enum1.current;
        var vert = this._vertexList$1[index];
        var arrayX = ss.truncate((vert.tu * 16 + 0.5));
        var arrayY = ss.truncate((vert.tv * 16 + 0.5));
        var ii = (arrayY << 8) + arrayX;
        if (!ss.keyExists(gridMap, ii)) {
          gridMap[ii] = index;
        }
      }
      var sections = 16;
      if ((a & 1) === 1) {
        for (var x = 1; x < sections; x += 2) {
          var y = sections;
          var key = (y << 8) + x;
          var val = (y << 8) + x + 1;
          if (ss.keyExists(gridMap, key)) {
            map[gridMap[key]] = gridMap[val];
          }
        }
      }
      if ((a & 2) === 2) {
        for (var y = 1; y < sections; y += 2) {
          var x = sections;
          var key = (y << 8) + x;
          var val = ((y + 1) << 8) + x;
          if (ss.keyExists(gridMap, key)) {
            map[gridMap[key]] = gridMap[val];
          }
        }
      }
      if ((a & 4) === 4) {
        for (var x = 1; x < sections; x += 2) {
          var y = 0;
          var key = (y << 8) + x;
          var val = (y << 8) + x + 1;
          if (ss.keyExists(gridMap, key)) {
            map[gridMap[key]] = gridMap[val];
          }
        }
      }
      if ((a & 8) === 8) {
        for (var y = 1; y < sections; y += 2) {
          var x = 0;
          var key = (y << 8) + x;
          var val = ((y + 1) << 8) + x;
          if (ss.keyExists(gridMap, key)) {
            map[gridMap[key]] = gridMap[val];
          }
        }
      }
      if (!ss.keyCount(map)) {
        return;
      }
      for (var i = 0; i < indexArray.length; i++) {
        if (ss.keyExists(map, indexArray[i])) {
          indexArray[i] = map[indexArray[i]];
        }
      }
    },
    calculateFullSphere: function(list) {
      var result = ConvexHull.findEnclosingSphere(list);
      this.sphereCenter = result.center;
      this.sphereRadius = result.radius;
    },
    isPointInTile: function(lat, lng) {
      if (!this.level) {
        return true;
      }
      if (this.level === 1) {
        if ((lng >= 0 && lng <= 90) && (!this.tileX && this.tileY === 1)) {
          return true;
        }
        if ((lng > 90 && lng <= 180) && (this.tileX === 1 && this.tileY === 1)) {
          return true;
        }
        if ((lng < 0 && lng >= -90) && (!this.tileX && !this.tileY)) {
          return true;
        }
        if ((lng < -90 && lng >= -180) && (this.tileX === 1 && !this.tileY)) {
          return true;
        }
        return false;
      }
      if (!this.demReady || this.demData == null) {
        return false;
      }
      var testPoint = Coordinates.geoTo3dDouble(-lat, lng);
      var top = this._isLeftOfHalfSpace$1(this.topLeft.copy(), this.topRight.copy(), testPoint);
      var right = this._isLeftOfHalfSpace$1(this.topRight.copy(), this.bottomRight.copy(), testPoint);
      var bottom = this._isLeftOfHalfSpace$1(this.bottomRight.copy(), this.bottomLeft.copy(), testPoint);
      var left = this._isLeftOfHalfSpace$1(this.bottomLeft.copy(), this.topLeft.copy(), testPoint);
      if (top && right && bottom && left) {
        return true;
      }
      return false;
    },
    _isLeftOfHalfSpace$1: function(pntA, pntB, pntTest) {
      pntA.normalize();
      pntB.normalize();
      var cross = Vector3d.cross(pntA, pntB);
      var dot = Vector3d.dot(cross, pntTest);
      return dot < 0;
    },
    getSurfacePointAltitude: function(lat, lng, meters) {
      if (this.level < Tile.lastDeepestLevel) {
        for (var ii = 0; ii < 4; ii++) {
          var child = this.children[ii];
          if (child != null) {
            if (child.isPointInTile(lat, lng)) {
              var retVal = child.getSurfacePointAltitude(lat, lng, meters);
              if (!!retVal) {
                return retVal;
              }
              else {
                break;
              }
            }
          }
        }
      }
      Tile.tileTargetLevel = this.level;
      Tile.tileTargetX = this.tileX;
      Tile.tileTargetY = this.tileY;
      var testPoint = Coordinates.geoTo3dDouble(-lat, lng);
      testPoint = Vector3d.subtractVectors(new Vector3d(), testPoint);
      var uv = DistanceCalc.getUVFromInnerPoint(this.topLeft.copy(), this.topRight.copy(), this.bottomLeft.copy(), this.bottomRight.copy(), testPoint.copy());
      var uud = Math.max(0, Math.min(16, (uv.x * 16)));
      var vvd = Math.max(0, Math.min(16, (uv.y * 16)));
      var uu = Math.max(0, Math.min(15, ss.truncate((uv.x * 16))));
      var vv = Math.max(0, Math.min(15, ss.truncate((uv.y * 16))));
      var ha = uud - uu;
      var va = vvd - vv;
      if (this.demArray != null) {
        var ul = this.demArray[uu + 17 * vv];
        var ur = this.demArray[(uu + 1) + 17 * vv];
        var ll = this.demArray[uu + 17 * (vv + 1)];
        var lr = this.demArray[(uu + 1) + 17 * (vv + 1)];
        var top = ul * (1 - ha) + ha * ur;
        var bottom = ll * (1 - ha) + ha * lr;
        var val = top * (1 - va) + va * bottom;
        return val / this.get__demScaleFactor();
      }
      return this.demAverage / this.get__demScaleFactor();
    },
    _initializeGrids$1: function() {
      this._vertexList$1 = [];
      this._childTriangleList$1 = new Array(4);
      this._childTriangleList$1[0] = [];
      this._childTriangleList$1[1] = [];
      this._childTriangleList$1[2] = [];
      this._childTriangleList$1[3] = [];
      this.bounds = new Array(9);
      if (this.level > 0) {
        if (this.parent == null) {
          this.parent = TileCache.getTile(this.level - 1, this.tileX / 2, this.tileY / 2, this.dataset, null);
        }
        var parent = this.parent;
        var xIndex = this.tileX % 2;
        var yIndex = this.tileY % 2;
        if (this.level > 1) {
          this.backslash = parent.backslash;
        }
        else {
          this.backslash = (xIndex === 1 ^ yIndex === 1) === 1;
        }
        this.bounds[0 + 3 * 0] = parent.bounds[xIndex + 3 * yIndex].copy();
        this.bounds[1 + 3 * 0] = this._midpoint$1(parent.bounds[xIndex + 3 * yIndex], parent.bounds[xIndex + 1 + 3 * yIndex]);
        this.bounds[2 + 3 * 0] = parent.bounds[xIndex + 1 + 3 * yIndex].copy();
        this.bounds[0 + 3 * 1] = this._midpoint$1(parent.bounds[xIndex + 3 * yIndex], parent.bounds[xIndex + 3 * (yIndex + 1)]);
        if (this.backslash) {
          this.bounds[1 + 3 * 1] = this._midpoint$1(parent.bounds[xIndex + 3 * yIndex], parent.bounds[xIndex + 1 + 3 * (yIndex + 1)]);
        }
        else {
          this.bounds[1 + 3 * 1] = this._midpoint$1(parent.bounds[xIndex + 1 + 3 * yIndex], parent.bounds[xIndex + 3 * (yIndex + 1)]);
        }
        this.bounds[2 + 3 * 1] = this._midpoint$1(parent.bounds[xIndex + 1 + 3 * yIndex], parent.bounds[xIndex + 1 + 3 * (yIndex + 1)]);
        this.bounds[0 + 3 * 2] = parent.bounds[xIndex + 3 * (yIndex + 1)].copy();
        this.bounds[1 + 3 * 2] = this._midpoint$1(parent.bounds[xIndex + 3 * (yIndex + 1)], parent.bounds[xIndex + 1 + 3 * (yIndex + 1)]);
        this.bounds[2 + 3 * 2] = parent.bounds[xIndex + 1 + 3 * (yIndex + 1)].copy();
        this.bounds[0 + 3 * 0].tu = 0 * Tile.uvMultiple;
        this.bounds[0 + 3 * 0].tv = 0 * Tile.uvMultiple;
        this.bounds[1 + 3 * 0].tu = 0.5 * Tile.uvMultiple;
        this.bounds[1 + 3 * 0].tv = 0 * Tile.uvMultiple;
        this.bounds[2 + 3 * 0].tu = 1 * Tile.uvMultiple;
        this.bounds[2 + 3 * 0].tv = 0 * Tile.uvMultiple;
        this.bounds[0 + 3 * 1].tu = 0 * Tile.uvMultiple;
        this.bounds[0 + 3 * 1].tv = 0.5 * Tile.uvMultiple;
        this.bounds[1 + 3 * 1].tu = 0.5 * Tile.uvMultiple;
        this.bounds[1 + 3 * 1].tv = 0.5 * Tile.uvMultiple;
        this.bounds[2 + 3 * 1].tu = 1 * Tile.uvMultiple;
        this.bounds[2 + 3 * 1].tv = 0.5 * Tile.uvMultiple;
        this.bounds[0 + 3 * 2].tu = 0 * Tile.uvMultiple;
        this.bounds[0 + 3 * 2].tv = 1 * Tile.uvMultiple;
        this.bounds[1 + 3 * 2].tu = 0.5 * Tile.uvMultiple;
        this.bounds[1 + 3 * 2].tv = 1 * Tile.uvMultiple;
        this.bounds[2 + 3 * 2].tu = 1 * Tile.uvMultiple;
        this.bounds[2 + 3 * 2].tv = 1 * Tile.uvMultiple;
        this._vertexList$1.push(this.bounds[0 + 3 * 0]);
        this._vertexList$1.push(this.bounds[1 + 3 * 0]);
        this._vertexList$1.push(this.bounds[2 + 3 * 0]);
        this._vertexList$1.push(this.bounds[0 + 3 * 1]);
        this._vertexList$1.push(this.bounds[1 + 3 * 1]);
        this._vertexList$1.push(this.bounds[2 + 3 * 1]);
        this._vertexList$1.push(this.bounds[0 + 3 * 2]);
        this._vertexList$1.push(this.bounds[1 + 3 * 2]);
        this._vertexList$1.push(this.bounds[2 + 3 * 2]);
        if (this.backslash) {
          this._childTriangleList$1[0].push(Triangle.create(4, 1, 0));
          this._childTriangleList$1[0].push(Triangle.create(3, 4, 0));
          this._childTriangleList$1[1].push(Triangle.create(5, 2, 1));
          this._childTriangleList$1[1].push(Triangle.create(4, 5, 1));
          this._childTriangleList$1[2].push(Triangle.create(7, 4, 3));
          this._childTriangleList$1[2].push(Triangle.create(6, 7, 3));
          this._childTriangleList$1[3].push(Triangle.create(8, 5, 4));
          this._childTriangleList$1[3].push(Triangle.create(7, 8, 4));
        }
        else {
          this._childTriangleList$1[0].push(Triangle.create(3, 1, 0));
          this._childTriangleList$1[0].push(Triangle.create(4, 1, 3));
          this._childTriangleList$1[1].push(Triangle.create(4, 2, 1));
          this._childTriangleList$1[1].push(Triangle.create(5, 2, 4));
          this._childTriangleList$1[2].push(Triangle.create(6, 4, 3));
          this._childTriangleList$1[2].push(Triangle.create(7, 4, 6));
          this._childTriangleList$1[3].push(Triangle.create(7, 5, 4));
          this._childTriangleList$1[3].push(Triangle.create(8, 5, 7));
        }
      }
      else {
        this.bounds[0 + 3 * 0] = PositionTexture.create(0, -1, 0, 0, 0);
        this.bounds[1 + 3 * 0] = PositionTexture.create(0, 0, 1, 0.5, 0);
        this.bounds[2 + 3 * 0] = PositionTexture.create(0, -1, 0, 1, 0);
        this.bounds[0 + 3 * 1] = PositionTexture.create(-1, 0, 0, 0, 0.5);
        this.bounds[1 + 3 * 1] = PositionTexture.create(0, 1, 0, 0.5, 0.5);
        this.bounds[2 + 3 * 1] = PositionTexture.create(1, 0, 0, 1, 0.5);
        this.bounds[0 + 3 * 2] = PositionTexture.create(0, -1, 0, 0, 1);
        this.bounds[1 + 3 * 2] = PositionTexture.create(0, 0, -1, 0.5, 1);
        this.bounds[2 + 3 * 2] = PositionTexture.create(0, -1, 0, 1, 1);
        this._vertexList$1.push(this.bounds[0 + 3 * 0]);
        this._vertexList$1.push(this.bounds[1 + 3 * 0]);
        this._vertexList$1.push(this.bounds[2 + 3 * 0]);
        this._vertexList$1.push(this.bounds[0 + 3 * 1]);
        this._vertexList$1.push(this.bounds[1 + 3 * 1]);
        this._vertexList$1.push(this.bounds[2 + 3 * 1]);
        this._vertexList$1.push(this.bounds[0 + 3 * 2]);
        this._vertexList$1.push(this.bounds[1 + 3 * 2]);
        this._vertexList$1.push(this.bounds[2 + 3 * 2]);
        this._childTriangleList$1[0].push(Triangle.create(3, 1, 0));
        this._childTriangleList$1[0].push(Triangle.create(4, 1, 3));
        this._childTriangleList$1[1].push(Triangle.create(5, 2, 1));
        this._childTriangleList$1[1].push(Triangle.create(4, 5, 1));
        this._childTriangleList$1[2].push(Triangle.create(7, 4, 3));
        this._childTriangleList$1[2].push(Triangle.create(6, 7, 3));
        this._childTriangleList$1[3].push(Triangle.create(7, 5, 4));
        this._childTriangleList$1[3].push(Triangle.create(8, 5, 7));
      }
    },
    _midpoint$1: function(positionNormalTextured, positionNormalTextured_2) {
      var a1 = Vector3d.lerp(positionNormalTextured.position, positionNormalTextured_2.position, 0.5);
      var a1uv = Vector2d.lerp(Vector2d.create(positionNormalTextured.tu, positionNormalTextured.tv), Vector2d.create(positionNormalTextured_2.tu, positionNormalTextured_2.tv), 0.5);
      a1.normalize();
      return PositionTexture.createPos(a1, a1uv.x, a1uv.y);
    },
    createGeometry: function(renderContext) {
      if (this.geometryCreated) {
        return true;
      }
      this.geometryCreated = true;
      Tile.prototype.createGeometry.call(this, renderContext);
      if (!this._subDivided$1) {
        if (this._vertexList$1 == null) {
          this._initializeGrids$1();
        }
        if (Tile.uvMultiple === 256) {
          if (!this.dataset.get_dataSetType() || this.dataset.get_dataSetType() === 1) {
            this._subDivisionLevel$1 = Math.min(5, Math.max(0, 5 - this.level));
          }
          else {
            this._subDivisionLevel$1 = Math.min(5, Math.max(0, 5 - this.level));
          }
        }
        else {
          if (this.demTile && this.level > 1) {
            this.demArray = new Array(17 * 17);
            this.demSize = 17 * 17;
            if (this.backslash) {
              if (ToastTile._backslashYIndex$1 == null) {
                this._tempBackslashYIndex$1 = new Array(this.demSize);
                this._tempBackslashXIndex$1 = new Array(this.demSize);
              }
            }
            else {
              if (ToastTile._slashYIndex$1 == null) {
                this._tempSlashYIndex$1 = new Array(this.demSize);
                this._tempSlashXIndex$1 = new Array(this.demSize);
              }
            }
          }
        }
        for (var i = 0; i < 4; i++) {
          var count = this._subDivisionLevel$1;
          while (count-- > 1) {
            var newList = [];
            var $enum1 = ss.enumerate(this._childTriangleList$1[i]);
            while ($enum1.moveNext()) {
              var tri = $enum1.current;
              tri.subDivide(newList, this._vertexList$1);
            }
            this._childTriangleList$1[i] = newList;
          }
        }
        if (renderContext.gl == null) {
          for (var i = 0; i < 4; i++) {
            this._renderTriangleLists[i] = [];
            var $enum2 = ss.enumerate(this._childTriangleList$1[i]);
            while ($enum2.moveNext()) {
              var tri = $enum2.current;
              var p1 = this._vertexList$1[tri.c];
              var p2 = this._vertexList$1[tri.b];
              var p3 = this._vertexList$1[tri.a];
              this._renderTriangleLists[i].push(RenderTriangle.create(p1, p2, p3, this.texture, this.level));
            }
          }
        }
        else {
          this._vertexBuffer = Tile.prepDevice.createBuffer();
          Tile.prepDevice.bindBuffer(34962, this._vertexBuffer);
          var f32array = new Float32Array(this._vertexList$1.length * 5);
          var buffer = f32array;
          var index = 0;
          var $enum3 = ss.enumerate(this._vertexList$1);
          while ($enum3.moveNext()) {
            var pt = $enum3.current;
            if (this.demTile) {
              index = this.addVertex(buffer, index, this._getMappedVertex(pt));
              this.demIndex++;
            }
            else {
              index = this.addVertex(buffer, index, pt);
            }
          }
          if (this.demTile) {
            if (this.backslash) {
              if (this._tempBackslashXIndex$1 != null) {
                ToastTile._backslashXIndex$1 = this._tempBackslashXIndex$1;
                ToastTile._backslashYIndex$1 = this._tempBackslashYIndex$1;
                this._tempBackslashXIndex$1 = null;
                this._tempBackslashYIndex$1 = null;
              }
            }
            else {
              if (this._tempSlashYIndex$1 != null) {
                ToastTile._slashXIndex$1 = this._tempSlashXIndex$1;
                ToastTile._slashYIndex$1 = this._tempSlashYIndex$1;
                this._tempSlashYIndex$1 = null;
                this._tempSlashXIndex$1 = null;
              }
            }
          }
          Tile.prepDevice.bufferData(34962, f32array, 35044);
          for (var i = 0; i < 4; i++) {
            this.triangleCount = this._childTriangleList$1[i].length;
            if (this.getIndexBuffer(i, 0) == null) {
              var ui16array = new Uint16Array(this.triangleCount * 3);
              var indexArray = ui16array;
              index = 0;
              var $enum4 = ss.enumerate(this._childTriangleList$1[i]);
              while ($enum4.moveNext()) {
                var tri = $enum4.current;
                indexArray[index++] = tri.c;
                indexArray[index++] = tri.b;
                indexArray[index++] = tri.a;
              }
              this._processIndexBuffer$1(indexArray, i);
            }
          }
        }
        this._subDivided$1 = true;
      }
      return true;
    },
    _getMappedVertex: function(vert) {
      var vertOut = new PositionTexture();
      var latLng = Coordinates.cartesianToSpherical2(vert.position);
      if (latLng.get_lng() < -180) {
        latLng.set_lng(latLng.get_lng() + 360);
      }
      if (latLng.get_lng() > 180) {
        latLng.set_lng(latLng.get_lng() - 360);
      }
      if (this.level > 1) {
        var arrayX = ss.truncate((vert.tu * 16 + 0.5));
        var arrayY = ss.truncate((vert.tv * 16 + 0.5));
        this.demArray[arrayX + arrayY * 17] = this.demData[this.demIndex];
        if (this.backslash) {
          if (this._tempBackslashYIndex$1 != null) {
            this._tempBackslashXIndex$1[this.demIndex] = arrayX;
            this._tempBackslashYIndex$1[this.demIndex] = arrayY;
          }
        }
        else {
          if (this._tempSlashYIndex$1 != null) {
            this._tempSlashXIndex$1[this.demIndex] = arrayX;
            this._tempSlashYIndex$1[this.demIndex] = arrayY;
          }
        }
      }
      var pos = this.geoTo3dWithAlt(latLng.get_lat(), latLng.get_lng(), false, false);
      vertOut.tu = vert.tu;
      vertOut.tv = vert.tv;
      pos.subtract(this.localCenter);
      vertOut.position = pos;
      return vertOut;
    },
    cleanUp: function(removeFromParent) {
      Tile.prototype.cleanUp.call(this, removeFromParent);
      if (this._vertexList$1 != null) {
        this._vertexList$1 = null;
      }
      if (this._childTriangleList$1 != null) {
        this._childTriangleList$1 = null;
      }
      this._subDivided$1 = false;
      this.demArray = null;
    },
    _getDemSample$1: function(xc, yc) {
      return this.demArray[(16 - yc) * 17 + xc];
    },
    createDemFromParent: function() {
      var parent = ss.safeCast(this.parent, ToastTile);
      if (parent == null) {
        return false;
      }
      var offsetX = (((this.tileX % 2) === 1) ? 8 : 0);
      var offsetY = ((!(this.tileY % 2)) ? 8 : 0);
      this.demArray = new Array(17 * 17);
      for (var yy1 = 0; yy1 < 17; yy1 += 2) {
        var copy = true;
        for (var xx1 = 0; xx1 < 17; xx1++) {
          if (copy) {
            this.demArray[(16 - yy1) * 17 + xx1] = parent._getDemSample$1((xx1 / 2) + offsetX, (yy1 / 2) + offsetY);
          }
          else {
            this.demArray[(16 - yy1) * 17 + xx1] = ((parent._getDemSample$1((xx1 / 2) + offsetX, (yy1 / 2) + offsetY) + parent._getDemSample$1(((xx1 / 2) + offsetX) + 1, (yy1 / 2) + offsetY)) / 2);
          }
          copy = !copy;
        }
      }
      for (var yy2 = 1; yy2 < 17; yy2 += 2) {
        for (var xx2 = 0; xx2 < 17; xx2++) {
          this.demArray[(16 - yy2) * 17 + xx2] = ((this._getDemSample$1(xx2, yy2 - 1) + this._getDemSample$1(xx2, yy2 + 1)) / 2);
        }
      }
      this.demData = new Array(this.demSize);
      for (var i = 0; i < this.demSize; i++) {
        if (this.backslash) {
          this.demData[i] = this.demArray[ToastTile._backslashXIndex$1[i] + ToastTile._backslashYIndex$1[i] * 17];
        }
        else {
          this.demData[i] = this.demArray[ToastTile._slashXIndex$1[i] + ToastTile._slashYIndex$1[i] * 17];
        }
        this.demAverage += this.demData[i];
      }
      this.demAverage /= this.demData.length;
      this.demReady = true;
      return true;
    }
  };


  // wwtlib.BitmapOverlay

  function BitmapOverlay() {
    this._textureReady$1 = false;
    this._sprite$1 = new Sprite2d();
    Overlay.call(this);
  }
  BitmapOverlay.create = function(owner, file) {
    var temp = new BitmapOverlay();
    temp.set_owner(owner);
    temp._filename$1 = file.name;
    temp.set_name(owner.getNextDefaultName('Image'));
    temp.set_x(0);
    temp.set_y(0);
    owner.get_owner().addCachedFile(file.name, file);
    return temp;
  };
  var BitmapOverlay$ = {
    getTypeName: function() {
      return 'TerraViewer.BitmapOverlay';
    },
    copy: function(owner) {
      var newBmpOverlay = new BitmapOverlay();
      newBmpOverlay.set_owner(owner);
      newBmpOverlay._filename$1 = this._filename$1;
      newBmpOverlay.set_x(this.get_x());
      newBmpOverlay.set_y(this.get_y());
      newBmpOverlay.set_width(this.get_width());
      newBmpOverlay.set_height(this.get_height());
      newBmpOverlay.set_color(this.get_color());
      newBmpOverlay.set_opacity(this.get_opacity());
      newBmpOverlay.set_rotationAngle(this.get_rotationAngle());
      newBmpOverlay.set_name(this.get_name() + ' - Copy');
      return newBmpOverlay;
    },
    cleanUp: function() {
      this.texture = null;
      if (this.texture2d != null) {
        this.texture2d.cleanUp();
        this.texture2d = null;
      }
    },
    initializeTexture: function() {
      var $this = this;

      try {
        if (RenderContext.useGl) {
          this.texture2d = this.get_owner().get_owner().getCachedTexture2d(this._filename$1);
          this._textureReady$1 = true;
        }
        else {
          this.texture = this.get_owner().get_owner().getCachedTexture(this._filename$1, function() {
            $this._textureReady$1 = true;
          });
        }
      }
      catch ($e1) {
      }
    },
    draw3D: function(renderContext, designTime) {
      if (RenderContext.useGl) {
        if (this.texture2d == null) {
          this.initializeTexture();
        }
        if (!this.get_width() && !this.get_height()) {
          this.set_width(this.texture2d.imageElement.width);
          this.set_height(this.texture2d.imageElement.height);
        }
        this.initiaizeGeometry();
        this.updateRotation();
        this._sprite$1.draw(renderContext, this.points, this.points.length, this.texture2d, true, 1);
      }
      else {
        if (this.texture == null) {
          this.initializeTexture();
        }
        if (!this._textureReady$1) {
          return;
        }
        if (!this.get_width() && !this.get_height()) {
          this.set_width(this.texture.width);
          this.set_height(this.texture.height);
        }
        var ctx = renderContext.device;
        ctx.save();
        ctx.translate(this.get_x(), this.get_y());
        ctx.rotate(this.get_rotationAngle() * Overlay.RC);
        ctx.globalAlpha = this.get_opacity();
        ctx.drawImage(this.texture, -this.get_width() / 2, -this.get_height() / 2, this.get_width(), this.get_height());
        ctx.restore();
      }
    },
    addFilesToCabinet: function(fc) {
      fc.addFile(this.get_owner().get_owner().get_workingDirectory() + this._filename$1, this.get_owner().get_owner().getFileBlob(this._filename$1));
    },
    writeOverlayProperties: function(xmlWriter) {
      xmlWriter._writeStartElement('Bitmap');
      xmlWriter._writeAttributeString('Filename', this._filename$1);
      xmlWriter._writeEndElement();
    },
    initializeFromXml: function(node) {
      var bitmap = Util.selectSingleNode(node, 'Bitmap');
      this._filename$1 = bitmap.attributes.getNamedItem('Filename').nodeValue;
    }
  };


  // wwtlib.TextOverlay

  function TextOverlay() {
    this._sprite$1 = new Sprite2d();
    this._ctx$1 = null;
    this._ce$1 = null;
    Overlay.call(this);
  }
  TextOverlay.create = function(textObject) {
    var to = new TextOverlay();
    to.textObject = textObject;
    to._calculateTextSize$1();
    return to;
  };
  var TextOverlay$ = {
    getTypeName: function() {
      return 'TerraViewer.TextOverlay';
    },
    get_color: function() {
      return Overlay.prototype.get_color.call(this);
    },
    set_color: function(value) {
      if (this.textObject.foregroundColor !== value) {
        this.textObject.foregroundColor = value;
        Overlay.prototype.set_color.call(this, value);
        this.cleanUp();
      }
      return value;
    },
    draw3D: function(renderContext, designTime) {
      if (RenderContext.useGl) {
        this.initializeTexture();
        this.initiaizeGeometry();
        this.updateRotation();
        this._sprite$1.draw(renderContext, this.points, this.points.length, this.texture2d, true, 1);
      }
      else {
        var ctx = renderContext.device;
        ctx.save();
        ctx.translate(this.get_x(), this.get_y());
        ctx.rotate(this.get_rotationAngle() * Overlay.RC);
        ctx.globalAlpha = this.get_opacity();
        this._drawCanvasText$1(ctx);
        ctx.restore();
      }
    },
    _drawCanvasText$1: function(ctx) {
      ctx.fillStyle = this.textObject.foregroundColor.toString();
      ctx.font = ((this.textObject.italic) ? 'italic' : 'normal') + ' ' + ((this.textObject.bold) ? 'bold' : 'normal') + ' ' + Math.round(this.textObject.fontSize * 1.2).toString() + 'px ' + this.textObject.fontName;
      ctx.textBaseline = 'top';
      var text = this.textObject.text;
      if (text.indexOf('{$') > -1) {
        if (text.indexOf('{$DATE}') > -1) {
          var date = ss.format('{0:yyyy/MM/dd}', SpaceTimeController.get_now());
          text = ss.replaceString(text, '{$DATE}', date);
        }
        if (text.indexOf('{$TIME}') > -1) {
          var time = ss.format('{0:HH:mm:ss}', SpaceTimeController.get_now());
          text = ss.replaceString(text, '{$TIME}', time);
        }
        text = ss.replaceString(text, '{$DIST}', UiTools.formatDistance(WWTControl.singleton.renderContext.get_solarSystemCameraDistance()));
        text = ss.replaceString(text, '{$LAT}', Coordinates.formatDMS(WWTControl.singleton.renderContext.viewCamera.lat));
        text = ss.replaceString(text, '{$LNG}', Coordinates.formatDMS(WWTControl.singleton.renderContext.viewCamera.lat));
        text = ss.replaceString(text, '{$RA}', Coordinates.formatDMS(WWTControl.singleton.renderContext.viewCamera.get_RA()));
        text = ss.replaceString(text, '{$DEC}', Coordinates.formatDMS(WWTControl.singleton.renderContext.viewCamera.get_dec()));
        text = ss.replaceString(text, '{$FOV}', Coordinates.formatDMS(WWTControl.singleton.renderContext.get_fovAngle()));
      }
      var lines = text.split('\n');
      var baseline = -(this.get_height() / 2);
      var lineSpace = this.textObject.fontSize * 1.7;
      var $enum1 = ss.enumerate(lines);
      while ($enum1.moveNext()) {
        var line = $enum1.current;
        var parts = Util.getWrappedText(ctx, line, this.get_width());
        var $enum2 = ss.enumerate(parts);
        while ($enum2.moveNext()) {
          var part = $enum2.current;
          ctx.fillText(part, -this.get_width() / 2, baseline);
          baseline += lineSpace;
        }
      }
    },
    _calculateTextSize$1: function() {
      if (this._ctx$1 == null || this._ce$1 == null) {
        this._ce$1 = document.createElement('canvas');
        this._ce$1.height = 100;
        this._ce$1.width = 100;
        this._ctx$1 = this._ce$1.getContext('2d');
      }
      this._ctx$1.fillStyle = this.textObject.foregroundColor.toString();
      this._ctx$1.font = ((this.textObject.italic) ? 'italic' : 'normal') + ' ' + ((this.textObject.bold) ? 'bold' : 'normal') + ' ' + Math.round(this.textObject.fontSize * 1.2).toString() + 'px ' + this.textObject.fontName;
      this._ctx$1.textBaseline = 'top';
      var text = this.textObject.text;
      if (text.indexOf('{$') > -1) {
        if (text.indexOf('{$DATE}') > -1) {
          var date = ss.format('{0:yyyy/MM/dd}', SpaceTimeController.get_now());
          text = ss.replaceString(text, '{$DATE}', date);
        }
        if (text.indexOf('{$TIME}') > -1) {
          var time = ss.format('{0:HH:mm:ss}', SpaceTimeController.get_now());
          text = ss.replaceString(text, '{$TIME}', time);
        }
        text = ss.replaceString(text, '{$DIST}', UiTools.formatDistance(WWTControl.singleton.renderContext.get_solarSystemCameraDistance()));
        text = ss.replaceString(text, '{$LAT}', Coordinates.formatDMS(WWTControl.singleton.renderContext.viewCamera.lat));
        text = ss.replaceString(text, '{$LNG}', Coordinates.formatDMS(WWTControl.singleton.renderContext.viewCamera.lat));
        text = ss.replaceString(text, '{$RA}', Coordinates.formatDMS(WWTControl.singleton.renderContext.viewCamera.get_RA()));
        text = ss.replaceString(text, '{$DEC}', Coordinates.formatDMS(WWTControl.singleton.renderContext.viewCamera.get_dec()));
        text = ss.replaceString(text, '{$FOV}', Coordinates.formatDMS(WWTControl.singleton.renderContext.get_fovAngle()));
      }
      var lines = text.split('\n');
      var baseline = 0;
      var lineSpace = this.textObject.fontSize * 1.7;
      var maxWidth = 0;
      var $enum1 = ss.enumerate(lines);
      while ($enum1.moveNext()) {
        var line = $enum1.current;
        var width = this._ctx$1.measureText(line).width;
        maxWidth = Math.max(width, maxWidth);
        baseline += lineSpace;
      }
      this.set_width(maxWidth * 1.01);
      this.set_height(baseline);
      this._ce$1 = null;
      this._ctx$1 = null;
    },
    initializeTexture: function() {
      if (this.texture2d == null || (this.textObject.text.indexOf('{$') > -1)) {
        if (!this.get_height() || !this.get_width()) {
          this._calculateTextSize$1();
        }
        if (this._ctx$1 == null || this._ce$1 == null) {
          this._ce$1 = document.createElement('canvas');
          this._ce$1.height = ss.truncate(this.get_height());
          this._ce$1.width = ss.truncate(this.get_width());
          this._ctx$1 = this._ce$1.getContext('2d');
        }
        this._ctx$1.translate(this.get_width() / 2, this.get_height() / 2);
        this._ctx$1.clearRect(0, 0, this.get_width(), this.get_height());
        this._drawCanvasText$1(this._ctx$1);
        this.texture2d = new Texture();
        this.texture2d.imageElement = this._ce$1;
        this.texture2d.makeTexture();
        this._ce$1 = null;
        this._ctx$1 = null;
      }
    },
    writeOverlayProperties: function(xmlWriter) {
      xmlWriter._writeStartElement('Text');
      this.textObject._saveToXml(xmlWriter);
      xmlWriter._writeEndElement();
    },
    initializeFromXml: function(node) {
      var text = Util.selectSingleNode(node, 'Text');
      this.textObject = TextObject._fromXml(Util.selectSingleNode(text, 'TextObject'));
    },
    initiaizeGeometry: function() {
      if (RenderContext.useGl) {
        Overlay.prototype.initiaizeGeometry.call(this);
      }
    }
  };


  // wwtlib.ShapeOverlay

  function ShapeOverlay() {
    this._shapeType$1 = 1;
    this._sprite$1 = new Sprite2d();
    this._triangleStrip$1 = true;
    Overlay.call(this);
  }
  ShapeOverlay._create = function(currentTourStop, shapeType) {
    var overlay = new ShapeOverlay();
    overlay._shapeType$1 = shapeType;
    overlay.set_owner(currentTourStop);
    return overlay;
  };
  var ShapeOverlay$ = {
    getTypeName: function() {
      return 'TerraViewer.ShapeOverlay';
    },
    get_shapeType: function() {
      return this._shapeType$1;
    },
    set_shapeType: function(value) {
      this._shapeType$1 = value;
      this.cleanUpGeometry();
      return value;
    },
    draw3D: function(renderContext, designTime) {
      if (RenderContext.useGl) {
        this.initiaizeGeometry();
        this._sprite$1.draw(renderContext, this.points, this.points.length, null, this._triangleStrip$1, this.get_opacity());
      }
      else {
        switch (this._shapeType$1) {
          case 0:
            this._drawCircleGeometry$1(renderContext);
            break;
          case 1:
            this._drawRectGeometry$1(renderContext);
            break;
          case 6:
            this._drawOpenRectGeometry$1(renderContext);
            break;
          case 2:
            this._drawStarGeometry$1(renderContext);
            break;
          case 3:
            this._drawDonutGeometry$1(renderContext);
            break;
          case 4:
            this._drawArrowGeometry$1(renderContext);
            break;
          case 5:
            this._drawLineGeometry$1(renderContext);
            break;
          default:
            break;
        }
      }
    },
    initiaizeGeometry: function() {
      if (this.points == null) {
        switch (this._shapeType$1) {
          case 0:
            this._createCircleGeometry$1();
            break;
          case 1:
            Overlay.prototype.initiaizeGeometry.call(this);
            break;
          case 6:
            this._createOpenRectGeometry$1();
            break;
          case 2:
            this._createStarGeometry$1();
            break;
          case 3:
            this._createDonutGeometry$1();
            break;
          case 4:
            this._createArrowGeometry$1();
            break;
          case 5:
            this._createLineGeometry$1();
            break;
          default:
            break;
        }
      }
    },
    _createLineGeometry$1: function() {
      var centerX = this.get_x();
      var centerY = this.get_y();
      var radius = this.get_width() / 2;
      var length = this.get_width();
      var segments = ss.truncate((length / 12)) + 1;
      var radiansPerSegment = (Math.PI * 2) / segments;
      if (this.points == null) {
        this.points = new Array(segments * 2 + 2);
      }
      for (var j = 0; j <= segments; j++) {
        var i = j * 2;
        this.points[i] = new PositionColoredTextured();
        this.points[i].position = this.makePosition(this.get_x(), this.get_y(), ((j / segments) * this.get_width() - (this.get_width() / 2)), 6, this.get_rotationAngle());
        this.points[i].tu = (j % 2);
        this.points[i].tv = 0;
        this.points[i].color = this.get_color();
        this.points[i + 1] = new PositionColoredTextured();
        this.points[i + 1].position = this.makePosition(this.get_x(), this.get_y(), ((j / segments) * this.get_width() - (this.get_width() / 2)), -6, this.get_rotationAngle());
        this.points[i + 1].tu = (j % 2);
        this.points[i + 1].tv = 1;
        this.points[i + 1].color = this.get_color();
      }
    },
    _createOpenRectGeometry$1: function() {
      var centerX = this.get_x();
      var centerY = this.get_y();
      var radius = this.get_width() / 2;
      var length = this.get_width();
      var segments = ss.truncate((length / 12)) + 1;
      var segmentsHigh = ss.truncate((this.get_height() / 12)) + 1;
      var totalPoints = (((segments + 1) * 2) + ((segmentsHigh + 1) * 2)) * 2;
      if (this.points == null) {
        this.points = new Array(totalPoints);
      }
      for (var j = 0; j <= segments; j++) {
        var i = j * 2;
        this.points[i] = new PositionColoredTextured();
        this.points[i].position = this.makePosition(centerX, centerY, (j / segments) * this.get_width() - (this.get_width() / 2), (this.get_height() / 2), this.get_rotationAngle());
        this.points[i].tu = (j % 2);
        this.points[i].tv = 0;
        this.points[i].color = this.get_color();
        this.points[i + 1] = new PositionColoredTextured();
        this.points[i + 1].position = this.makePosition(centerX, centerY, (j / segments) * this.get_width() - (this.get_width() / 2), ((this.get_height() / 2) - 12), this.get_rotationAngle());
        this.points[i + 1].tu = (j % 2);
        this.points[i + 1].tv = 1;
        this.points[i + 1].color = this.get_color();
        var k = (((segments + 1) * 4) + ((segmentsHigh + 1) * 2) - 2) - i;
        this.points[k] = new PositionColoredTextured();
        this.points[k].position = this.makePosition(centerX, centerY, (j / segments) * this.get_width() - (this.get_width() / 2), (-(this.get_height() / 2)) + 12, this.get_rotationAngle());
        this.points[k].tu = (j % 2);
        this.points[k].tv = 0;
        this.points[k].color = this.get_color();
        this.points[k + 1] = new PositionColoredTextured();
        this.points[k + 1].position = this.makePosition(centerX, centerY, (j / segments) * this.get_width() - (this.get_width() / 2), (-(this.get_height() / 2)), this.get_rotationAngle());
        this.points[k + 1].tu = (j % 2);
        this.points[k + 1].tv = 1;
        this.points[k + 1].color = this.get_color();
      }
      var offset = ((segments + 1) * 2);
      for (var j = 0; j <= segmentsHigh; j++) {
        var top = ((segmentsHigh + 1) * 2) + offset - 2;
        var i = j * 2;
        this.points[top - i] = new PositionColoredTextured();
        this.points[top - i].position = this.makePosition(centerX, centerY, (this.get_width() / 2), ((j / segmentsHigh) * this.get_height() - (this.get_height() / 2)), this.get_rotationAngle());
        this.points[top - i].tu = (j % 2);
        this.points[top - i].tv = 0;
        this.points[top - i].color = this.get_color();
        this.points[top - i + 1] = new PositionColoredTextured();
        this.points[top - i + 1].position = this.makePosition(centerX, centerY, ((this.get_width() / 2) - 12), ((j / segmentsHigh) * this.get_height() - (this.get_height() / 2)), this.get_rotationAngle());
        this.points[top - i + 1].tu = (j % 2);
        this.points[top - i + 1].tv = 1;
        this.points[top - i + 1].color = this.get_color();
        var k = i + ((segments + 1) * 4) + ((segmentsHigh + 1) * 2);
        this.points[k] = new PositionColoredTextured();
        this.points[k].position = this.makePosition(centerX, centerY, (-(this.get_width() / 2) + 12), ((j / segmentsHigh) * this.get_height() - (this.get_height() / 2)), this.get_rotationAngle());
        this.points[k].tu = (j % 2);
        this.points[k].tv = 0;
        this.points[k].color = this.get_color();
        this.points[k + 1] = new PositionColoredTextured();
        this.points[k + 1].position = this.makePosition(centerX, centerY, (-(this.get_width() / 2)), ((j / segmentsHigh) * this.get_height() - (this.get_height() / 2)), this.get_rotationAngle());
        this.points[k + 1].tu = (j % 2);
        this.points[k + 1].tv = 1;
        this.points[k + 1].color = this.get_color();
      }
    },
    _createStarGeometry$1: function() {
      var centerX = this.get_x();
      var centerY = this.get_y();
      var radius = this.get_width() / 2;
      var radiansPerSegment = (Math.PI * 2) / 5;
      if (this.points == null) {
        this.points = new Array(12);
      }
      if (this._pnts$1 == null) {
        this._pnts$1 = new Array(10);
      }
      for (var i = 0; i < 5; i++) {
        var rads = i * radiansPerSegment - (Math.PI / 2);
        this._pnts$1[i] = new PositionColoredTextured();
        this._pnts$1[i].position = this.makePosition(centerX, centerY, (Math.cos(rads) * (this.get_width() / 2)), (Math.sin(rads) * (this.get_height() / 2)), this.get_rotationAngle());
        this._pnts$1[i].tu = 0;
        this._pnts$1[i].tv = 0;
        this._pnts$1[i].color = this.get_color();
      }
      for (var i = 5; i < 10; i++) {
        var rads = i * radiansPerSegment + (radiansPerSegment / 2) - (Math.PI / 2);
        this._pnts$1[i] = new PositionColoredTextured();
        this._pnts$1[i].position = this.makePosition(centerX, centerY, (Math.cos(rads) * (this.get_width() / 5.3)), (Math.sin(rads) * (this.get_height() / 5.3)), this.get_rotationAngle());
        this._pnts$1[i].tu = 0;
        this._pnts$1[i].tv = 0;
        this._pnts$1[i].color = this.get_color();
      }
      this.points[0] = this._pnts$1[0];
      this.points[1] = this._pnts$1[5];
      this.points[2] = this._pnts$1[9];
      this.points[3] = this._pnts$1[1];
      this.points[4] = this._pnts$1[7];
      this.points[5] = this._pnts$1[4];
      this.points[6] = this._pnts$1[6];
      this.points[7] = this._pnts$1[2];
      this.points[8] = this._pnts$1[7];
      this.points[9] = this._pnts$1[7];
      this.points[10] = this._pnts$1[3];
      this.points[11] = this._pnts$1[8];
      this._triangleStrip$1 = false;
    },
    _createArrowGeometry$1: function() {
      if (this.points == null) {
        this.points = new Array(9);
      }
      this.points[0] = new PositionColoredTextured();
      this.points[0].position = this.makePosition(this.get_x(), this.get_y(), -this.get_width() / 2, -this.get_height() / 4, this.get_rotationAngle());
      this.points[0].tu = 0;
      this.points[0].tv = 0;
      this.points[0].color = this.get_color();
      this.points[1] = new PositionColoredTextured();
      this.points[1].position = this.makePosition(this.get_x(), this.get_y(), this.get_width() / 4, -this.get_height() / 4, this.get_rotationAngle());
      this.points[1].tu = 1;
      this.points[1].tv = 0;
      this.points[1].color = this.get_color();
      this.points[2] = new PositionColoredTextured();
      this.points[2].position = this.makePosition(this.get_x(), this.get_y(), -this.get_width() / 2, this.get_height() / 4, this.get_rotationAngle());
      this.points[2].tu = 0;
      this.points[2].tv = 1;
      this.points[2].color = this.get_color();
      this.points[3] = new PositionColoredTextured();
      this.points[3].position = this.makePosition(this.get_x(), this.get_y(), this.get_width() / 4, -this.get_height() / 4, this.get_rotationAngle());
      this.points[3].tu = 1;
      this.points[3].tv = 0;
      this.points[3].color = this.get_color();
      this.points[4] = new PositionColoredTextured();
      this.points[4].position = this.makePosition(this.get_x(), this.get_y(), -this.get_width() / 2, this.get_height() / 4, this.get_rotationAngle());
      this.points[4].tu = 0;
      this.points[4].tv = 1;
      this.points[4].color = this.get_color();
      this.points[5] = new PositionColoredTextured();
      this.points[5].position = this.makePosition(this.get_x(), this.get_y(), this.get_width() / 4, this.get_height() / 4, this.get_rotationAngle());
      this.points[5].tu = 1;
      this.points[5].tv = 1;
      this.points[5].color = this.get_color();
      this.points[6] = new PositionColoredTextured();
      this.points[6].position = this.makePosition(this.get_x(), this.get_y(), this.get_width() / 4, -this.get_height() / 2, this.get_rotationAngle());
      this.points[6].tu = 1;
      this.points[6].tv = 1;
      this.points[6].color = this.get_color();
      this.points[7] = new PositionColoredTextured();
      this.points[7].position = this.makePosition(this.get_x(), this.get_y(), this.get_width() / 2, 0, this.get_rotationAngle());
      this.points[7].tu = 1;
      this.points[7].tv = 0.5;
      this.points[7].color = this.get_color();
      this.points[8] = new PositionColoredTextured();
      this.points[8].position = this.makePosition(this.get_x(), this.get_y(), this.get_width() / 4, this.get_height() / 2, this.get_rotationAngle());
      this.points[8].tu = 1;
      this.points[8].tv = 1;
      this.points[8].color = this.get_color();
      this._triangleStrip$1 = false;
    },
    _createDonutGeometry$1: function() {
      var centerX = this.get_x();
      var centerY = this.get_y();
      var radius = this.get_width() / 2;
      var circumference = Math.PI * 2 * radius;
      var segments = ss.truncate((circumference / 12)) + 1;
      var radiansPerSegment = (Math.PI * 2) / segments;
      if (this.points == null) {
        this.points = new Array(segments * 2 + 2);
      }
      for (var j = 0; j <= segments; j++) {
        var i = j * 2;
        this.points[i] = new PositionColoredTextured();
        this.points[i].position = this.makePosition(centerX, centerY, (Math.cos(j * radiansPerSegment) * (this.get_width() / 2)), (Math.sin(j * radiansPerSegment) * (this.get_height() / 2)), this.get_rotationAngle());
        this.points[i].tu = (j % 2);
        this.points[i].tv = 0;
        this.points[i].color = this.get_color();
        this.points[i + 1] = new PositionColoredTextured();
        this.points[i + 1].position = this.makePosition(centerX, centerY, (Math.cos(j * radiansPerSegment) * ((this.get_width() / 2) - 10)), (Math.sin(j * radiansPerSegment) * ((this.get_height() / 2) - 10)), this.get_rotationAngle());
        this.points[i + 1].tu = (j % 2);
        this.points[i + 1].tv = 1;
        this.points[i + 1].color = this.get_color();
      }
    },
    _createCircleGeometry$1: function() {
      var centerX = this.get_x();
      var centerY = this.get_y();
      var radius = this.get_width() / 2;
      var circumference = Math.PI * 2 * radius;
      var segments = ss.truncate((circumference / 12)) + 1;
      var radiansPerSegment = (Math.PI * 2) / segments;
      if (this.points == null) {
        this.points = new Array(segments * 2 + 2);
      }
      for (var j = 0; j <= segments; j++) {
        var i = j * 2;
        this.points[i] = new PositionColoredTextured();
        this.points[i].position = this.makePosition(centerX, centerY, (Math.cos(j * radiansPerSegment) * (this.get_width() / 2)), (Math.sin(j * radiansPerSegment) * (this.get_height() / 2)), this.get_rotationAngle());
        this.points[i].tu = (j % 2);
        this.points[i].tv = 0;
        this.points[i].color = this.get_color();
        this.points[i + 1] = new PositionColoredTextured();
        this.points[i + 1].position = this.makePosition(centerX, centerY, 0, 0, this.get_rotationAngle());
        this.points[i + 1].tu = (j % 2);
        this.points[i + 1].tv = 1;
        this.points[i + 1].color = this.get_color();
      }
    },
    initializeTexture: function() {
      switch (this.get_shapeType()) {
        case 5:
        case 3:
        case 6:
          break;
        case 0:
        case 1:
        case 2:
        case 4:
        default:
          this.texture = null;
          break;
      }
    },
    _drawLineGeometry$1: function(renderContext) {
      var ctx = renderContext.device;
      ctx.save();
      var radius = this.get_width() / 2;
      ctx.translate(this.get_x(), this.get_y());
      ctx.rotate(this.get_rotationAngle() * Overlay.RC);
      ctx.moveTo(-radius, 0);
      ctx.lineTo(radius, 0);
      ctx.lineWidth = 9;
      ctx.strokeStyle = this.get_color().toString();
      ctx.globalAlpha = this.get_opacity();
      ctx.stroke();
      ctx.restore();
    },
    _drawOpenRectGeometry$1: function(renderContext) {
      var ctx = renderContext.device;
      ctx.save();
      ctx.translate(this.get_x(), this.get_y());
      ctx.rotate(this.get_rotationAngle() * Overlay.RC);
      ctx.beginPath();
      ctx.moveTo(-this.get_width() / 2, -this.get_height() / 2);
      ctx.lineTo(this.get_width() / 2, -this.get_height() / 2);
      ctx.lineTo(this.get_width() / 2, this.get_height() / 2);
      ctx.lineTo(-this.get_width() / 2, this.get_height() / 2);
      ctx.closePath();
      ctx.lineWidth = 9;
      ctx.strokeStyle = this.get_color().toString();
      ctx.globalAlpha = this.get_opacity();
      ctx.stroke();
      ctx.restore();
    },
    _drawRectGeometry$1: function(renderContext) {
      var ctx = renderContext.device;
      ctx.save();
      ctx.translate(this.get_x(), this.get_y());
      ctx.rotate(this.get_rotationAngle() * Overlay.RC);
      ctx.beginPath();
      ctx.moveTo(-this.get_width() / 2, -this.get_height() / 2);
      ctx.lineTo(this.get_width() / 2, -this.get_height() / 2);
      ctx.lineTo(this.get_width() / 2, this.get_height() / 2);
      ctx.lineTo(-this.get_width() / 2, this.get_height() / 2);
      ctx.closePath();
      ctx.lineWidth = 0;
      ctx.fillStyle = this.get_color().toString();
      ctx.globalAlpha = this.get_opacity();
      ctx.fill();
      ctx.restore();
    },
    _drawStarGeometry$1: function(renderContext) {
      var ctx = renderContext.device;
      ctx.save();
      ctx.translate(this.get_x(), this.get_y());
      ctx.rotate(this.get_rotationAngle() * Overlay.RC);
      ctx.beginPath();
      var centerX = 0;
      var centerY = 0;
      var radius = this.get_width() / 2;
      var radiansPerSegment = (Math.PI * 2) / 5;
      var first = true;
      for (var i = 0; i < 5; i++) {
        var rads = i * radiansPerSegment - (Math.PI / 2);
        if (first) {
          first = false;
          ctx.moveTo(centerX + Math.cos(rads) * (this.get_width() / 2), centerY + Math.sin(rads) * (this.get_height() / 2));
        }
        else {
          ctx.lineTo(centerX + Math.cos(rads) * (this.get_width() / 2), centerY + Math.sin(rads) * (this.get_height() / 2));
        }
        var rads2 = i * radiansPerSegment + (radiansPerSegment / 2) - (Math.PI / 2);
        ctx.lineTo(centerX + Math.cos(rads2) * (this.get_width() / 5.3), centerY + Math.sin(rads2) * (this.get_height() / 5.3));
      }
      ctx.closePath();
      ctx.lineWidth = 0;
      ctx.fillStyle = this.get_color().toString();
      ctx.globalAlpha = this.get_opacity();
      ctx.fill();
      ctx.restore();
    },
    _drawArrowGeometry$1: function(renderContext) {
      var ctx = renderContext.device;
      ctx.save();
      ctx.translate(this.get_x(), this.get_y());
      ctx.rotate(this.get_rotationAngle() * Overlay.RC);
      ctx.beginPath();
      ctx.moveTo((-(this.get_width() / 2)), (-(this.get_height() / 4)));
      ctx.lineTo((this.get_width() / 4), (-(this.get_height() / 4)));
      ctx.lineTo((this.get_width() / 4), (-(this.get_height() / 2)));
      ctx.lineTo((this.get_width() / 2), 0);
      ctx.lineTo((this.get_width() / 4), (this.get_height() / 2));
      ctx.lineTo((this.get_width() / 4), (this.get_height() / 4));
      ctx.lineTo((-(this.get_width() / 2)), (this.get_height() / 4));
      ctx.closePath();
      ctx.lineWidth = 0;
      ctx.fillStyle = this.get_color().toString();
      ctx.globalAlpha = this.get_opacity();
      ctx.fill();
      ctx.restore();
    },
    _drawDonutGeometry$1: function(renderContext) {
      var ctx = renderContext.device;
      ctx.save();
      ctx.translate(this.get_x(), this.get_y());
      ctx.scale(1, this.get_height() / this.get_width());
      ctx.rotate(this.get_rotationAngle() * Overlay.RC);
      ctx.beginPath();
      ctx.arc(0, 0, this.get_width() / 2, 0, Math.PI * 2, false);
      ctx.closePath();
      ctx.lineWidth = 9;
      ctx.strokeStyle = this.get_color().toString();
      ctx.globalAlpha = this.get_opacity();
      ctx.stroke();
      ctx.restore();
    },
    _drawCircleGeometry$1: function(renderContext) {
      var ctx = renderContext.device;
      ctx.save();
      ctx.scale(1, this.get_width() / this.get_height());
      ctx.translate(this.get_x(), this.get_y());
      ctx.rotate(this.get_rotationAngle() * Overlay.RC);
      ctx.beginPath();
      ctx.arc(0, 0, this.get_width(), 0, Math.PI * 2, false);
      ctx.closePath();
      ctx.lineWidth = 0;
      ctx.fillStyle = this.get_color().toString();
      ctx.globalAlpha = this.get_opacity();
      ctx.fill();
      ctx.restore();
    },
    cleanUpGeometry: function() {
      Overlay.prototype.cleanUpGeometry.call(this);
      this.cleanUp();
    },
    writeOverlayProperties: function(xmlWriter) {
      xmlWriter._writeStartElement('Shape');
      xmlWriter._writeAttributeString('ShapeType', Enums.toXml('ShapeType', this._shapeType$1));
      xmlWriter._writeEndElement();
    },
    initializeFromXml: function(node) {
      var shape = Util.selectSingleNode(node, 'Shape');
      this._shapeType$1 = Enums.parse('ShapeType', shape.attributes.getNamedItem('ShapeType').nodeValue);
    }
  };


  // wwtlib.AudioOverlay

  function AudioOverlay() {
    this._audio$1 = null;
    this._volume$1 = 100;
    this._mute$1 = false;
    this._position$1 = 0;
    this._audioReady$1 = false;
    this._trackType$1 = 0;
    Overlay.call(this);
    this.isDesignTimeOnly = true;
  }
  AudioOverlay.create = function(currentTourStop, file) {
    var ao = new AudioOverlay();
    ao.set_owner(currentTourStop);
    ao._filename$1 = file.name;
    ao.get_owner().get_owner().addCachedFile(file.name, file);
    return ao;
  };
  var AudioOverlay$ = {
    getTypeName: function() {
      return 'TerraViewer.AudioOverlay';
    },
    get_mute: function() {
      return this._mute$1;
    },
    set_mute: function(value) {
      this._mute$1 = value;
      this.set_volume(this.get_volume());
      return value;
    },
    get_volume: function() {
      return this._volume$1;
    },
    set_volume: function(value) {
      this._volume$1 = value;
      if (this._audio$1 != null) {
        this._audio$1.volume = (this._mute$1) ? 0 : (this._volume$1 / 100);
      }
      return value;
    },
    addFilesToCabinet: function(fc) {
      fc.addFile(this.get_owner().get_owner().get_workingDirectory() + this._filename$1, this.get_owner().get_owner().getFileBlob(this._filename$1));
    },
    play: function() {
      if (this._audio$1 == null) {
        this.initializeTexture();
      }
      if (this._audio$1 != null && this._audioReady$1) {
        this._audio$1.play();
        this.set_volume(this.get_volume());
        this._audio$1.currentTime = this._position$1;
      }
    },
    pause: function() {
      if (this._audio$1 == null) {
        this.initializeTexture();
      }
      if (this._audio$1 != null && this._audioReady$1) {
        this._audio$1.pause();
      }
    },
    stop: function() {
      if (this._audio$1 == null) {
        this.initializeTexture();
      }
      if (this._audio$1 != null && this._audioReady$1) {
        this._audio$1.pause();
      }
    },
    seek: function(time) {
      this._position$1 = time;
      if (this._audio$1 == null) {
        this.initializeTexture();
      }
      if (this._audioReady$1) {
        if (this._audio$1.duration < time) {
          this._audio$1.pause();
        }
        else {
          this._audio$1.currentTime = this._position$1;
        }
      }
    },
    initializeTexture: function() {
      var $this = this;

      if (this._audio$1 == null) {
        this._audio$1 = document.createElement('audio');
        this._audio$1.src = this.get_owner().get_owner().getFileStream(this._filename$1);
        this._audio$1.addEventListener('canplaythrough', function() {
          if (!$this._audioReady$1) {
            $this._audioReady$1 = true;
            $this._audio_MediaOpened$1();
            $this._audio$1.play();
          }
        }, false);
      }
    },
    cleanUp: function() {
      Overlay.prototype.cleanUp.call(this);
      if (this._audio$1 != null) {
        this._audio$1.pause();
        this._audio$1.src = null;
        this._audio$1 = null;
      }
    },
    _audio_MediaOpened$1: function() {
      this._audio$1.currentTime = this._position$1;
      this._audio$1.volume = (this._mute$1) ? 0 : (this._volume$1 / 100);
    },
    get_trackType: function() {
      return this._trackType$1;
    },
    set_trackType: function(value) {
      this._trackType$1 = value;
      return value;
    },
    writeOverlayProperties: function(xmlWriter) {
      xmlWriter._writeStartElement('Audio');
      xmlWriter._writeAttributeString('Filename', this._filename$1);
      xmlWriter._writeAttributeString('Volume', this._volume$1.toString());
      xmlWriter._writeAttributeString('Mute', this._mute$1.toString());
      xmlWriter._writeAttributeString('TrackType', Enums.toXml('AudioType', this._trackType$1));
      xmlWriter._writeEndElement();
    },
    initializeFromXml: function(node) {
      var audio = Util.selectSingleNode(node, 'Audio');
      this._filename$1 = audio.attributes.getNamedItem('Filename').nodeValue;
      if (audio.attributes.getNamedItem('Volume') != null) {
        this._volume$1 = parseInt(audio.attributes.getNamedItem('Volume').nodeValue);
      }
      if (audio.attributes.getNamedItem('Mute') != null) {
        this._mute$1 = ss.boolean(audio.attributes.getNamedItem('Mute').nodeValue);
      }
      if (audio.attributes.getNamedItem('TrackType') != null) {
        this._trackType$1 = Enums.parse('AudioType', audio.attributes.getNamedItem('TrackType').nodeValue);
      }
    }
  };


  // wwtlib.FlipbookOverlay

  function FlipbookOverlay() {
    this._loopType$1 = 1;
    this._startFrame$1 = 0;
    this._framesList$1 = [];
    this._frames$1 = 1;
    this._framesX$1 = 8;
    this._framesY$1 = 8;
    this._textureReady$1 = false;
    this._currentFrame$1 = 0;
    this._cellHeight$1 = 256;
    this._cellWidth$1 = 256;
    this._timeStart$1 = ss.now();
    this._playing$1 = true;
    Overlay.call(this);
  }
  var FlipbookOverlay$ = {
    getTypeName: function() {
      return 'TerraViewer.FlipbookOverlay';
    },
    get_loopType: function() {
      return this._loopType$1;
    },
    set_loopType: function(value) {
      this._loopType$1 = value;
      return value;
    },
    get_startFrame: function() {
      return this._startFrame$1;
    },
    set_startFrame: function(value) {
      this._startFrame$1 = value;
      return value;
    },
    get_frameSequence: function() {
      return this._frameSequence$1;
    },
    set_frameSequence: function(value) {
      if (this._frameSequence$1 !== value) {
        this._frameSequence$1 = value;
        this._framesList$1 = [];
        if (!ss.emptyString(this._frameSequence$1)) {
          try {
            var parts = this._frameSequence$1.split(',');
            var $enum1 = ss.enumerate(parts);
            while ($enum1.moveNext()) {
              var part = $enum1.current;
              var x = parseInt(ss.trim(part));
              this._framesList$1.push(x);
            }
          }
          catch ($e2) {
          }
        }
      }
      return value;
    },
    get_frames: function() {
      return this._frames$1;
    },
    set_frames: function(value) {
      this._frames$1 = value;
      return value;
    },
    get_framesX: function() {
      return this._framesX$1;
    },
    set_framesX: function(value) {
      this._framesX$1 = value;
      return value;
    },
    get_framesY: function() {
      return this._framesY$1;
    },
    set_framesY: function(value) {
      this._framesY$1 = value;
      return value;
    },
    copy: function(owner) {
      var newFlipbookOverlay = new FlipbookOverlay();
      newFlipbookOverlay.set_owner(owner);
      newFlipbookOverlay._filename$1 = this._filename$1;
      newFlipbookOverlay.set_x(this.get_x());
      newFlipbookOverlay.set_y(this.get_y());
      newFlipbookOverlay.set_width(this.get_width());
      newFlipbookOverlay.set_height(this.get_height());
      newFlipbookOverlay.set_color(this.get_color());
      newFlipbookOverlay.set_opacity(this.get_opacity());
      newFlipbookOverlay.set_rotationAngle(this.get_rotationAngle());
      newFlipbookOverlay.set_name(this.get_name() + ' - Copy');
      newFlipbookOverlay.set_startFrame(this.get_startFrame());
      newFlipbookOverlay.set_frames(this.get_frames());
      newFlipbookOverlay.set_loopType(this.get_loopType());
      newFlipbookOverlay.set_frameSequence(this.get_frameSequence());
      newFlipbookOverlay.set_framesX(this.get_framesX());
      newFlipbookOverlay.set_framesY(this.get_framesY());
      return newFlipbookOverlay;
    },
    cleanUp: function() {
      this.texture = null;
    },
    initializeTexture: function() {
      var $this = this;

      try {
        var colorKey = ss.endsWith(this._filename$1.toLowerCase(), '.jpg');
        this.texture = this.get_owner().get_owner().getCachedTexture(this._filename$1, function() {
          $this._textureReady$1 = true;
        });
      }
      catch ($e1) {
      }
    },
    addFilesToCabinet: function(fc) {
      fc.addFile(this.get_owner().get_owner().get_workingDirectory() + this._filename$1, this.get_owner().get_owner().getFileBlob(this._filename$1));
    },
    writeOverlayProperties: function(xmlWriter) {
      xmlWriter._writeStartElement('Flipbook');
      xmlWriter._writeAttributeString('Filename', this._filename$1);
      xmlWriter._writeAttributeString('Frames', this._frames$1.toString());
      xmlWriter._writeAttributeString('Loop', Enums.toXml('LoopTypes', this._loopType$1));
      xmlWriter._writeAttributeString('FramesX', this._framesX$1.toString());
      xmlWriter._writeAttributeString('FramesY', this._framesY$1.toString());
      xmlWriter._writeAttributeString('StartFrame', this._startFrame$1.toString());
      if (!ss.emptyString(this._frameSequence$1)) {
        xmlWriter._writeAttributeString('FrameSequence', this._frameSequence$1);
      }
      xmlWriter._writeEndElement();
    },
    initializeFromXml: function(node) {
      var flipbook = Util.selectSingleNode(node, 'Flipbook');
      this._filename$1 = flipbook.attributes.getNamedItem('Filename').nodeValue;
      this._frames$1 = parseInt(flipbook.attributes.getNamedItem('Frames').nodeValue);
      this._loopType$1 = Enums.parse('LoopTypes', flipbook.attributes.getNamedItem('Loop').nodeValue);
      if (flipbook.attributes.getNamedItem('FramesX') != null) {
        this.set_framesX(parseInt(flipbook.attributes.getNamedItem('FramesX').nodeValue));
      }
      if (flipbook.attributes.getNamedItem('FramesY') != null) {
        this.set_framesY(parseInt(flipbook.attributes.getNamedItem('FramesY').nodeValue));
      }
      if (flipbook.attributes.getNamedItem('StartFrame') != null) {
        this.set_startFrame(parseInt(flipbook.attributes.getNamedItem('StartFrame').nodeValue));
      }
      if (flipbook.attributes.getNamedItem('FrameSequence') != null) {
        this.set_frameSequence(flipbook.attributes.getNamedItem('FrameSequence').nodeValue);
      }
    },
    play: function() {
      this._playing$1 = true;
      this._timeStart$1 = ss.now();
    },
    pause: function() {
      this._playing$1 = false;
    },
    stop: function() {
      this._playing$1 = false;
      this._currentFrame$1 = 0;
    },
    initiaizeGeometry: function() {
      var frameCount = this._frames$1;
      if (!ss.emptyString(this._frameSequence$1)) {
        frameCount = this._framesList$1.length;
      }
      if (this._playing$1) {
        var ts = ss.now() - this._timeStart$1;
        switch (this._loopType$1) {
          case 0:
            this._currentFrame$1 = ss.truncate(((ts / 1000 * 24) % frameCount)) + this._startFrame$1;
            break;
          case 1:
            this._currentFrame$1 = Math.abs(ss.truncate(((ts / 1000 * 24 + frameCount) % (frameCount * 2 - 1))) - (frameCount - 1)) + this._startFrame$1;
            if (this._currentFrame$1 < 0 || this._currentFrame$1 > frameCount - 1) {
              var p = 0;
            }
            break;
          case 2:
            this._currentFrame$1 = Math.max(0, frameCount - ss.truncate(((ts / 1000 * 24) % frameCount))) + this._startFrame$1;
            break;
          case 3:
            var temp = Math.min(ts / 1000 * 24, frameCount * 2 + 1) + frameCount;
            this._currentFrame$1 = Math.abs((temp % (frameCount * 2 - 1)) - (frameCount - 1)) + this._startFrame$1;
            break;
          case 4:
            this._currentFrame$1 = Math.min(frameCount - 1, ss.truncate((ts / 1000 * 24)));
            break;
          case 5:
            this._currentFrame$1 = this._startFrame$1;
            break;
          case 6:
            this._currentFrame$1 = (frameCount - 1) + this._startFrame$1;
            break;
          default:
            this._currentFrame$1 = this._startFrame$1;
            break;
        }
      }
      if (!ss.emptyString(this._frameSequence$1)) {
        if (this._currentFrame$1 < this._framesList$1.length && this._currentFrame$1 > -1) {
          this._currentFrame$1 = this._framesList$1[this._currentFrame$1];
        }
        else {
          this._currentFrame$1 = 0;
        }
      }
      this.currentRotation = 0;
    }
  };


  // wwtlib.ToolStripSeparator

  function ToolStripSeparator() {
    ToolStripMenuItem.call(this);
    this.name = '--------------------------------------';
  }
  var ToolStripSeparator$ = {

  };


  // wwtlib.FrameWizard

  function FrameWizard() {
    Dialog.call(this);
  }
  var FrameWizard$ = {
    OK: function(frame) {
      LayerManager.referenceFrameWizardFinished(frame);
    }
  };


  // wwtlib.ReferenceFrameProps

  function ReferenceFrameProps() {
    Dialog.call(this);
  }
  var ReferenceFrameProps$ = {
    OK: function(frame) {
      LayerManager.loadTree();
    }
  };


  // wwtlib.GreatCircleDialog

  function GreatCircleDialog() {
    Dialog.call(this);
  }
  var GreatCircleDialog$ = {
    OK: function(frame) {
    }
  };


  // wwtlib.DataVizWizard

  function DataVizWizard() {
    Dialog.call(this);
  }
  var DataVizWizard$ = {
    OK: function() {
    }
  };


  // wwtlib.Circle

  function Circle() {
    this._fill$1 = false;
    this._skyRelative$1 = false;
    this._strokeWidth$1 = 1;
    this._radius$1 = 10;
    this._lineColor$1 = Colors.get_white();
    this._fillColor$1 = Colors.get_white();
    this._ra$1 = 0;
    this._dec$1 = 0;
    Annotation.call(this);
  }
  var Circle$ = {
    get_fill: function() {
      return this._fill$1;
    },
    set_fill: function(value) {
      Annotation.batchDirty = true;
      this._fill$1 = value;
      return value;
    },
    get_skyRelative: function() {
      return this._skyRelative$1;
    },
    set_skyRelative: function(value) {
      Annotation.batchDirty = true;
      this._skyRelative$1 = value;
      return value;
    },
    get_lineWidth: function() {
      return this._strokeWidth$1;
    },
    set_lineWidth: function(value) {
      Annotation.batchDirty = true;
      this._strokeWidth$1 = value;
      return value;
    },
    get_radius: function() {
      return this._radius$1;
    },
    set_radius: function(value) {
      Annotation.batchDirty = true;
      this._radius$1 = value;
      return value;
    },
    get_lineColor: function() {
      return this._lineColor$1.toString();
    },
    set_lineColor: function(value) {
      Annotation.batchDirty = true;
      this._lineColor$1 = Color.load(value);
      return value;
    },
    get_fillColor: function() {
      return this._fillColor$1.toString();
    },
    set_fillColor: function(value) {
      Annotation.batchDirty = true;
      this._fillColor$1 = Color.fromName(value);
      return value;
    },
    setCenter: function(ra, dec) {
      Annotation.batchDirty = true;
      this._ra$1 = ra / 15;
      this._dec$1 = dec;
      this.center = Coordinates.raDecTo3d(this._ra$1, this._dec$1);
    },
    draw: function(renderContext) {
      var onScreen = true;
      var rad = this._radius$1;
      if (this._skyRelative$1) {
        rad /= renderContext.get_fovScale() / 3600;
      }
      var screenSpacePnt = renderContext.WVP.transform(this.center);
      if (screenSpacePnt.z < 0) {
        onScreen = false;
      }
      if (Vector3d.dot(renderContext.get_viewPoint(), this.center) < 0.55) {
        onScreen = false;
      }
      if (renderContext.gl != null) {
        if (Annotation.batchDirty || this.annotationDirty) {
          var up = Vector3d.create(0, 1, 0);
          var xNormal = Vector3d.cross(this.center, up);
          var yNormal = Vector3d.cross(this.center, xNormal);
          var r = this._radius$1 / 44;
          var segments = 72;
          var radiansPerSegment = Math.PI * 2 / segments;
          var vertexList = [];
          for (var j = 0; j <= segments; j++) {
            var x = Math.cos(j * radiansPerSegment) * r;
            var y = Math.sin(j * radiansPerSegment) * r;
            vertexList.push(Vector3d.create(this.center.x + x * xNormal.x + y * yNormal.x, this.center.y + x * xNormal.y + y * yNormal.y, this.center.z + x * xNormal.z + y * yNormal.z));
          }
          if (this._strokeWidth$1 > 0 && vertexList.length > 1) {
            for (var i = 0; i < (vertexList.length - 1); i++) {
              Annotation.lineList.addLine(vertexList[i], vertexList[i + 1], this._lineColor$1, new Dates(0, 1));
            }
            Annotation.lineList.addLine(vertexList[vertexList.length - 1], vertexList[0], this._lineColor$1, new Dates(0, 1));
          }
          if (this._fill$1) {
            var indexes = Tessellator.tesselateSimplePoly(vertexList);
            for (var i = 0; i < indexes.length; i += 3) {
              Annotation.triangleList.addSubdividedTriangles(vertexList[indexes[i]], vertexList[indexes[i + 1]], vertexList[indexes[i + 2]], this._fillColor$1, new Dates(0, 1), 2);
            }
          }
          this.annotationDirty = false;
        }
      }
      else {
        if (onScreen) {
          var ctx = renderContext.device;
          ctx.save();
          ctx.globalAlpha = this.get_opacity();
          ctx.beginPath();
          ctx.arc(screenSpacePnt.x, screenSpacePnt.y, rad, 0, Math.PI * 2, true);
          ctx.lineWidth = this._strokeWidth$1;
          ctx.fillStyle = this._fillColor$1.toString();
          if (this._fill$1) {
            ctx.fill();
          }
          ctx.globalAlpha = 1;
          ctx.strokeStyle = this._lineColor$1.toString();
          ctx.stroke();
          ctx.restore();
        }
      }
    },
    hitTest: function(renderContext, RA, dec, x, y) {
      if (ss.emptyString(this.get_id())) {
        return false;
      }
      var rad = this._radius$1;
      if (!this._skyRelative$1) {
        rad *= renderContext.get_fovScale() / 3600;
      }
      return Annotation.separation(RA, dec, this._ra$1, this._dec$1) < rad;
    }
  };


  // wwtlib.Poly

  function Poly() {
    this._points$1 = [];
    this._fill$1 = false;
    this._strokeWidth$1 = 1;
    this._lineColor$1 = Colors.get_white();
    this._fillColor$1 = Colors.get_white();
    Annotation.call(this);
  }
  var Poly$ = {
    addPoint: function(x, y) {
      Annotation.batchDirty = true;
      this._points$1.push(Coordinates.raDecTo3d(x / 15, y));
    },
    get_fill: function() {
      return this._fill$1;
    },
    set_fill: function(value) {
      Annotation.batchDirty = true;
      this._fill$1 = value;
      return value;
    },
    get_lineWidth: function() {
      return this._strokeWidth$1;
    },
    set_lineWidth: function(value) {
      Annotation.batchDirty = true;
      this._strokeWidth$1 = value;
      return value;
    },
    get_lineColor: function() {
      return this._lineColor$1.toString();
    },
    set_lineColor: function(value) {
      Annotation.batchDirty = true;
      this._lineColor$1 = Color.fromName(value);
      return value;
    },
    get_fillColor: function() {
      return this._fillColor$1.toString();
    },
    set_fillColor: function(value) {
      Annotation.batchDirty = true;
      this._fillColor$1 = Color.fromName(value);
      return value;
    },
    draw: function(renderContext) {
      if (renderContext.gl != null) {
        if (Annotation.batchDirty || this.annotationDirty) {
          var vertexList = this._points$1;
          if (this._strokeWidth$1 > 0 && this._points$1.length > 1) {
            for (var i = 0; i < (this._points$1.length - 1); i++) {
              Annotation.lineList.addLine(vertexList[i], vertexList[i + 1], this._lineColor$1, new Dates(0, 1));
            }
            Annotation.lineList.addLine(vertexList[this._points$1.length - 1], vertexList[0], this._lineColor$1, new Dates(0, 1));
          }
          if (this._fill$1) {
            var indexes = Tessellator.tesselateSimplePoly(vertexList);
            for (var i = 0; i < indexes.length; i += 3) {
              Annotation.triangleList.addSubdividedTriangles(vertexList[indexes[i]], vertexList[indexes[i + 1]], vertexList[indexes[i + 2]], this._fillColor$1, new Dates(0, 1), 2);
            }
          }
          this.annotationDirty = false;
        }
      }
      else {
        var ctx = renderContext.device;
        ctx.save();
        ctx.globalAlpha = this.get_opacity();
        ctx.beginPath();
        var first = true;
        var $enum1 = ss.enumerate(this._points$1);
        while ($enum1.moveNext()) {
          var pnt = $enum1.current;
          var screenSpacePnt = renderContext.WVP.transform(pnt);
          if (screenSpacePnt.z < 0) {
            ctx.restore();
            return;
          }
          if (Vector3d.dot(renderContext.get_viewPoint(), pnt) < 0.75) {
            ctx.restore();
            return;
          }
          if (first) {
            first = false;
            ctx.moveTo(screenSpacePnt.x, screenSpacePnt.y);
          }
          else {
            ctx.lineTo(screenSpacePnt.x, screenSpacePnt.y);
          }
        }
        ctx.closePath();
        ctx.lineWidth = this._strokeWidth$1;
        if (this._fill$1) {
          ctx.fillStyle = this._fillColor$1.toString();
          ctx.fill();
        }
        ctx.strokeStyle = this._lineColor$1.toString();
        ctx.globalAlpha = 1;
        ctx.stroke();
        ctx.restore();
      }
    }
  };


  // wwtlib.PolyLine

  function PolyLine() {
    this._points$1 = [];
    this._strokeWidth$1 = 1;
    this._lineColor$1 = Colors.get_white();
    Annotation.call(this);
  }
  var PolyLine$ = {
    addPoint: function(x, y) {
      Annotation.batchDirty = true;
      this._points$1.push(Coordinates.raDecTo3d(x / 15, y));
    },
    get_lineWidth: function() {
      return this._strokeWidth$1;
    },
    set_lineWidth: function(value) {
      Annotation.batchDirty = true;
      this._strokeWidth$1 = value;
      return value;
    },
    get_lineColor: function() {
      return this._lineColor$1.toString();
    },
    set_lineColor: function(value) {
      Annotation.batchDirty = true;
      this._lineColor$1 = Color.fromName(value);
      return value;
    },
    draw: function(renderContext) {
      if (renderContext.gl != null) {
        if (Annotation.batchDirty || this.annotationDirty) {
          var vertexList = this._points$1;
          if (this._strokeWidth$1 > 0) {
            for (var i = 0; i < (this._points$1.length - 1); i++) {
              Annotation.lineList.addLine(vertexList[i], vertexList[i + 1], this._lineColor$1, new Dates(0, 1));
            }
          }
          this.annotationDirty = false;
        }
      }
      else {
        var ctx = renderContext.device;
        ctx.save();
        ctx.globalAlpha = this.get_opacity();
        var first = true;
        var $enum1 = ss.enumerate(this._points$1);
        while ($enum1.moveNext()) {
          var pnt = $enum1.current;
          var screenSpacePnt = renderContext.WVP.transform(pnt);
          if (screenSpacePnt.z < 0) {
            ctx.restore();
            return;
          }
          if (Vector3d.dot(renderContext.get_viewPoint(), pnt) < 0.75) {
            ctx.restore();
            return;
          }
          if (first) {
            first = false;
            ctx.beginPath();
            ctx.moveTo(screenSpacePnt.x, screenSpacePnt.y);
          }
          else {
            ctx.lineTo(screenSpacePnt.x, screenSpacePnt.y);
          }
        }
        ctx.lineWidth = this._strokeWidth$1;
        ctx.strokeStyle = this._lineColor$1.toString();
        ctx.stroke();
        ctx.restore();
      }
    }
  };


  // wwtlib.EquirectangularTile

  function EquirectangularTile() {
    this._tileDegrees$1 = 0;
    this._topDown$1 = true;
    this._subDivisionLevel$1 = 1;
    Tile.call(this);
  }
  EquirectangularTile.create = function(level, x, y, dataset, parent) {
    var temp = new EquirectangularTile();
    temp.parent = parent;
    temp.level = level;
    temp.tileX = x;
    temp.tileY = y;
    temp.dataset = dataset;
    temp._topDown$1 = !dataset.get_bottomsUp();
    temp.computeBoundingSphere();
    return temp;
  };
  var EquirectangularTile$ = {
    computeBoundingSphere: function() {
      if (!this._topDown$1) {
        this.computeBoundingSphereBottomsUp();
        return;
      }
      this._tileDegrees$1 = this.dataset.get_baseTileDegrees() / Math.pow(2, this.level);
      var latMin = (90 - ((this.tileY) * this._tileDegrees$1));
      var latMax = (90 - (((this.tileY + 1)) * this._tileDegrees$1));
      var lngMin = ((this.tileX * this._tileDegrees$1) - 180);
      var lngMax = ((((this.tileX + 1)) * this._tileDegrees$1) - 180);
      var latCenter = (latMin + latMax) / 2;
      var lngCenter = (lngMin + lngMax) / 2;
      this.sphereCenter = this.geoTo3d(latCenter, lngCenter, false);
      this.topLeft = this.geoTo3d(latMin, lngMin, false);
      this.bottomRight = this.geoTo3d(latMax, lngMax, false);
      this.topRight = this.geoTo3d(latMin, lngMax, false);
      this.bottomLeft = this.geoTo3d(latMax, lngMin, false);
      var distVect = this.geoTo3d(latMin, lngMin, false);
      distVect.subtract(this.sphereCenter);
      this.sphereRadius = distVect.length();
      this._tileDegrees$1 = lngMax - lngMin;
    },
    computeBoundingSphereBottomsUp: function() {
      var tileDegrees = this.dataset.get_baseTileDegrees() / (Math.pow(2, this.level));
      var latMin = (-90 + (((this.tileY + 1)) * tileDegrees));
      var latMax = (-90 + ((this.tileY) * tileDegrees));
      var lngMin = ((this.tileX * tileDegrees) - 180);
      var lngMax = ((((this.tileX + 1)) * tileDegrees) - 180);
      var latCenter = (latMin + latMax) / 2;
      var lngCenter = (lngMin + lngMax) / 2;
      this.sphereCenter = this.geoTo3d(latCenter, lngCenter, false);
      this.topLeft = this.geoTo3d(latMin, lngMin, false);
      this.bottomRight = this.geoTo3d(latMax, lngMax, false);
      this.topRight = this.geoTo3d(latMin, lngMax, false);
      this.bottomLeft = this.geoTo3d(latMax, lngMin, false);
      var distVect = this.topLeft;
      distVect.subtract(this.sphereCenter);
      this.sphereRadius = distVect.length();
      tileDegrees = lngMax - lngMin;
    },
    createGeometry: function(renderContext) {
      Tile.prototype.createGeometry.call(this, renderContext);
      if (renderContext.gl == null) {
        if (!this.dataset.get_dataSetType() || this.dataset.get_dataSetType() === 1) {
          this._subDivisionLevel$1 = Math.max(2, (4 - this.level) * 2);
        }
      }
      else {
        this._subDivisionLevel$1 = 32;
      }
      try {
        for (var i = 0; i < 4; i++) {
          this._renderTriangleLists[i] = [];
        }
        if (!this._topDown$1) {
          return this._createGeometryBottomsUp$1(renderContext);
        }
        var lat, lng;
        var index = 0;
        var tileDegrees = this.dataset.get_baseTileDegrees() / Math.pow(2, this.level);
        var latMin = (90 - ((this.tileY) * tileDegrees));
        var latMax = (90 - (((this.tileY + 1)) * tileDegrees));
        var lngMin = ((this.tileX * tileDegrees) - 180);
        var lngMax = ((((this.tileX + 1)) * tileDegrees) - 180);
        var tileDegreesX = lngMax - lngMin;
        var tileDegreesY = latMax - latMin;
        this.topLeft = this.geoTo3d(latMin, lngMin, false);
        this.bottomRight = this.geoTo3d(latMax, lngMax, false);
        this.topRight = this.geoTo3d(latMin, lngMax, false);
        this.bottomLeft = this.geoTo3d(latMax, lngMin, false);
        var verts = new Array((this._subDivisionLevel$1 + 1) * (this._subDivisionLevel$1 + 1));
        var x, y;
        var textureStep = 1 / this._subDivisionLevel$1;
        for (y = 0; y <= this._subDivisionLevel$1; y++) {
          if (y !== this._subDivisionLevel$1) {
            lat = latMin + (textureStep * tileDegreesY * y);
          }
          else {
            lat = latMax;
          }
          for (x = 0; x <= this._subDivisionLevel$1; x++) {
            if (x !== this._subDivisionLevel$1) {
              lng = lngMin + (textureStep * tileDegreesX * x);
            }
            else {
              lng = lngMax;
            }
            index = y * (this._subDivisionLevel$1 + 1) + x;
            verts[index] = PositionTexture.createPos(this.geoTo3d(lat, lng, false), x * textureStep, y * textureStep);
          }
        }
        this.triangleCount = this._subDivisionLevel$1 * this._subDivisionLevel$1 * 2;
        var quarterDivisions = this._subDivisionLevel$1 / 2;
        var part = 0;
        if (renderContext.gl == null) {
          for (var y2 = 0; y2 < 2; y2++) {
            for (var x2 = 0; x2 < 2; x2++) {
              index = 0;
              for (var y1 = (quarterDivisions * y2); y1 < (quarterDivisions * (y2 + 1)); y1++) {
                for (var x1 = (quarterDivisions * x2); x1 < (quarterDivisions * (x2 + 1)); x1++) {
                  var p1;
                  var p2;
                  var p3;
                  p1 = verts[(y1 * (this._subDivisionLevel$1 + 1) + x1)];
                  p2 = verts[((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1)];
                  p3 = verts[(y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1))];
                  this._renderTriangleLists[part].push(RenderTriangle.create(p1, p3, p2, this.texture, this.level));
                  p1 = verts[(y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1))];
                  p2 = verts[((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1)];
                  p3 = verts[((y1 + 1) * (this._subDivisionLevel$1 + 1) + (x1 + 1))];
                  this._renderTriangleLists[part].push(RenderTriangle.create(p1, p3, p2, this.texture, this.level));
                }
              }
              part++;
            }
          }
        }
        else {
          this._vertexBuffer = Tile.prepDevice.createBuffer();
          Tile.prepDevice.bindBuffer(34962, this._vertexBuffer);
          var f32array = new Float32Array(verts.length * 5);
          var buffer = f32array;
          index = 0;
          var $enum1 = ss.enumerate(verts);
          while ($enum1.moveNext()) {
            var pt = $enum1.current;
            index = this.addVertex(buffer, index, pt);
          }
          Tile.prepDevice.bufferData(34962, f32array, 35044);
          for (var y2 = 0; y2 < 2; y2++) {
            for (var x2 = 0; x2 < 2; x2++) {
              var ui16array = new Uint16Array(this.triangleCount * 3);
              var indexArray = ui16array;
              index = 0;
              for (var y1 = (quarterDivisions * y2); y1 < (quarterDivisions * (y2 + 1)); y1++) {
                for (var x1 = (quarterDivisions * x2); x1 < (quarterDivisions * (x2 + 1)); x1++) {
                  indexArray[index++] = (y1 * (this._subDivisionLevel$1 + 1) + x1);
                  indexArray[index++] = ((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1);
                  indexArray[index++] = (y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1));
                  indexArray[index++] = (y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1));
                  indexArray[index++] = ((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1);
                  indexArray[index++] = ((y1 + 1) * (this._subDivisionLevel$1 + 1) + (x1 + 1));
                }
              }
              this._indexBuffers[part] = Tile.prepDevice.createBuffer();
              Tile.prepDevice.bindBuffer(34963, this._indexBuffers[part]);
              Tile.prepDevice.bufferData(34963, ui16array, 35044);
              part++;
            }
          }
        }
      }
      catch ($e2) {
      }
      return true;
    },
    _createGeometryBottomsUp$1: function(renderContext) {
      var lat, lng;
      var index = 0;
      var tileDegrees = this.dataset.get_baseTileDegrees() / Math.pow(2, this.level);
      var latMin = (-90 + (((this.tileY + 1)) * tileDegrees));
      var latMax = (-90 + ((this.tileY) * tileDegrees));
      var lngMin = ((this.tileX * tileDegrees) - 180);
      var lngMax = ((((this.tileX + 1)) * tileDegrees) - 180);
      var tileDegreesX = lngMax - lngMin;
      var tileDegreesY = latMax - latMin;
      var verts = new Array((this._subDivisionLevel$1 + 1) * (this._subDivisionLevel$1 + 1));
      var x, y;
      var textureStep = 1 / this._subDivisionLevel$1;
      for (y = 0; y <= this._subDivisionLevel$1; y++) {
        if (y !== this._subDivisionLevel$1) {
          lat = latMin + (textureStep * tileDegreesY * y);
        }
        else {
          lat = latMax;
        }
        for (x = 0; x <= this._subDivisionLevel$1; x++) {
          if (x !== this._subDivisionLevel$1) {
            lng = lngMin + (textureStep * tileDegreesX * x);
          }
          else {
            lng = lngMax;
          }
          index = y * (this._subDivisionLevel$1 + 1) + x;
          verts[index] = PositionTexture.createPos(this.geoTo3d(lat, lng, false), x * textureStep, y * textureStep);
        }
      }
      this.triangleCount = this._subDivisionLevel$1 * this._subDivisionLevel$1 * 2;
      var quarterDivisions = this._subDivisionLevel$1 / 2;
      var part = 0;
      if (renderContext.gl == null) {
        for (var y2 = 0; y2 < 2; y2++) {
          for (var x2 = 0; x2 < 2; x2++) {
            index = 0;
            for (var y1 = (quarterDivisions * y2); y1 < (quarterDivisions * (y2 + 1)); y1++) {
              for (var x1 = (quarterDivisions * x2); x1 < (quarterDivisions * (x2 + 1)); x1++) {
                var p1;
                var p2;
                var p3;
                p1 = verts[(y1 * (this._subDivisionLevel$1 + 1) + x1)];
                p2 = verts[((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1)];
                p3 = verts[(y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1))];
                this._renderTriangleLists[part].push(RenderTriangle.create(p1, p3, p2, this.texture, this.level));
                p1 = verts[(y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1))];
                p2 = verts[((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1)];
                p3 = verts[((y1 + 1) * (this._subDivisionLevel$1 + 1) + (x1 + 1))];
                this._renderTriangleLists[part].push(RenderTriangle.create(p1, p3, p2, this.texture, this.level));
              }
            }
            part++;
          }
        }
      }
      else {
        this._vertexBuffer = Tile.prepDevice.createBuffer();
        Tile.prepDevice.bindBuffer(34962, this._vertexBuffer);
        var f32array = new Float32Array(verts.length * 5);
        var buffer = f32array;
        index = 0;
        var $enum1 = ss.enumerate(verts);
        while ($enum1.moveNext()) {
          var pt = $enum1.current;
          index = this.addVertex(buffer, index, pt);
        }
        Tile.prepDevice.bufferData(34962, f32array, 35044);
        for (var y2 = 0; y2 < 2; y2++) {
          for (var x2 = 0; x2 < 2; x2++) {
            var ui16array = new Uint16Array(this.triangleCount * 3);
            var indexArray = ui16array;
            index = 0;
            for (var y1 = (quarterDivisions * y2); y1 < (quarterDivisions * (y2 + 1)); y1++) {
              for (var x1 = (quarterDivisions * x2); x1 < (quarterDivisions * (x2 + 1)); x1++) {
                indexArray[index++] = (y1 * (this._subDivisionLevel$1 + 1) + x1);
                indexArray[index++] = ((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1);
                indexArray[index++] = (y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1));
                indexArray[index++] = (y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1));
                indexArray[index++] = ((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1);
                indexArray[index++] = ((y1 + 1) * (this._subDivisionLevel$1 + 1) + (x1 + 1));
              }
            }
            this._indexBuffers[part] = Tile.prepDevice.createBuffer();
            Tile.prepDevice.bindBuffer(34963, this._indexBuffers[part]);
            Tile.prepDevice.bufferData(34963, ui16array, 35044);
            part++;
          }
        }
      }
      return true;
    }
  };


  // wwtlib.MercatorTile

  function MercatorTile() {
    this._tileDegrees$1 = 0;
    this._latMin$1 = 0;
    this._latMax$1 = 0;
    this._lngMin$1 = 0;
    this._lngMax$1 = 0;
    this._subDivisionLevel$1 = 32;
    Tile.call(this);
  }
  MercatorTile.create = function(level, X, Y, dataset, parent) {
    var temp = new MercatorTile();
    temp.parent = parent;
    temp.level = level;
    temp.tileX = X;
    temp.tileY = Y;
    temp.dataset = dataset;
    temp.computeBoundingSphere();
    return temp;
  };
  MercatorTile.getCentrePointOffsetAsTileRatio = function(lat, lon, zoom) {
    var metersX = MercatorTile.absoluteLonToMetersAtZoom(lon, zoom);
    var relativeXIntoCell = (metersX / 256) - Math.floor(metersX / 256);
    var metersY = MercatorTile.absoluteLatToMetersAtZoom(lat, zoom);
    var relativeYIntoCell = (metersY / 256) - Math.floor(metersY / 256);
    return Vector2d.create(relativeXIntoCell, relativeYIntoCell);
  };
  MercatorTile.relativeMetersToLatAtZoom = function(Y, zoom) {
    var metersPerPixel = MercatorTile.metersPerPixel2(zoom);
    var metersY = Y * metersPerPixel;
    return MercatorTile._radToDeg$1(Math.PI / 2 - 2 * Math.atan(Math.exp(0 - metersY / 6378137)));
  };
  MercatorTile.relativeMetersToLonAtZoom = function(X, zoom) {
    var metersPerPixel = MercatorTile.metersPerPixel2(zoom);
    var metersX = X * metersPerPixel;
    return MercatorTile._radToDeg$1(metersX / 6378137);
  };
  MercatorTile.absoluteLatToMetersAtZoom = function(latitude, zoom) {
    var sinLat = Math.sin(MercatorTile._degToRad$1(latitude));
    var metersY = 6378137 / 2 * Math.log((1 + sinLat) / (1 - sinLat));
    var metersPerPixel = MercatorTile.metersPerPixel2(zoom);
    return ss.truncate((Math.round(20037508 - metersY) / metersPerPixel));
  };
  MercatorTile.absoluteMetersToLatAtZoom = function(Y, zoom) {
    var metersPerPixel = MercatorTile.metersPerPixel2(zoom);
    var metersY = 20037508 - Y * metersPerPixel;
    return MercatorTile._radToDeg$1(Math.PI / 2 - 2 * Math.atan(Math.exp(0 - metersY / 6378137)));
  };
  MercatorTile.absoluteLonToMetersAtZoom = function(longitude, zoom) {
    var metersX = 6378137 * MercatorTile._degToRad$1(longitude);
    var metersPerPixel = MercatorTile.metersPerPixel2(zoom);
    return ss.truncate(((metersX + 20037508) / metersPerPixel));
  };
  MercatorTile.absoluteMetersToLonAtZoom = function(X, zoom) {
    var metersPerPixel = MercatorTile.metersPerPixel2(zoom);
    var metersX = X * metersPerPixel - 20037508;
    return MercatorTile._radToDeg$1(metersX / 6378137);
  };
  MercatorTile.absoluteLonToMetersAtZoomTile = function(longitude, zoom, tileX) {
    var metersX = 6378137 * MercatorTile._degToRad$1(longitude);
    var metersPerPixel = MercatorTile.metersPerPixel2(zoom);
    return ss.truncate(((metersX + 20037508) / metersPerPixel));
  };
  MercatorTile.absoluteLatToMetersAtZoomTile = function(latitude, zoom, tileX) {
    var sinLat = Math.sin(MercatorTile._degToRad$1(latitude));
    var metersY = 6378137 / 2 * Math.log((1 + sinLat) / (1 - sinLat));
    var metersPerPixel = MercatorTile.metersPerPixel2(zoom);
    return ss.truncate((Math.round(20037508 - metersY) / metersPerPixel));
  };
  MercatorTile.absoluteMetersToLonAtZoomByTileY = function(X, zoom, tileY) {
    var metersPerPixel = MercatorTile.metersPerPixel2(zoom);
    var metersX = X * metersPerPixel - 20037508;
    return MercatorTile._radToDeg$1(metersX / 6378137);
  };
  MercatorTile._degToRad$1 = function(deg) {
    return (deg * Math.PI / 180);
  };
  MercatorTile.metersPerPixel2 = function(zoom) {
    return (156543 / (1 << zoom));
  };
  MercatorTile._radToDeg$1 = function(rad) {
    return (rad * 180 / Math.PI);
  };
  var MercatorTile$ = {
    computeBoundingSphere: function() {
      this._tileDegrees$1 = 360 / Math.pow(2, this.level);
      this._latMin$1 = MercatorTile.absoluteMetersToLatAtZoom(this.tileY * 256, this.level);
      this._latMax$1 = MercatorTile.absoluteMetersToLatAtZoom((this.tileY + 1) * 256, this.level);
      this._lngMin$1 = ((this.tileX * this._tileDegrees$1) - 180);
      this._lngMax$1 = ((((this.tileX + 1)) * this._tileDegrees$1) - 180);
      var latCenter = (this._latMin$1 + this._latMax$1) / 2;
      var lngCenter = (this._lngMin$1 + this._lngMax$1) / 2;
      this.sphereCenter = this.geoTo3d(latCenter, lngCenter, false);
      this.topLeft = this.geoTo3d(this._latMin$1, this._lngMin$1, false);
      this.bottomRight = this.geoTo3d(this._latMax$1, this._lngMax$1, false);
      this.topRight = this.geoTo3d(this._latMin$1, this._lngMax$1, false);
      this.bottomLeft = this.geoTo3d(this._latMax$1, this._lngMin$1, false);
      if (!this.tileY) {
        this.topLeft = Vector3d.create(0, 1, 0);
        this.topRight = Vector3d.create(0, 1, 0);
      }
      if (this.tileY === Math.pow(2, this.level) - 1) {
        this.bottomRight = Vector3d.create(0, -1, 0);
        this.bottomLeft = Vector3d.create(0, -1, 0);
      }
      var distVect = this.topLeft;
      distVect.subtract(this.sphereCenter);
      this.sphereRadius = distVect.length();
      distVect = this.bottomRight;
      distVect.subtract(this.sphereCenter);
      var len = distVect.length();
      if (this.sphereRadius < len) {
        this.sphereRadius = len;
      }
      this._tileDegrees$1 = Math.abs(this._latMax$1 - this._latMin$1);
    },
    isPointInTile: function(lat, lng) {
      if (!this.demReady || this.demData == null || lat < Math.min(this._latMin$1, this._latMax$1) || lat > Math.max(this._latMax$1, this._latMin$1) || lng < Math.min(this._lngMin$1, this._lngMax$1) || lng > Math.max(this._lngMin$1, this._lngMax$1)) {
        return false;
      }
      return true;
    },
    getSurfacePointAltitude: function(lat, lng, meters) {
      if (this.level < Tile.lastDeepestLevel) {
        var $enum1 = ss.enumerate(this.children);
        while ($enum1.moveNext()) {
          var child = $enum1.current;
          if (child != null) {
            if (child.isPointInTile(lat, lng)) {
              var retVal = child.getSurfacePointAltitude(lat, lng, meters);
              if (!!retVal) {
                return retVal;
              }
              else {
                break;
              }
            }
          }
        }
      }
      var alt = this._getAltitudeAtLatLng$1(lat, lng, (meters) ? 1 : this.get__demScaleFactor());
      return alt;
    },
    _getAltitudeAtLatLng$1: function(lat, lng, scaleFactor) {
      var height = Math.abs(this._latMax$1 - this._latMin$1);
      var width = Math.abs(this._lngMax$1 - this._lngMin$1);
      var yy = ((lat - Math.min(this._latMax$1, this._latMin$1)) / height * 32);
      var xx = ((lng - Math.min(this._lngMax$1, this._lngMin$1)) / width * 32);
      var indexY = Math.min(31, ss.truncate(yy));
      var indexX = Math.min(31, ss.truncate(xx));
      var ha = xx - indexX;
      var va = yy - indexY;
      var ul = this.demData[indexY * 33 + indexX];
      var ur = this.demData[indexY * 33 + (indexX + 1)];
      var ll = this.demData[(indexY + 1) * 33 + indexX];
      var lr = this.demData[(indexY + 1) * 33 + (indexX + 1)];
      var top = ul * (1 - ha) + ha * ur;
      var bottom = ll * (1 - ha) + ha * lr;
      var val = top * (1 - va) + va * bottom;
      return val / scaleFactor;
    },
    createGeometry: function(renderContext) {
      Tile.prototype.createGeometry.call(this, renderContext);
      if (this.geometryCreated) {
        return true;
      }
      this.geometryCreated = true;
      if (Tile.uvMultiple === 256) {
        if (!this.dataset.get_dataSetType() || this.dataset.get_dataSetType() === 1) {
          this._subDivisionLevel$1 = Math.max(2, (6 - this.level) * 2);
        }
      }
      for (var i = 0; i < 4; i++) {
        this._renderTriangleLists[i] = [];
      }
      var lat, lng;
      var index = 0;
      var tileDegrees = 360 / Math.pow(2, this.level);
      this._latMin$1 = MercatorTile.absoluteMetersToLatAtZoom(this.tileY * 256, this.level);
      this._latMax$1 = MercatorTile.absoluteMetersToLatAtZoom((this.tileY + 1) * 256, this.level);
      this._lngMin$1 = ((this.tileX * tileDegrees) - 180);
      this._lngMax$1 = ((((this.tileX + 1)) * tileDegrees) - 180);
      var latCenter = MercatorTile.absoluteMetersToLatAtZoom(((this.tileY * 2) + 1) * 256, this.level + 1);
      this.topLeft = this.geoTo3d(this._latMin$1, this._lngMin$1, false);
      this.bottomRight = this.geoTo3d(this._latMax$1, this._lngMax$1, false);
      this.topRight = this.geoTo3d(this._latMin$1, this._lngMax$1, false);
      this.bottomLeft = this.geoTo3d(this._latMax$1, this._lngMin$1, false);
      var verts = new Array((this._subDivisionLevel$1 + 1) * (this._subDivisionLevel$1 + 1));
      tileDegrees = this._lngMax$1 - this._lngMin$1;
      var dGrid = (tileDegrees / this._subDivisionLevel$1);
      var x1, y1;
      var textureStep = 1 / this._subDivisionLevel$1;
      var latDegrees = this._latMax$1 - latCenter;
      for (y1 = 0; y1 < this._subDivisionLevel$1 / 2; y1++) {
        if (y1 !== this._subDivisionLevel$1 / 2) {
          lat = this._latMax$1 - (2 * textureStep * latDegrees * y1);
        }
        else {
          lat = latCenter;
        }
        for (x1 = 0; x1 <= this._subDivisionLevel$1; x1++) {
          if (x1 !== this._subDivisionLevel$1) {
            lng = this._lngMin$1 + (textureStep * tileDegrees * x1);
          }
          else {
            lng = this._lngMax$1;
          }
          index = y1 * (this._subDivisionLevel$1 + 1) + x1;
          verts[index] = new PositionTexture();
          verts[index].position = this.geoTo3dWithAlt(lat, lng, false, true);
          verts[index].tu = (x1 * textureStep) * Tile.uvMultiple;
          verts[index].tv = ((MercatorTile.absoluteLatToMetersAtZoom(lat, this.level) - (this.tileY * 256)) / 256) * Tile.uvMultiple;
          this.demIndex++;
        }
      }
      latDegrees = this._latMin$1 - latCenter;
      for (y1 = this._subDivisionLevel$1 / 2; y1 <= this._subDivisionLevel$1; y1++) {
        if (y1 !== this._subDivisionLevel$1) {
          lat = latCenter + (2 * textureStep * latDegrees * (y1 - (this._subDivisionLevel$1 / 2)));
        }
        else {
          lat = this._latMin$1;
        }
        for (x1 = 0; x1 <= this._subDivisionLevel$1; x1++) {
          if (x1 !== this._subDivisionLevel$1) {
            lng = this._lngMin$1 + (textureStep * tileDegrees * x1);
          }
          else {
            lng = this._lngMax$1;
          }
          index = y1 * (this._subDivisionLevel$1 + 1) + x1;
          verts[index] = new PositionTexture();
          verts[index].position = this.geoTo3dWithAlt(lat, lng, false, true);
          verts[index].tu = (x1 * textureStep) * Tile.uvMultiple;
          verts[index].tv = ((MercatorTile.absoluteLatToMetersAtZoom(lat, this.level) - (this.tileY * 256)) / 256) * Tile.uvMultiple;
          this.demIndex++;
        }
      }
      if (!this.tileY) {
        y1 = this._subDivisionLevel$1;
        for (x1 = 0; x1 <= this._subDivisionLevel$1; x1++) {
          index = y1 * (this._subDivisionLevel$1 + 1) + x1;
          verts[index].position = Vector3d.create(0, 1, 0);
        }
      }
      if (this.tileY === Math.pow(2, this.level) - 1) {
        y1 = 0;
        for (x1 = 0; x1 <= this._subDivisionLevel$1; x1++) {
          index = y1 * (this._subDivisionLevel$1 + 1) + x1;
          verts[index].position = Vector3d.create(0, -1, 0);
        }
      }
      this.triangleCount = this._subDivisionLevel$1 * this._subDivisionLevel$1 * 2;
      var quarterDivisions = this._subDivisionLevel$1 / 2;
      var part = 0;
      if (renderContext.gl == null) {
        for (var y2 = 0; y2 < 2; y2++) {
          for (var x2 = 0; x2 < 2; x2++) {
            index = 0;
            for (y1 = (quarterDivisions * y2); y1 < (quarterDivisions * (y2 + 1)); y1++) {
              for (x1 = (quarterDivisions * x2); x1 < (quarterDivisions * (x2 + 1)); x1++) {
                var p1;
                var p2;
                var p3;
                p1 = verts[(y1 * (this._subDivisionLevel$1 + 1) + x1)];
                p2 = verts[((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1)];
                p3 = verts[(y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1))];
                var tri = RenderTriangle.create(p1, p2, p3, this.texture, this.level);
                this._renderTriangleLists[part].push(tri);
                p1 = verts[(y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1))];
                p2 = verts[((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1)];
                p3 = verts[((y1 + 1) * (this._subDivisionLevel$1 + 1) + (x1 + 1))];
                tri = RenderTriangle.create(p1, p2, p3, this.texture, this.level);
                this._renderTriangleLists[part].push(tri);
              }
            }
            part++;
          }
        }
      }
      else {
        this._vertexBuffer = Tile.prepDevice.createBuffer();
        Tile.prepDevice.bindBuffer(34962, this._vertexBuffer);
        var f32array = new Float32Array(verts.length * 5);
        var buffer = f32array;
        index = 0;
        var $enum1 = ss.enumerate(verts);
        while ($enum1.moveNext()) {
          var pt = $enum1.current;
          index = this.addVertex(buffer, index, pt);
        }
        Tile.prepDevice.bufferData(34962, f32array, 35044);
        for (var y2 = 0; y2 < 2; y2++) {
          for (var x2 = 0; x2 < 2; x2++) {
            var ui16array = new Uint16Array(this.triangleCount * 3);
            var indexArray = ui16array;
            index = 0;
            for (y1 = (quarterDivisions * y2); y1 < (quarterDivisions * (y2 + 1)); y1++) {
              for (x1 = (quarterDivisions * x2); x1 < (quarterDivisions * (x2 + 1)); x1++) {
                indexArray[index++] = (y1 * (this._subDivisionLevel$1 + 1) + x1);
                indexArray[index++] = ((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1);
                indexArray[index++] = (y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1));
                indexArray[index++] = (y1 * (this._subDivisionLevel$1 + 1) + (x1 + 1));
                indexArray[index++] = ((y1 + 1) * (this._subDivisionLevel$1 + 1) + x1);
                indexArray[index++] = ((y1 + 1) * (this._subDivisionLevel$1 + 1) + (x1 + 1));
              }
            }
            this._indexBuffers[part] = Tile.prepDevice.createBuffer();
            Tile.prepDevice.bindBuffer(34963, this._indexBuffers[part]);
            Tile.prepDevice.bufferData(34963, ui16array, 35044);
            part++;
          }
        }
      }
      return true;
    },
    _getDemSample$1: function(x, y) {
      return this.demData[(32 - y) * 33 + x];
    },
    createDemFromParent: function() {
      var parent = ss.safeCast(this.parent, MercatorTile);
      if (parent == null || parent.demData == null) {
        return false;
      }
      var offsetX = (((this.tileX % 2) === 1) ? 16 : 0);
      var offsetY = (((this.tileY % 2) === 1) ? 16 : 0);
      this.demData = new Array(this.demSize);
      for (var y = 0; y < 33; y += 2) {
        var copy = true;
        for (var x = 0; x < 33; x++) {
          if (copy) {
            this.demData[(32 - y) * 33 + x] = parent._getDemSample$1((x / 2) + offsetX, (y / 2) + offsetY);
          }
          else {
            this.demData[(32 - y) * 33 + x] = ((parent._getDemSample$1((x / 2) + offsetX, (y / 2) + offsetY) + parent._getDemSample$1(((x / 2) + offsetX) + 1, (y / 2) + offsetY)) / 2);
          }
          copy = !copy;
        }
      }
      for (var y = 1; y < 33; y += 2) {
        for (var x = 0; x < 33; x++) {
          this.demData[(32 - y) * 33 + x] = ((this._getDemSample$1(x, y - 1) + this._getDemSample$1(x, y + 1)) / 2);
        }
      }
      var $enum1 = ss.enumerate(this.demData);
      while ($enum1.moveNext()) {
        var sample = $enum1.current;
        this.demAverage += sample;
      }
      this.demAverage /= this.demData.length;
      this.demReady = true;
      return true;
    }
  };


  // wwtlib.ISSLayer

  function ISSLayer() {
    Object3dLayer.call(this);
    this.id = ISSLayer.issGuid;
  }
  ISSLayer.loadBackground = function() {
    if (ISSLayer._loading$2) {
      return;
    }
    ISSLayer._loading$2 = true;
    var url = 'http://www.worldwidetelescope.org/data/iss.wtt';
    ISSLayer._doc$2 = TourDocument.fromUrlRaw(url, function() {
      ISSLayer.createSpaceStation();
    });
  };
  ISSLayer.createSpaceStation = function() {
    ISSLayer._doc$2.set_id('28016047-97a9-4b33-a226-cd820262a151');
    var filename = '0c10ae54-b6da-4282-bfda-f34562d403bc.3ds';
    var o3d = new Object3d(ISSLayer._doc$2, filename, true, false, true, Colors.get_white());
    if (o3d != null) {
      o3d.issLayer = true;
      ISSLayer._issmodel$2 = o3d;
    }
  };
  var ISSLayer$ = {
    draw: function(renderContext, opacity, flat) {
      if (this.object3d == null && ISSLayer._issmodel$2 == null) {
        if (!ISSLayer._loading$2) {
          var worldView = Matrix3d.multiplyMatrix(renderContext.get_world(), renderContext.get_view());
          var v = worldView.transform(Vector3d.get_empty());
          var scaleFactor = Math.sqrt(worldView.get_m11() * worldView.get_m11() + worldView.get_m22() * worldView.get_m22() + worldView.get_m33() * worldView.get_m33());
          var dist = v.length();
          var radius = scaleFactor;
          var viewportHeight = ss.truncate(renderContext.height);
          var p11 = renderContext.get_projection().get_m11();
          var p34 = renderContext.get_projection().get_m34();
          var p44 = renderContext.get_projection().get_m44();
          var w = Math.abs(p34) * dist + p44;
          var pixelsPerUnit = (p11 / w) * viewportHeight;
          var radiusInPixels = (radius * pixelsPerUnit);
          if (radiusInPixels > 0.5) {
            ISSLayer.loadBackground();
          }
        }
      }
      this.object3d = ISSLayer._issmodel$2;
      return Object3dLayer.prototype.draw.call(this, renderContext, opacity, flat);
    },
    getPrimaryUI: function() {
      return null;
    },
    addFilesToCabinet: function(fc) {
      return;
    },
    loadData: function(doc, filename) {
      return;
    },
    cleanUp: function() {
    }
  };


  // wwtlib.SlideChangedEventArgs

  function SlideChangedEventArgs(caption) {
    ss.EventArgs.call(this);
    this.set_caption(caption);
  }
  var SlideChangedEventArgs$ = {
    get_caption: function() {
      return this._caption$2;
    },
    set_caption: function(value) {
      this._caption$2 = value;
      return value;
    }
  };


  // wwtlib.ArrivedEventArgs

  function ArrivedEventArgs(ra, dec, zoom) {
    this._ra$2 = 0;
    this._dec$2 = 0;
    this._zoom$2 = 0;
    ss.EventArgs.call(this);
    this.set_RA(ra * 15);
    this.set_dec(dec);
    this.set_zoom(zoom / 6);
  }
  var ArrivedEventArgs$ = {
    get_RA: function() {
      return this._ra$2;
    },
    set_RA: function(value) {
      this._ra$2 = value;
      return value;
    },
    get_dec: function() {
      return this._dec$2;
    },
    set_dec: function(value) {
      this._dec$2 = value;
      return value;
    },
    get_zoom: function() {
      return this._zoom$2;
    },
    set_zoom: function(value) {
      this._zoom$2 = value;
      return value;
    }
  };


  // wwtlib.AnnotationClickEventArgs

  function AnnotationClickEventArgs(ra, dec, id) {
    this._ra$2 = 0;
    this._dec$2 = 0;
    ss.EventArgs.call(this);
    this.set_RA(ra * 15);
    this.set_dec(dec);
    this.set_id(id);
  }
  var AnnotationClickEventArgs$ = {
    get_RA: function() {
      return this._ra$2;
    },
    set_RA: function(value) {
      this._ra$2 = value;
      return value;
    },
    get_dec: function() {
      return this._dec$2;
    },
    set_dec: function(value) {
      this._dec$2 = value;
      return value;
    },
    get_id: function() {
      return this._id$2;
    },
    set_id: function(value) {
      this._id$2 = value;
      return value;
    }
  };


  // wwtlib.CollectionLoadedEventArgs

  function CollectionLoadedEventArgs(url) {
    ss.EventArgs.call(this);
    this._url$2 = url;
  }
  var CollectionLoadedEventArgs$ = {
    get_url: function() {
      return this._url$2;
    },
    set_url: function(value) {
      this._url$2 = value;
      return value;
    }
  };


  var $exports = ss.module('wwtlib',
    {
      IFolder: [ IFolder ],
      Sprite2d: [ Sprite2d, Sprite2d$, null ],
      VertexPosition: [ VertexPosition, VertexPosition$, null ],
      Table: [ Table, Table$, null ],
      MinorPlanets: [ MinorPlanets, MinorPlanets$, null ],
      TileCache: [ TileCache, TileCache$, null ],
      DistanceCalc: [ DistanceCalc, DistanceCalc$, null ],
      Triangle: [ Triangle, Triangle$, null ],
      Util: [ Util, Util$, null ],
      Wtml: [ Wtml, Wtml$, null ],
      FolderUp: [ FolderUp, FolderUp$, null, IThumbnail ],
      ViewMoverSlew: [ ViewMoverSlew, ViewMoverSlew$, null, IViewMover ],
      MainView: [ MainView, null, null ],
      PositionTextureVertexBuffer: [ PositionTextureVertexBuffer, PositionTextureVertexBuffer$, VertexBufferBase ],
      KeplerVertexBuffer: [ KeplerVertexBuffer, KeplerVertexBuffer$, VertexBufferBase ],
      TimeSeriesLineVertexBuffer: [ TimeSeriesLineVertexBuffer, TimeSeriesLineVertexBuffer$, VertexBufferBase ],
      TimeSeriesPointVertexBuffer: [ TimeSeriesPointVertexBuffer, TimeSeriesPointVertexBuffer$, VertexBufferBase ],
      PositionColoredVertexBuffer: [ PositionColoredVertexBuffer, PositionColoredVertexBuffer$, VertexBufferBase ],
      PositionColoredTexturedVertexBuffer: [ PositionColoredTexturedVertexBuffer, PositionColoredTexturedVertexBuffer$, VertexBufferBase ],
      LayerCollection: [ LayerCollection, LayerCollection$, Layer ]
    },
    {
      DAY_OF_WEEK: DAY_OF_WEEK,
      EO: EO,
      CullMode: CullMode,
      PointScaleTypes: PointScaleTypes,
      DataTypes: DataTypes,
      ScaleTypes: ScaleTypes,
      AltUnits: AltUnits,
      FadeType: FadeType,
      ReferenceFrames: ReferenceFrames,
      ReferenceFrameTypes: ReferenceFrameTypes,
      CoordinatesTypes: CoordinatesTypes,
      AltTypes: AltTypes,
      MarkerMixes: MarkerMixes,
      ColorMaps: ColorMaps,
      PlotTypes: PlotTypes,
      MarkerScales: MarkerScales,
      RAUnits: RAUnits,
      Primitives: Primitives,
      Alignment: Alignment,
      StockSkyOverlayTypes: StockSkyOverlayTypes,
      OverlayAnchor: OverlayAnchor,
      AudioType: AudioType,
      ShapeType: ShapeType,
      LoopTypes: LoopTypes,
      SelectionAnchor: SelectionAnchor,
      TextBorderStyle: TextBorderStyle,
      UserLevel: UserLevel,
      TransitionType: TransitionType,
      Keys: Keys,
      DialogResult: DialogResult,
      Formatting: Formatting,
      StateType: StateType,
      SolarSystemObjects: SolarSystemObjects,
      InterpolationType: InterpolationType,
      PointType: PointType,
      LocationHint: LocationHint,
      FolderGroup: FolderGroup,
      FolderRefreshType: FolderRefreshType,
      FolderType: FolderType,
      ThumbnailSize: ThumbnailSize,
      ProjectionType: ProjectionType,
      ImageSetType: ImageSetType,
      BandPass: BandPass,
      Classification: Classification,
      IUIServicesCallbacks: [ IUIServicesCallbacks ],
      ISettings: [ ISettings ],
      IUndoStep: [ IUndoStep ],
      IThumbnail: [ IThumbnail ],
      IPlace: [ IPlace ],
      IUiController: [ IUiController ],
      IViewMover: [ IViewMover ],
      GFX: [ GFX, null, null ],
      ABR: [ ABR, ABR$, null ],
      ACFT: [ ACFT, ACFT$, null ],
      ASEP: [ ASEP, ASEP$, null ],
      COR: [ COR, COR$, null ],
      C3D: [ C3D, C3D$, null ],
      CT: [ CT, CT$, null ],
      CalD: [ CalD, CalD$, null ],
      DT: [ DT, DT$, null ],
      DYT: [ DYT, DYT$, null ],
      CAAEarth: [ CAAEarth, CAAEarth$, null ],
      VSC: [ VSC, VSC$, null ],
      CAAEclipticalElementDetails: [ CAAEclipticalElementDetails, CAAEclipticalElementDetails$, null ],
      CAAEclipticalElements: [ CAAEclipticalElements, CAAEclipticalElements$, null ],
      EPO: [ EPO, EPO$, null ],
      EOE: [ EOE, EOE$, null ],
      EPD: [ EPD, EPD$, null ],
      EOD: [ EOD, EOD$, null ],
      ELL: [ ELL, ELL$, null ],
      EOT: [ EOT, EOT$, null ],
      CAAFK5: [ CAAFK5, CAAFK5$, null ],
      GMD: [ GMD, GMD$, null ],
      GMDS: [ GMDS, GMDS$, null ],
      GM: [ GM, GM$, null ],
      CAAGlobe: [ CAAGlobe, CAAGlobe$, null ],
      IFR: [ IFR, IFR$, null ],
      INTP: [ INTP, INTP$, null ],
      CAAJupiter: [ CAAJupiter, CAAJupiter$, null ],
      CAAKepler: [ CAAKepler, CAAKepler$, null ],
      CAAMars: [ CAAMars, CAAMars$, null ],
      CAAMercury: [ CAAMercury, CAAMercury$, null ],
      CAAMoon: [ CAAMoon, CAAMoon$, null ],
      MoonCoefficient1: [ MoonCoefficient1, MoonCoefficient1$, null ],
      MoonCoefficient2: [ MoonCoefficient2, MoonCoefficient2$, null ],
      MIFR: [ MIFR, MIFR$, null ],
      CAAMoonNodes: [ CAAMoonNodes, CAAMoonNodes$, null ],
      CAAMoonPerigeeApogee: [ CAAMoonPerigeeApogee, CAAMoonPerigeeApogee$, null ],
      MPAC: [ MPAC, MPAC$, null ],
      CAAMoonPhases: [ CAAMoonPhases, CAAMoonPhases$, null ],
      CAANeptune: [ CAANeptune, CAANeptune$, null ],
      CAANutation: [ CAANutation, CAANutation$, null ],
      NUC: [ NUC, NUC$, null ],
      CAATopocentricEclipticDetails: [ CAATopocentricEclipticDetails, CAATopocentricEclipticDetails$, null ],
      CAAParallax: [ CAAParallax, CAAParallax$, null ],
      CAAPhysicalJupiterDetails: [ CAAPhysicalJupiterDetails, CAAPhysicalJupiterDetails$, null ],
      CAAPhysicalJupiter: [ CAAPhysicalJupiter, CAAPhysicalJupiter$, null ],
      CAAPhysicalMarsDetails: [ CAAPhysicalMarsDetails, CAAPhysicalMarsDetails$, null ],
      CAAPhysicalMars: [ CAAPhysicalMars, CAAPhysicalMars$, null ],
      CAAPhysicalSunDetails: [ CAAPhysicalSunDetails, CAAPhysicalSunDetails$, null ],
      CAAPhysicalSun: [ CAAPhysicalSun, CAAPhysicalSun$, null ],
      CAAPluto: [ CAAPluto, CAAPluto$, null ],
      PlutoCoefficient1: [ PlutoCoefficient1, PlutoCoefficient1$, null ],
      PlutoCoefficient2: [ PlutoCoefficient2, PlutoCoefficient2$, null ],
      CAAPrecession: [ CAAPrecession, CAAPrecession$, null ],
      CAARiseTransitSetDetails: [ CAARiseTransitSetDetails, CAARiseTransitSetDetails$, null ],
      CAARiseTransitSet: [ CAARiseTransitSet, CAARiseTransitSet$, null ],
      CAASaturn: [ CAASaturn, CAASaturn$, null ],
      CAASaturnRingDetails: [ CAASaturnRingDetails, CAASaturnRingDetails$, null ],
      CAASaturnRings: [ CAASaturnRings, CAASaturnRings$, null ],
      CAASidereal: [ CAASidereal, CAASidereal$, null ],
      CAAStellarMagnitudes: [ CAAStellarMagnitudes, CAAStellarMagnitudes$, null ],
      CAASun: [ CAASun, CAASun$, null ],
      CAAUranus: [ CAAUranus, CAAUranus$, null ],
      CAAVenus: [ CAAVenus, CAAVenus$, null ],
      AstroRaDec: [ AstroRaDec, AstroRaDec$, null ],
      RiseSetDetails: [ RiseSetDetails, RiseSetDetails$, null ],
      AstroCalc: [ AstroCalc, AstroCalc$, null ],
      ShortIndexBuffer: [ ShortIndexBuffer, ShortIndexBuffer$, null ],
      IndexBuffer: [ IndexBuffer, IndexBuffer$, null, ss.IDisposable ],
      VertexBufferBase: [ VertexBufferBase, VertexBufferBase$, null, ss.IDisposable ],
      Dates: [ Dates, Dates$, null ],
      SimpleLineList: [ SimpleLineList, SimpleLineList$, null ],
      OrbitLineList: [ OrbitLineList, OrbitLineList$, null ],
      LineList: [ LineList, LineList$, null ],
      TriangleList: [ TriangleList, TriangleList$, null ],
      PointList: [ PointList, PointList$, null ],
      TimeSeriesLineVertex: [ TimeSeriesLineVertex, TimeSeriesLineVertex$, null ],
      TimeSeriesPointVertex: [ TimeSeriesPointVertex, TimeSeriesPointVertex$, null ],
      SimpleLineShader: [ SimpleLineShader, SimpleLineShader$, null ],
      SimpleLineShader2D: [ SimpleLineShader2D, SimpleLineShader2D$, null ],
      OrbitLineShader: [ OrbitLineShader, OrbitLineShader$, null ],
      LineShaderNormalDates: [ LineShaderNormalDates, LineShaderNormalDates$, null ],
      TimeSeriesPointSpriteShader: [ TimeSeriesPointSpriteShader, TimeSeriesPointSpriteShader$, null ],
      KeplerPointSpriteShader: [ KeplerPointSpriteShader, KeplerPointSpriteShader$, null ],
      EllipseShader: [ EllipseShader, EllipseShader$, null ],
      ModelShader: [ ModelShader, ModelShader$, null ],
      ModelShaderTan: [ ModelShaderTan, ModelShaderTan$, null ],
      TileShader: [ TileShader, TileShader$, null ],
      ImageShader: [ ImageShader, ImageShader$, null ],
      ImageShader2: [ ImageShader2, ImageShader2$, null ],
      SpriteShader: [ SpriteShader, SpriteShader$, null ],
      ShapeSpriteShader: [ ShapeSpriteShader, ShapeSpriteShader$, null ],
      TextShader: [ TextShader, TextShader$, null ],
      Tessellator: [ Tessellator, Tessellator$, null ],
      Texture: [ Texture, Texture$, null, ss.IDisposable ],
      Grids: [ Grids, Grids$, null ],
      KeplerVertex: [ KeplerVertex, KeplerVertex$, null ],
      ScaleMap: [ ScaleMap, ScaleMap$, null ],
      Layer: [ Layer, Layer$, null ],
      DomainValue: [ DomainValue, DomainValue$, null ],
      LayerManager: [ LayerManager, LayerManager$, null ],
      LayerMap: [ LayerMap, LayerMap$, null ],
      SkyOverlays: [ SkyOverlays, SkyOverlays$, null ],
      GroundOverlayLayer: [ GroundOverlayLayer, GroundOverlayLayer$, null ],
      FrameTarget: [ FrameTarget, FrameTarget$, null ],
      LayerUI: [ LayerUI, LayerUI$, null ],
      LayerUIMenuItem: [ LayerUIMenuItem, LayerUIMenuItem$, null ],
      LayerUITreeNode: [ LayerUITreeNode, LayerUITreeNode$, null ],
      Group: [ Group, Group$, null ],
      Mesh: [ Mesh, Mesh$, null, ss.IDisposable ],
      Object3d: [ Object3d, Object3d$, null ],
      ObjectNode: [ ObjectNode, ObjectNode$, null ],
      Orbit: [ Orbit, Orbit$, null ],
      EllipseRenderer: [ EllipseRenderer, EllipseRenderer$, null ],
      ReferenceFrame: [ ReferenceFrame, ReferenceFrame$, null ],
      KmlCoordinate: [ KmlCoordinate, KmlCoordinate$, null ],
      KmlLineList: [ KmlLineList, KmlLineList$, null ],
      PushPin: [ PushPin, PushPin$, null ],
      VoTable: [ VoTable, VoTable$, null ],
      VoRow: [ VoRow, VoRow$, null ],
      VoColumn: [ VoColumn, VoColumn$, null ],
      WcsImage: [ WcsImage, WcsImage$, null ],
      KeplerianElements: [ KeplerianElements, KeplerianElements$, null ],
      BodyAngles: [ BodyAngles, BodyAngles$, null ],
      Planets: [ Planets, Planets$, null ],
      Material: [ Material, Material$, null ],
      RenderContext: [ RenderContext, RenderContext$, null ],
      RenderTriangle: [ RenderTriangle, RenderTriangle$, null ],
      ScriptInterface: [ ScriptInterface, ScriptInterface$, null ],
      Settings: [ Settings, Settings$, null, ISettings ],
      Text3dBatch: [ Text3dBatch, Text3dBatch$, null ],
      GlyphItem: [ GlyphItem, GlyphItem$, null ],
      GlyphCache: [ GlyphCache, GlyphCache$, null, ss.IDisposable ],
      Text3d: [ Text3d, Text3d$, null ],
      SpaceTimeController: [ SpaceTimeController, SpaceTimeController$, null ],
      Star: [ Star, Star$, null ],
      Galaxy: [ Galaxy, Galaxy$, null ],
      Tile: [ Tile, Tile$, null ],
      Tour: [ Tour, Tour$, null, IThumbnail ],
      FileEntry: [ FileEntry, FileEntry$, null ],
      FileCabinet: [ FileCabinet, FileCabinet$, null ],
      SettingParameter: [ SettingParameter, SettingParameter$, null ],
      Overlay: [ Overlay, Overlay$, null ],
      Selection: [ Selection, Selection$, null ],
      TextObject: [ TextObject, TextObject$, null ],
      TourDocument: [ TourDocument, TourDocument$, null ],
      TourEditTab: [ TourEditTab, TourEditTab$, null ],
      TourEditor: [ TourEditor, TourEditor$, null, IUiController ],
      OverlayList: [ OverlayList, OverlayList$, null ],
      TourEdit: [ TourEdit, TourEdit$, null ],
      SoundEditor: [ SoundEditor, SoundEditor$, null ],
      TourStopList: [ TourStopList, TourStopList$, null ],
      TimeLine: [ TimeLine, TimeLine$, null ],
      TourPlayer: [ TourPlayer, TourPlayer$, null, IUiController ],
      MasterTime: [ MasterTime, MasterTime$, null ],
      TourStop: [ TourStop, TourStop$, null, ISettings ],
      LayerInfo: [ LayerInfo, LayerInfo$, null ],
      UndoTourStopChange: [ UndoTourStopChange, UndoTourStopChange$, null, IUndoStep ],
      Undo: [ Undo, Undo$, null ],
      UndoStep: [ UndoStep, UndoStep$, null, IUndoStep ],
      UndoTourSlidelistChange: [ UndoTourSlidelistChange, UndoTourSlidelistChange$, null, IUndoStep ],
      UndoTourPropertiesChange: [ UndoTourPropertiesChange, UndoTourPropertiesChange$, null, IUndoStep ],
      UiTools: [ UiTools, UiTools$, null ],
      Rectangle: [ Rectangle, Rectangle$, null ],
      Guid: [ Guid, Guid$, null ],
      Enums: [ Enums, Enums$, null ],
      Mouse: [ Mouse, null, null ],
      Language: [ Language, Language$, null ],
      Cursor: [ Cursor, Cursor$, null ],
      Cursors: [ Cursors, Cursors$, null ],
      SelectLink: [ SelectLink, SelectLink$, null ],
      PopupVolume: [ PopupVolume, PopupVolume$, null ],
      PopupColorPicker: [ PopupColorPicker, PopupColorPicker$, null ],
      OverlayProperties: [ OverlayProperties, OverlayProperties$, null ],
      BinaryReader: [ BinaryReader, BinaryReader$, null ],
      Bitmap: [ Bitmap, Bitmap$, null ],
      ColorPicker: [ ColorPicker, ColorPicker$, null ],
      ContextMenuStrip: [ ContextMenuStrip, ContextMenuStrip$, null ],
      ToolStripMenuItem: [ ToolStripMenuItem, ToolStripMenuItem$, null ],
      TagMe: [ TagMe, TagMe$, null ],
      Dialog: [ Dialog, Dialog$, null ],
      Histogram: [ Histogram, Histogram$, null ],
      SimpleInput: [ SimpleInput, SimpleInput$, null ],
      XmlTextWriter: [ XmlTextWriter, XmlTextWriter$, null ],
      VizLayer: [ VizLayer, VizLayer$, null ],
      DataItem: [ DataItem, DataItem$, null ],
      WebFile: [ WebFile, WebFile$, null ],
      WWTControl: [ WWTControl, WWTControl$, null ],
      WWTElementEvent: [ WWTElementEvent, WWTElementEvent$, null ],
      Annotation: [ Annotation, Annotation$, null ],
      BlendState: [ BlendState, BlendState$, null ],
      CameraParameters: [ CameraParameters, CameraParameters$, null ],
      Color: [ Color, Color$, null ],
      Colors: [ Colors, Colors$, null ],
      Constellations: [ Constellations, Constellations$, null ],
      Lineset: [ Lineset, Lineset$, null ],
      Linepoint: [ Linepoint, Linepoint$, null ],
      ConstellationFilter: [ ConstellationFilter, ConstellationFilter$, null ],
      Coordinates: [ Coordinates, Coordinates$, null ],
      PositionTexture: [ PositionTexture, PositionTexture$, null ],
      PositionColoredTextured: [ PositionColoredTextured, PositionColoredTextured$, null ],
      PositionColored: [ PositionColored, PositionColored$, null ],
      PositionNormalTexturedTangent: [ PositionNormalTexturedTangent, PositionNormalTexturedTangent$, null ],
      Vector3d: [ Vector3d, Vector3d$, null ],
      Vector2d: [ Vector2d, Vector2d$, null ],
      Matrix3d: [ Matrix3d, Matrix3d$, null ],
      Matrix2d: [ Matrix2d, Matrix2d$, null ],
      DoubleUtilities: [ DoubleUtilities, null, null ],
      PlaneD: [ PlaneD, PlaneD$, null ],
      Vector4d: [ Vector4d, Vector4d$, null ],
      PositionNormalTexturedX2: [ PositionNormalTexturedX2, PositionNormalTexturedX2$, null ],
      PositionNormalTextured: [ PositionNormalTextured, PositionNormalTextured$, null ],
      SphereHull: [ SphereHull, SphereHull$, null ],
      ConvexHull: [ ConvexHull, ConvexHull$, null ],
      Folder: [ Folder, Folder$, null, IThumbnail ],
      FolderBrowser: [ FolderBrowser, FolderBrowser$, null ],
      Imageset: [ Imageset, Imageset$, null, IThumbnail ],
      ViewMoverKenBurnsStyle: [ ViewMoverKenBurnsStyle, ViewMoverKenBurnsStyle$, null, IViewMover ],
      Place: [ Place, Place$, null, IThumbnail, IPlace ],
      Class1: [ Class1, Class1$, null ],
      PositionVertexBuffer: [ PositionVertexBuffer, PositionVertexBuffer$, VertexBufferBase ],
      PositionNormalTexturedVertexBuffer: [ PositionNormalTexturedVertexBuffer, PositionNormalTexturedVertexBuffer$, VertexBufferBase ],
      PositionNormalTexturedTangentVertexBuffer: [ PositionNormalTexturedTangentVertexBuffer, PositionNormalTexturedTangentVertexBuffer$, VertexBufferBase ],
      FitsImage: [ FitsImage, FitsImage$, WcsImage ],
      ScaleLinear: [ ScaleLinear, ScaleLinear$, ScaleMap ],
      ScaleLog: [ ScaleLog, ScaleLog$, ScaleMap ],
      ScalePow: [ ScalePow, ScalePow$, ScaleMap ],
      ScaleSqrt: [ ScaleSqrt, ScaleSqrt$, ScaleMap ],
      HistogramEqualization: [ HistogramEqualization, HistogramEqualization$, ScaleMap ],
      GreatCirlceRouteLayer: [ GreatCirlceRouteLayer, GreatCirlceRouteLayer$, Layer ],
      GridLayer: [ GridLayer, GridLayer$, Layer ],
      ImageSetLayer: [ ImageSetLayer, ImageSetLayer$, Layer ],
      Object3dLayer: [ Object3dLayer, Object3dLayer$, Layer, IUiController ],
      Object3dLayerUI: [ Object3dLayerUI, Object3dLayerUI$, LayerUI ],
      OrbitLayer: [ OrbitLayer, OrbitLayer$, Layer ],
      OrbitLayerUI: [ OrbitLayerUI, OrbitLayerUI$, LayerUI ],
      SpreadSheetLayer: [ SpreadSheetLayer, SpreadSheetLayer$, Layer ],
      TimeSeriesLayer: [ TimeSeriesLayer, TimeSeriesLayer$, Layer ],
      VoTableLayer: [ VoTableLayer, VoTableLayer$, Layer ],
      PlotTile: [ PlotTile, PlotTile$, Tile ],
      SkyImageTile: [ SkyImageTile, SkyImageTile$, Tile ],
      TangentTile: [ TangentTile, TangentTile$, Tile ],
      ToastTile: [ ToastTile, ToastTile$, Tile ],
      BitmapOverlay: [ BitmapOverlay, BitmapOverlay$, Overlay ],
      TextOverlay: [ TextOverlay, TextOverlay$, Overlay ],
      ShapeOverlay: [ ShapeOverlay, ShapeOverlay$, Overlay ],
      AudioOverlay: [ AudioOverlay, AudioOverlay$, Overlay ],
      FlipbookOverlay: [ FlipbookOverlay, FlipbookOverlay$, Overlay ],
      ToolStripSeparator: [ ToolStripSeparator, ToolStripSeparator$, ToolStripMenuItem ],
      FrameWizard: [ FrameWizard, FrameWizard$, Dialog ],
      ReferenceFrameProps: [ ReferenceFrameProps, ReferenceFrameProps$, Dialog ],
      GreatCircleDialog: [ GreatCircleDialog, GreatCircleDialog$, Dialog ],
      DataVizWizard: [ DataVizWizard, DataVizWizard$, Dialog ],
      Circle: [ Circle, Circle$, Annotation ],
      Poly: [ Poly, Poly$, Annotation ],
      PolyLine: [ PolyLine, PolyLine$, Annotation ],
      EquirectangularTile: [ EquirectangularTile, EquirectangularTile$, Tile ],
      MercatorTile: [ MercatorTile, MercatorTile$, Tile ],
      ISSLayer: [ ISSLayer, ISSLayer$, Object3dLayer ],
      SlideChangedEventArgs: [ SlideChangedEventArgs, SlideChangedEventArgs$, ss.EventArgs ],
      ArrivedEventArgs: [ ArrivedEventArgs, ArrivedEventArgs$, ss.EventArgs ],
      AnnotationClickEventArgs: [ AnnotationClickEventArgs, AnnotationClickEventArgs$, ss.EventArgs ],
      CollectionLoadedEventArgs: [ CollectionLoadedEventArgs, CollectionLoadedEventArgs$, ss.EventArgs ]
    });

  GFX.g_ACft = [ new ACFT(0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1719914, -2, -25, 0, 25, -13, 1578089, 156, 10, 32, 684185, -358), new ACFT(0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6434, 141, 28007, -107, 25697, -95, -5904, -130, 11141, -48, -2559, -55), new ACFT(0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 715, 0, 0, 0, 6, 0, -657, 0, -15, 0, -282, 0), new ACFT(0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 715, 0, 0, 0, 0, 0, -656, 0, 0, 0, -285, 0), new ACFT(0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 486, -5, -236, -4, -216, -4, -446, 5, -94, 0, -193, 0), new ACFT(0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 159, 0, 0, 0, 2, 0, -147, 0, -6, 0, -61, 0), new ACFT(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, -59, 0), new ACFT(0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 39, 0, 0, 0, 0, 0, -36, 0, 0, 0, -16, 0), new ACFT(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 33, 0, -10, 0, -9, 0, -30, 0, -5, 0, -13, 0), new ACFT(0, 2, 0, -1, 0, 0, 0, 0, 0, 0, 0, 31, 0, 1, 0, 1, 0, -28, 0, 0, 0, -12, 0), new ACFT(0, 3, -8, 3, 0, 0, 0, 0, 0, 0, 0, 8, 0, -28, 0, 25, 0, 8, 0, 11, 0, 3, 0), new ACFT(0, 5, -8, 3, 0, 0, 0, 0, 0, 0, 0, 8, 0, -28, 0, -25, 0, -8, 0, -11, 0, -3, 0), new ACFT(2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, -19, 0, 0, 0, -8, 0), new ACFT(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -19, 0, 0, 0, 0, 0, 17, 0, 0, 0, 8, 0), new ACFT(0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, -16, 0, 0, 0, -7, 0), new ACFT(0, 1, 0, -2, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 15, 0, 1, 0, 7, 0), new ACFT(0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0, 0, 1, 0, -15, 0, -3, 0, -6, 0), new ACFT(0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 11, 0, -1, 0, -1, 0, -10, 0, -1, 0, -5, 0), new ACFT(2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -11, 0, -10, 0, 0, 0, -4, 0, 0, 0), new ACFT(0, 1, 0, -1, 0, 0, 0, 0, 0, 0, 0, -11, 0, -2, 0, -2, 0, 9, 0, -1, 0, 4, 0), new ACFT(0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, -8, 0, -8, 0, 6, 0, -3, 0, 3, 0), new ACFT(0, 3, 0, -2, 0, 0, 0, 0, 0, 0, 0, -10, 0, 0, 0, 0, 0, 9, 0, 0, 0, 4, 0), new ACFT(1, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, 0, 0, 0, 0, 0, -9, 0, 0, 0, -4, 0), new ACFT(2, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, 0, 0, 0, 0, 0, -8, 0, 0, 0, -4, 0), new ACFT(0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, -9, 0, -8, 0, 0, 0, -3, 0, 0, 0), new ACFT(2, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -9, 0, 8, 0, 0, 0, 3, 0, 0, 0), new ACFT(0, 3, -2, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, -8, 0, 0, 0, -3, 0), new ACFT(0, 0, 0, 0, 0, 0, 0, 1, 2, -1, 0, 8, 0, 0, 0, 0, 0, -7, 0, 0, 0, -3, 0), new ACFT(8, -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, -7, 0, -6, 0, 4, 0, -3, 0, 2, 0), new ACFT(8, -14, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, -7, 0, 6, 0, -4, 0, 3, 0, -2, 0), new ACFT(0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, -5, 0, -4, 0, 5, 0, -2, 0, 2, 0), new ACFT(3, -4, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, -1, 0, -2, 0, -7, 0, 1, 0, -4, 0), new ACFT(0, 2, 0, -2, 0, 0, 0, 0, 0, 0, 0, 4, 0, -6, 0, -5, 0, -4, 0, -2, 0, -2, 0), new ACFT(3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, -6, 0, 0, 0, -3, 0, 0, 0), new ACFT(0, 2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, -5, 0, -4, 0, -5, 0, -2, 0, -2, 0), new ACFT(0, 0, 0, 0, 0, 0, 0, 1, -2, 0, 0, 5, 0, 0, 0, 0, 0, -5, 0, 0, 0, -2, 0) ];
  GFX.deltaTTable = [ 121, 112, 103, 95, 88, 82, 77, 72, 68, 63, 60, 56, 53, 51, 48, 46, 44, 42, 40, 38, 35, 33, 31, 29, 26, 24, 22, 20, 18, 16, 14, 12, 11, 10, 9, 8, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 14, 13, 13.1, 12.5, 12.2, 12, 12, 12, 12, 12, 12, 11.9, 11.6, 11, 10.2, 9.2, 8.2, 7.1, 6.2, 5.6, 5.4, 5.3, 5.4, 5.6, 5.9, 6.2, 6.5, 6.8, 7.1, 7.3, 7.5, 7.6, 7.7, 7.3, 6.2, 5.2, 2.7, 1.4, -1.2, -2.8, -3.8, -4.8, -5.5, -5.3, -5.6, -5.7, -5.9, -6, -6.3, -6.5, -6.2, -4.7, -2.8, -0.1, 2.6, 5.3, 7.7, 10.4, 13.3, 16, 18.2, 20.2, 21.2, 22.4, 23.5, 23.8, 24.3, 24, 23.9, 23.9, 23.7, 24, 24.3, 25.3, 26.2, 27.3, 28.2, 29.1, 30, 30.7, 31.4, 32.2, 33.1, 34, 35, 36.5, 38.3, 40.18, 42.2, 44.5, 46.5, 48.5, 50.54, 52.2, 53.8, 54.9, 55.8, 56.86, 58.31, 59.99, 61.63, 62.97 ];
  GFX.g_L0EarthCoefficients = [ new VSC(175347046, 0, 0), new VSC(3341656, 4.6692568, 6283.07585), new VSC(34894, 4.6261, 12566.1517), new VSC(3497, 2.7441, 5753.3849), new VSC(3418, 2.8289, 3.5231), new VSC(3136, 3.6277, 77713.7715), new VSC(2676, 4.4181, 7860.4194), new VSC(2343, 6.1352, 3930.2097), new VSC(1324, 0.7425, 11506.7698), new VSC(1273, 2.0371, 529.691), new VSC(1199, 1.1096, 1577.3435), new VSC(990, 5.233, 5884.927), new VSC(902, 2.045, 26.298), new VSC(857, 3.508, 398.149), new VSC(780, 1.179, 5223.694), new VSC(753, 2.533, 5507.553), new VSC(505, 4.583, 18849.228), new VSC(492, 4.205, 775.523), new VSC(357, 2.92, 0.067), new VSC(317, 5.849, 11790.629), new VSC(284, 1.899, 796.288), new VSC(271, 0.315, 10977.079), new VSC(243, 0.345, 5486.778), new VSC(206, 4.806, 2544.314), new VSC(205, 1.869, 5573.143), new VSC(202, 2.458, 6069.777), new VSC(156, 0.833, 213.299), new VSC(132, 3.411, 2942.463), new VSC(126, 1.083, 20.775), new VSC(115, 0.645, 0.98), new VSC(103, 0.636, 4694.003), new VSC(102, 0.976, 15720.839), new VSC(102, 4.267, 7.114), new VSC(99, 6.21, 2146.17), new VSC(98, 0.68, 155.42), new VSC(86, 5.98, 161000.69), new VSC(85, 1.3, 6275.96), new VSC(85, 3.67, 71430.7), new VSC(80, 1.81, 17260.15), new VSC(79, 3.04, 12036.46), new VSC(75, 1.76, 5088.63), new VSC(74, 3.5, 3154.69), new VSC(74, 4.68, 801.82), new VSC(70, 0.83, 9437.76), new VSC(62, 3.98, 8827.39), new VSC(61, 1.82, 7084.9), new VSC(57, 2.78, 6286.6), new VSC(56, 4.39, 14143.5), new VSC(56, 3.47, 6279.55), new VSC(52, 0.19, 12139.55), new VSC(52, 1.33, 1748.02), new VSC(51, 0.28, 5856.48), new VSC(49, 0.49, 1194.45), new VSC(41, 5.37, 8429.24), new VSC(41, 2.4, 19651.05), new VSC(39, 6.17, 10447.39), new VSC(37, 6.04, 10213.29), new VSC(37, 2.57, 1059.38), new VSC(36, 1.71, 2352.87), new VSC(36, 1.78, 6812.77), new VSC(33, 0.59, 17789.85), new VSC(30, 0.44, 83996.85), new VSC(30, 2.74, 1349.87), new VSC(25, 3.16, 4690.48) ];
  GFX.g_L1EarthCoefficients = [ new VSC(628331966747, 0, 0), new VSC(206059, 2.678235, 6283.07585), new VSC(4303, 2.6351, 12566.1517), new VSC(425, 1.59, 3.523), new VSC(119, 5.796, 26.298), new VSC(109, 2.966, 1577.344), new VSC(93, 2.59, 18849.23), new VSC(72, 1.14, 529.69), new VSC(68, 1.87, 398.15), new VSC(67, 4.41, 5507.55), new VSC(59, 2.89, 5223.69), new VSC(56, 2.17, 155.42), new VSC(45, 0.4, 796.3), new VSC(36, 0.47, 775.52), new VSC(29, 2.65, 7.11), new VSC(21, 5.43, 0.98), new VSC(19, 1.85, 5486.78), new VSC(19, 4.97, 213.3), new VSC(17, 2.99, 6275.96), new VSC(16, 0.03, 2544.31), new VSC(16, 1.43, 2146.17), new VSC(15, 1.21, 10977.08), new VSC(12, 2.83, 1748.02), new VSC(12, 3.26, 5088.63), new VSC(12, 5.27, 1194.45), new VSC(12, 2.08, 4694), new VSC(11, 0.77, 553.57), new VSC(10, 1.3, 6286.6), new VSC(10, 4.24, 1349.87), new VSC(9, 2.7, 242.73), new VSC(9, 5.64, 951.72), new VSC(8, 5.3, 2352.87), new VSC(6, 2.65, 9437.76), new VSC(6, 4.67, 4690.48) ];
  GFX.g_L2EarthCoefficients = [ new VSC(52919, 0, 0), new VSC(8720, 1.0721, 6283.0758), new VSC(309, 0.867, 12566.152), new VSC(27, 0.05, 3.52), new VSC(16, 5.19, 26.3), new VSC(16, 3.68, 155.42), new VSC(10, 0.76, 18849.23), new VSC(9, 2.06, 77713.77), new VSC(7, 0.83, 775.52), new VSC(5, 4.66, 1577.34), new VSC(4, 1.03, 7.11), new VSC(4, 3.44, 5573.14), new VSC(3, 5.14, 796.3), new VSC(3, 6.05, 5507.55), new VSC(3, 1.19, 242.73), new VSC(3, 6.12, 529.69), new VSC(3, 0.31, 398.15), new VSC(3, 2.28, 553.57), new VSC(2, 4.38, 5223.69), new VSC(2, 3.75, 0.98) ];
  GFX.g_L3EarthCoefficients = [ new VSC(289, 5.844, 6283.076), new VSC(35, 0, 0), new VSC(17, 5.49, 12566.15), new VSC(3, 5.2, 155.42), new VSC(1, 4.72, 3.52), new VSC(1, 5.3, 18849.23), new VSC(1, 5.97, 242.73) ];
  GFX.g_L4EarthCoefficients = [ new VSC(114, 3.142, 0), new VSC(8, 4.13, 6283.08), new VSC(1, 3.84, 12566.15) ];
  GFX.g_L5EarthCoefficients = [ new VSC(1, 3.14, 0) ];
  GFX.g_B0EarthCoefficients = [ new VSC(280, 3.199, 84334.662), new VSC(102, 5.422, 5507.553), new VSC(80, 3.88, 5223.69), new VSC(44, 3.7, 2352.87), new VSC(32, 4, 1577.34) ];
  GFX.g_B1EarthCoefficients = [ new VSC(9, 3.9, 5507.55), new VSC(6, 1.73, 5223.69) ];
  GFX.g_B2EarthCoefficients = [ new VSC(22378, 3.38509, 10213.28555), new VSC(282, 0, 0), new VSC(173, 5.256, 20426.571), new VSC(27, 3.87, 30639.86) ];
  GFX.g_B3EarthCoefficients = [ new VSC(647, 4.992, 10213.286), new VSC(20, 3.14, 0), new VSC(6, 0.77, 20426.57), new VSC(3, 5.44, 30639.86) ];
  GFX.g_B4EarthCoefficients = [ new VSC(14, 0.32, 10213.29) ];
  GFX.g_R0EarthCoefficients = [ new VSC(100013989, 0, 0), new VSC(1670700, 3.0984635, 6283.07585), new VSC(13956, 3.05525, 12566.1517), new VSC(3084, 5.1985, 77713.7715), new VSC(1628, 1.1739, 5753.3849), new VSC(1576, 2.8469, 7860.4194), new VSC(925, 5.453, 11506.77), new VSC(542, 4.564, 3930.21), new VSC(472, 3.661, 5884.927), new VSC(346, 0.964, 5507.553), new VSC(329, 5.9, 5223.694), new VSC(307, 0.299, 5573.143), new VSC(243, 4.273, 11790.629), new VSC(212, 5.847, 1577.344), new VSC(186, 5.022, 10977.079), new VSC(175, 3.012, 18849.228), new VSC(110, 5.055, 5486.778), new VSC(98, 0.89, 6069.78), new VSC(86, 5.69, 15720.84), new VSC(86, 1.27, 161000.69), new VSC(65, 0.27, 17260.15), new VSC(63, 0.92, 529.69), new VSC(57, 2.01, 83996.85), new VSC(56, 5.24, 71430.7), new VSC(49, 3.25, 2544.31), new VSC(47, 2.58, 775.52), new VSC(45, 5.54, 9437.76), new VSC(43, 6.01, 6275.96), new VSC(39, 5.36, 4694), new VSC(38, 2.39, 8827.39), new VSC(37, 0.83, 19651.05), new VSC(37, 4.9, 12139.55), new VSC(36, 1.67, 12036.46), new VSC(35, 1.84, 2942.46), new VSC(33, 0.24, 7084.9), new VSC(32, 0.18, 5088.63), new VSC(32, 1.78, 398.15), new VSC(28, 1.21, 6286.6), new VSC(28, 1.9, 6279.55), new VSC(26, 4.59, 10447.39) ];
  GFX.g_R1EarthCoefficients = [ new VSC(103019, 1.10749, 6283.07585), new VSC(1721, 1.0644, 12566.1517), new VSC(702, 3.142, 0), new VSC(32, 1.02, 18849.23), new VSC(31, 2.84, 5507.55), new VSC(25, 1.32, 5223.69), new VSC(18, 1.42, 1577.34), new VSC(10, 5.91, 10977.08), new VSC(9, 1.42, 6275.96), new VSC(9, 0.27, 5486.78) ];
  GFX.g_R2EarthCoefficients = [ new VSC(4359, 5.7846, 6283.0758), new VSC(124, 5.579, 12566.152), new VSC(12, 3.14, 0), new VSC(9, 3.63, 77713.77), new VSC(6, 1.87, 5573.14), new VSC(3, 5.47, 18849.23) ];
  GFX.g_R3EarthCoefficients = [ new VSC(145, 4.273, 6283.076), new VSC(7, 3.92, 12566.15) ];
  GFX.g_R4EarthCoefficients = [ new VSC(4, 2.56, 6283.08) ];
  GFX.g_L1EarthCoefficientsJ2000 = [ new VSC(628307584999, 0, 0), new VSC(206059, 2.678235, 6283.07585), new VSC(4303, 2.6351, 12566.1517), new VSC(425, 1.59, 3.523), new VSC(119, 5.796, 26.298), new VSC(109, 2.966, 1577.344), new VSC(93, 2.59, 18849.23), new VSC(72, 1.14, 529.69), new VSC(68, 1.87, 398.15), new VSC(67, 4.41, 5507.55), new VSC(59, 2.89, 5223.69), new VSC(56, 2.17, 155.42), new VSC(45, 0.4, 796.3), new VSC(36, 0.47, 775.52), new VSC(29, 2.65, 7.11), new VSC(21, 5.43, 0.98), new VSC(19, 1.85, 5486.78), new VSC(19, 4.97, 213.3), new VSC(17, 2.99, 6275.96), new VSC(16, 0.03, 2544.31), new VSC(16, 1.43, 2146.17), new VSC(15, 1.21, 10977.08), new VSC(12, 2.83, 1748.02), new VSC(12, 3.26, 5088.63), new VSC(12, 5.27, 1194.45), new VSC(12, 2.08, 4694), new VSC(11, 0.77, 553.57), new VSC(10, 1.3, 6286.6), new VSC(10, 4.24, 1349.87), new VSC(9, 2.7, 242.73), new VSC(9, 5.64, 951.72), new VSC(8, 5.3, 2352.87), new VSC(6, 2.65, 9437.76), new VSC(6, 4.67, 4690.48) ];
  GFX.g_L2EarthCoefficientsJ2000 = [ new VSC(8722, 1.0725, 6283.0758), new VSC(991, 3.1416, 0), new VSC(295, 0.437, 12566.152), new VSC(27, 0.05, 3.52), new VSC(16, 5.19, 26.3), new VSC(16, 3.69, 155.42), new VSC(9, 0.3, 18849.23), new VSC(9, 2.06, 77713.77), new VSC(7, 0.83, 775.52), new VSC(5, 4.66, 1577.34), new VSC(4, 1.03, 7.11), new VSC(4, 3.44, 5573.14), new VSC(3, 5.14, 796.3), new VSC(3, 6.05, 5507.55), new VSC(3, 1.19, 242.73), new VSC(3, 6.12, 529.69), new VSC(3, 0.3, 398.15), new VSC(3, 2.28, 553.57), new VSC(2, 4.38, 5223.69), new VSC(2, 3.75, 0.98) ];
  GFX.g_L3EarthCoefficientsJ2000 = [ new VSC(289, 5.842, 6283.076), new VSC(21, 6.05, 12566.15), new VSC(3, 5.2, 155.42), new VSC(3, 3.14, 0), new VSC(1, 4.72, 3.52), new VSC(1, 5.97, 242.73), new VSC(1, 5.54, 18849.23) ];
  GFX.g_L4EarthCoefficientsJ2000 = [ new VSC(8, 4.14, 6283.08), new VSC(1, 3.28, 12566.15) ];
  GFX.g_B1EarthCoefficientsJ2000 = [ new VSC(227778, 3.413766, 6283.07585), new VSC(3806, 3.3706, 12566.1517), new VSC(3620, 0, 0), new VSC(72, 3.33, 18849.23), new VSC(8, 3.89, 5507.55), new VSC(8, 1.79, 5223.69), new VSC(6, 5.2, 2352.87) ];
  GFX.g_B2EarthCoefficientsJ2000 = [ new VSC(9721, 5.1519, 6283.07585), new VSC(233, 3.1416, 0), new VSC(134, 0.644, 12566.152), new VSC(7, 1.07, 18849.23) ];
  GFX.g_B3EarthCoefficientsJ2000 = [ new VSC(276, 0.595, 6283.076), new VSC(17, 3.14, 0), new VSC(4, 0.12, 12566.15) ];
  GFX.g_B4EarthCoefficientsJ2000 = [ new VSC(6, 2.27, 6283.08), new VSC(1, 0, 0) ];
  GFX.g_L0JupiterCoefficients = [ new VSC(59954691, 0, 0), new VSC(9695899, 5.0619179, 529.6909651), new VSC(573610, 1.444062, 7.113547), new VSC(306389, 5.417347, 1059.38193), new VSC(97178, 4.14265, 632.78374), new VSC(72903, 3.64043, 522.57742), new VSC(64264, 3.41145, 103.09277), new VSC(39806, 2.29377, 419.48464), new VSC(38858, 1.27232, 316.39187), new VSC(27965, 1.78455, 536.80451), new VSC(13590, 5.77481, 1589.0729), new VSC(8769, 3.63, 949.1756), new VSC(8246, 3.5823, 206.1855), new VSC(7368, 5.081, 735.8765), new VSC(6263, 0.025, 213.2991), new VSC(6114, 4.5132, 1162.4747), new VSC(5305, 4.1863, 1052.2684), new VSC(5305, 1.3067, 14.2271), new VSC(4905, 1.3208, 110.2063), new VSC(4647, 4.6996, 3.9322), new VSC(3045, 4.3168, 426.5982), new VSC(2610, 1.5667, 846.0828), new VSC(2028, 1.0638, 3.1814), new VSC(1921, 0.9717, 639.8973), new VSC(1765, 2.1415, 1066.4955), new VSC(1723, 3.8804, 1265.5675), new VSC(1633, 3.582, 515.4639), new VSC(1432, 4.2968, 625.6702), new VSC(973, 4.098, 95.979), new VSC(884, 2.437, 412.371), new VSC(733, 6.085, 838.969), new VSC(731, 3.806, 1581.959), new VSC(709, 1.293, 742.99), new VSC(692, 6.134, 2118.764), new VSC(614, 4.109, 1478.867), new VSC(582, 4.54, 309.278), new VSC(495, 3.756, 323.505), new VSC(441, 2.958, 454.909), new VSC(417, 1.036, 2.488), new VSC(390, 4.897, 1692.166), new VSC(376, 4.703, 1368.66), new VSC(341, 5.715, 533.623), new VSC(330, 4.74, 0.048), new VSC(262, 1.877, 0.963), new VSC(261, 0.82, 380.128), new VSC(257, 3.724, 199.072), new VSC(244, 5.22, 728.763), new VSC(235, 1.227, 909.819), new VSC(220, 1.651, 543.918), new VSC(207, 1.855, 525.759), new VSC(202, 1.807, 1375.774), new VSC(197, 5.293, 1155.361), new VSC(175, 3.73, 942.062), new VSC(175, 3.226, 1898.351), new VSC(175, 5.91, 956.289), new VSC(158, 4.365, 1795.258), new VSC(151, 3.906, 74.782), new VSC(149, 4.377, 1685.052), new VSC(141, 3.136, 491.558), new VSC(138, 1.318, 1169.588), new VSC(131, 4.169, 1045.155), new VSC(117, 2.5, 1596.186), new VSC(117, 3.389, 0.521), new VSC(106, 4.554, 526.51) ];
  GFX.g_L1JupiterCoefficients = [ new VSC(52993480757, 0, 0), new VSC(489741, 4.220667, 529.690965), new VSC(228919, 6.026475, 7.113547), new VSC(27655, 4.57266, 1059.38193), new VSC(20721, 5.45939, 522.57742), new VSC(12106, 0.16986, 536.80451), new VSC(6068, 4.4242, 103.0928), new VSC(5434, 3.9848, 419.4846), new VSC(4238, 5.8901, 14.2271), new VSC(2212, 5.2677, 206.1855), new VSC(1746, 4.9267, 1589.0729), new VSC(1296, 5.5513, 3.1814), new VSC(1173, 5.8565, 1052.2684), new VSC(1163, 0.5145, 3.9322), new VSC(1099, 5.307, 515.4639), new VSC(1007, 0.4648, 735.8765), new VSC(1004, 3.1504, 426.5982), new VSC(848, 5.758, 110.206), new VSC(827, 4.803, 213.299), new VSC(816, 0.586, 1066.495), new VSC(725, 5.518, 639.897), new VSC(568, 5.989, 625.67), new VSC(474, 4.132, 412.371), new VSC(413, 5.737, 95.979), new VSC(345, 4.242, 632.784), new VSC(336, 3.732, 1162.475), new VSC(234, 4.035, 949.176), new VSC(234, 6.243, 309.278), new VSC(199, 1.505, 838.969), new VSC(195, 2.219, 323.505), new VSC(187, 6.086, 742.99), new VSC(184, 6.28, 543.918), new VSC(171, 5.417, 199.072), new VSC(131, 0.626, 728.763), new VSC(115, 0.68, 846.083), new VSC(115, 5.286, 2118.764), new VSC(108, 4.493, 956.289), new VSC(80, 5.82, 1045.15), new VSC(72, 5.34, 942.06), new VSC(70, 5.97, 532.87), new VSC(67, 5.73, 21.34), new VSC(66, 0.13, 526.51), new VSC(65, 6.09, 1581.96), new VSC(59, 0.59, 1155.36), new VSC(58, 0.99, 1596.19), new VSC(57, 5.97, 1169.59), new VSC(57, 1.41, 533.62), new VSC(55, 5.43, 10.29), new VSC(52, 5.73, 117.32), new VSC(52, 0.23, 1368.66), new VSC(50, 6.08, 525.76), new VSC(47, 3.63, 1478.87), new VSC(47, 0.51, 1265.57), new VSC(40, 4.16, 1692.17), new VSC(34, 0.1, 302.16), new VSC(33, 5.04, 220.41), new VSC(32, 5.37, 508.35), new VSC(29, 5.42, 1272.68), new VSC(29, 3.36, 4.67), new VSC(29, 0.76, 88.87), new VSC(25, 1.61, 831.86) ];
  GFX.g_L2JupiterCoefficients = [ new VSC(47234, 4.32148, 7.11355), new VSC(38966, 0, 0), new VSC(30629, 2.93021, 529.69097), new VSC(3189, 1.055, 522.5774), new VSC(2729, 4.8455, 536.8045), new VSC(2723, 3.4141, 1059.3819), new VSC(1721, 4.1873, 14.2271), new VSC(383, 5.768, 419.485), new VSC(378, 0.76, 515.464), new VSC(367, 6.055, 103.093), new VSC(337, 3.786, 3.181), new VSC(308, 0.694, 206.186), new VSC(218, 3.814, 1589.073), new VSC(199, 5.34, 1066.495), new VSC(197, 2.484, 3.932), new VSC(156, 1.406, 1052.268), new VSC(146, 3.814, 639.897), new VSC(142, 1.634, 426.598), new VSC(130, 5.837, 412.371), new VSC(117, 1.414, 625.67), new VSC(97, 4.03, 110.21), new VSC(91, 1.11, 95.98), new VSC(87, 2.52, 632.78), new VSC(79, 4.64, 543.92), new VSC(72, 2.22, 735.88), new VSC(58, 0.83, 199.07), new VSC(57, 3.12, 213.3), new VSC(49, 1.67, 309.28), new VSC(40, 4.02, 21.34), new VSC(40, 0.62, 323.51), new VSC(36, 2.33, 728.76), new VSC(29, 3.61, 10.29), new VSC(28, 3.24, 838.97), new VSC(26, 4.5, 742.99), new VSC(26, 2.51, 1162.47), new VSC(25, 1.22, 1045.15), new VSC(24, 3.01, 956.29), new VSC(19, 4.29, 532.87), new VSC(18, 0.81, 508.35), new VSC(17, 4.2, 2118.76), new VSC(17, 1.83, 526.51), new VSC(15, 5.81, 1596.19), new VSC(15, 0.68, 942.06), new VSC(15, 4, 117.32), new VSC(14, 5.95, 316.39), new VSC(14, 1.8, 302.16), new VSC(13, 2.52, 88.87), new VSC(13, 4.37, 1169.59), new VSC(11, 4.44, 525.76), new VSC(10, 1.72, 1581.96), new VSC(9, 2.18, 1155.36), new VSC(9, 3.29, 220.41), new VSC(9, 3.32, 831.86), new VSC(8, 5.76, 846.08), new VSC(8, 2.71, 533.62), new VSC(7, 2.18, 1265.57), new VSC(6, 0.5, 949.18) ];
  GFX.g_L3JupiterCoefficients = [ new VSC(6502, 2.5986, 7.1135), new VSC(1357, 1.3464, 529.691), new VSC(471, 2.475, 14.227), new VSC(417, 3.245, 536.805), new VSC(353, 2.974, 522.577), new VSC(155, 2.076, 1059.382), new VSC(87, 2.51, 515.46), new VSC(44, 0, 0), new VSC(34, 3.83, 1066.5), new VSC(28, 2.45, 206.19), new VSC(24, 1.28, 412.37), new VSC(23, 2.98, 543.92), new VSC(20, 2.1, 639.9), new VSC(20, 1.4, 419.48), new VSC(19, 1.59, 103.09), new VSC(17, 2.3, 21.34), new VSC(17, 2.6, 1589.07), new VSC(16, 3.15, 625.67), new VSC(16, 3.36, 1052.27), new VSC(13, 2.76, 95.98), new VSC(13, 2.54, 199.07), new VSC(13, 6.27, 426.6), new VSC(9, 1.76, 10.29), new VSC(9, 2.27, 110.21), new VSC(7, 3.43, 309.28), new VSC(7, 4.04, 728.76), new VSC(6, 2.52, 508.35), new VSC(5, 2.91, 1045.15), new VSC(5, 5.25, 323.51), new VSC(4, 4.3, 88.87), new VSC(4, 3.52, 302.16), new VSC(4, 4.09, 735.88), new VSC(3, 1.43, 956.29), new VSC(3, 4.36, 1596.19), new VSC(3, 1.25, 213.3), new VSC(3, 5.02, 838.97), new VSC(3, 2.24, 117.32), new VSC(2, 2.9, 742.99), new VSC(2, 2.36, 942.06) ];
  GFX.g_L4JupiterCoefficients = [ new VSC(669, 0.853, 7.114), new VSC(114, 3.142, 0), new VSC(100, 0.743, 14.227), new VSC(50, 1.65, 536.8), new VSC(44, 5.82, 529.69), new VSC(32, 4.86, 522.58), new VSC(15, 4.29, 515.46), new VSC(9, 0.71, 1059.38), new VSC(5, 1.3, 543.92), new VSC(4, 2.32, 1066.5), new VSC(4, 0.48, 21.34), new VSC(3, 3, 412.37), new VSC(2, 0.4, 639.9), new VSC(2, 4.26, 199.07), new VSC(2, 4.91, 625.67), new VSC(2, 4.26, 206.19), new VSC(1, 5.26, 1052.27), new VSC(1, 4.72, 95.98), new VSC(1, 1.29, 1589.07) ];
  GFX.g_L5JupiterCoefficients = [ new VSC(50, 5.26, 7.11), new VSC(16, 5.25, 14.23), new VSC(4, 0.01, 536.8), new VSC(2, 1.1, 522.58), new VSC(1, 3.14, 0) ];
  GFX.g_B0JupiterCoefficients = [ new VSC(2268616, 3.5585261, 529.6909651), new VSC(110090, 0, 0), new VSC(109972, 3.908093, 1059.38193), new VSC(8101, 3.6051, 522.5774), new VSC(6438, 0.3063, 536.8045), new VSC(6044, 4.2588, 1589.0729), new VSC(1107, 2.9853, 1162.4747), new VSC(944, 1.675, 426.598), new VSC(942, 2.936, 1052.268), new VSC(894, 1.754, 7.114), new VSC(836, 5.179, 103.093), new VSC(767, 2.155, 632.784), new VSC(684, 3.678, 213.299), new VSC(629, 0.643, 1066.495), new VSC(559, 0.014, 846.083), new VSC(532, 2.703, 110.206), new VSC(464, 1.173, 949.176), new VSC(431, 2.608, 419.485), new VSC(351, 4.611, 2118.764), new VSC(132, 4.778, 742.99), new VSC(123, 3.35, 1692.166), new VSC(116, 1.387, 323.505), new VSC(115, 5.049, 316.392), new VSC(104, 3.701, 515.464), new VSC(103, 2.319, 1478.867), new VSC(102, 3.153, 1581.959) ];
  GFX.g_B1JupiterCoefficients = [ new VSC(177352, 5.701665, 529.690965), new VSC(3230, 5.7794, 1059.3819), new VSC(3081, 5.4746, 522.5774), new VSC(2212, 4.7348, 536.8045), new VSC(1694, 3.1416, 0), new VSC(346, 4.746, 1052.268), new VSC(234, 5.189, 1066.495), new VSC(196, 6.186, 7.114), new VSC(150, 3.927, 1589.073), new VSC(114, 3.439, 632.784), new VSC(97, 2.91, 949.18), new VSC(82, 5.08, 1162.47), new VSC(77, 2.51, 103.09), new VSC(77, 0.61, 419.48), new VSC(74, 5.5, 515.46), new VSC(61, 5.45, 213.3), new VSC(50, 3.95, 735.88), new VSC(46, 0.54, 110.21), new VSC(45, 1.9, 846.08), new VSC(37, 4.7, 543.92), new VSC(36, 6.11, 316.39), new VSC(32, 4.92, 1581.96) ];
  GFX.g_B2JupiterCoefficients = [ new VSC(8094, 1.4632, 529.691), new VSC(813, 3.1416, 0), new VSC(742, 0.957, 522.577), new VSC(399, 2.899, 536.805), new VSC(342, 1.447, 1059.382), new VSC(74, 0.41, 1052.27), new VSC(46, 3.48, 1066.5), new VSC(30, 1.93, 1589.07), new VSC(29, 0.99, 515.46), new VSC(23, 4.27, 7.11), new VSC(14, 2.92, 543.92), new VSC(12, 5.22, 632.78), new VSC(11, 4.88, 949.18), new VSC(6, 6.21, 1045.15) ];
  GFX.g_B3JupiterCoefficients = [ new VSC(252, 3.381, 529.691), new VSC(122, 2.733, 522.577), new VSC(49, 1.04, 536.8), new VSC(11, 2.31, 1052.27), new VSC(8, 2.77, 515.46), new VSC(7, 4.25, 1059.38), new VSC(6, 1.78, 1066.5), new VSC(4, 1.13, 543.92), new VSC(3, 3.14, 0) ];
  GFX.g_B4JupiterCoefficients = [ new VSC(15, 4.53, 522.58), new VSC(5, 4.47, 529.69), new VSC(4, 5.44, 536.8), new VSC(3, 0, 0), new VSC(2, 4.52, 515.46), new VSC(1, 4.2, 1052.27) ];
  GFX.g_B5JupiterCoefficients = [ new VSC(1, 0.09, 522.58) ];
  GFX.g_R0JupiterCoefficients = [ new VSC(520887429, 0, 0), new VSC(25209327, 3.4910864, 529.69096509), new VSC(610600, 3.841154, 1059.38193), new VSC(282029, 2.574199, 632.783739), new VSC(187647, 2.075904, 522.577418), new VSC(86793, 0.71001, 419.48464), new VSC(72063, 0.21466, 536.80451), new VSC(65517, 5.97996, 316.39187), new VSC(30135, 2.16132, 949.17561), new VSC(29135, 1.67759, 103.09277), new VSC(23947, 0.27458, 7.11355), new VSC(23453, 3.54023, 735.87651), new VSC(22284, 4.19363, 1589.0729), new VSC(13033, 2.96043, 1162.4747), new VSC(12749, 2.7155, 1052.26838), new VSC(9703, 1.9067, 206.1855), new VSC(9161, 4.4135, 213.2991), new VSC(7895, 2.4791, 426.5982), new VSC(7058, 2.1818, 1265.5675), new VSC(6138, 6.2642, 846.0828), new VSC(5477, 5.6573, 639.8973), new VSC(4170, 2.0161, 515.4639), new VSC(4137, 2.7222, 625.6702), new VSC(3503, 0.5653, 1066.4955), new VSC(2617, 2.0099, 1581.9593), new VSC(2500, 4.5518, 838.9693), new VSC(2128, 6.1275, 742.9901), new VSC(1912, 0.8562, 412.3711), new VSC(1611, 3.0887, 1368.6603), new VSC(1479, 2.6803, 1478.8666), new VSC(1231, 1.8904, 323.5054), new VSC(1217, 1.8017, 110.2063), new VSC(1015, 1.3867, 454.9094), new VSC(999, 2.872, 309.278), new VSC(961, 4.549, 2118.764), new VSC(886, 4.148, 533.623), new VSC(821, 1.593, 1898.351), new VSC(812, 5.941, 909.819), new VSC(777, 3.677, 728.763), new VSC(727, 3.988, 1155.361), new VSC(655, 2.791, 1685.052), new VSC(654, 3.382, 1692.166), new VSC(621, 4.823, 956.289), new VSC(615, 2.276, 942.062), new VSC(562, 0.081, 543.918), new VSC(542, 0.284, 525.759) ];
  GFX.g_R1JupiterCoefficients = [ new VSC(1271802, 2.6493751, 529.6909651), new VSC(61662, 3.00076, 1059.38193), new VSC(53444, 3.89718, 522.57742), new VSC(41390, 0, 0), new VSC(31185, 4.88277, 536.80451), new VSC(11847, 2.4133, 419.48464), new VSC(9166, 4.7598, 7.1135), new VSC(3404, 3.3469, 1589.0729), new VSC(3203, 5.2108, 735.8765), new VSC(3176, 2.793, 103.0928), new VSC(2806, 3.7422, 515.4639), new VSC(2677, 4.3305, 1052.2684), new VSC(2600, 3.6344, 206.1855), new VSC(2412, 1.4695, 426.5982), new VSC(2101, 3.9276, 639.8973), new VSC(1646, 4.4163, 1066.4955), new VSC(1641, 4.4163, 625.6702), new VSC(1050, 3.1611, 213.2991), new VSC(1025, 2.5543, 412.3711), new VSC(806, 2.678, 632.784), new VSC(741, 2.171, 1162.475), new VSC(677, 6.25, 838.969), new VSC(567, 4.577, 742.99), new VSC(485, 2.469, 949.176), new VSC(469, 4.71, 543.918), new VSC(445, 0.403, 323.505), new VSC(416, 5.368, 728.763), new VSC(402, 4.605, 309.278), new VSC(347, 4.681, 14.227), new VSC(338, 3.168, 956.289), new VSC(261, 5.343, 846.083), new VSC(247, 3.923, 942.062), new VSC(220, 4.842, 1368.66), new VSC(203, 5.6, 1155.361), new VSC(200, 4.439, 1045.155), new VSC(197, 3.706, 2118.764), new VSC(196, 3.759, 199.072), new VSC(184, 4.265, 95.979), new VSC(180, 4.402, 532.872), new VSC(170, 4.846, 526.51), new VSC(146, 6.13, 533.623), new VSC(133, 1.322, 110.206), new VSC(132, 4.512, 525.759) ];
  GFX.g_R2JupiterCoefficients = [ new VSC(79645, 1.35866, 529.69097), new VSC(8252, 5.7777, 522.5774), new VSC(7030, 3.2748, 536.8045), new VSC(5314, 1.8384, 1059.3819), new VSC(1861, 2.9768, 7.1135), new VSC(964, 5.48, 515.464), new VSC(836, 4.199, 419.485), new VSC(498, 3.142, 0), new VSC(427, 2.228, 639.897), new VSC(406, 3.783, 1066.495), new VSC(377, 2.242, 1589.073), new VSC(363, 5.368, 206.186), new VSC(342, 6.099, 1052.268), new VSC(339, 6.127, 625.67), new VSC(333, 0.003, 426.598), new VSC(280, 4.262, 412.371), new VSC(257, 0.963, 632.784), new VSC(230, 0.705, 735.877), new VSC(201, 3.069, 543.918), new VSC(200, 4.429, 103.093), new VSC(139, 2.932, 14.227), new VSC(114, 0.787, 728.763), new VSC(95, 1.7, 838.97), new VSC(86, 5.14, 323.51), new VSC(83, 0.06, 309.28), new VSC(80, 2.98, 742.99), new VSC(75, 1.6, 956.29), new VSC(70, 1.51, 213.3), new VSC(67, 5.47, 199.07), new VSC(62, 6.1, 1045.15), new VSC(56, 0.96, 1162.47), new VSC(52, 5.58, 942.06), new VSC(50, 2.72, 532.87), new VSC(45, 5.52, 508.35), new VSC(44, 0.27, 526.51), new VSC(40, 5.95, 95.98) ];
  GFX.g_R3JupiterCoefficients = [ new VSC(3519, 6.058, 529.691), new VSC(1073, 1.6732, 536.8045), new VSC(916, 1.413, 522.577), new VSC(342, 0.523, 1059.382), new VSC(255, 1.196, 7.114), new VSC(222, 0.952, 515.464), new VSC(90, 3.14, 0), new VSC(69, 2.27, 1066.5), new VSC(58, 1.41, 543.92), new VSC(58, 0.53, 639.9), new VSC(51, 5.98, 412.37), new VSC(47, 1.58, 625.67), new VSC(43, 6.12, 419.48), new VSC(37, 1.18, 14.23), new VSC(34, 1.67, 1052.27), new VSC(34, 0.85, 206.19), new VSC(31, 1.04, 1589.07), new VSC(30, 4.63, 426.6), new VSC(21, 2.5, 728.76), new VSC(15, 0.89, 199.07), new VSC(14, 0.96, 508.35), new VSC(13, 1.5, 1045.15), new VSC(12, 2.61, 735.88), new VSC(12, 3.56, 323.51), new VSC(11, 1.79, 309.28), new VSC(11, 6.28, 956.29), new VSC(10, 6.26, 103.09), new VSC(9, 3.45, 838.97) ];
  GFX.g_R4JupiterCoefficients = [ new VSC(129, 0.084, 536.805), new VSC(113, 4.249, 529.691), new VSC(83, 3.3, 522.58), new VSC(38, 2.73, 515.46), new VSC(27, 5.69, 7.11), new VSC(18, 5.4, 1059.38), new VSC(13, 6.02, 543.92), new VSC(9, 0.77, 1066.5), new VSC(8, 5.68, 14.23), new VSC(7, 1.43, 412.37), new VSC(6, 5.12, 639.9), new VSC(5, 3.34, 625.67), new VSC(3, 3.4, 1052.27), new VSC(3, 4.16, 728.76), new VSC(3, 2.9, 426.6) ];
  GFX.g_R5JupiterCoefficients = [ new VSC(11, 4.75, 536.8), new VSC(4, 5.92, 522.58), new VSC(2, 5.57, 515.46), new VSC(2, 4.3, 543.92), new VSC(2, 3.69, 7.11), new VSC(2, 4.13, 1059.38), new VSC(2, 5.49, 1066.5) ];
  GFX.g_L0MarsCoefficients = [ new VSC(620347712, 0, 0), new VSC(18656368, 5.050371, 3340.6124267), new VSC(1108217, 5.4009984, 6681.2248534), new VSC(91798, 5.75479, 10021.83728), new VSC(27745, 5.9705, 3.52312), new VSC(12316, 0.84956, 2810.92146), new VSC(10610, 2.93959, 2281.2305), new VSC(8927, 4.157, 0.0173), new VSC(8716, 6.1101, 13362.4497), new VSC(7775, 3.3397, 5621.8429), new VSC(6798, 0.3646, 398.149), new VSC(4161, 0.2281, 2942.4634), new VSC(3575, 1.6619, 2544.3144), new VSC(3075, 0.857, 191.4483), new VSC(2938, 6.0789, 0.0673), new VSC(2628, 0.6481, 3337.0893), new VSC(2580, 0.03, 3344.1355), new VSC(2389, 5.039, 796.298), new VSC(1799, 0.6563, 529.691), new VSC(1546, 2.9158, 1751.5395), new VSC(1528, 1.1498, 6151.5339), new VSC(1286, 3.068, 2146.1654), new VSC(1264, 3.6228, 5092.152), new VSC(1025, 3.6933, 8962.4553), new VSC(892, 0.183, 16703.062), new VSC(859, 2.401, 2914.014), new VSC(833, 4.495, 3340.63), new VSC(833, 2.464, 3340.595), new VSC(749, 3.822, 155.42), new VSC(724, 0.675, 3738.761), new VSC(713, 3.663, 1059.382), new VSC(655, 0.489, 3127.313), new VSC(636, 2.922, 8432.764), new VSC(553, 4.475, 1748.016), new VSC(550, 3.81, 0.98), new VSC(472, 3.625, 1194.447), new VSC(426, 0.554, 6283.076), new VSC(415, 0.497, 213.299), new VSC(312, 0.999, 6677.702), new VSC(307, 0.381, 6684.748), new VSC(302, 4.486, 3532.061), new VSC(299, 2.783, 6254.627), new VSC(293, 4.221, 20.775), new VSC(284, 5.769, 3149.164), new VSC(281, 5.882, 1349.867), new VSC(274, 0.542, 3340.545), new VSC(274, 0.134, 3340.68), new VSC(239, 5.372, 4136.91), new VSC(236, 5.755, 3333.499), new VSC(231, 1.282, 3870.303), new VSC(221, 3.505, 382.897), new VSC(204, 2.821, 1221.849), new VSC(193, 3.357, 3.59), new VSC(189, 1.491, 9492.146), new VSC(179, 1.006, 951.718), new VSC(174, 2.414, 553.569), new VSC(172, 0.439, 5486.778), new VSC(160, 3.949, 4562.461), new VSC(144, 1.419, 135.065), new VSC(140, 3.326, 2700.715), new VSC(138, 4.301, 7.114), new VSC(131, 4.045, 12303.068), new VSC(128, 2.208, 1592.596), new VSC(128, 1.807, 5088.629), new VSC(117, 3.128, 7903.073), new VSC(113, 3.701, 1589.073), new VSC(110, 1.052, 242.729), new VSC(105, 0.785, 8827.39), new VSC(100, 3.243, 11773.377) ];
  GFX.g_L1MarsCoefficients = [ new VSC(334085627474, 0, 0), new VSC(1458227, 3.6042605, 3340.6124267), new VSC(164901, 3.926313, 6681.224853), new VSC(19963, 4.26594, 10021.83728), new VSC(3452, 4.7321, 3.5231), new VSC(2485, 4.6128, 13362.4497), new VSC(842, 4.459, 2281.23), new VSC(538, 5.016, 398.149), new VSC(521, 4.994, 3344.136), new VSC(433, 2.561, 191.448), new VSC(430, 5.316, 155.42), new VSC(382, 3.539, 796.298), new VSC(314, 4.963, 16703.062), new VSC(283, 3.16, 2544.314), new VSC(206, 4.569, 2146.165), new VSC(169, 1.329, 3337.089), new VSC(158, 4.185, 1751.54), new VSC(134, 2.233, 0.98), new VSC(134, 5.974, 1748.016), new VSC(118, 6.024, 6151.534), new VSC(117, 2.213, 1059.382), new VSC(114, 2.129, 1194.447), new VSC(114, 5.428, 3738.761), new VSC(91, 1.1, 1349.87), new VSC(85, 3.91, 553.57), new VSC(83, 5.3, 6684.75), new VSC(81, 4.43, 529.69), new VSC(80, 2.25, 8962.46), new VSC(73, 2.5, 951.72), new VSC(73, 5.84, 242.73), new VSC(71, 3.86, 2914.01), new VSC(68, 5.02, 382.9), new VSC(65, 1.02, 3340.6), new VSC(65, 3.05, 3340.63), new VSC(62, 4.15, 3149.16), new VSC(57, 3.89, 4136.91), new VSC(48, 4.87, 213.3), new VSC(48, 1.18, 3333.5), new VSC(47, 1.31, 3185.19), new VSC(41, 0.71, 1592.6), new VSC(40, 2.73, 7.11), new VSC(40, 5.32, 20043.67), new VSC(33, 5.41, 6283.08), new VSC(28, 0.05, 9492.15), new VSC(27, 3.89, 1221.85), new VSC(27, 5.11, 2700.72) ];
  GFX.g_L2MarsCoefficients = [ new VSC(58016, 2.04979, 3340.61243), new VSC(54188, 0, 0), new VSC(13908, 2.45742, 6681.22485), new VSC(2465, 2.8, 10021.8373), new VSC(398, 3.141, 13362.45), new VSC(222, 3.194, 3.523), new VSC(121, 0.543, 155.42), new VSC(62, 3.49, 16703.06), new VSC(54, 3.54, 3344.14), new VSC(34, 6, 2281.23), new VSC(32, 4.14, 191.45), new VSC(30, 2, 796.3), new VSC(23, 4.33, 242.73), new VSC(22, 3.45, 398.15), new VSC(20, 5.42, 553.57), new VSC(16, 0.66, 0.98), new VSC(16, 6.11, 2146.17), new VSC(16, 1.22, 1748.02), new VSC(15, 6.1, 3185.19), new VSC(14, 4.02, 951.72), new VSC(14, 2.62, 1349.87), new VSC(13, 0.6, 1194.45), new VSC(12, 3.86, 6684.75), new VSC(11, 4.72, 2544.31), new VSC(10, 0.25, 382.9), new VSC(9, 0.68, 1059.38), new VSC(9, 3.83, 20043.67), new VSC(9, 3.88, 3738.76), new VSC(8, 5.46, 1751.54), new VSC(7, 2.58, 3149.16), new VSC(7, 2.38, 4136.91), new VSC(6, 5.48, 1592.6), new VSC(6, 2.34, 3097.88) ];
  GFX.g_L3MarsCoefficients = [ new VSC(1482, 0.4443, 3340.6124), new VSC(662, 0.885, 6681.225), new VSC(188, 1.288, 10021.837), new VSC(41, 1.65, 13362.45), new VSC(26, 0, 0), new VSC(23, 2.05, 155.42), new VSC(10, 1.58, 3.52), new VSC(8, 2, 16703.06), new VSC(5, 2.82, 242.73), new VSC(4, 2.02, 3344.14), new VSC(3, 4.59, 3185.19), new VSC(3, 0.65, 553.57) ];
  GFX.g_L4MarsCoefficients = [ new VSC(114, 3.1416, 0), new VSC(29, 5.64, 6681.22), new VSC(24, 5.14, 3340.61), new VSC(11, 6.03, 10021.84), new VSC(3, 0.13, 13362.45), new VSC(3, 3.56, 155.42), new VSC(1, 0.49, 16703.06), new VSC(1, 1.32, 242.73) ];
  GFX.g_L5MarsCoefficients = [ new VSC(1, 3.14, 0), new VSC(1, 4.04, 6681.22) ];
  GFX.g_B0MarsCoefficients = [ new VSC(3197135, 3.7683204, 3340.6124267), new VSC(298033, 4.10617, 6681.224853), new VSC(289105, 0, 0), new VSC(31366, 4.44651, 10021.83728), new VSC(3484, 4.7881, 13362.4497), new VSC(443, 5.026, 3344.136), new VSC(443, 5.652, 3337.089), new VSC(399, 5.131, 16703.062), new VSC(293, 3.793, 2281.23), new VSC(182, 6.136, 6151.534), new VSC(163, 4.264, 529.691), new VSC(160, 2.232, 1059.382), new VSC(149, 2.165, 5621.843), new VSC(143, 1.182, 3340.595), new VSC(143, 3.213, 3340.63), new VSC(139, 2.418, 8962.455) ];
  GFX.g_B1MarsCoefficients = [ new VSC(350069, 5.368478, 3340.612427), new VSC(14116, 3.14159, 0), new VSC(9671, 5.4788, 6681.2249), new VSC(1472, 3.2021, 10021.8373), new VSC(426, 3.408, 13362.45), new VSC(102, 0.776, 3337.089), new VSC(79, 3.72, 16703.06), new VSC(33, 3.46, 5621.84), new VSC(26, 2.48, 2281.23) ];
  GFX.g_B2MarsCoefficients = [ new VSC(16727, 0.60221, 3340.61243), new VSC(4987, 4.1416, 0), new VSC(302, 3.559, 6681.225), new VSC(26, 1.9, 13362.45), new VSC(21, 0.92, 10021.84), new VSC(12, 2.24, 3337.09), new VSC(8, 2.25, 16703.06) ];
  GFX.g_B3MarsCoefficients = [ new VSC(607, 1.981, 3340.612), new VSC(43, 0, 0), new VSC(14, 1.8, 6681.22), new VSC(3, 3.45, 10021.84) ];
  GFX.g_B4MarsCoefficients = [ new VSC(13, 0, 0), new VSC(11, 3.46, 3340.61), new VSC(1, 0.5, 6681.22) ];
  GFX.g_R0MarsCoefficients = [ new VSC(153033488, 0, 0), new VSC(14184953, 3.47971284, 3340.6124267), new VSC(660776, 3.817834, 6681.224853), new VSC(46179, 4.15595, 10021.83728), new VSC(8110, 5.5596, 2810.9215), new VSC(7485, 1.7724, 5621.8429), new VSC(5523, 1.3644, 2281.2305), new VSC(3825, 4.4941, 13362.4497), new VSC(2484, 4.9255, 2942.4634), new VSC(2307, 0.0908, 2544.3144), new VSC(1999, 5.3606, 3337.0893), new VSC(1960, 4.7425, 3344.1355), new VSC(1167, 2.1126, 5092.152), new VSC(1103, 5.0091, 398.149), new VSC(992, 5.839, 6151.534), new VSC(899, 4.408, 529.691), new VSC(807, 2.102, 1059.382), new VSC(798, 3.448, 796.298), new VSC(741, 1.499, 2146.165), new VSC(726, 1.245, 8432.764), new VSC(692, 2.134, 8962.455), new VSC(633, 0.894, 3340.595), new VSC(633, 2.924, 3340.63), new VSC(630, 1.287, 1751.54), new VSC(574, 0.829, 2914.014), new VSC(526, 5.383, 3738.761), new VSC(473, 5.199, 3127.313), new VSC(348, 4.832, 16703.062), new VSC(284, 2.907, 3532.061), new VSC(280, 5.257, 6283.076), new VSC(276, 1.218, 6254.627), new VSC(275, 2.908, 1748.016), new VSC(270, 3.764, 5884.927), new VSC(239, 2.037, 1194.447), new VSC(234, 5.105, 5486.778), new VSC(228, 3.255, 6872.673), new VSC(223, 4.199, 3149.164), new VSC(219, 5.583, 191.448), new VSC(208, 5.255, 3340.545), new VSC(208, 4.846, 3340.68), new VSC(186, 5.699, 6677.702), new VSC(183, 5.081, 6684.748), new VSC(179, 4.184, 3333.499), new VSC(176, 5.953, 3870.303), new VSC(164, 3.799, 4136.91) ];
  GFX.g_R1MarsCoefficients = [ new VSC(1107433, 2.0325052, 3340.6124267), new VSC(103176, 2.370718, 6681.224853), new VSC(12877, 0, 0), new VSC(10816, 2.70888, 10021.83728), new VSC(1195, 3.047, 13362.4497), new VSC(439, 2.888, 2281.23), new VSC(396, 3.423, 3344.136), new VSC(183, 1.584, 2544.314), new VSC(136, 3.385, 16703.062), new VSC(128, 6.043, 3337.089), new VSC(128, 0.63, 1059.382), new VSC(127, 1.954, 796.298), new VSC(118, 2.998, 2146.165), new VSC(88, 3.42, 398.15), new VSC(83, 3.86, 3738.76), new VSC(76, 4.45, 6151.53), new VSC(72, 2.76, 529.69), new VSC(67, 2.55, 1751.54), new VSC(66, 4.41, 1748.02), new VSC(58, 0.54, 1194.45), new VSC(54, 0.68, 8962.46), new VSC(51, 3.73, 6684.75), new VSC(49, 5.73, 3340.6), new VSC(49, 1.48, 3340.63), new VSC(48, 2.58, 3149.16), new VSC(48, 2.29, 2914.01), new VSC(39, 2.32, 4136.91) ];
  GFX.g_R2MarsCoefficients = [ new VSC(44242, 0.47931, 3340.61243), new VSC(8138, 0.87, 6681.2249), new VSC(1275, 1.2259, 10021.8373), new VSC(187, 1.573, 13362.45), new VSC(52, 3.14, 0), new VSC(41, 1.97, 3344.14), new VSC(27, 1.92, 16703.06), new VSC(18, 4.43, 2281.23), new VSC(12, 4.53, 3185.19), new VSC(10, 5.39, 1059.38), new VSC(10, 0.42, 796.3) ];
  GFX.g_R3MarsCoefficients = [ new VSC(1113, 5.1499, 3340.6124), new VSC(424, 5.613, 6681.225), new VSC(100, 5.997, 10021.837), new VSC(20, 0.08, 13362.45), new VSC(5, 3.14, 0), new VSC(3, 0.43, 16703.06) ];
  GFX.g_R4MarsCoefficients = [ new VSC(20, 3.58, 3340.61), new VSC(16, 4.05, 6681.22), new VSC(6, 4.46, 10021.84), new VSC(2, 4.84, 13362.45) ];
  GFX.g_L0MercuryCoefficients = [ new VSC(440250710, 0, 0), new VSC(40989415, 1.48302034, 26087.90314157), new VSC(5046294, 4.47785449, 52175.8062831), new VSC(855347, 1.165203, 78263.709425), new VSC(165590, 4.119692, 104351.612566), new VSC(34562, 0.77931, 130439.51571), new VSC(7583, 3.7135, 156527.4188), new VSC(3560, 1.512, 1109.3786), new VSC(1803, 4.1033, 5661.332), new VSC(1726, 0.3583, 182615.322), new VSC(1590, 2.9951, 25028.5212), new VSC(1365, 4.5992, 27197.2817), new VSC(1017, 0.8803, 31749.2352), new VSC(714, 1.541, 24978.525), new VSC(644, 5.303, 21535.95), new VSC(451, 6.05, 51116.424), new VSC(404, 3.282, 208703.225), new VSC(352, 5.242, 20426.571), new VSC(345, 2.792, 15874.618), new VSC(343, 5.765, 955.6), new VSC(339, 5.863, 25558.212), new VSC(325, 1.337, 53285.185), new VSC(273, 2.495, 529.691), new VSC(264, 3.917, 57837.138), new VSC(260, 0.987, 4551.953), new VSC(239, 0.113, 1059.382), new VSC(235, 0.267, 11322.664), new VSC(217, 0.66, 13521.751), new VSC(209, 2.092, 47623.853), new VSC(183, 2.629, 27043.503), new VSC(182, 2.434, 25661.305), new VSC(176, 4.536, 51066.428), new VSC(173, 2.452, 24498.83), new VSC(142, 3.36, 37410.567), new VSC(138, 0.291, 10213.286), new VSC(125, 3.721, 39609.655), new VSC(118, 2.781, 77204.327), new VSC(106, 4.206, 19804.827) ];
  GFX.g_L1MercuryCoefficients = [ new VSC(2608814706223, 0, 0), new VSC(1126008, 6.2170397, 26087.9031416), new VSC(303471, 3.055655, 52175.806283), new VSC(80538, 6.10455, 78263.70942), new VSC(21245, 2.83532, 104351.61257), new VSC(5592, 5.8268, 130439.5157), new VSC(1472, 2.5185, 156527.4188), new VSC(388, 5.48, 182615.322), new VSC(352, 3.052, 1109.379), new VSC(103, 2.149, 208703.225), new VSC(94, 6.12, 27197.28), new VSC(91, 0, 24978.52), new VSC(52, 5.62, 5661.33), new VSC(44, 4.57, 25028.52), new VSC(28, 3.04, 51066.43), new VSC(27, 5.09, 234791.13) ];
  GFX.g_L2MercuryCoefficients = [ new VSC(53050, 0, 0), new VSC(16904, 4.69072, 26087.90314), new VSC(7397, 1.3474, 52175.8063), new VSC(3018, 4.4564, 78263.7094), new VSC(1107, 1.264, 104351.6126), new VSC(378, 4.32, 130439.516), new VSC(123, 1.069, 156527.419), new VSC(39, 4.08, 182615.32), new VSC(15, 4.63, 1109.38), new VSC(12, 0.79, 208703.23) ];
  GFX.g_L3MercuryCoefficients = [ new VSC(188, 0.035, 52175.806), new VSC(142, 3.125, 26087.903), new VSC(97, 3, 78263.71), new VSC(44, 6.02, 104351.61), new VSC(35, 0, 0), new VSC(18, 2.78, 130439.52), new VSC(7, 5.82, 156527.42), new VSC(3, 2.57, 182615.32) ];
  GFX.g_L4MercuryCoefficients = [ new VSC(114, 3.1416, 0), new VSC(2, 2.03, 26087.9), new VSC(2, 1.42, 78263.71), new VSC(2, 4.5, 52175.81), new VSC(1, 4.5, 104351.61), new VSC(1, 1.27, 130439.52) ];
  GFX.g_L5MercuryCoefficients = [ new VSC(1, 3.14, 0) ];
  GFX.g_B0MercuryCoefficients = [ new VSC(11737529, 1.98357499, 26087.90314157), new VSC(2388077, 5.0373896, 52175.8062831), new VSC(1222840, 3.1415927, 0), new VSC(543252, 1.796444, 78263.709425), new VSC(129779, 4.832325, 104351.612566), new VSC(31867, 1.58088, 130439.51571), new VSC(7963, 4.6097, 156527.4188), new VSC(2014, 1.3532, 182615.322), new VSC(514, 4.378, 208703.325), new VSC(209, 2.02, 24978.525), new VSC(208, 4.918, 27197.282), new VSC(132, 1.119, 234791.128), new VSC(121, 1.813, 53285.185), new VSC(100, 5.657, 20426.571) ];
  GFX.g_B1MercuryCoefficients = [ new VSC(429151, 3.501698, 26087.903142), new VSC(146234, 3.141593, 0), new VSC(22675, 0.01515, 52175.80628), new VSC(10895, 0.4854, 78263.70942), new VSC(6353, 3.4294, 104351.6126), new VSC(2496, 0.1605, 130439.5157), new VSC(860, 3.185, 156527.419), new VSC(278, 6.21, 182615.322), new VSC(86, 2.95, 208703.23), new VSC(28, 0.29, 27197.28), new VSC(26, 5.98, 234791.13) ];
  GFX.g_B2MercuryCoefficients = [ new VSC(11831, 4.79066, 26087.90314), new VSC(1914, 0, 0), new VSC(1045, 1.2122, 52175.8063), new VSC(266, 4.434, 78263.709), new VSC(170, 1.623, 104351.613), new VSC(96, 4.8, 130439.52), new VSC(45, 1.61, 156527.42), new VSC(18, 4.67, 182615.32), new VSC(7, 1.43, 208703.23) ];
  GFX.g_B3MercuryCoefficients = [ new VSC(235, 0.354, 26087.903), new VSC(161, 0, 0), new VSC(19, 4.36, 52175.81), new VSC(6, 2.51, 78263.71), new VSC(5, 6.14, 104351.61), new VSC(3, 3.12, 130439.52), new VSC(2, 6.27, 156527.42) ];
  GFX.g_B4MercuryCoefficients = [ new VSC(4, 1.75, 26087.9), new VSC(1, 3.14, 0) ];
  GFX.g_R0MercuryCoefficients = [ new VSC(39528272, 0, 0), new VSC(7834132, 6.1923372, 26087.9031416), new VSC(795526, 2.959897, 52175.806283), new VSC(121282, 6.010642, 78263.709425), new VSC(21922, 2.7782, 104351.61257), new VSC(4354, 5.8289, 130439.5157), new VSC(918, 2.597, 156527.419), new VSC(290, 1.424, 25028.521), new VSC(260, 3.028, 27197.282), new VSC(202, 5.647, 182615.322), new VSC(201, 5.592, 31749.235), new VSC(142, 6.253, 24978.525), new VSC(100, 3.734, 21535.95) ];
  GFX.g_R1MercuryCoefficients = [ new VSC(217348, 4.656172, 26087.903142), new VSC(44142, 1.42386, 52175.80628), new VSC(10094, 4.47466, 78263.70942), new VSC(2433, 1.2423, 104351.6126), new VSC(1624, 0, 0), new VSC(604, 4.293, 130439.516), new VSC(153, 1.061, 156527.419), new VSC(39, 4.11, 182615.32) ];
  GFX.g_R2MercuryCoefficients = [ new VSC(3118, 3.0823, 26087.9031), new VSC(1245, 6.1518, 52175.8063), new VSC(425, 2.926, 78263.709), new VSC(136, 5.98, 104351.613), new VSC(42, 2.75, 130439.52), new VSC(22, 3.14, 0), new VSC(13, 5.8, 156527.42) ];
  GFX.g_R3MercuryCoefficients = [ new VSC(33, 1.68, 26087.9), new VSC(24, 4.63, 52175.81), new VSC(12, 1.39, 78263.71), new VSC(5, 4.44, 104351.61), new VSC(2, 1.21, 130439.52) ];
  GFX.g_MoonCoefficients1 = [ new MoonCoefficient1(0, 0, 1, 0), new MoonCoefficient1(2, 0, -1, 0), new MoonCoefficient1(2, 0, 0, 0), new MoonCoefficient1(0, 0, 2, 0), new MoonCoefficient1(0, 1, 0, 0), new MoonCoefficient1(0, 0, 0, 2), new MoonCoefficient1(2, 0, -2, 0), new MoonCoefficient1(2, -1, -1, 0), new MoonCoefficient1(2, 0, 1, 0), new MoonCoefficient1(2, -1, 0, 0), new MoonCoefficient1(0, 1, -1, 0), new MoonCoefficient1(1, 0, 0, 0), new MoonCoefficient1(0, 1, 1, 0), new MoonCoefficient1(2, 0, 0, -2), new MoonCoefficient1(0, 0, 1, 2), new MoonCoefficient1(0, 0, 1, -2), new MoonCoefficient1(4, 0, -1, 0), new MoonCoefficient1(0, 0, 3, 0), new MoonCoefficient1(4, 0, -2, 0), new MoonCoefficient1(2, 1, -1, 0), new MoonCoefficient1(2, 1, 0, 0), new MoonCoefficient1(1, 0, -1, 0), new MoonCoefficient1(1, 1, 0, 0), new MoonCoefficient1(2, -1, 1, 0), new MoonCoefficient1(2, 0, 2, 0), new MoonCoefficient1(4, 0, 0, 0), new MoonCoefficient1(2, 0, -3, 0), new MoonCoefficient1(0, 1, -2, 0), new MoonCoefficient1(2, 0, -1, 2), new MoonCoefficient1(2, -1, -2, 0), new MoonCoefficient1(1, 0, 1, 0), new MoonCoefficient1(2, -2, 0, 0), new MoonCoefficient1(0, 1, 2, 0), new MoonCoefficient1(0, 2, 0, 0), new MoonCoefficient1(2, -2, -1, 0), new MoonCoefficient1(2, 0, 1, -2), new MoonCoefficient1(2, 0, 0, 2), new MoonCoefficient1(4, -1, -1, 0), new MoonCoefficient1(0, 0, 2, 2), new MoonCoefficient1(3, 0, -1, 0), new MoonCoefficient1(2, 1, 1, 0), new MoonCoefficient1(4, -1, -2, 0), new MoonCoefficient1(0, 2, -1, 0), new MoonCoefficient1(2, 2, -1, 0), new MoonCoefficient1(2, 1, -2, 0), new MoonCoefficient1(2, -1, 0, -2), new MoonCoefficient1(4, 0, 1, 0), new MoonCoefficient1(0, 0, 4, 0), new MoonCoefficient1(4, -1, 0, 0), new MoonCoefficient1(1, 0, -2, 0), new MoonCoefficient1(2, 1, 0, -2), new MoonCoefficient1(0, 0, 2, -2), new MoonCoefficient1(1, 1, 1, 0), new MoonCoefficient1(3, 0, -2, 0), new MoonCoefficient1(4, 0, -3, 0), new MoonCoefficient1(2, -1, 2, 0), new MoonCoefficient1(0, 2, 1, 0), new MoonCoefficient1(1, 1, -1, 0), new MoonCoefficient1(2, 0, 3, 0), new MoonCoefficient1(2, 0, -1, -2) ];
  GFX.g_MoonCoefficients2 = [ new MoonCoefficient2(6288774, -20905355), new MoonCoefficient2(1274027, -3699111), new MoonCoefficient2(658314, -2955968), new MoonCoefficient2(213618, -569925), new MoonCoefficient2(-185116, 48888), new MoonCoefficient2(-114332, -3149), new MoonCoefficient2(58793, 246158), new MoonCoefficient2(57066, -152138), new MoonCoefficient2(53322, -170733), new MoonCoefficient2(45758, -204586), new MoonCoefficient2(-40923, -129620), new MoonCoefficient2(-34720, 108743), new MoonCoefficient2(-30383, 104755), new MoonCoefficient2(15327, 10321), new MoonCoefficient2(-12528, 0), new MoonCoefficient2(10980, 79661), new MoonCoefficient2(10675, -34782), new MoonCoefficient2(10034, -23210), new MoonCoefficient2(8548, -21636), new MoonCoefficient2(-7888, 24208), new MoonCoefficient2(-6766, 30824), new MoonCoefficient2(-5163, -8379), new MoonCoefficient2(4987, -16675), new MoonCoefficient2(4036, -12831), new MoonCoefficient2(3994, -10445), new MoonCoefficient2(3861, -11650), new MoonCoefficient2(3665, 14403), new MoonCoefficient2(-2689, -7003), new MoonCoefficient2(-2602, 0), new MoonCoefficient2(2390, 10056), new MoonCoefficient2(-2348, 6322), new MoonCoefficient2(2236, -9884), new MoonCoefficient2(-2120, 5751), new MoonCoefficient2(-2069, 0), new MoonCoefficient2(2048, -4950), new MoonCoefficient2(-1773, 4130), new MoonCoefficient2(-1595, 0), new MoonCoefficient2(1215, -3958), new MoonCoefficient2(-1110, 0), new MoonCoefficient2(-892, 3258), new MoonCoefficient2(-810, 2616), new MoonCoefficient2(759, -1897), new MoonCoefficient2(-713, -2117), new MoonCoefficient2(-700, 2354), new MoonCoefficient2(691, 0), new MoonCoefficient2(596, 0), new MoonCoefficient2(549, -1423), new MoonCoefficient2(537, -1117), new MoonCoefficient2(520, -1571), new MoonCoefficient2(-487, -1739), new MoonCoefficient2(-399, 0), new MoonCoefficient2(-381, -4421), new MoonCoefficient2(351, 0), new MoonCoefficient2(-340, 0), new MoonCoefficient2(330, 0), new MoonCoefficient2(327, 0), new MoonCoefficient2(-323, 1165), new MoonCoefficient2(299, 0), new MoonCoefficient2(294, 0), new MoonCoefficient2(0, 8752) ];
  GFX.g_MoonCoefficients3 = [ new MoonCoefficient1(0, 0, 0, 1), new MoonCoefficient1(0, 0, 1, 1), new MoonCoefficient1(0, 0, 1, -1), new MoonCoefficient1(2, 0, 0, -1), new MoonCoefficient1(2, 0, -1, 1), new MoonCoefficient1(2, 0, -1, -1), new MoonCoefficient1(2, 0, 0, 1), new MoonCoefficient1(0, 0, 2, 1), new MoonCoefficient1(2, 0, 1, -1), new MoonCoefficient1(0, 0, 2, -1), new MoonCoefficient1(2, -1, 0, -1), new MoonCoefficient1(2, 0, -2, -1), new MoonCoefficient1(2, 0, 1, 1), new MoonCoefficient1(2, 1, 0, -1), new MoonCoefficient1(2, -1, -1, 1), new MoonCoefficient1(2, -1, 0, 1), new MoonCoefficient1(2, -1, -1, -1), new MoonCoefficient1(0, 1, -1, -1), new MoonCoefficient1(4, 0, -1, -1), new MoonCoefficient1(0, 1, 0, 1), new MoonCoefficient1(0, 0, 0, 3), new MoonCoefficient1(0, 1, -1, 1), new MoonCoefficient1(1, 0, 0, 1), new MoonCoefficient1(0, 1, 1, 1), new MoonCoefficient1(0, 1, 1, -1), new MoonCoefficient1(0, 1, 0, -1), new MoonCoefficient1(1, 0, 0, -1), new MoonCoefficient1(0, 0, 3, 1), new MoonCoefficient1(4, 0, 0, -1), new MoonCoefficient1(4, 0, -1, 1), new MoonCoefficient1(0, 0, 1, -3), new MoonCoefficient1(4, 0, -2, 1), new MoonCoefficient1(2, 0, 0, -3), new MoonCoefficient1(2, 0, 2, -1), new MoonCoefficient1(2, -1, 1, -1), new MoonCoefficient1(2, 0, -2, 1), new MoonCoefficient1(0, 0, 3, -1), new MoonCoefficient1(2, 0, 2, 1), new MoonCoefficient1(2, 0, -3, -1), new MoonCoefficient1(2, 1, -1, 1), new MoonCoefficient1(2, 1, 0, 1), new MoonCoefficient1(4, 0, 0, 1), new MoonCoefficient1(2, -1, 1, 1), new MoonCoefficient1(2, -2, 0, -1), new MoonCoefficient1(0, 0, 1, 3), new MoonCoefficient1(2, 1, 1, -1), new MoonCoefficient1(1, 1, 0, -1), new MoonCoefficient1(1, 1, 0, 1), new MoonCoefficient1(0, 1, -2, -1), new MoonCoefficient1(2, 1, -1, -1), new MoonCoefficient1(1, 0, 1, 1), new MoonCoefficient1(2, -1, -2, -1), new MoonCoefficient1(0, 1, 2, 1), new MoonCoefficient1(4, 0, -2, -1), new MoonCoefficient1(4, -1, -1, -1), new MoonCoefficient1(1, 0, 1, -1), new MoonCoefficient1(4, 0, 1, -1), new MoonCoefficient1(1, 0, -1, -1), new MoonCoefficient1(4, -1, 0, -1), new MoonCoefficient1(2, -2, 0, 1) ];
  GFX.g_MoonCoefficients4 = [ 5128122, 280602, 277693, 173237, 55413, 46271, 32573, 17198, 9266, 8822, 8216, 4324, 4200, -3359, 2463, 2211, 2065, -1870, 1828, -1794, -1749, -1565, -1491, -1475, -1410, -1344, -1335, 1107, 1021, 833, 777, 671, 607, 596, 491, -451, 439, 422, 421, -366, -351, 331, 315, 302, -283, -229, 223, 223, -220, -220, -185, 181, -177, 176, 166, -164, 132, -119, 115, 107 ];
  GFX.g_MoonPerigeeApogeeCoefficients1 = [ new MPAC(2, 0, 0, -1.6769, 0), new MPAC(4, 0, 0, 0.4589, 0), new MPAC(6, 0, 0, -0.1856, 0), new MPAC(8, 0, 0, 0.0883, 0), new MPAC(2, -1, 0, -0.0773, 0.00019), new MPAC(0, 1, 0, 0.0502, -0.00013), new MPAC(10, 0, 0, -0.046, 0), new MPAC(4, -1, 0, 0.0422, -0.00011), new MPAC(6, -1, 0, -0.0256, 0), new MPAC(12, 0, 0, 0.0253, 0), new MPAC(1, 0, 0, 0.0237, 0), new MPAC(8, -1, 0, 0.0162, 0), new MPAC(14, 0, 0, -0.0145, 0), new MPAC(0, 0, 2, 0.0129, 0), new MPAC(3, 0, 0, -0.0112, 0), new MPAC(10, -1, 0, -0.0104, 0), new MPAC(16, 0, 0, 0.0086, 0), new MPAC(12, -1, 0, 0.0069, 0), new MPAC(5, 0, 0, 0.0066, 0), new MPAC(2, 0, 2, -0.0053, 0), new MPAC(18, 0, 0, -0.0052, 0), new MPAC(14, -1, 0, -0.0046, 0), new MPAC(7, 0, 0, -0.0041, 0), new MPAC(2, 1, 0, 0.004, 0), new MPAC(20, 0, 0, 0.0032, 0), new MPAC(1, 1, 0, -0.0032, 0), new MPAC(16, -1, 0, 0.0031, 0), new MPAC(4, 1, 0, -0.0029, 0), new MPAC(9, 0, 0, 0.0027, 0), new MPAC(4, 0, 2, 0.0027, 0), new MPAC(2, -2, 0, -0.0027, 0), new MPAC(4, -2, 0, 0.0024, 0), new MPAC(6, -2, 0, -0.0021, 0), new MPAC(22, 0, 0, -0.0021, 0), new MPAC(18, -1, 0, -0.0021, 0), new MPAC(6, 1, 0, 0.0019, 0), new MPAC(11, 0, 0, -0.0018, 0), new MPAC(8, 1, 0, -0.0014, 0), new MPAC(4, 0, -2, -0.0014, 0), new MPAC(6, 0, 2, -0.0014, 0), new MPAC(3, 1, 0, 0.0014, 0), new MPAC(5, 1, 0, -0.0014, 0), new MPAC(13, 0, 0, 0.0013, 0), new MPAC(20, -1, 0, 0.0013, 0), new MPAC(3, 2, 0, 0.0011, 0), new MPAC(4, -2, 2, -0.0011, 0), new MPAC(1, 2, 0, -0.0011, 0), new MPAC(22, -1, 0, -0.0009, 0), new MPAC(0, 0, 4, -0.0008, 0), new MPAC(6, 0, -2, 0.0008, 0), new MPAC(2, 1, -2, 0.0008, 0), new MPAC(0, 2, 0, 0.0007, 0), new MPAC(0, -1, 2, 0.0007, 0), new MPAC(2, 0, 4, 0.0007, 0), new MPAC(0, -2, 2, -0.0006, 0), new MPAC(2, 2, -2, -0.0006, 0), new MPAC(24, 0, 0, 0.0006, 0), new MPAC(4, 0, -4, 0.0005, 0), new MPAC(2, 2, 0, 0.0005, 0), new MPAC(1, -1, 0, -0.0004, 0) ];
  GFX.g_MoonPerigeeApogeeCoefficients2 = [ new MPAC(2, 0, 0, 0.4392, 0), new MPAC(4, 0, 0, 0.0684, 0), new MPAC(0, 1, 0, 0.0456, -0.00011), new MPAC(2, -1, 0, 0.0426, -0.00011), new MPAC(0, 0, 2, 0.0212, 0), new MPAC(1, 0, 0, -0.0189, 0), new MPAC(6, 0, 0, 0.0144, 0), new MPAC(4, -1, 0, 0.0113, 0), new MPAC(2, 0, 2, 0.0047, 0), new MPAC(1, 1, 0, 0.0036, 0), new MPAC(8, 0, 0, 0.0035, 0), new MPAC(6, -1, 0, 0.0034, 0), new MPAC(2, 0, -2, -0.0034, 0), new MPAC(2, -2, 0, 0.0022, 0), new MPAC(3, 0, 0, -0.0017, 0), new MPAC(4, 0, 2, 0.0013, 0), new MPAC(8, -1, 0, 0.0011, 0), new MPAC(4, -2, 0, 0.001, 0), new MPAC(10, 0, 0, 0.0009, 0), new MPAC(3, 1, 0, 0.0007, 0), new MPAC(0, 2, 0, 0.0006, 0), new MPAC(2, 1, 0, 0.0005, 0), new MPAC(2, 2, 0, 0.0005, 0), new MPAC(6, 0, 2, 0.0004, 0), new MPAC(6, -2, 0, 0.0004, 0), new MPAC(10, -1, 0, 0.0004, 0), new MPAC(5, 0, 0, -0.0004, 0), new MPAC(4, 0, -2, -0.0004, 0), new MPAC(0, 1, 2, 0.0003, 0), new MPAC(12, 0, 0, 0.0003, 0), new MPAC(2, -1, 2, 0.0003, 0), new MPAC(1, -1, 0, -0.0003, 0) ];
  GFX.g_MoonPerigeeApogeeCoefficients3 = [ new MPAC(2, 0, 0, 63.224, 0), new MPAC(4, 0, 0, -6.99, 0), new MPAC(2, -1, 0, 2.834, 0), new MPAC(2, -1, 0, 0, -0.0071), new MPAC(6, 0, 0, 1.927, 0), new MPAC(1, 0, 0, -1.263, 0), new MPAC(8, 0, 0, -0.702, 0), new MPAC(0, 1, 0, 0.696, 0), new MPAC(0, 1, 0, 0, -0.0017), new MPAC(0, 0, 2, -0.69, 0), new MPAC(4, -1, 0, -0.629, 0), new MPAC(4, -1, 0, 0, 0.0016), new MPAC(2, 0, -2, -0.392, 0), new MPAC(10, 0, 0, 0.297, 0), new MPAC(6, -1, 0, 0.26, 0), new MPAC(3, 0, 0, 0.201, 0), new MPAC(2, 1, 0, -0.161, 0), new MPAC(1, 1, 0, 0.157, 0), new MPAC(12, 0, 0, -0.138, 0), new MPAC(8, -1, 0, -0.127, 0), new MPAC(2, 0, 2, 0.104, 0), new MPAC(2, -2, 0, 0.104, 0), new MPAC(5, 0, 0, -0.079, 0), new MPAC(14, 0, 0, 0.068, 0), new MPAC(10, -1, 0, 0.067, 0), new MPAC(4, 1, 0, 0.054, 0), new MPAC(12, -1, 0, -0.038, 0), new MPAC(4, -2, 0, -0.038, 0), new MPAC(7, 0, 0, 0.037, 0), new MPAC(4, 0, 2, -0.037, 0), new MPAC(16, 0, 0, -0.035, 0), new MPAC(3, 1, 0, -0.03, 0), new MPAC(1, -1, 0, 0.029, 0), new MPAC(6, 1, 0, -0.025, 0), new MPAC(0, 2, 0, 0.023, 0), new MPAC(14, -1, 0, 0.023, 0), new MPAC(2, 2, 0, -0.023, 0), new MPAC(6, -2, 0, 0.022, 0), new MPAC(2, -1, -2, -0.021, 0), new MPAC(9, 0, 0, -0.02, 0), new MPAC(18, 0, 0, 0.019, 0), new MPAC(6, 0, 2, 0.017, 0), new MPAC(0, -1, 2, 0.014, 0), new MPAC(16, -1, 0, -0.014, 0), new MPAC(4, 0, -20, 0.013, 0), new MPAC(8, 1, 0, 0.012, 0), new MPAC(11, 0, 0, 0.011, 0), new MPAC(5, 1, 0, 0.01, 0), new MPAC(20, 0, 0, -0.01, 0) ];
  GFX.g_MoonPerigeeApogeeCoefficients4 = [ new MPAC(2, 0, 0, -9.147, 0), new MPAC(1, 0, 0, -0.841, 0), new MPAC(0, 0, 2, 0.697, 0), new MPAC(0, 1, 0, -0.656, 0.0016), new MPAC(4, 0, 0, 0.355, 0), new MPAC(2, -1, 0, 0.159, 0), new MPAC(1, 1, 0, 0.127, 0), new MPAC(4, -1, 0, 0.065, 0), new MPAC(6, 0, 0, 0.052, 0), new MPAC(2, 1, 0, 0.043, 0), new MPAC(2, 0, 2, 0.031, 0), new MPAC(2, 0, -2, -0.023, 0), new MPAC(2, -2, 0, 0.022, 0), new MPAC(2, 2, 0, 0.019, 0), new MPAC(0, 2, 0, -0.016, 0), new MPAC(6, -1, 0, 0.014, 0), new MPAC(8, 0, 0, 0.01, 0) ];
  GFX.g_L0NC = [ new VSC(531188633, 0, 0), new VSC(1798476, 2.9010127, 38.1330356), new VSC(1019728, 0.4858092, 1.4844727), new VSC(124532, 4.830081, 36.648563), new VSC(42064, 5.41055, 2.96895), new VSC(37715, 6.09222, 35.16409), new VSC(33785, 1.24489, 76.26607), new VSC(16483, 8E-05, 491.55793), new VSC(9199, 4.9375, 39.6175), new VSC(8994, 0.2746, 175.1661), new VSC(4216, 1.9871, 73.2971), new VSC(3365, 1.0359, 33.6796), new VSC(2285, 4.2061, 4.4534), new VSC(1434, 2.7834, 74.7816), new VSC(900, 2.076, 109.946), new VSC(745, 3.19, 71.813), new VSC(506, 5.748, 114.399), new VSC(400, 0.35, 1021.249), new VSC(345, 3.462, 41.102), new VSC(340, 3.304, 77.751), new VSC(323, 2.248, 32.195), new VSC(306, 0.497, 0.521), new VSC(287, 4.505, 0.048), new VSC(282, 2.246, 146.594), new VSC(267, 4.889, 0.963), new VSC(252, 5.782, 388.465), new VSC(245, 1.247, 9.561), new VSC(233, 2.505, 137.033), new VSC(227, 1.797, 453.425), new VSC(170, 3.324, 108.461), new VSC(151, 2.192, 33.94), new VSC(150, 2.997, 5.938), new VSC(148, 0.859, 111.43), new VSC(119, 3.677, 2.448), new VSC(109, 2.416, 183.243), new VSC(103, 0.041, 0.261), new VSC(103, 4.404, 70.328), new VSC(102, 5.705, 0.112) ];
  GFX.g_L1NC = [ new VSC(3837687717, 0, 0), new VSC(16604, 4.86319, 1.48447), new VSC(15807, 2.27923, 38.13304), new VSC(3335, 3.682, 76.2661), new VSC(1306, 3.6732, 2.9689), new VSC(605, 1.505, 35.164), new VSC(179, 3.453, 39.618), new VSC(107, 2.451, 4.453), new VSC(106, 2.755, 33.68), new VSC(73, 5.49, 36.65), new VSC(57, 1.86, 114.4), new VSC(57, 5.22, 0.52), new VSC(35, 4.52, 74.78), new VSC(32, 5.9, 77.75), new VSC(30, 3.67, 388.47), new VSC(29, 5.17, 9.56), new VSC(29, 5.17, 2.45), new VSC(26, 5.25, 168.05) ];
  GFX.g_L2NC = [ new VSC(53893, 0, 0), new VSC(296, 1.855, 1.484), new VSC(281, 1.191, 38.133), new VSC(270, 5.721, 76.266), new VSC(23, 1.21, 2.97), new VSC(9, 4.43, 35.16), new VSC(7, 0.54, 2.45) ];
  GFX.g_L3NC = [ new VSC(31, 0, 0), new VSC(15, 1.35, 76.27), new VSC(12, 6.04, 1.48), new VSC(12, 6.11, 38.13) ];
  GFX.g_L4NC = [ new VSC(114, 3.142, 0) ];
  GFX.g_B0NC = [ new VSC(3088623, 1.4410437, 38.1330356), new VSC(27789, 5.91272, 76.26607), new VSC(27624, 0, 0), new VSC(15448, 3.50877, 39.61751), new VSC(15355, 2.52124, 36.64856), new VSC(2000, 1.51, 74.7816), new VSC(1968, 4.3778, 1.4845), new VSC(1015, 3.2156, 35.1641), new VSC(606, 2.802, 73.297), new VSC(595, 2.129, 41.102), new VSC(589, 3.187, 2.969), new VSC(402, 4.169, 114.399), new VSC(280, 1.682, 77.751), new VSC(262, 3.767, 213.299), new VSC(254, 3.271, 453.425), new VSC(206, 4.257, 529.691), new VSC(140, 3.53, 137.033) ];
  GFX.g_B1NC = [ new VSC(227279, 3.807931, 38.133036), new VSC(1803, 1.9758, 76.2661), new VSC(1433, 3.1416, 0), new VSC(1386, 4.8256, 36.6486), new VSC(1073, 6.0805, 39.6175), new VSC(148, 3.858, 74.782), new VSC(136, 0.478, 1.484), new VSC(70, 6.19, 35.16), new VSC(52, 5.05, 73.3), new VSC(43, 0.31, 114.4), new VSC(37, 4.89, 41.1), new VSC(37, 5.76, 2.97), new VSC(26, 5.22, 213.3) ];
  GFX.g_B2NC = [ new VSC(9691, 5.5712, 38.133), new VSC(79, 3.63, 76.27), new VSC(72, 0.45, 36.65), new VSC(59, 3.14, 0), new VSC(30, 1.61, 39.62), new VSC(6, 5.61, 74.78) ];
  GFX.g_B3NC = [ new VSC(273, 1.017, 38.133), new VSC(2, 0, 0), new VSC(2, 2.37, 36.65), new VSC(2, 5.33, 76.27) ];
  GFX.g_B4NC = [ new VSC(6, 2.67, 38.13) ];
  GFX.g_R0NC = [ new VSC(3007013206, 0, 0), new VSC(27062259, 1.32999459, 38.13303564), new VSC(1691764, 3.2518614, 36.6485629), new VSC(807831, 5.185928, 1.484473), new VSC(537761, 4.521139, 35.16409), new VSC(495726, 1.571057, 491.557929), new VSC(274572, 1.845523, 175.16606), new VSC(135134, 3.372206, 39.617508), new VSC(121802, 5.797544, 76.266071), new VSC(100895, 0.377027, 73.297126), new VSC(69792, 3.79617, 2.96895), new VSC(46688, 5.74938, 33.67962), new VSC(24594, 0.50802, 109.94569), new VSC(16939, 1.59422, 71.81265), new VSC(14230, 1.07786, 74.7816), new VSC(12012, 1.92062, 1021.24889), new VSC(8395, 0.6782, 146.5943), new VSC(7572, 1.0715, 388.4652), new VSC(5721, 2.5906, 4.4534), new VSC(4840, 1.9069, 41.102), new VSC(4483, 2.9057, 529.691), new VSC(4421, 1.7499, 108.4612), new VSC(4354, 0.6799, 32.1951), new VSC(4270, 3.4134, 453.4249), new VSC(3381, 0.8481, 183.2428), new VSC(2881, 1.986, 137.033), new VSC(2879, 3.6742, 350.3321), new VSC(2636, 3.0976, 213.2991), new VSC(2530, 5.7984, 490.0735), new VSC(2523, 0.4863, 493.0424), new VSC(2306, 2.8096, 70.3282), new VSC(2087, 0.6186, 33.9402) ];
  GFX.g_R1NC = [ new VSC(236339, 0.70498, 38.133036), new VSC(13220, 3.32015, 1.48447), new VSC(8622, 6.2163, 35.1641), new VSC(2702, 1.8814, 39.6175), new VSC(2155, 2.0943, 2.9689), new VSC(2153, 5.1687, 76.2661), new VSC(1603, 0, 0), new VSC(1464, 1.1842, 33.6796), new VSC(1136, 3.9189, 36.6486), new VSC(898, 5.241, 388.465), new VSC(790, 0.533, 168.053), new VSC(760, 0.021, 182.28), new VSC(607, 1.077, 1021.249), new VSC(572, 3.401, 484.444), new VSC(561, 2.887, 498.671) ];
  GFX.g_R2NC = [ new VSC(4247, 5.8991, 38.133), new VSC(218, 0.346, 1.484), new VSC(163, 2.239, 168.053), new VSC(156, 4.594, 182.28), new VSC(127, 2.848, 35.164) ];
  GFX.g_R3NC = [ new VSC(166, 4.552, 38.133) ];
  GFX.g_NuC = [ new NUC(0, 0, 0, 0, 1, -171996, -174.2, 92025, 8.9), new NUC(-2, 0, 0, 2, 2, -13187, -1.6, 5736, -3.1), new NUC(0, 0, 0, 2, 2, -2274, -0.2, 977, -0.5), new NUC(0, 0, 0, 0, 2, 2062, 0.2, -895, 0.5), new NUC(0, 1, 0, 0, 0, 1426, -3.4, 54, -0.1), new NUC(0, 0, 1, 0, 0, 712, 0.1, -7, 0), new NUC(-2, 1, 0, 2, 2, -517, 1.2, 224, -0.6), new NUC(0, 0, 0, 2, 1, -386, -0.4, 200, 0), new NUC(0, 0, 1, 2, 2, -301, 0, 129, -0.1), new NUC(-2, -1, 0, 2, 2, 217, -0.5, -95, 0.3), new NUC(-2, 0, 1, 0, 0, -158, 0, 0, 0), new NUC(-2, 0, 0, 2, 1, 129, 0.1, -70, 0), new NUC(0, 0, -1, 2, 2, 123, 0, -53, 0), new NUC(2, 0, 0, 0, 0, 63, 0, 0, 0), new NUC(0, 0, 1, 0, 1, 63, 0.1, -33, 0), new NUC(2, 0, -1, 2, 2, -59, 0, 26, 0), new NUC(0, 0, -1, 0, 1, -58, -0.1, 32, 0), new NUC(0, 0, 1, 2, 1, -51, 0, 27, 0), new NUC(-2, 0, 2, 0, 0, 48, 0, 0, 0), new NUC(0, 0, -2, 2, 1, 46, 0, -24, 0), new NUC(2, 0, 0, 2, 2, -38, 0, 16, 0), new NUC(0, 0, 2, 2, 2, -31, 0, 13, 0), new NUC(0, 0, 2, 0, 0, 29, 0, 0, 0), new NUC(-2, 0, 1, 2, 2, 29, 0, -12, 0), new NUC(0, 0, 0, 2, 0, 26, 0, 0, 0), new NUC(-2, 0, 0, 2, 0, -22, 0, 0, 0), new NUC(0, 0, -1, 2, 1, 21, 0, -10, 0), new NUC(0, 2, 0, 0, 0, 17, -0.1, 0, 0), new NUC(2, 0, -1, 0, 1, 16, 0, -8, 0), new NUC(-2, 2, 0, 2, 2, -16, 0.1, 7, 0), new NUC(0, 1, 0, 0, 1, -15, 0, 9, 0), new NUC(-2, 0, 1, 0, 1, -13, 0, 7, 0), new NUC(0, -1, 0, 0, 1, -12, 0, 6, 0), new NUC(0, 0, 2, -2, 0, 11, 0, 0, 0), new NUC(2, 0, -1, 2, 1, -10, 0, 5, 0), new NUC(2, 0, 1, 2, 2, -8, 0, 3, 0), new NUC(0, 1, 0, 2, 2, 7, 0, -3, 0), new NUC(-2, 1, 1, 0, 0, -7, 0, 0, 0), new NUC(0, -1, 0, 2, 2, -7, 0, 3, 0), new NUC(2, 0, 0, 2, 1, -7, 0, 3, 0), new NUC(2, 0, 1, 0, 0, 6, 0, 0, 0), new NUC(-2, 0, 2, 2, 2, 6, 0, -3, 0), new NUC(-2, 0, 1, 2, 1, 6, 0, -3, 0), new NUC(2, 0, -2, 0, 1, -6, 0, 3, 0), new NUC(2, 0, 0, 0, 1, -6, 0, 3, 0), new NUC(0, -1, 1, 0, 0, 5, 0, 0, 0), new NUC(-2, -1, 0, 2, 1, -5, 0, 3, 0), new NUC(-2, 0, 0, 0, 1, -5, 0, 3, 0), new NUC(0, 0, 2, 2, 1, -5, 0, 3, 0), new NUC(-2, 0, 2, 0, 1, 4, 0, 0, 0), new NUC(-2, 1, 0, 2, 1, 4, 0, 0, 0), new NUC(0, 0, 1, -2, 0, 4, 0, 0, 0), new NUC(-1, 0, 1, 0, 0, -4, 0, 0, 0), new NUC(-2, 1, 0, 0, 0, -4, 0, 0, 0), new NUC(1, 0, 0, 0, 0, -4, 0, 0, 0), new NUC(0, 0, 1, 2, 0, 3, 0, 0, 0), new NUC(0, 0, -2, 2, 2, -3, 0, 0, 0), new NUC(-1, -1, 1, 0, 0, -3, 0, 0, 0), new NUC(0, 1, 1, 0, 0, -3, 0, 0, 0), new NUC(0, -1, 1, 2, 2, -3, 0, 0, 0), new NUC(2, -1, -1, 2, 2, -3, 0, 0, 0), new NUC(0, 0, 3, 2, 2, -3, 0, 0, 0), new NUC(2, -1, 0, 2, 2, -3, 0, 0, 0) ];
  GFX.g_AAParallax_C1 = Math.sin(CT.d2R(CT.dmS2D(0, 0, 8.794)));
  GFX.g_PlutoArgumentCoefficients = [ new PlutoCoefficient1(0, 0, 1), new PlutoCoefficient1(0, 0, 2), new PlutoCoefficient1(0, 0, 3), new PlutoCoefficient1(0, 0, 4), new PlutoCoefficient1(0, 0, 5), new PlutoCoefficient1(0, 0, 6), new PlutoCoefficient1(0, 1, -1), new PlutoCoefficient1(0, 1, 0), new PlutoCoefficient1(0, 1, 1), new PlutoCoefficient1(0, 1, 2), new PlutoCoefficient1(0, 1, 3), new PlutoCoefficient1(0, 2, -2), new PlutoCoefficient1(0, 2, -1), new PlutoCoefficient1(0, 2, 0), new PlutoCoefficient1(1, -1, 0), new PlutoCoefficient1(1, -1, 1), new PlutoCoefficient1(1, 0, -3), new PlutoCoefficient1(1, 0, -2), new PlutoCoefficient1(1, 0, -1), new PlutoCoefficient1(1, 0, 0), new PlutoCoefficient1(1, 0, 1), new PlutoCoefficient1(1, 0, 2), new PlutoCoefficient1(1, 0, 3), new PlutoCoefficient1(1, 0, 4), new PlutoCoefficient1(1, 1, -3), new PlutoCoefficient1(1, 1, -2), new PlutoCoefficient1(1, 1, -1), new PlutoCoefficient1(1, 1, 0), new PlutoCoefficient1(1, 1, 1), new PlutoCoefficient1(1, 1, 3), new PlutoCoefficient1(2, 0, -6), new PlutoCoefficient1(2, 0, -5), new PlutoCoefficient1(2, 0, -4), new PlutoCoefficient1(2, 0, -3), new PlutoCoefficient1(2, 0, -2), new PlutoCoefficient1(2, 0, -1), new PlutoCoefficient1(2, 0, 0), new PlutoCoefficient1(2, 0, 1), new PlutoCoefficient1(2, 0, 2), new PlutoCoefficient1(2, 0, 3), new PlutoCoefficient1(3, 0, -2), new PlutoCoefficient1(3, 0, -1), new PlutoCoefficient1(3, 0, 0) ];
  GFX.g_PlutoLongitudeCoefficients = [ new PlutoCoefficient2(-19799805, 19850055), new PlutoCoefficient2(897144, -4954829), new PlutoCoefficient2(611149, 1211027), new PlutoCoefficient2(-341243, -189585), new PlutoCoefficient2(129287, -34992), new PlutoCoefficient2(-38164, 30893), new PlutoCoefficient2(20442, -9987), new PlutoCoefficient2(-4063, -5071), new PlutoCoefficient2(-6016, -3336), new PlutoCoefficient2(-3956, 3039), new PlutoCoefficient2(-667, 3572), new PlutoCoefficient2(1276, 501), new PlutoCoefficient2(1152, -917), new PlutoCoefficient2(630, -1277), new PlutoCoefficient2(2571, -459), new PlutoCoefficient2(899, -1449), new PlutoCoefficient2(-1016, 1043), new PlutoCoefficient2(-2343, -1012), new PlutoCoefficient2(7042, 788), new PlutoCoefficient2(1199, -338), new PlutoCoefficient2(418, -67), new PlutoCoefficient2(120, -274), new PlutoCoefficient2(-60, -159), new PlutoCoefficient2(-82, -29), new PlutoCoefficient2(-36, -29), new PlutoCoefficient2(-40, 7), new PlutoCoefficient2(-14, 22), new PlutoCoefficient2(4, 13), new PlutoCoefficient2(5, 2), new PlutoCoefficient2(-1, 0), new PlutoCoefficient2(2, 0), new PlutoCoefficient2(-4, 5), new PlutoCoefficient2(4, -7), new PlutoCoefficient2(14, 24), new PlutoCoefficient2(-49, -34), new PlutoCoefficient2(163, -48), new PlutoCoefficient2(9, -24), new PlutoCoefficient2(-4, 1), new PlutoCoefficient2(-3, 1), new PlutoCoefficient2(1, 3), new PlutoCoefficient2(-3, -1), new PlutoCoefficient2(5, -3), new PlutoCoefficient2(0, 0) ];
  GFX.g_PlutoLatitudeCoefficients = [ new PlutoCoefficient2(-5452852, -14974862), new PlutoCoefficient2(3527812, 1672790), new PlutoCoefficient2(-1050748, 327647), new PlutoCoefficient2(178690, -292153), new PlutoCoefficient2(18650, 100340), new PlutoCoefficient2(-30697, -25823), new PlutoCoefficient2(4878, 11248), new PlutoCoefficient2(226, -64), new PlutoCoefficient2(2030, -836), new PlutoCoefficient2(69, -604), new PlutoCoefficient2(-247, -567), new PlutoCoefficient2(-57, 1), new PlutoCoefficient2(-122, 175), new PlutoCoefficient2(-49, -164), new PlutoCoefficient2(-197, 199), new PlutoCoefficient2(-25, 217), new PlutoCoefficient2(589, -248), new PlutoCoefficient2(-269, 711), new PlutoCoefficient2(185, 193), new PlutoCoefficient2(315, 807), new PlutoCoefficient2(-130, -43), new PlutoCoefficient2(5, 3), new PlutoCoefficient2(2, 17), new PlutoCoefficient2(2, 5), new PlutoCoefficient2(2, 3), new PlutoCoefficient2(3, 1), new PlutoCoefficient2(2, -1), new PlutoCoefficient2(1, -1), new PlutoCoefficient2(0, -1), new PlutoCoefficient2(0, 0), new PlutoCoefficient2(0, -2), new PlutoCoefficient2(2, 2), new PlutoCoefficient2(-7, 0), new PlutoCoefficient2(10, -8), new PlutoCoefficient2(-3, 20), new PlutoCoefficient2(6, 5), new PlutoCoefficient2(14, 17), new PlutoCoefficient2(-2, 0), new PlutoCoefficient2(0, 0), new PlutoCoefficient2(0, 0), new PlutoCoefficient2(0, 1), new PlutoCoefficient2(0, 0), new PlutoCoefficient2(1, 0) ];
  GFX.g_PlutoRadiusCoefficients = [ new PlutoCoefficient2(66865439, 68951812), new PlutoCoefficient2(-11827535, -332538), new PlutoCoefficient2(1593179, -1438890), new PlutoCoefficient2(-18444, 483220), new PlutoCoefficient2(-65977, -85431), new PlutoCoefficient2(31174, -6032), new PlutoCoefficient2(-5794, 22161), new PlutoCoefficient2(4601, 4032), new PlutoCoefficient2(-1729, 234), new PlutoCoefficient2(-415, 702), new PlutoCoefficient2(239, 723), new PlutoCoefficient2(67, -67), new PlutoCoefficient2(1034, -451), new PlutoCoefficient2(-129, 504), new PlutoCoefficient2(480, -231), new PlutoCoefficient2(2, -441), new PlutoCoefficient2(-3359, 265), new PlutoCoefficient2(7856, -7832), new PlutoCoefficient2(36, 45763), new PlutoCoefficient2(8663, 8547), new PlutoCoefficient2(-809, -769), new PlutoCoefficient2(263, -144), new PlutoCoefficient2(-126, 32), new PlutoCoefficient2(-35, -16), new PlutoCoefficient2(-19, -4), new PlutoCoefficient2(-15, 8), new PlutoCoefficient2(-4, 12), new PlutoCoefficient2(5, 6), new PlutoCoefficient2(3, 1), new PlutoCoefficient2(6, -2), new PlutoCoefficient2(2, 2), new PlutoCoefficient2(-2, -2), new PlutoCoefficient2(14, 13), new PlutoCoefficient2(-63, 13), new PlutoCoefficient2(136, -236), new PlutoCoefficient2(273, 1065), new PlutoCoefficient2(251, 149), new PlutoCoefficient2(-25, -9), new PlutoCoefficient2(9, -2), new PlutoCoefficient2(-8, 7), new PlutoCoefficient2(2, -10), new PlutoCoefficient2(19, 35), new PlutoCoefficient2(10, 3) ];
  GFX.g_L0SaturnCoefficients = [ new VSC(87401354, 0, 0), new VSC(11107660, 3.9620509, 213.29909544), new VSC(1414151, 4.5858152, 7.113547), new VSC(398379, 0.52112, 206.185548), new VSC(350769, 3.303299, 426.598191), new VSC(206816, 0.246584, 103.092774), new VSC(79271, 3.84007, 220.41264), new VSC(23990, 4.66977, 110.20632), new VSC(16574, 0.43719, 419.48464), new VSC(15820, 0.93809, 632.78374), new VSC(15054, 2.7167, 639.89729), new VSC(14907, 5.76903, 316.39187), new VSC(14610, 1.56519, 3.93215), new VSC(13160, 4.44891, 14.22709), new VSC(13005, 5.98119, 11.0457), new VSC(10725, 3.1294, 202.2534), new VSC(6126, 1.7633, 277.035), new VSC(5863, 0.2366, 529.691), new VSC(5228, 4.2078, 3.1814), new VSC(5020, 3.1779, 433.7117), new VSC(4593, 0.6198, 199.072), new VSC(4006, 2.2448, 63.7359), new VSC(3874, 3.2228, 138.5175), new VSC(3269, 0.7749, 949.1756), new VSC(2954, 0.9828, 95.9792), new VSC(2461, 2.0316, 735.8765), new VSC(1758, 3.2658, 522.5774), new VSC(1640, 5.505, 846.0828), new VSC(1581, 4.3727, 309.2783), new VSC(1391, 4.0233, 323.5054), new VSC(1124, 2.8373, 415.5525), new VSC(1087, 4.1834, 2.4477), new VSC(1017, 3.717, 227.5262), new VSC(957, 0.507, 1265.567), new VSC(853, 3.421, 175.166), new VSC(849, 3.191, 209.367), new VSC(789, 5.007, 0.963), new VSC(749, 2.144, 853.196), new VSC(744, 5.253, 224.345), new VSC(687, 1.747, 1052.268), new VSC(654, 1.599, 0.048), new VSC(634, 2.299, 412.371), new VSC(625, 0.97, 210.118), new VSC(580, 3.093, 74.782), new VSC(546, 2.127, 350.332), new VSC(543, 1.518, 9.561), new VSC(530, 4.449, 117.32), new VSC(478, 2.965, 137.033), new VSC(474, 5.475, 742.99), new VSC(452, 1.044, 490.334), new VSC(449, 1.29, 127.472), new VSC(372, 2.278, 217.231), new VSC(355, 3.013, 838.969), new VSC(347, 1.539, 340.771), new VSC(343, 0.246, 0.521), new VSC(330, 0.247, 1581.959), new VSC(322, 0.961, 203.738), new VSC(322, 2.572, 647.011), new VSC(309, 3.495, 216.48), new VSC(287, 2.37, 351.817), new VSC(278, 0.4, 211.815), new VSC(249, 1.47, 1368.66), new VSC(227, 4.91, 12.53), new VSC(220, 4.204, 200.769), new VSC(209, 1.345, 625.67), new VSC(208, 0.483, 1162.475), new VSC(208, 1.283, 39.357), new VSC(204, 6.011, 265.989), new VSC(185, 3.503, 149.563), new VSC(184, 0.973, 4.193), new VSC(182, 5.491, 2.921), new VSC(174, 1.863, 0.751), new VSC(165, 0.44, 5.417), new VSC(149, 5.736, 52.69), new VSC(148, 1.535, 5.629), new VSC(146, 6.231, 195.14), new VSC(140, 4.295, 21.341), new VSC(131, 4.068, 10.295), new VSC(125, 6.277, 1898.351), new VSC(122, 1.976, 4.666), new VSC(118, 5.341, 554.07), new VSC(117, 2.679, 1155.361), new VSC(114, 5.594, 1059.382), new VSC(112, 1.105, 191.208), new VSC(110, 0.166, 1.484), new VSC(109, 3.438, 536.805), new VSC(107, 4.012, 956.289), new VSC(104, 2.192, 88.866), new VSC(103, 1.197, 1685.052), new VSC(101, 4.965, 269.921) ];
  GFX.g_L1SaturnCoefficients = [ new VSC(21354295596, 0, 0), new VSC(1296855, 1.8282054, 213.2990954), new VSC(564348, 2.885001, 7.113547), new VSC(107679, 2.277699, 206.185548), new VSC(98323, 1.0807, 426.59819), new VSC(40255, 2.04128, 220.41264), new VSC(19942, 1.27955, 103.09277), new VSC(10512, 2.7488, 14.22709), new VSC(6939, 0.4049, 639.8973), new VSC(4803, 2.4419, 419.4846), new VSC(4056, 2.9217, 110.2063), new VSC(3769, 3.6497, 3.9322), new VSC(3385, 2.4169, 3.1814), new VSC(3302, 1.2626, 433.7117), new VSC(3071, 2.3274, 199.072), new VSC(1953, 3.5639, 11.0457), new VSC(1249, 2.628, 95.9792), new VSC(922, 1.961, 227.526), new VSC(706, 4.417, 529.691), new VSC(650, 6.174, 202.253), new VSC(628, 6.111, 309.278), new VSC(487, 6.04, 853.196), new VSC(479, 4.988, 522.577), new VSC(468, 4.617, 63.736), new VSC(417, 2.117, 323.505), new VSC(408, 1.299, 209.367), new VSC(352, 2.317, 632.784), new VSC(344, 3.959, 412.371), new VSC(340, 3.634, 316.392), new VSC(336, 3.772, 735.877), new VSC(332, 2.861, 210.118), new VSC(289, 2.733, 117.32), new VSC(281, 5.744, 2.448), new VSC(266, 0.543, 647.011), new VSC(230, 1.644, 216.48), new VSC(192, 2.965, 224.345), new VSC(173, 4.077, 846.083), new VSC(167, 2.597, 21.341), new VSC(136, 2.286, 10.295), new VSC(131, 3.441, 742.99), new VSC(128, 4.095, 217.231), new VSC(109, 6.161, 415.552), new VSC(98, 4.73, 838.97), new VSC(94, 3.48, 1052.27), new VSC(92, 3.95, 88.87), new VSC(87, 1.22, 440.83), new VSC(83, 3.11, 625.67), new VSC(78, 6.24, 302.16), new VSC(67, 0.29, 4.67), new VSC(66, 5.65, 9.56), new VSC(62, 4.29, 127.47), new VSC(62, 1.83, 195.14), new VSC(58, 2.48, 191.96), new VSC(57, 5.02, 137.03), new VSC(55, 0.28, 74.78), new VSC(54, 5.13, 490.33), new VSC(51, 1.46, 536.8), new VSC(47, 1.18, 149.56), new VSC(47, 5.15, 515.46), new VSC(46, 2.23, 956.29), new VSC(44, 2.71, 5.42), new VSC(40, 0.41, 269.92), new VSC(40, 3.89, 728.76), new VSC(38, 0.65, 422.67), new VSC(38, 2.53, 12.53), new VSC(37, 3.78, 2.92), new VSC(35, 6.08, 5.63), new VSC(34, 3.21, 1368.66), new VSC(33, 4.64, 277.03), new VSC(33, 5.43, 1066.5), new VSC(33, 0.3, 351.82), new VSC(32, 4.39, 1155.36), new VSC(31, 2.43, 52.69), new VSC(30, 2.84, 203), new VSC(30, 6.19, 284.15), new VSC(30, 3.39, 1059.38), new VSC(29, 2.03, 330.62), new VSC(28, 2.74, 265.99), new VSC(26, 4.51, 340.77) ];
  GFX.g_L2SaturnCoefficients = [ new VSC(116441, 1.179879, 7.113547), new VSC(91921, 0.07425, 213.2991), new VSC(90592, 0, 0), new VSC(15277, 4.06492, 206.18555), new VSC(10631, 0.25778, 220.41264), new VSC(10605, 5.40964, 426.59819), new VSC(4265, 1.046, 14.2271), new VSC(1216, 2.9186, 103.0928), new VSC(1165, 4.6094, 639.8973), new VSC(1082, 5.6913, 433.7117), new VSC(1045, 4.0421, 199.072), new VSC(1020, 0.6337, 3.1814), new VSC(634, 4.388, 419.485), new VSC(549, 5.573, 3.932), new VSC(457, 1.268, 110.206), new VSC(425, 0.209, 227.526), new VSC(274, 4.288, 95.979), new VSC(162, 1.381, 11.046), new VSC(129, 1.566, 309.278), new VSC(117, 3.881, 853.196), new VSC(105, 4.9, 647.011), new VSC(101, 0.893, 21.341), new VSC(96, 2.91, 316.39), new VSC(95, 5.63, 412.37), new VSC(85, 5.73, 209.37), new VSC(83, 6.05, 216.48), new VSC(82, 1.02, 117.32), new VSC(75, 4.76, 210.12), new VSC(67, 0.46, 522.58), new VSC(66, 0.48, 10.29), new VSC(64, 0.35, 323.51), new VSC(61, 4.88, 632.78), new VSC(53, 2.75, 529.69), new VSC(46, 5.69, 440.83), new VSC(45, 1.67, 202.25), new VSC(42, 5.71, 88.87), new VSC(32, 0.07, 63.74), new VSC(32, 1.67, 302.16), new VSC(31, 4.16, 191.96), new VSC(27, 0.83, 224.34), new VSC(25, 5.66, 735.88), new VSC(20, 5.94, 217.23), new VSC(18, 4.9, 625.67), new VSC(17, 1.63, 742.99), new VSC(16, 0.58, 515.46), new VSC(14, 0.21, 838.97), new VSC(14, 3.76, 195.14), new VSC(12, 4.72, 203), new VSC(12, 0.13, 234.64), new VSC(12, 3.12, 846.08), new VSC(11, 5.92, 536.8), new VSC(11, 5.6, 728.76), new VSC(11, 3.2, 1066.5), new VSC(10, 4.99, 422.67), new VSC(10, 0.26, 330.62), new VSC(10, 4.15, 860.31), new VSC(9, 0.46, 956.29), new VSC(8, 2.14, 269.92), new VSC(8, 5.25, 429.78), new VSC(8, 4.03, 9.56), new VSC(7, 5.4, 1052.27), new VSC(6, 4.46, 284.15), new VSC(6, 5.93, 405.26) ];
  GFX.g_L3SaturnCoefficients = [ new VSC(16039, 5.73945, 7.11355), new VSC(4250, 4.5854, 213.2991), new VSC(1907, 4.7608, 220.4126), new VSC(1466, 5.9133, 206.1855), new VSC(1162, 5.6197, 14.2271), new VSC(1067, 3.6082, 426.5982), new VSC(239, 3.861, 433.712), new VSC(237, 5.768, 199.072), new VSC(166, 5.116, 3.181), new VSC(151, 2.736, 639.897), new VSC(131, 4.743, 227.526), new VSC(63, 0.23, 419.48), new VSC(62, 4.74, 103.09), new VSC(40, 5.47, 21.34), new VSC(40, 5.96, 95.98), new VSC(39, 5.83, 110.21), new VSC(28, 3.01, 647.01), new VSC(25, 0.99, 3.93), new VSC(19, 1.92, 853.2), new VSC(18, 4.97, 10.29), new VSC(18, 1.03, 412.37), new VSC(18, 4.2, 216.48), new VSC(18, 3.32, 309.28), new VSC(16, 3.9, 440.83), new VSC(16, 5.62, 117.32), new VSC(13, 1.18, 88.87), new VSC(11, 5.58, 11.05), new VSC(11, 5.93, 191.96), new VSC(10, 3.95, 209.37), new VSC(9, 3.39, 302.16), new VSC(8, 4.88, 323.51), new VSC(7, 0.38, 632.78), new VSC(6, 2.25, 522.58), new VSC(6, 1.06, 210.12), new VSC(5, 4.64, 234.64), new VSC(4, 3.14, 0), new VSC(4, 2.31, 515.46), new VSC(3, 2.2, 860.31), new VSC(3, 0.59, 529.69), new VSC(3, 4.93, 224.34), new VSC(3, 0.42, 625.67), new VSC(2, 4.77, 330.62), new VSC(2, 3.35, 429.78), new VSC(2, 3.2, 202.25), new VSC(2, 1.19, 1066.5), new VSC(2, 1.35, 405.26), new VSC(2, 4.16, 223.59), new VSC(2, 3.07, 654.12) ];
  GFX.g_L4SaturnCoefficients = [ new VSC(1662, 3.9983, 7.1135), new VSC(257, 2.984, 220.413), new VSC(236, 3.902, 14.227), new VSC(149, 2.741, 213.299), new VSC(114, 3.142, 0), new VSC(110, 1.515, 206.186), new VSC(68, 1.72, 426.6), new VSC(40, 2.05, 433.71), new VSC(38, 1.24, 199.07), new VSC(31, 3.01, 227.53), new VSC(15, 0.83, 639.9), new VSC(9, 3.71, 21.34), new VSC(6, 2.42, 419.48), new VSC(6, 1.16, 647.01), new VSC(4, 1.45, 95.98), new VSC(4, 2.12, 440.83), new VSC(3, 4.09, 110.21), new VSC(3, 2.77, 412.37), new VSC(3, 3.01, 88.87), new VSC(3, 0, 853.2), new VSC(3, 0.39, 103.09), new VSC(2, 3.78, 117.32), new VSC(2, 2.83, 234.64), new VSC(2, 5.08, 309.28), new VSC(2, 2.24, 216.48), new VSC(2, 5.19, 302.16), new VSC(1, 1.55, 191.96) ];
  GFX.g_L5SaturnCoefficients = [ new VSC(124, 2.259, 7.114), new VSC(34, 2.16, 14.23), new VSC(28, 1.2, 220.41), new VSC(6, 1.22, 227.53), new VSC(5, 0.24, 433.71), new VSC(4, 6.23, 426.6), new VSC(3, 2.97, 199.07), new VSC(3, 4.29, 206.19), new VSC(2, 6.25, 213.3), new VSC(1, 5.28, 639.9), new VSC(1, 0.24, 440.83), new VSC(1, 3.14, 0) ];
  GFX.g_B0SaturnCoefficients = [ new VSC(4330678, 3.6028443, 213.2990954), new VSC(240348, 2.852385, 426.598191), new VSC(84746, 0, 0), new VSC(34116, 0.57297, 206.18555), new VSC(30863, 3.48442, 220.41264), new VSC(14734, 2.11847, 639.89729), new VSC(9917, 5.79, 419.4846), new VSC(6994, 4.736, 7.1135), new VSC(4808, 5.4331, 316.3919), new VSC(4788, 4.9651, 110.2063), new VSC(3432, 2.7326, 433.7117), new VSC(1506, 6.013, 103.0928), new VSC(1060, 5.631, 529.691), new VSC(969, 5.204, 632.784), new VSC(942, 1.396, 853.196), new VSC(708, 3.803, 323.505), new VSC(552, 5.131, 202.253), new VSC(400, 3.359, 227.526), new VSC(319, 3.626, 209.367), new VSC(316, 1.997, 647.011), new VSC(314, 0.465, 217.231), new VSC(284, 4.886, 224.345), new VSC(236, 2.139, 11.046), new VSC(215, 5.95, 846.083), new VSC(209, 2.12, 415.552), new VSC(207, 0.73, 199.072), new VSC(179, 2.954, 63.736), new VSC(141, 0.644, 490.334), new VSC(139, 4.595, 14.227), new VSC(139, 1.998, 735.877), new VSC(135, 5.245, 742.99), new VSC(122, 3.115, 522.577), new VSC(116, 3.109, 216.48), new VSC(114, 0.963, 210.118) ];
  GFX.g_B1SaturnCoefficients = [ new VSC(397555, 5.3329, 213.299095), new VSC(49479, 3.14159, 0), new VSC(18572, 6.09919, 426.59819), new VSC(14801, 2.30586, 206.18555), new VSC(9644, 1.6967, 220.4126), new VSC(3757, 1.2543, 419.4846), new VSC(2717, 5.9117, 639.8973), new VSC(1455, 0.8516, 433.7117), new VSC(1291, 2.9177, 7.1135), new VSC(853, 0.436, 316.392), new VSC(298, 0.919, 632.784), new VSC(292, 5.316, 853.196), new VSC(284, 1.619, 227.526), new VSC(275, 3.889, 103.093), new VSC(172, 0.052, 647.011), new VSC(166, 2.444, 199.072), new VSC(158, 5.209, 110.206), new VSC(128, 1.207, 529.691), new VSC(110, 2.457, 217.231), new VSC(82, 2.76, 210.12), new VSC(81, 2.86, 14.23), new VSC(69, 1.66, 202.25), new VSC(65, 1.26, 216.48), new VSC(61, 1.25, 209.37), new VSC(59, 1.82, 323.51), new VSC(46, 0.82, 440.83), new VSC(36, 1.82, 224.34), new VSC(34, 2.84, 117.32), new VSC(33, 1.31, 412.37), new VSC(32, 1.19, 846.08), new VSC(27, 4.65, 1066.5), new VSC(27, 4.44, 11.05) ];
  GFX.g_B2SaturnCoefficients = [ new VSC(20630, 0.50482, 213.2991), new VSC(3720, 3.9983, 206.1855), new VSC(1627, 6.1819, 220.4126), new VSC(1346, 0, 0), new VSC(706, 3.039, 419.485), new VSC(365, 5.099, 426.598), new VSC(330, 5.279, 433.712), new VSC(219, 3.828, 639.897), new VSC(139, 1.043, 7.114), new VSC(104, 6.157, 227.526), new VSC(93, 1.98, 316.39), new VSC(71, 4.15, 199.07), new VSC(52, 2.88, 632.78), new VSC(49, 4.43, 647.01), new VSC(41, 3.16, 853.2), new VSC(29, 4.53, 210.12), new VSC(24, 1.12, 14.23), new VSC(21, 4.35, 217.23), new VSC(20, 5.31, 440.83), new VSC(18, 0.85, 110.21), new VSC(17, 5.68, 216.48), new VSC(16, 4.26, 103.09), new VSC(14, 3, 412.37), new VSC(12, 2.53, 529.69), new VSC(8, 3.32, 202.25), new VSC(7, 5.56, 209.37), new VSC(7, 0.29, 323.51), new VSC(6, 1.16, 117.32), new VSC(6, 3.61, 869.31) ];
  GFX.g_B3SaturnCoefficients = [ new VSC(666, 1.99, 213.299), new VSC(632, 5.698, 206.186), new VSC(398, 0, 0), new VSC(188, 4.338, 220.413), new VSC(92, 4.84, 419.48), new VSC(52, 3.42, 433.71), new VSC(42, 2.38, 426.6), new VSC(26, 4.4, 227.53), new VSC(21, 5.85, 199.07), new VSC(18, 1.99, 639.9), new VSC(11, 5.37, 7.11), new VSC(10, 2.55, 647.01), new VSC(7, 3.46, 316.39), new VSC(6, 4.8, 632.78), new VSC(6, 0.02, 210.12), new VSC(6, 3.52, 440.83), new VSC(5, 5.64, 14.23), new VSC(5, 1.22, 853.2), new VSC(4, 4.71, 412.37), new VSC(3, 0.63, 103.09), new VSC(2, 3.72, 216.48) ];
  GFX.g_B4SaturnCoefficients = [ new VSC(80, 1.12, 206.19), new VSC(32, 3.12, 213.3), new VSC(17, 2.48, 220.41), new VSC(12, 3.14, 0), new VSC(9, 0.38, 419.48), new VSC(6, 1.56, 433.71), new VSC(5, 2.63, 227.53), new VSC(5, 1.28, 199.07), new VSC(1, 1.43, 426.6), new VSC(1, 0.67, 647.01), new VSC(1, 1.72, 440.83), new VSC(1, 6.18, 639.9) ];
  GFX.g_B5SaturnCoefficients = [ new VSC(8, 2.82, 206.19), new VSC(1, 0.51, 220.41) ];
  GFX.g_R0SaturnCoefficients = [ new VSC(955758136, 0, 0), new VSC(52921382, 2.3922622, 213.29909544), new VSC(1873680, 5.2354961, 206.1855484), new VSC(1464664, 1.6476305, 426.5981909), new VSC(821891, 5.9352, 316.39187), new VSC(547507, 5.015326, 103.092774), new VSC(371684, 2.271148, 220.412642), new VSC(361778, 3.139043, 7.113547), new VSC(140618, 5.704067, 632.783739), new VSC(108975, 3.293136, 110.206321), new VSC(69007, 5.941, 419.48464), new VSC(61053, 0.94038, 639.89729), new VSC(48913, 1.55733, 202.2534), new VSC(34144, 0.19519, 277.03499), new VSC(32402, 5.47085, 949.17561), new VSC(20937, 0.46349, 735.87651), new VSC(20839, 1.52103, 433.71174), new VSC(20747, 5.33256, 199.072), new VSC(15298, 3.05944, 529.69097), new VSC(14296, 2.60434, 323.50542), new VSC(12884, 1.64892, 138.5175), new VSC(11993, 5.98051, 846.08283), new VSC(11380, 1.73106, 522.57742), new VSC(9796, 5.2048, 1265.5675), new VSC(7753, 5.8519, 95.9792), new VSC(6771, 3.0043, 14.2271), new VSC(6466, 0.1773, 1052.2684), new VSC(5850, 1.4552, 415.5525), new VSC(5307, 0.5974, 63.7359), new VSC(4696, 2.1492, 227.5262), new VSC(4044, 1.6401, 209.3669), new VSC(3688, 0.7802, 412.3711), new VSC(3461, 1.8509, 175.1661), new VSC(3420, 4.9455, 1581.9593), new VSC(3401, 0.5539, 350.3321), new VSC(3376, 3.6953, 224.3448), new VSC(2976, 5.6847, 210.1177), new VSC(2885, 1.3876, 838.9693), new VSC(2881, 0.1796, 853.1964), new VSC(2508, 3.5385, 742.9901), new VSC(2448, 6.1841, 1368.6603), new VSC(2406, 2.9656, 117.3199), new VSC(2174, 0.0151, 340.7709), new VSC(2024, 5.0541, 11.0457) ];
  GFX.g_R1SaturnCoefficients = [ new VSC(6182981, 0.2584352, 213.2990954), new VSC(506578, 0.711147, 206.185548), new VSC(341394, 5.796358, 426.598191), new VSC(188491, 0.472157, 220.412642), new VSC(186262, 3.141593, 0), new VSC(143891, 1.407449, 7.113547), new VSC(49621, 6.01744, 103.09277), new VSC(20928, 5.09246, 639.89729), new VSC(19953, 1.1756, 419.48464), new VSC(18840, 1.6082, 110.20632), new VSC(13877, 0.75886, 199.072), new VSC(12893, 5.9433, 433.71174), new VSC(5397, 1.2885, 14.2271), new VSC(4869, 0.8679, 323.5054), new VSC(4247, 0.393, 227.5262), new VSC(3252, 1.2585, 95.9792), new VSC(3081, 3.4366, 522.5774), new VSC(2909, 4.6068, 202.2534), new VSC(2856, 2.1673, 735.8765), new VSC(1988, 2.4505, 412.3711), new VSC(1941, 6.0239, 209.3669), new VSC(1581, 1.2919, 210.1177), new VSC(1340, 4.308, 853.1964), new VSC(1316, 1.253, 117.3199), new VSC(1203, 1.8665, 316.3919), new VSC(1091, 0.0753, 216.4805), new VSC(966, 0.48, 632.784), new VSC(954, 5.152, 647.011), new VSC(898, 0.983, 529.691), new VSC(882, 1.885, 1052.268), new VSC(874, 1.402, 224.345), new VSC(785, 3.064, 838.969), new VSC(740, 1.382, 625.67), new VSC(658, 4.144, 309.278), new VSC(650, 1.725, 742.99), new VSC(613, 3.033, 63.736), new VSC(599, 2.549, 217.231), new VSC(503, 2.13, 3.932) ];
  GFX.g_R2SaturnCoefficients = [ new VSC(436902, 4.786717, 213.299095), new VSC(71923, 2.5007, 206.18555), new VSC(49767, 4.97168, 220.41264), new VSC(43221, 3.8694, 426.59819), new VSC(29646, 5.9631, 7.11355), new VSC(4721, 2.4753, 199.072), new VSC(4142, 4.1067, 433.7117), new VSC(3789, 3.0977, 639.8973), new VSC(2964, 1.3721, 103.0928), new VSC(2556, 2.8507, 419.4846), new VSC(2327, 0, 0), new VSC(2208, 6.2759, 110.2063), new VSC(2188, 5.8555, 14.2271), new VSC(1957, 4.9245, 227.5262), new VSC(924, 5.464, 323.505), new VSC(706, 2.971, 95.979), new VSC(546, 4.129, 412.371), new VSC(431, 5.178, 522.577), new VSC(405, 4.173, 209.367), new VSC(391, 4.481, 216.48), new VSC(374, 5.834, 117.32), new VSC(361, 3.277, 647.011), new VSC(356, 3.192, 210.118), new VSC(326, 2.269, 853.196), new VSC(207, 4.022, 735.877), new VSC(204, 0.088, 202.253), new VSC(180, 3.597, 632.784), new VSC(178, 4.097, 440.825), new VSC(154, 3.135, 625.67), new VSC(148, 0.136, 302.165), new VSC(133, 2.594, 191.958), new VSC(132, 5.933, 309.278) ];
  GFX.g_R3SaturnCoefficients = [ new VSC(20315, 3.02187, 213.2991), new VSC(8924, 3.1914, 220.4126), new VSC(6909, 4.3517, 206.1855), new VSC(4087, 4.2241, 7.1135), new VSC(3879, 2.0106, 426.5982), new VSC(1071, 4.2036, 199.072), new VSC(907, 2.283, 433.712), new VSC(606, 3.175, 227.526), new VSC(597, 4.135, 14.227), new VSC(483, 1.173, 639.897), new VSC(393, 0, 0), new VSC(229, 4.698, 419.485), new VSC(188, 4.59, 110.206), new VSC(150, 3.202, 103.093), new VSC(121, 3.768, 323.505), new VSC(102, 4.71, 95.979), new VSC(101, 5.819, 412.371), new VSC(93, 1.44, 647.01), new VSC(84, 2.63, 216.48), new VSC(73, 4.15, 117.32), new VSC(62, 2.31, 440.83), new VSC(55, 0.31, 853.2), new VSC(50, 2.39, 209.37), new VSC(45, 4.37, 191.96), new VSC(41, 0.69, 522.58), new VSC(40, 1.84, 302.16), new VSC(38, 5.94, 88.87), new VSC(32, 4.01, 21.34) ];
  GFX.g_R4SaturnCoefficients = [ new VSC(1202, 1.415, 220.4126), new VSC(708, 1.162, 213.299), new VSC(516, 6.24, 206.186), new VSC(427, 2.469, 7.114), new VSC(268, 0.187, 426.598), new VSC(170, 5.959, 199.072), new VSC(150, 0.48, 433.712), new VSC(145, 1.442, 227.526), new VSC(121, 2.405, 14.227), new VSC(47, 5.57, 639.9), new VSC(19, 5.86, 647.01), new VSC(17, 0.53, 440.83), new VSC(16, 2.9, 110.21), new VSC(15, 0.3, 419.48), new VSC(14, 1.3, 412.37), new VSC(13, 2.09, 323.51), new VSC(11, 0.22, 95.98), new VSC(11, 2.46, 117.32), new VSC(10, 3.14, 0), new VSC(9, 1.56, 88.87), new VSC(9, 2.28, 21.34), new VSC(9, 0.68, 216.48), new VSC(8, 1.27, 234.64) ];
  GFX.g_R5SaturnCoefficients = [ new VSC(129, 5.913, 220.413), new VSC(32, 0.69, 7.11), new VSC(27, 5.91, 227.53), new VSC(20, 4.95, 433.71), new VSC(20, 0.67, 14.23), new VSC(14, 2.67, 206.19), new VSC(14, 1.46, 199.07), new VSC(13, 4.59, 426.6), new VSC(7, 4.63, 213.3), new VSC(5, 3.61, 639.9), new VSC(4, 4.9, 440.83), new VSC(3, 4.07, 647.01), new VSC(3, 4.66, 191.96), new VSC(3, 0.49, 323.51), new VSC(3, 3.18, 419.48), new VSC(2, 3.7, 88.87), new VSC(2, 3.32, 95.98), new VSC(2, 0.56, 117.32) ];
  GFX.g_L0UranusCoefficients = [ new VSC(548129294, 0, 0), new VSC(9260408, 0.8910642, 74.7815986), new VSC(1504248, 3.6271926, 1.4844727), new VSC(365982, 1.899622, 73.297126), new VSC(272328, 3.358237, 149.563197), new VSC(70328, 5.39254, 63.7359), new VSC(68893, 6.09292, 76.26607), new VSC(61999, 2.26952, 2.96895), new VSC(61951, 2.85099, 11.0457), new VSC(26469, 3.14152, 71.81265), new VSC(25711, 6.1138, 454.90937), new VSC(21079, 4.36059, 148.07872), new VSC(17819, 1.74437, 36.64856), new VSC(14613, 4.73732, 3.93215), new VSC(11163, 5.82682, 224.3448), new VSC(10998, 0.48865, 138.5175), new VSC(9527, 2.9552, 35.1641), new VSC(7546, 5.2363, 109.9457), new VSC(4220, 3.2333, 70.8494), new VSC(4052, 2.2775, 151.0477), new VSC(3490, 5.4831, 146.5943), new VSC(3355, 1.0655, 4.4534), new VSC(3144, 4.752, 77.7505), new VSC(2927, 4.629, 9.5612), new VSC(2922, 5.3524, 85.8273), new VSC(2273, 4.366, 70.3282), new VSC(2149, 0.6075, 38.133), new VSC(2051, 1.5177, 0.1119), new VSC(1992, 4.9244, 277.035), new VSC(1667, 3.6274, 380.1278), new VSC(1533, 2.5859, 52.6902), new VSC(1376, 2.0428, 65.2204), new VSC(1372, 4.1964, 111.4302), new VSC(1284, 3.1135, 202.2534), new VSC(1282, 0.5427, 222.8603), new VSC(1244, 0.9161, 2.4477), new VSC(1221, 0.199, 108.4612), new VSC(1151, 4.179, 33.6796), new VSC(1150, 0.9334, 3.1814), new VSC(1090, 1.775, 12.5302), new VSC(1072, 0.2356, 62.2514), new VSC(946, 1.192, 127.472), new VSC(708, 5.183, 213.299), new VSC(653, 0.966, 78.714), new VSC(628, 0.182, 984.6), new VSC(607, 5.432, 529.691), new VSC(559, 3.358, 0.521), new VSC(524, 2.013, 299.126), new VSC(483, 2.106, 0.963), new VSC(471, 1.407, 184.727), new VSC(467, 0.415, 145.11), new VSC(434, 5.521, 183.243), new VSC(405, 5.987, 8.077), new VSC(399, 0.338, 415.552), new VSC(396, 5.87, 351.817), new VSC(379, 2.35, 56.622), new VSC(310, 5.833, 145.631), new VSC(300, 5.644, 22.091), new VSC(294, 5.839, 39.618), new VSC(252, 1.637, 221.376), new VSC(249, 4.746, 225.829), new VSC(239, 2.35, 137.033), new VSC(224, 0.516, 84.343), new VSC(223, 2.843, 0.261), new VSC(220, 1.922, 67.668), new VSC(217, 6.142, 5.938), new VSC(216, 4.778, 340.771), new VSC(208, 5.58, 68.844), new VSC(202, 1.297, 0.048), new VSC(199, 0.956, 152.532), new VSC(194, 1.888, 456.394), new VSC(193, 0.916, 453.425), new VSC(187, 1.319, 0.16), new VSC(182, 3.536, 79.235), new VSC(173, 1.539, 160.609), new VSC(172, 5.68, 219.891), new VSC(170, 3.677, 5.417), new VSC(169, 5.879, 18.159), new VSC(165, 1.424, 106.977), new VSC(163, 3.05, 112.915), new VSC(158, 0.738, 54.175), new VSC(147, 1.263, 59.804), new VSC(143, 1.3, 35.425), new VSC(139, 5.386, 32.195), new VSC(139, 4.26, 909.819), new VSC(124, 1.374, 7.114), new VSC(110, 2.027, 554.07), new VSC(109, 5.706, 77.963), new VSC(104, 5.028, 0.751), new VSC(104, 1.458, 24.379), new VSC(103, 0.681, 14.978) ];
  GFX.g_L1UranusCoefficients = [ new VSC(7502543122, 0, 0), new VSC(154458, 5.242017, 74.781599), new VSC(24456, 1.71256, 1.48447), new VSC(9258, 0.4284, 11.0457), new VSC(8266, 1.5022, 63.7359), new VSC(7842, 1.3198, 149.5632), new VSC(3899, 0.4648, 3.9322), new VSC(2284, 4.1737, 76.2661), new VSC(1927, 0.5301, 2.9689), new VSC(1233, 1.5863, 70.8494), new VSC(791, 5.436, 3.181), new VSC(767, 1.996, 73.297), new VSC(482, 2.984, 85.827), new VSC(450, 4.138, 138.517), new VSC(446, 3.723, 224.345), new VSC(427, 4.731, 71.813), new VSC(354, 2.583, 148.079), new VSC(348, 2.454, 9.561), new VSC(317, 5.579, 52.69), new VSC(206, 2.363, 2.448), new VSC(189, 4.202, 56.622), new VSC(184, 0.284, 151.048), new VSC(180, 5.684, 12.53), new VSC(171, 3.001, 78.714), new VSC(158, 2.909, 0.963), new VSC(155, 5.591, 4.453), new VSC(154, 4.652, 35.164), new VSC(152, 2.942, 77.751), new VSC(143, 2.59, 62.251), new VSC(121, 4.148, 127.472), new VSC(116, 3.732, 65.22), new VSC(102, 4.188, 145.631), new VSC(102, 6.034, 0.112), new VSC(88, 3.99, 18.16), new VSC(88, 6.16, 202.25), new VSC(81, 2.64, 22.09), new VSC(72, 6.05, 70.33), new VSC(69, 4.05, 77.96), new VSC(59, 3.7, 67.67), new VSC(47, 3.54, 351.82), new VSC(44, 5.91, 7.11), new VSC(43, 5.72, 5.42), new VSC(39, 4.92, 222.86), new VSC(36, 5.9, 33.68), new VSC(36, 3.29, 8.08), new VSC(36, 3.33, 71.6), new VSC(35, 5.08, 38.13), new VSC(31, 5.62, 984.6), new VSC(31, 5.5, 59.8), new VSC(31, 5.46, 160.61), new VSC(30, 1.66, 447.8), new VSC(29, 1.15, 462.02), new VSC(29, 4.52, 84.34), new VSC(27, 5.54, 131.4), new VSC(27, 6.15, 299.13), new VSC(26, 4.99, 137.03), new VSC(25, 5.74, 380.13) ];
  GFX.g_L2UranusCoefficients = [ new VSC(53033, 0, 0), new VSC(2358, 2.2601, 74.7816), new VSC(769, 4.526, 11.046), new VSC(552, 3.258, 63.736), new VSC(542, 2.276, 3.932), new VSC(529, 4.923, 1.484), new VSC(258, 3.691, 3.181), new VSC(239, 5.858, 149.563), new VSC(182, 6.218, 70.849), new VSC(54, 1.44, 76.27), new VSC(49, 6.03, 56.62), new VSC(45, 3.91, 2.45), new VSC(45, 0.81, 85.83), new VSC(38, 1.78, 52.69), new VSC(37, 4.46, 2.97), new VSC(33, 0.86, 9.56), new VSC(29, 5.1, 73.3), new VSC(24, 2.11, 18.16), new VSC(22, 5.99, 138.52), new VSC(22, 4.82, 78.71), new VSC(21, 2.4, 77.96), new VSC(21, 2.17, 224.34), new VSC(17, 2.54, 145.63), new VSC(17, 3.47, 12.53), new VSC(12, 0.02, 22.09), new VSC(11, 0.08, 127.47), new VSC(10, 5.16, 71.6), new VSC(10, 4.46, 62.25), new VSC(9, 4.26, 7.11), new VSC(8, 5.5, 67.67), new VSC(7, 1.25, 5.42), new VSC(6, 3.36, 447.8), new VSC(6, 5.45, 65.22), new VSC(6, 4.52, 151.05), new VSC(6, 5.73, 462.02) ];
  GFX.g_L3UranusCoefficients = [ new VSC(121, 0.024, 74.782), new VSC(68, 4.12, 3.93), new VSC(53, 2.39, 11.05), new VSC(46, 0, 0), new VSC(45, 2.04, 3.18), new VSC(44, 2.96, 1.48), new VSC(25, 4.89, 63.74), new VSC(21, 4.55, 70.85), new VSC(20, 2.31, 149.56), new VSC(9, 1.58, 56.62), new VSC(4, 0.23, 18.16), new VSC(4, 5.39, 76.27), new VSC(4, 0.95, 77.96), new VSC(3, 4.98, 85.83), new VSC(3, 4.13, 52.69), new VSC(3, 0.37, 78.71), new VSC(2, 0.86, 145.63), new VSC(2, 5.66, 9.56) ];
  GFX.g_L4UranusCoefficients = [ new VSC(114, 3.142, 0), new VSC(6, 4.58, 74.78), new VSC(3, 0.35, 11.05), new VSC(1, 3.42, 56.62) ];
  GFX.g_B0UranusCoefficients = [ new VSC(1346278, 2.6187781, 74.7815986), new VSC(62341, 5.08111, 149.5632), new VSC(61601, 3.14159, 0), new VSC(9964, 1.616, 76.2661), new VSC(9926, 0.5763, 73.2971), new VSC(3259, 1.2612, 224.3448), new VSC(2972, 2.2437, 1.4845), new VSC(2010, 6.0555, 148.0787), new VSC(1522, 0.2796, 63.7359), new VSC(924, 4.038, 151.048), new VSC(761, 6.14, 71.813), new VSC(522, 3.321, 138.517), new VSC(463, 0.743, 85.827), new VSC(437, 3.381, 529.691), new VSC(435, 0.341, 77.751), new VSC(431, 3.554, 213.299), new VSC(420, 5.213, 11.046), new VSC(245, 0.788, 2.969), new VSC(233, 2.257, 222.86), new VSC(216, 1.591, 38.133), new VSC(180, 3.725, 299.126), new VSC(175, 1.236, 146.594), new VSC(174, 1.937, 380.128), new VSC(160, 5.336, 111.43), new VSC(144, 5.962, 35.164), new VSC(116, 5.739, 70.849), new VSC(106, 0.941, 70.328), new VSC(102, 2.619, 78.714) ];
  GFX.g_B1UranusCoefficients = [ new VSC(206366, 4.123943, 74.781599), new VSC(8563, 0.3382, 149.5632), new VSC(1726, 2.1219, 73.2971), new VSC(1374, 0, 0), new VSC(1369, 3.0686, 76.2661), new VSC(451, 3.777, 1.484), new VSC(400, 2.848, 224.345), new VSC(307, 1.255, 148.079), new VSC(154, 3.786, 63.736), new VSC(112, 5.573, 151.048), new VSC(111, 5.329, 138.517), new VSC(83, 3.59, 71.81), new VSC(56, 3.4, 85.83), new VSC(54, 1.7, 77.75), new VSC(42, 1.21, 11.05), new VSC(41, 4.45, 78.71), new VSC(32, 3.77, 222.86), new VSC(30, 2.56, 2.97), new VSC(27, 5.34, 213.3), new VSC(26, 0.42, 380.13) ];
  GFX.g_B2UranusCoefficients = [ new VSC(9212, 5.8004, 74.7816), new VSC(557, 0, 0), new VSC(286, 2.177, 149.563), new VSC(95, 3.84, 73.3), new VSC(45, 4.88, 76.27), new VSC(20, 5.46, 1.48), new VSC(15, 0.88, 138.52), new VSC(14, 2.85, 148.08), new VSC(14, 5.07, 63.74), new VSC(10, 5, 224.34), new VSC(8, 6.27, 78.71) ];
  GFX.g_B3UranusCoefficients = [ new VSC(268, 1.251, 74.782), new VSC(11, 3.14, 0), new VSC(6, 4.01, 149.56), new VSC(3, 5.78, 73.3) ];
  GFX.g_B4UranusCoefficients = [ new VSC(6, 2.85, 74.78) ];
  GFX.g_R0UranusCoefficients = [ new VSC(1921264848, 0, 0), new VSC(88784984, 5.60377527, 74.78159857), new VSC(3440836, 0.328361, 73.2971259), new VSC(2055653, 1.7829517, 149.5631971), new VSC(649322, 4.522473, 76.266071), new VSC(602248, 3.860038, 63.735898), new VSC(496404, 1.401399, 454.909367), new VSC(338526, 1.580027, 138.517497), new VSC(243508, 1.570866, 71.812653), new VSC(190522, 1.998094, 1.484473), new VSC(161858, 2.791379, 148.078724), new VSC(143706, 1.383686, 11.0457), new VSC(93192, 0.17437, 36.64856), new VSC(89806, 3.66105, 109.94569), new VSC(71424, 4.24509, 224.3448), new VSC(46677, 1.39977, 35.16409), new VSC(39026, 3.36235, 277.03499), new VSC(39010, 1.66971, 70.84945), new VSC(36755, 3.88649, 146.59425), new VSC(30349, 0.701, 151.04767), new VSC(29156, 3.18056, 77.75054), new VSC(25786, 3.78538, 85.8273), new VSC(25620, 5.25656, 380.12777), new VSC(22637, 0.72519, 529.69097), new VSC(20473, 2.7964, 70.32818), new VSC(20472, 1.55589, 202.2534), new VSC(17901, 0.55455, 2.96895), new VSC(15503, 5.35405, 38.13304), new VSC(14702, 4.90434, 108.46122), new VSC(12897, 2.62154, 111.43016), new VSC(12328, 5.96039, 127.4718), new VSC(11959, 1.75044, 984.60033), new VSC(11853, 0.99343, 52.6902), new VSC(11696, 3.29826, 3.93215), new VSC(11495, 0.43774, 65.22037), new VSC(10793, 1.42105, 213.2991), new VSC(9111, 4.9964, 62.2514), new VSC(8421, 5.2535, 222.8603), new VSC(8402, 5.0388, 415.5525), new VSC(7449, 0.7949, 351.8166), new VSC(7329, 3.9728, 183.2428), new VSC(6046, 5.6796, 78.7138), new VSC(5524, 3.115, 9.5612), new VSC(5445, 5.1058, 145.1098), new VSC(5238, 2.6296, 33.6796), new VSC(4079, 3.2206, 340.7709), new VSC(3919, 4.2502, 39.6175), new VSC(3802, 6.1099, 184.7273), new VSC(3781, 3.4584, 456.3938), new VSC(3687, 2.4872, 453.4249), new VSC(3102, 4.1403, 219.8914), new VSC(2963, 0.8298, 56.6224), new VSC(2942, 0.4239, 299.1264), new VSC(2940, 2.1464, 137.033), new VSC(2938, 3.6766, 140.002), new VSC(2865, 0.31, 12.5302), new VSC(2538, 4.8546, 131.4039), new VSC(2364, 0.4425, 554.07), new VSC(2183, 2.9404, 305.3462) ];
  GFX.g_R1UranusCoefficients = [ new VSC(1479896, 3.6720571, 74.7815986), new VSC(71212, 6.22601, 63.7359), new VSC(68627, 6.13411, 149.5632), new VSC(24060, 3.14159, 0), new VSC(21468, 2.60177, 76.26607), new VSC(20857, 5.24625, 11.0457), new VSC(11405, 0.01848, 70.84945), new VSC(7497, 0.4236, 73.2971), new VSC(4244, 1.4169, 85.8273), new VSC(3927, 3.1551, 71.8127), new VSC(3578, 2.3116, 224.3448), new VSC(3506, 2.5835, 138.5175), new VSC(3229, 5.255, 3.9322), new VSC(3060, 0.1532, 1.4845), new VSC(2564, 0.9808, 148.0787), new VSC(2429, 3.9944, 52.6902), new VSC(1645, 2.6535, 127.4718), new VSC(1584, 1.4305, 78.7138), new VSC(1508, 5.06, 151.0477), new VSC(1490, 2.6756, 56.6224), new VSC(1413, 4.5746, 202.2534), new VSC(1403, 1.3699, 77.7505), new VSC(1228, 1.047, 62.2514), new VSC(1033, 0.2646, 131.4039), new VSC(992, 2.172, 65.22), new VSC(862, 5.055, 351.817), new VSC(744, 3.076, 35.164), new VSC(687, 2.499, 77.963), new VSC(647, 4.473, 70.328), new VSC(624, 0.863, 9.561), new VSC(604, 0.907, 984.6), new VSC(575, 3.231, 447.796), new VSC(562, 2.718, 462.023), new VSC(530, 5.917, 213.299), new VSC(528, 5.151, 2.969) ];
  GFX.g_R2UranusCoefficients = [ new VSC(22440, 0.69953, 74.7816), new VSC(4727, 1.699, 63.7359), new VSC(1682, 4.6483, 70.8494), new VSC(1650, 3.0966, 11.0457), new VSC(1434, 3.5212, 149.5632), new VSC(770, 0, 0), new VSC(500, 6.172, 76.266), new VSC(461, 0.767, 3.932), new VSC(390, 4.496, 56.622), new VSC(390, 5.527, 85.827), new VSC(292, 0.204, 52.69), new VSC(287, 3.534, 73.297), new VSC(273, 3.847, 138.517), new VSC(220, 1.964, 131.404), new VSC(216, 0.848, 77.963), new VSC(205, 3.248, 78.714), new VSC(149, 4.898, 127.472), new VSC(129, 2.081, 3.181) ];
  GFX.g_R3UranusCoefficients = [ new VSC(1164, 4.7345, 74.7816), new VSC(212, 3.343, 63.736), new VSC(196, 2.98, 70.849), new VSC(105, 0.958, 11.046), new VSC(73, 1, 149.56), new VSC(72, 0.03, 56.62), new VSC(55, 2.59, 3.93), new VSC(36, 5.65, 77.96), new VSC(34, 3.82, 76.27), new VSC(32, 3.6, 131.4) ];
  GFX.g_R4UranusCoefficients = [ new VSC(53, 3.01, 74.78), new VSC(10, 1.91, 56.62) ];
  GFX.g_L0VenusCoefficients = [ new VSC(317614667, 0, 0), new VSC(1353968, 5.5931332, 10213.2855462), new VSC(89892, 5.3065, 20426.57109), new VSC(5477, 4.4163, 7860.4194), new VSC(3456, 2.6996, 11790.6291), new VSC(2372, 2.9938, 3930.2097), new VSC(1664, 4.2502, 1577.3435), new VSC(1438, 4.1575, 9683.5946), new VSC(1317, 5.1867, 26.2983), new VSC(1201, 6.1536, 30639.8566), new VSC(769, 0.816, 9437.763), new VSC(761, 1.95, 529.691), new VSC(708, 1.065, 775.523), new VSC(585, 3.998, 191.448), new VSC(500, 4.123, 15720.839), new VSC(429, 3.586, 19367.189), new VSC(327, 5.677, 5507.553), new VSC(326, 4.591, 10404.734), new VSC(232, 3.163, 9153.904), new VSC(180, 4.653, 1109.379), new VSC(155, 5.57, 19651.048), new VSC(128, 4.226, 20.775), new VSC(128, 0.962, 5661.332), new VSC(106, 1.537, 801.821) ];
  GFX.g_L1VenusCoefficients = [ new VSC(1021352943053, 0, 0), new VSC(95708, 2.46424, 10213.28555), new VSC(14445, 0.51625, 20426.57109), new VSC(213, 1.795, 30639.857), new VSC(174, 2.655, 26.298), new VSC(152, 6.106, 1577.344), new VSC(82, 5.7, 191.45), new VSC(70, 2.68, 9437.76), new VSC(52, 3.6, 775.52), new VSC(38, 1.03, 529.69), new VSC(30, 1.25, 5507.55), new VSC(25, 6.11, 10404.73) ];
  GFX.g_L2VenusCoefficients = [ new VSC(54127, 0, 0), new VSC(3891, 0.3451, 10213.2855), new VSC(1338, 2.0201, 20426.5711), new VSC(24, 2.05, 26.3), new VSC(19, 3.54, 30639.86), new VSC(10, 3.97, 775.52), new VSC(7, 1.52, 1577.34), new VSC(6, 1, 191.45) ];
  GFX.g_L3VenusCoefficients = [ new VSC(136, 4.804, 10213.286), new VSC(78, 3.67, 20426.57), new VSC(26, 0, 0) ];
  GFX.g_L4VenusCoefficients = [ new VSC(114, 3.1416, 0), new VSC(3, 5.21, 20426.57), new VSC(2, 2.51, 10213.29) ];
  GFX.g_L5VenusCoefficients = [ new VSC(1, 3.14, 0) ];
  GFX.g_B0VenusCoefficients = [ new VSC(5923638, 0.2670278, 10213.2855462), new VSC(40108, 1.14737, 20426.57109), new VSC(32815, 3.14737, 0), new VSC(1011, 1.0895, 30639.8566), new VSC(149, 6.254, 18073.705), new VSC(138, 0.86, 1577.344), new VSC(130, 3.672, 9437.763), new VSC(120, 3.705, 2352.866), new VSC(108, 4.539, 22003.915) ];
  GFX.g_B1VenusCoefficients = [ new VSC(513348, 1.803643, 10213.285546), new VSC(4380, 3.3862, 20426.5711), new VSC(199, 0, 0), new VSC(197, 2.53, 30639.857) ];
  GFX.g_B2VenusCoefficients = [ new VSC(22378, 3.38509, 10213.28555), new VSC(282, 0, 0), new VSC(173, 5.256, 20426.571), new VSC(27, 3.87, 30639.86) ];
  GFX.g_B3VenusCoefficients = [ new VSC(647, 4.992, 10213.286), new VSC(20, 3.14, 0), new VSC(6, 0.77, 20426.57), new VSC(3, 5.44, 30639.86) ];
  GFX.g_B4VenusCoefficients = [ new VSC(14, 0.32, 10213.29) ];
  GFX.g_R0VenusCoefficients = [ new VSC(72334821, 0, 0), new VSC(489824, 4.021518, 10213.285546), new VSC(1658, 4.9021, 20426.5711), new VSC(1632, 2.8455, 7860.4194), new VSC(1378, 1.1285, 11790.6291), new VSC(498, 2.587, 9683.595), new VSC(374, 1.423, 3930.21), new VSC(264, 5.529, 9437.763), new VSC(237, 2.551, 15720.839), new VSC(222, 2.013, 19367.189), new VSC(126, 2.728, 1577.344), new VSC(119, 3.02, 10404.734) ];
  GFX.g_R1VenusCoefficients = [ new VSC(34551, 0.89199, 10213.28555), new VSC(234, 1.772, 20426.571), new VSC(234, 3.142, 0) ];
  GFX.g_R2VenusCoefficients = [ new VSC(1407, 5.0637, 10213.2855), new VSC(16, 5.47, 20426.57), new VSC(13, 0, 0) ];
  GFX.g_R3VenusCoefficients = [ new VSC(50, 3.22, 10213.29) ];
  GFX.g_R4VenusCoefficients = [ new VSC(1, 0.92, 10213.29) ];
  AstroCalc._galDetails = new GMDS();
  AstroCalc._jupDetails = new EPD();
  AstroCalc._jupPhisical = new CAAPhysicalJupiterDetails();
  AstroCalc._jDateLast = 0;
  PointList.starTexture = null;
  SimpleLineShader.vertLoc = 0;
  SimpleLineShader.initialized = false;
  SimpleLineShader._prog = null;
  SimpleLineShader2D.vertLoc = 0;
  SimpleLineShader2D.initialized = false;
  SimpleLineShader2D._prog = null;
  OrbitLineShader.vertLoc = 0;
  OrbitLineShader.colorLoc = 0;
  OrbitLineShader.initialized = false;
  OrbitLineShader._prog = null;
  LineShaderNormalDates.vertLoc = 0;
  LineShaderNormalDates.colorLoc = 0;
  LineShaderNormalDates.timeLoc = 0;
  LineShaderNormalDates.initialized = false;
  LineShaderNormalDates._prog = null;
  TimeSeriesPointSpriteShader.vertLoc = 0;
  TimeSeriesPointSpriteShader.colorLoc = 0;
  TimeSeriesPointSpriteShader.pointSizeLoc = 0;
  TimeSeriesPointSpriteShader.timeLoc = 0;
  TimeSeriesPointSpriteShader.initialized = false;
  TimeSeriesPointSpriteShader._prog = null;
  KeplerPointSpriteShader.abcLoc = 0;
  KeplerPointSpriteShader.abcLoc1 = 0;
  KeplerPointSpriteShader.pointSizeLoc = 0;
  KeplerPointSpriteShader.colorLoc = 0;
  KeplerPointSpriteShader.weLoc = 0;
  KeplerPointSpriteShader.nTLoc = 0;
  KeplerPointSpriteShader.azLoc = 0;
  KeplerPointSpriteShader.orbitLoc = 0;
  KeplerPointSpriteShader.initialized = false;
  KeplerPointSpriteShader._prog = null;
  EllipseShader.angleLoc = 0;
  EllipseShader.initialized = false;
  EllipseShader._prog = null;
  ModelShader.vertLoc = 0;
  ModelShader.normalLoc = 0;
  ModelShader.textureLoc = 0;
  ModelShader.initialized = false;
  ModelShader._prog = null;
  ModelShader.sunPosition = Vector3d.create(-1, -1, -1);
  ModelShader.minLightingBrightness = 1;
  ModelShader.atmosphereColor = Color.fromArgb(0, 0, 0, 0);
  ModelShaderTan.vertLoc = 0;
  ModelShaderTan.normalLoc = 0;
  ModelShaderTan.textureLoc = 0;
  ModelShaderTan.initialized = false;
  ModelShaderTan._prog = null;
  ModelShaderTan.sunPosition = Vector3d.create(-1, -1, -1);
  ModelShaderTan.minLightingBrightness = 1;
  ModelShaderTan.atmosphereColor = Color.fromArgb(0, 0, 0, 0);
  TileShader.vertLoc = 0;
  TileShader.textureLoc = 0;
  TileShader.initialized = false;
  TileShader._prog = null;
  TileShader.sunPosition = Vector3d.create(-1, -1, -1);
  TileShader.minLightingBrightness = 1;
  TileShader.atmosphereColor = Color.fromArgb(0, 0, 0, 0);
  ImageShader.vertLoc = 0;
  ImageShader.textureLoc = 0;
  ImageShader.initialized = false;
  ImageShader._prog = null;
  ImageShader2.vertLoc = 0;
  ImageShader2.textureLoc = 0;
  ImageShader2.initialized = false;
  ImageShader2._prog = null;
  SpriteShader.vertLoc = 0;
  SpriteShader.textureLoc = 0;
  SpriteShader.colorLoc = 0;
  SpriteShader.initialized = false;
  SpriteShader._prog = null;
  ShapeSpriteShader.vertLoc = 0;
  ShapeSpriteShader.textureLoc = 0;
  ShapeSpriteShader.colorLoc = 0;
  ShapeSpriteShader.initialized = false;
  ShapeSpriteShader._prog = null;
  TextShader.vertLoc = 0;
  TextShader.textureLoc = 0;
  TextShader.initialized = false;
  TextShader._prog = null;
  Texture.empty = null;
  Grids._galaxyImageIndexBuffer = null;
  Grids._galaxyImageTriangleCount = 0;
  Grids._milkyWayImage = null;
  Grids._starSprites = null;
  Grids._starCount = 0;
  Grids._starsDownloading = false;
  Grids._stars = null;
  Grids._hipparcosIndex = {};
  Grids._limitingMagnitude = 16;
  Grids._galaxyTextures = null;
  Grids._galaxyVertexCounts = null;
  Grids._largeSet = true;
  Grids._cosmosReady = false;
  Grids._cosmos = null;
  Grids._downloadingGalaxy = false;
  Grids._eclipticCount = 0;
  Grids._eclipticYear = 0;
  Grids._monthDays = [ 31, 28.2421, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
  Grids._monthNames = [ 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December' ];
  Grids._eclipticTextYear = 0;
  KeplerVertex._sine = 0;
  KeplerVertex._cose = 1;
  KeplerVertex._degrad = Math.PI / 180;
  KeplerVertex.baseDate = ss.truncate(SpaceTimeController.utcToJulian(ss.now()));
  LayerManager._version = 0;
  LayerManager._frameWizardDialog = new FrameWizard();
  LayerManager._dataVizWizardDialog = new DataVizWizard();
  LayerManager._referenceFramePropsDialog = new ReferenceFrameProps();
  LayerManager._greatCircleDialog = new GreatCircleDialog();
  LayerManager._tourLayers = false;
  LayerManager._layerMaps = {};
  LayerManager._layerMapsTours = {};
  LayerManager._allMaps = {};
  LayerManager._allMapsTours = {};
  LayerManager._currentMap = 'Earth';
  LayerManager._layerList = {};
  LayerManager._layerListTours = {};
  LayerManager._moonfile = '';
  LayerManager._selectedLayer = null;
  LayerManager._lastMenuClick = new Vector2d();
  LayerManager.getMoonFile('//worldwidetelescope.org/wwtweb/catalog.aspx?Q=moons');
  LayerUI._type = null;
  Object3d.maX_VERTICES = 8000;
  Object3d.maX_POLYGONS = 8000;
  Orbit._orbitalToWwt = Matrix3d.create(1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1);
  Orbit._initBegun = false;
  PushPin._pinTextureCache = {};
  PushPin._pins = Planets.loadPlanetTexture('//cdn.worldwidetelescope.org/webclient/images/pins.png');
  MinorPlanets.mpcList = [];
  MinorPlanets._initBegun = false;
  MinorPlanets._mpcBlendStates = new Array(7);
  MinorPlanets.starTexture = null;
  MinorPlanets._mpcVertexBuffer = null;
  MinorPlanets._mpcCount = 0;
  Planets.highPercision = true;
  Planets.showActualSize = Settings.get_active().get_actualPlanetScale();
  Planets.RC = (Math.PI / 180);
  Planets._jNow = 0;
  Planets._planetAngles = [ new BodyAngles(286.13, 63.87, 84.176, 14.1844), new BodyAngles(281.0097, 61.4143, 329.548, 6.1385025), new BodyAngles(272.76, 67.16, 160.2, -1.4813688), new BodyAngles(317.68143, 52.8865, 176.63, 350.89198226), new BodyAngles(268.056595, 64.495303, 284.95, 870.536), new BodyAngles(40.589, 83.537, 38.9, 810.7939024), new BodyAngles(257.311, -15.175, 203.81, 501.1600928), new BodyAngles(299.36, 43.46, 253.18, 536.3128492), new BodyAngles(132.993, -6.163, 302.695, 56.3625225), new BodyAngles(269.9949, 66.5392, 38.3213, 13.17635815), new BodyAngles(268.05, 64.5, 200.39, 203.4889538), new BodyAngles(268.08, 64.51, 36.022, 101.3747235), new BodyAngles(268.2, 64.57, 44.064, 50.3176081), new BodyAngles(268.72, 64.83, 259.51, 21.5710715), new BodyAngles(0, 0, 0, 0), new BodyAngles(0, 0, 0, 0), new BodyAngles(0, 0, 0, 0), new BodyAngles(0, 0, 0, 0), new BodyAngles(0, 0, 0, 0), new BodyAngles(0, 90, 190.147, 360.9856235) ];
  Planets._lastPlanetCenterID = -2;
  Planets._orbitalSampleRate = 256;
  Planets._obliquity = 23.5 * Planets.RC;
  Planets._drawOrder = {};
  Planets.earthMatrix = new Matrix3d();
  Planets.earthMatrixInv = new Matrix3d();
  Planets._lastUpdate = new Date();
  Planets._ringsTriangleLists = new Array(2);
  Planets._ringImage = null;
  Planets._triangleCountRings = 192 + 1 * 2;
  Planets._ringsVertexBuffer = null;
  Planets._planetSprite = new Sprite2d();
  Planets._planetPoints = null;
  RenderContext.useGl = false;
  RenderContext.back = 0;
  RenderTriangle.width = 1024;
  RenderTriangle.height = 768;
  RenderTriangle._contractionInPixels = -0.5;
  RenderTriangle.trianglesRendered = 0;
  RenderTriangle.trianglesCulled = 0;
  RenderTriangle.renderingOn = true;
  RenderTriangle._factor = 1;
  RenderTriangle.cullInside = true;
  RenderTriangle._hw = 0;
  RenderTriangle._qw = 0;
  RenderTriangle._hh = 0;
  RenderTriangle._qh = 0;
  Settings._active = null;
  Settings.tourSettings = null;
  GlyphCache._caches = {};
  GlyphCache._allGlyphs = '';
  SpaceTimeController.last = ss.now();
  SpaceTimeController._offset = 0;
  SpaceTimeController._now = ss.now();
  SpaceTimeController._syncToClock = true;
  SpaceTimeController._timeRate = 1;
  SpaceTimeController._altitude = 0;
  Galaxy._eTypeBuckets = [ -3, -0.186, -0.168, -0.158, -0.15, -0.143, -0.137, -0.13, -0.123, -0.115, -0.104, -0.089, -0.068, -0.042, -0.011, 0.024, 0.064, 0.111, 0.169, 0.252, 3 ];
  Tile.currentRenderGeneration = 0;
  Tile.tileTargetX = -1;
  Tile.tileTargetY = -1;
  Tile.tileTargetLevel = -1;
  Tile.tilesInView = 0;
  Tile.trianglesRendered = 0;
  Tile.tilesTouched = 0;
  Tile.frustumList = null;
  Tile.prepDevice = null;
  Tile.uvMultiple = 256;
  Tile.callCount = 0;
  Tile.useAccomidation = true;
  Tile.demEnabled = false;
  Tile.maxLevel = 20;
  Tile.meshComplexity = 50;
  Tile.imageQuality = 50;
  Tile.lastDeepestLevel = 0;
  Tile.deepestLevel = 0;
  Tile.RC = (3.1415927 / 180);
  TileCache._queue = {};
  TileCache._tiles = {};
  TileCache.openThreads = 8;
  TileCache.readyToRenderCount = 0;
  TileCache.maxTileCacheSize = 800;
  TileCache.maxReadyToRenderSize = 200;
  TileCache.accessID = 0;
  TileCache._maxTotalToPurge = 0;
  Overlay.defaultAnchor = 1;
  Overlay.clipboardFormat = 'WorldWideTelescope.Overlay';
  Overlay.nextId = 11231;
  Overlay.RC = 3.1415927 / 180;
  Selection._points = new Array(9 * 3 * 2);
  TourEditor.capturing = false;
  TourEditor.currentEditor = null;
  TourPlayer._playing = false;
  TourPlayer._switchedToFullScreen = false;
  TourPlayer.noRestoreUIOnStop = false;
  TourStop.clipboardFormat = 'WorldWideTelescope.Slide';
  Undo._undoStack = new ss.Stack();
  Undo._redoStack = new ss.Stack();
  UiTools.kilometersPerAu = 149598000;
  UiTools.auPerParsec = 206264.806;
  UiTools.auPerLightYear = 63239.6717;
  UiTools.ssmUnitConversion = 370;
  BinaryReader.id = 1;
  VizLayer.earthRadius = 6371000;
  WWTControl.imageSets = [];
  WWTControl.exploreRoot = new Folder();
  WWTControl.startLat = 0;
  WWTControl.startLng = 0;
  WWTControl.startZoom = 360;
  WWTControl.startMode = 'Sky';
  WWTControl.imageSetName = '';
  WWTControl.showDataLayers = false;
  WWTControl._renderNeeded = false;
  WWTControl.constellationsFigures = null;
  WWTControl.constellationsBoundries = null;
  WWTControl.solarSystemObjectsNames = [ 'Sun', 'Mercury', 'Venus', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune', 'Pluto', 'Moon', 'Io', 'Europa', 'Ganymede', 'Callisto', 'IoShadow', 'EuropaShadow', 'GanymedeShadow', 'CallistoShadow', 'SunEclipsed', 'Earth', 'Custom', 'Undefined' ];
  WWTControl.singleton = new WWTControl();
  WWTControl.singleton.renderContext = new RenderContext();
  SpaceTimeController.last = ss.now();
  SpaceTimeController.updateClock();
  Annotation.pointList = null;
  Annotation.lineList = null;
  Annotation.triangleList = null;
  Annotation.batchDirty = true;
  Constellations.RC = 0.017453292519943;
  Constellations._maxSeperation = 0.745;
  Constellations.containment = Constellations.create('Constellations', '//worldwidetelescope.org/data/constellations.txt', true, true, true);
  Constellations._constToDraw = '';
  Constellations.selectedSegment = null;
  Constellations._artFile = null;
  Constellations.artwork = null;
  Constellations.boundries = null;
  Constellations.pictureBlendStates = {};
  (function() {
    var url = '//worldwidetelescope.org/wwtweb/catalog.aspx?q=ConstellationNamePositions_EN';
    Constellations._webFileConstNames = new WebFile(url);
    Constellations._webFileConstNames.onStateChange = Constellations._loadNames;
    Constellations._webFileConstNames.send();
  })();
  ConstellationFilter.families = {};
  Coordinates.RC = (3.1415927 / 180);
  Coordinates.RCRA = (3.1415927 / 12);
  Coordinates.radius = 1;
  Coordinates._rotationMatrix = null;
  Vector3d.zero = new Vector3d();
  Matrix3d._s_identity = Matrix3d._createIdentity();
  FolderBrowser._downloading = false;
  FolderBrowser._imagesLoaded = false;
  FolderBrowser._imageLoadCount = 0;
  (function() {
    var canvas = document.getElementById('canvas');
  })();
  FitsImage.last = null;
  FitsImage._naN$1 = 0 / 0;
  Object3dLayer._translateUI$1 = null;
  Object3dLayer._translateUILines$1 = null;
  Object3dLayer._scaleUI$1 = null;
  Object3dLayer._rotateUi$1 = null;
  SpreadSheetLayer._circleTexture$1 = null;
  TimeSeriesLayer._circleTexture$1 = null;
  VoTableLayer._circleTexture$1 = null;
  ToastTile.slashIndexBuffer = new Array(64);
  ToastTile.backSlashIndexBuffer = new Array(64);
  ToastTile.rootIndexBuffer = new Array(4);
  ISSLayer.issGuid = Guid.fromString('00000001-0002-0003-0405-060708090a0b');
  ISSLayer._loading$2 = false;
  ISSLayer._issmodel$2 = null;
  ISSLayer._doc$2 = null;

  return $exports;
}();
